
obj/kern/kernel:     file format elf64-x86-64


Disassembly of section .bootstrap:

0000000000100000 <_head64>:
// VMCALL to the VMM to get a multiboot map.
    movl $VMX_VMCALL_MBMAP, %eax
    vmcall
#endif
	
    movl $multiboot_info, %eax
  100000:	b8 00 70 10 00       	mov    $0x107000,%eax
    movl %ebx, (%eax)
  100005:	89 18                	mov    %ebx,(%rax)

#ifndef VMM_GUEST
    movw $0x1234,0x472			# warm boot
  100007:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472(%rip)        # 100482 <verify_cpu_no_longmode+0x36f>
  10000e:	34 12 
#endif
	
# Reset the stack pointer in case we didn't come from the loader
    movl $0x7c00,%esp
  100010:	bc 00 7c 00 00       	mov    $0x7c00,%esp

    call verify_cpu   #check if CPU supports long mode
  100015:	e8 cc 00 00 00       	callq  1000e6 <verify_cpu>
#ifndef VMM_GUEST
    movl $CR4_PAE,%eax
  10001a:	b8 20 00 00 00       	mov    $0x20,%eax
#else
    movl $(CR4_PAE|CR4_VMXE),%eax
#endif
    movl %eax,%cr4
  10001f:	0f 22 e0             	mov    %rax,%cr4

# build an early boot pml4 at physical address pml4phys 

    #initializing the page tables
    movl $pml4,%edi
  100022:	bf 00 20 10 00       	mov    $0x102000,%edi
    xorl %eax,%eax
  100027:	31 c0                	xor    %eax,%eax
    movl $((4096/4)*5),%ecx  # moving these many words to the 6 pages with 4 second level pages + 1 3rd level + 1 4th level pages 
  100029:	b9 00 14 00 00       	mov    $0x1400,%ecx
    rep stosl
  10002e:	f3 ab                	rep stos %eax,%es:(%rdi)
    # creating a 4G boot page table
    # setting the 4th level page table only the second entry needed (PML4)
    movl $pml4,%eax
  100030:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl $pdpt1, %ebx
  100035:	bb 00 30 10 00       	mov    $0x103000,%ebx
    orl $PTE_P,%ebx
  10003a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10003d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%eax)
  100040:	89 18                	mov    %ebx,(%rax)

    movl $pdpt2, %ebx
  100042:	bb 00 40 10 00       	mov    $0x104000,%ebx
    orl $PTE_P,%ebx
  100047:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10004a:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,0x8(%eax)
  10004d:	89 58 08             	mov    %ebx,0x8(%rax)

    # setting the 3rd level page table (PDPE)
    # 4 entries (counter in ecx), point to the next four physical pages (pgdirs)
    # pgdirs in 0xa0000--0xd000
    movl $pdpt1,%edi
  100050:	bf 00 30 10 00       	mov    $0x103000,%edi
    movl $pde1,%ebx
  100055:	bb 00 50 10 00       	mov    $0x105000,%ebx
    orl $PTE_P,%ebx
  10005a:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10005d:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100060:	89 1f                	mov    %ebx,(%rdi)

    movl $pdpt2,%edi
  100062:	bf 00 40 10 00       	mov    $0x104000,%edi
    movl $pde2,%ebx
  100067:	bb 00 60 10 00       	mov    $0x106000,%ebx
    orl $PTE_P,%ebx
  10006c:	83 cb 01             	or     $0x1,%ebx
    orl $PTE_W,%ebx
  10006f:	83 cb 02             	or     $0x2,%ebx
    movl %ebx,(%edi)
  100072:	89 1f                	mov    %ebx,(%rdi)
    
    # setting the pgdir so that the LA=PA
    # mapping first 1G of mem at KERNBASE
    movl $128,%ecx
  100074:	b9 80 00 00 00       	mov    $0x80,%ecx
    # Start at the end and work backwards
    #leal (pml4 + 5*0x1000 - 0x8),%edi
    movl $pde1,%edi
  100079:	bf 00 50 10 00       	mov    $0x105000,%edi
    movl $pde2,%ebx
  10007e:	bb 00 60 10 00       	mov    $0x106000,%ebx
    #64th entry - 0x8004000000
    addl $256,%ebx 
  100083:	81 c3 00 01 00 00    	add    $0x100,%ebx
    # PTE_P|PTE_W|PTE_MBZ
    movl $0x00000183,%eax
  100089:	b8 83 01 00 00       	mov    $0x183,%eax
  1:
     movl %eax,(%edi)
  10008e:	89 07                	mov    %eax,(%rdi)
     movl %eax,(%ebx)
  100090:	89 03                	mov    %eax,(%rbx)
     addl $0x8,%edi
  100092:	83 c7 08             	add    $0x8,%edi
     addl $0x8,%ebx
  100095:	83 c3 08             	add    $0x8,%ebx
     addl $0x00200000,%eax
  100098:	05 00 00 20 00       	add    $0x200000,%eax
     subl $1,%ecx
  10009d:	83 e9 01             	sub    $0x1,%ecx
     cmp $0x0,%ecx
  1000a0:	83 f9 00             	cmp    $0x0,%ecx
     jne 1b
  1000a3:	75 e9                	jne    10008e <_head64+0x8e>
 /*    subl $1,%ecx */
 /*    cmp $0x0,%ecx */
 /*    jne 1b */

    # set the cr3 register
    movl $pml4,%eax
  1000a5:	b8 00 20 10 00       	mov    $0x102000,%eax
    movl %eax, %cr3
  1000aa:	0f 22 d8             	mov    %rax,%cr3

	
    # enable the long mode in MSR
    movl $EFER_MSR,%ecx
  1000ad:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
    rdmsr
  1000b2:	0f 32                	rdmsr  
    btsl $EFER_LME,%eax
  1000b4:	0f ba e8 08          	bts    $0x8,%eax
    wrmsr
  1000b8:	0f 30                	wrmsr  
    
    # enable paging 
    movl %cr0,%eax
  1000ba:	0f 20 c0             	mov    %cr0,%rax
    orl $CR0_PE,%eax
  1000bd:	83 c8 01             	or     $0x1,%eax
    orl $CR0_PG,%eax
  1000c0:	0d 00 00 00 80       	or     $0x80000000,%eax
    orl $CR0_AM,%eax
  1000c5:	0d 00 00 04 00       	or     $0x40000,%eax
    orl $CR0_WP,%eax
  1000ca:	0d 00 00 01 00       	or     $0x10000,%eax
    orl $CR0_MP,%eax
  1000cf:	83 c8 02             	or     $0x2,%eax
    movl %eax,%cr0
  1000d2:	0f 22 c0             	mov    %rax,%cr0
    #jump to long mode with CS=0 and

    movl $gdtdesc_64,%eax
  1000d5:	b8 18 10 10 00       	mov    $0x101018,%eax
    lgdt (%eax)
  1000da:	0f 01 10             	lgdt   (%rax)
    pushl $0x8
  1000dd:	6a 08                	pushq  $0x8
    movl $_start,%eax
  1000df:	b8 0c 00 20 00       	mov    $0x20000c,%eax
    pushl %eax
  1000e4:	50                   	push   %rax

00000000001000e5 <jumpto_longmode>:
    
    .globl jumpto_longmode
    .type jumpto_longmode,@function
jumpto_longmode:
    lret
  1000e5:	cb                   	lret   

00000000001000e6 <verify_cpu>:
/*     movabs $_back_from_head64, %rax */
/*     pushq %rax */
/*     lretq */

verify_cpu:
    pushfl                   # get eflags in eax -- standardard way to check for cpuid
  1000e6:	9c                   	pushfq 
    popl %eax
  1000e7:	58                   	pop    %rax
    movl %eax,%ecx
  1000e8:	89 c1                	mov    %eax,%ecx
    xorl $0x200000, %eax
  1000ea:	35 00 00 20 00       	xor    $0x200000,%eax
    pushl %eax
  1000ef:	50                   	push   %rax
    popfl
  1000f0:	9d                   	popfq  
    pushfl
  1000f1:	9c                   	pushfq 
    popl %eax
  1000f2:	58                   	pop    %rax
    cmpl %eax,%ebx
  1000f3:	39 c3                	cmp    %eax,%ebx
    jz verify_cpu_no_longmode   # no cpuid -- no long mode
  1000f5:	74 1c                	je     100113 <verify_cpu_no_longmode>

    movl $0x0,%eax              # see if cpuid 1 is implemented
  1000f7:	b8 00 00 00 00       	mov    $0x0,%eax
    cpuid
  1000fc:	0f a2                	cpuid  
    cmpl $0x1,%eax
  1000fe:	83 f8 01             	cmp    $0x1,%eax
    jb verify_cpu_no_longmode    # cpuid 1 is not implemented
  100101:	72 10                	jb     100113 <verify_cpu_no_longmode>


    mov $0x80000001, %eax
  100103:	b8 01 00 00 80       	mov    $0x80000001,%eax
    cpuid                 
  100108:	0f a2                	cpuid  
    test $(1 << 29),%edx                 #Test if the LM-bit, is set or not.
  10010a:	f7 c2 00 00 00 20    	test   $0x20000000,%edx
    jz verify_cpu_no_longmode
  100110:	74 01                	je     100113 <verify_cpu_no_longmode>

    ret
  100112:	c3                   	retq   

0000000000100113 <verify_cpu_no_longmode>:

verify_cpu_no_longmode:
    jmp verify_cpu_no_longmode
  100113:	eb fe                	jmp    100113 <verify_cpu_no_longmode>
  100115:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10011c:	00 00 00 
  10011f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100126:	00 00 00 
  100129:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100130:	00 00 00 
  100133:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10013a:	00 00 00 
  10013d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100144:	00 00 00 
  100147:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10014e:	00 00 00 
  100151:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100158:	00 00 00 
  10015b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100162:	00 00 00 
  100165:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10016c:	00 00 00 
  10016f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100176:	00 00 00 
  100179:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100180:	00 00 00 
  100183:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10018a:	00 00 00 
  10018d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100194:	00 00 00 
  100197:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10019e:	00 00 00 
  1001a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001a8:	00 00 00 
  1001ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001b2:	00 00 00 
  1001b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001bc:	00 00 00 
  1001bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001c6:	00 00 00 
  1001c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001d0:	00 00 00 
  1001d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001da:	00 00 00 
  1001dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001e4:	00 00 00 
  1001e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001ee:	00 00 00 
  1001f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1001f8:	00 00 00 
  1001fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100202:	00 00 00 
  100205:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10020c:	00 00 00 
  10020f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100216:	00 00 00 
  100219:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100220:	00 00 00 
  100223:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10022a:	00 00 00 
  10022d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100234:	00 00 00 
  100237:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10023e:	00 00 00 
  100241:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100248:	00 00 00 
  10024b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100252:	00 00 00 
  100255:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10025c:	00 00 00 
  10025f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100266:	00 00 00 
  100269:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100270:	00 00 00 
  100273:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10027a:	00 00 00 
  10027d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100284:	00 00 00 
  100287:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10028e:	00 00 00 
  100291:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100298:	00 00 00 
  10029b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002a2:	00 00 00 
  1002a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ac:	00 00 00 
  1002af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002b6:	00 00 00 
  1002b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002c0:	00 00 00 
  1002c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002ca:	00 00 00 
  1002cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002d4:	00 00 00 
  1002d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002de:	00 00 00 
  1002e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002e8:	00 00 00 
  1002eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002f2:	00 00 00 
  1002f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1002fc:	00 00 00 
  1002ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100306:	00 00 00 
  100309:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100310:	00 00 00 
  100313:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10031a:	00 00 00 
  10031d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100324:	00 00 00 
  100327:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10032e:	00 00 00 
  100331:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100338:	00 00 00 
  10033b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100342:	00 00 00 
  100345:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10034c:	00 00 00 
  10034f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100356:	00 00 00 
  100359:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100360:	00 00 00 
  100363:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10036a:	00 00 00 
  10036d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100374:	00 00 00 
  100377:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10037e:	00 00 00 
  100381:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100388:	00 00 00 
  10038b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100392:	00 00 00 
  100395:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10039c:	00 00 00 
  10039f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003a6:	00 00 00 
  1003a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003b0:	00 00 00 
  1003b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ba:	00 00 00 
  1003bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003c4:	00 00 00 
  1003c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ce:	00 00 00 
  1003d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003d8:	00 00 00 
  1003db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003e2:	00 00 00 
  1003e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003ec:	00 00 00 
  1003ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1003f6:	00 00 00 
  1003f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100400:	00 00 00 
  100403:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10040a:	00 00 00 
  10040d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100414:	00 00 00 
  100417:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10041e:	00 00 00 
  100421:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100428:	00 00 00 
  10042b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100432:	00 00 00 
  100435:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10043c:	00 00 00 
  10043f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100446:	00 00 00 
  100449:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100450:	00 00 00 
  100453:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10045a:	00 00 00 
  10045d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100464:	00 00 00 
  100467:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10046e:	00 00 00 
  100471:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100478:	00 00 00 
  10047b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100482:	00 00 00 
  100485:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10048c:	00 00 00 
  10048f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100496:	00 00 00 
  100499:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004a0:	00 00 00 
  1004a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004aa:	00 00 00 
  1004ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004b4:	00 00 00 
  1004b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004be:	00 00 00 
  1004c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004c8:	00 00 00 
  1004cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004d2:	00 00 00 
  1004d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004dc:	00 00 00 
  1004df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004e6:	00 00 00 
  1004e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004f0:	00 00 00 
  1004f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1004fa:	00 00 00 
  1004fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100504:	00 00 00 
  100507:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10050e:	00 00 00 
  100511:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100518:	00 00 00 
  10051b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100522:	00 00 00 
  100525:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10052c:	00 00 00 
  10052f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100536:	00 00 00 
  100539:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100540:	00 00 00 
  100543:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10054a:	00 00 00 
  10054d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100554:	00 00 00 
  100557:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10055e:	00 00 00 
  100561:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100568:	00 00 00 
  10056b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100572:	00 00 00 
  100575:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10057c:	00 00 00 
  10057f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100586:	00 00 00 
  100589:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100590:	00 00 00 
  100593:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10059a:	00 00 00 
  10059d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005a4:	00 00 00 
  1005a7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ae:	00 00 00 
  1005b1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005b8:	00 00 00 
  1005bb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005c2:	00 00 00 
  1005c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005cc:	00 00 00 
  1005cf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005d6:	00 00 00 
  1005d9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005e0:	00 00 00 
  1005e3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005ea:	00 00 00 
  1005ed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005f4:	00 00 00 
  1005f7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1005fe:	00 00 00 
  100601:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100608:	00 00 00 
  10060b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100612:	00 00 00 
  100615:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10061c:	00 00 00 
  10061f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100626:	00 00 00 
  100629:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100630:	00 00 00 
  100633:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10063a:	00 00 00 
  10063d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100644:	00 00 00 
  100647:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10064e:	00 00 00 
  100651:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100658:	00 00 00 
  10065b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100662:	00 00 00 
  100665:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10066c:	00 00 00 
  10066f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100676:	00 00 00 
  100679:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100680:	00 00 00 
  100683:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10068a:	00 00 00 
  10068d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100694:	00 00 00 
  100697:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10069e:	00 00 00 
  1006a1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006a8:	00 00 00 
  1006ab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006b2:	00 00 00 
  1006b5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006bc:	00 00 00 
  1006bf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006c6:	00 00 00 
  1006c9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006d0:	00 00 00 
  1006d3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006da:	00 00 00 
  1006dd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006e4:	00 00 00 
  1006e7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006ee:	00 00 00 
  1006f1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1006f8:	00 00 00 
  1006fb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100702:	00 00 00 
  100705:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10070c:	00 00 00 
  10070f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100716:	00 00 00 
  100719:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100720:	00 00 00 
  100723:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10072a:	00 00 00 
  10072d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100734:	00 00 00 
  100737:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10073e:	00 00 00 
  100741:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100748:	00 00 00 
  10074b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100752:	00 00 00 
  100755:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10075c:	00 00 00 
  10075f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100766:	00 00 00 
  100769:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100770:	00 00 00 
  100773:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10077a:	00 00 00 
  10077d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100784:	00 00 00 
  100787:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10078e:	00 00 00 
  100791:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100798:	00 00 00 
  10079b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007a2:	00 00 00 
  1007a5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ac:	00 00 00 
  1007af:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007b6:	00 00 00 
  1007b9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007c0:	00 00 00 
  1007c3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007ca:	00 00 00 
  1007cd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007d4:	00 00 00 
  1007d7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007de:	00 00 00 
  1007e1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007e8:	00 00 00 
  1007eb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007f2:	00 00 00 
  1007f5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1007fc:	00 00 00 
  1007ff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100806:	00 00 00 
  100809:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100810:	00 00 00 
  100813:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10081a:	00 00 00 
  10081d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100824:	00 00 00 
  100827:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10082e:	00 00 00 
  100831:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100838:	00 00 00 
  10083b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100842:	00 00 00 
  100845:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10084c:	00 00 00 
  10084f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100856:	00 00 00 
  100859:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100860:	00 00 00 
  100863:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10086a:	00 00 00 
  10086d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100874:	00 00 00 
  100877:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10087e:	00 00 00 
  100881:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100888:	00 00 00 
  10088b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100892:	00 00 00 
  100895:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10089c:	00 00 00 
  10089f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008a6:	00 00 00 
  1008a9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008b0:	00 00 00 
  1008b3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ba:	00 00 00 
  1008bd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008c4:	00 00 00 
  1008c7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ce:	00 00 00 
  1008d1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008d8:	00 00 00 
  1008db:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008e2:	00 00 00 
  1008e5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008ec:	00 00 00 
  1008ef:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1008f6:	00 00 00 
  1008f9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100900:	00 00 00 
  100903:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10090a:	00 00 00 
  10090d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100914:	00 00 00 
  100917:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10091e:	00 00 00 
  100921:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100928:	00 00 00 
  10092b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100932:	00 00 00 
  100935:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10093c:	00 00 00 
  10093f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100946:	00 00 00 
  100949:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100950:	00 00 00 
  100953:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10095a:	00 00 00 
  10095d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100964:	00 00 00 
  100967:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10096e:	00 00 00 
  100971:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100978:	00 00 00 
  10097b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100982:	00 00 00 
  100985:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  10098c:	00 00 00 
  10098f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100996:	00 00 00 
  100999:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009a0:	00 00 00 
  1009a3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009aa:	00 00 00 
  1009ad:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009b4:	00 00 00 
  1009b7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009be:	00 00 00 
  1009c1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009c8:	00 00 00 
  1009cb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009d2:	00 00 00 
  1009d5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009dc:	00 00 00 
  1009df:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009e6:	00 00 00 
  1009e9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009f0:	00 00 00 
  1009f3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  1009fa:	00 00 00 
  1009fd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a04:	00 00 00 
  100a07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a0e:	00 00 00 
  100a11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a18:	00 00 00 
  100a1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a22:	00 00 00 
  100a25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a2c:	00 00 00 
  100a2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a36:	00 00 00 
  100a39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a40:	00 00 00 
  100a43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a4a:	00 00 00 
  100a4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a54:	00 00 00 
  100a57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a5e:	00 00 00 
  100a61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a68:	00 00 00 
  100a6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a72:	00 00 00 
  100a75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a7c:	00 00 00 
  100a7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a86:	00 00 00 
  100a89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a90:	00 00 00 
  100a93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100a9a:	00 00 00 
  100a9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aa4:	00 00 00 
  100aa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aae:	00 00 00 
  100ab1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ab8:	00 00 00 
  100abb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ac2:	00 00 00 
  100ac5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100acc:	00 00 00 
  100acf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ad6:	00 00 00 
  100ad9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ae0:	00 00 00 
  100ae3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100aea:	00 00 00 
  100aed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100af4:	00 00 00 
  100af7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100afe:	00 00 00 
  100b01:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b08:	00 00 00 
  100b0b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b12:	00 00 00 
  100b15:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b1c:	00 00 00 
  100b1f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b26:	00 00 00 
  100b29:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b30:	00 00 00 
  100b33:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b3a:	00 00 00 
  100b3d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b44:	00 00 00 
  100b47:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b4e:	00 00 00 
  100b51:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b58:	00 00 00 
  100b5b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b62:	00 00 00 
  100b65:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b6c:	00 00 00 
  100b6f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b76:	00 00 00 
  100b79:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b80:	00 00 00 
  100b83:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b8a:	00 00 00 
  100b8d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b94:	00 00 00 
  100b97:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100b9e:	00 00 00 
  100ba1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ba8:	00 00 00 
  100bab:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bb2:	00 00 00 
  100bb5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bbc:	00 00 00 
  100bbf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bc6:	00 00 00 
  100bc9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bd0:	00 00 00 
  100bd3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bda:	00 00 00 
  100bdd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100be4:	00 00 00 
  100be7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bee:	00 00 00 
  100bf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100bf8:	00 00 00 
  100bfb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c02:	00 00 00 
  100c05:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c0c:	00 00 00 
  100c0f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c16:	00 00 00 
  100c19:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c20:	00 00 00 
  100c23:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c2a:	00 00 00 
  100c2d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c34:	00 00 00 
  100c37:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c3e:	00 00 00 
  100c41:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c48:	00 00 00 
  100c4b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c52:	00 00 00 
  100c55:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c5c:	00 00 00 
  100c5f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c66:	00 00 00 
  100c69:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c70:	00 00 00 
  100c73:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c7a:	00 00 00 
  100c7d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c84:	00 00 00 
  100c87:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c8e:	00 00 00 
  100c91:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100c98:	00 00 00 
  100c9b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ca2:	00 00 00 
  100ca5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cac:	00 00 00 
  100caf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cb6:	00 00 00 
  100cb9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cc0:	00 00 00 
  100cc3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cca:	00 00 00 
  100ccd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cd4:	00 00 00 
  100cd7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cde:	00 00 00 
  100ce1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ce8:	00 00 00 
  100ceb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cf2:	00 00 00 
  100cf5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100cfc:	00 00 00 
  100cff:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d06:	00 00 00 
  100d09:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d10:	00 00 00 
  100d13:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d1a:	00 00 00 
  100d1d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d24:	00 00 00 
  100d27:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d2e:	00 00 00 
  100d31:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d38:	00 00 00 
  100d3b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d42:	00 00 00 
  100d45:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d4c:	00 00 00 
  100d4f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d56:	00 00 00 
  100d59:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d60:	00 00 00 
  100d63:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d6a:	00 00 00 
  100d6d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d74:	00 00 00 
  100d77:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d7e:	00 00 00 
  100d81:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d88:	00 00 00 
  100d8b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d92:	00 00 00 
  100d95:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100d9c:	00 00 00 
  100d9f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100da6:	00 00 00 
  100da9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100db0:	00 00 00 
  100db3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dba:	00 00 00 
  100dbd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dc4:	00 00 00 
  100dc7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dce:	00 00 00 
  100dd1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dd8:	00 00 00 
  100ddb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100de2:	00 00 00 
  100de5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100dec:	00 00 00 
  100def:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100df6:	00 00 00 
  100df9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e00:	00 00 00 
  100e03:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e0a:	00 00 00 
  100e0d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e14:	00 00 00 
  100e17:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e1e:	00 00 00 
  100e21:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e28:	00 00 00 
  100e2b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e32:	00 00 00 
  100e35:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e3c:	00 00 00 
  100e3f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e46:	00 00 00 
  100e49:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e50:	00 00 00 
  100e53:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e5a:	00 00 00 
  100e5d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e64:	00 00 00 
  100e67:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e6e:	00 00 00 
  100e71:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e78:	00 00 00 
  100e7b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e82:	00 00 00 
  100e85:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e8c:	00 00 00 
  100e8f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100e96:	00 00 00 
  100e99:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ea0:	00 00 00 
  100ea3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eaa:	00 00 00 
  100ead:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100eb4:	00 00 00 
  100eb7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ebe:	00 00 00 
  100ec1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ec8:	00 00 00 
  100ecb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ed2:	00 00 00 
  100ed5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100edc:	00 00 00 
  100edf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ee6:	00 00 00 
  100ee9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ef0:	00 00 00 
  100ef3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100efa:	00 00 00 
  100efd:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f04:	00 00 00 
  100f07:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f0e:	00 00 00 
  100f11:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f18:	00 00 00 
  100f1b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f22:	00 00 00 
  100f25:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f2c:	00 00 00 
  100f2f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f36:	00 00 00 
  100f39:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f40:	00 00 00 
  100f43:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f4a:	00 00 00 
  100f4d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f54:	00 00 00 
  100f57:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f5e:	00 00 00 
  100f61:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f68:	00 00 00 
  100f6b:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f72:	00 00 00 
  100f75:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f7c:	00 00 00 
  100f7f:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f86:	00 00 00 
  100f89:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f90:	00 00 00 
  100f93:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100f9a:	00 00 00 
  100f9d:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fa4:	00 00 00 
  100fa7:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fae:	00 00 00 
  100fb1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fb8:	00 00 00 
  100fbb:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fc2:	00 00 00 
  100fc5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fcc:	00 00 00 
  100fcf:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fd6:	00 00 00 
  100fd9:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fe0:	00 00 00 
  100fe3:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100fea:	00 00 00 
  100fed:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  100ff4:	00 00 00 
  100ff7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  100ffe:	00 00 

0000000000101000 <gdt_64>:
	...
  101008:	ff                   	(bad)  
  101009:	ff 00                	incl   (%rax)
  10100b:	00 00                	add    %al,(%rax)
  10100d:	9a                   	(bad)  
  10100e:	af                   	scas   %es:(%rdi),%eax
  10100f:	00 ff                	add    %bh,%bh
  101011:	ff 00                	incl   (%rax)
  101013:	00 00                	add    %al,(%rax)
  101015:	92                   	xchg   %eax,%edx
  101016:	cf                   	iret   
	...

0000000000101018 <gdtdesc_64>:
  101018:	17                   	(bad)  
  101019:	00 00                	add    %al,(%rax)
  10101b:	10 10                	adc    %dl,(%rax)
	...

0000000000102000 <pml4phys>:
	...

0000000000103000 <pdpt1>:
	...

0000000000104000 <pdpt2>:
	...

0000000000105000 <pde1>:
	...

0000000000106000 <pde2>:
	...

0000000000107000 <multiboot_info>:
  107000:	00 00                	add    %al,(%rax)
	...

Disassembly of section .text:

0000008004200000 <_start+0x8003fffff4>:
  8004200000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
  8004200006:	00 00                	add    %al,(%rax)
  8004200008:	fe 4f 52             	decb   0x52(%rdi)
  800420000b:	e4 48                	in     $0x48,%al

000000800420000c <entry>:
entry:

/* .globl _back_from_head64 */
/* _back_from_head64: */

    movabs   $gdtdesc_64,%rax
  800420000c:	48 b8 38 50 23 04 80 	movabs $0x8004235038,%rax
  8004200013:	00 00 00 
    lgdt     (%rax)
  8004200016:	0f 01 10             	lgdt   (%rax)
    movw    $DATA_SEL,%ax
  8004200019:	66 b8 10 00          	mov    $0x10,%ax
    movw    %ax,%ds
  800420001d:	8e d8                	mov    %eax,%ds
    movw    %ax,%ss
  800420001f:	8e d0                	mov    %eax,%ss
    movw    %ax,%fs
  8004200021:	8e e0                	mov    %eax,%fs
    movw    %ax,%gs
  8004200023:	8e e8                	mov    %eax,%gs
    movw    %ax,%es
  8004200025:	8e c0                	mov    %eax,%es
    pushq   $CODE_SEL
  8004200027:	6a 08                	pushq  $0x8
    movabs  $relocated,%rax
  8004200029:	48 b8 36 00 20 04 80 	movabs $0x8004200036,%rax
  8004200030:	00 00 00 
    pushq   %rax
  8004200033:	50                   	push   %rax
    lretq
  8004200034:	48 cb                	lretq  

0000008004200036 <relocated>:
relocated:

	# Clear the frame pointer register (RBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movq	$0x0,%rbp			# nuke frame pointer
  8004200036:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Set the stack pointer
	movabs	$(bootstacktop),%rax
  800420003d:	48 b8 00 50 23 04 80 	movabs $0x8004235000,%rax
  8004200044:	00 00 00 
	movq  %rax,%rsp
  8004200047:	48 89 c4             	mov    %rax,%rsp

	# now to C code
    movabs $i386_init, %rax
  800420004a:	48 b8 99 00 20 04 80 	movabs $0x8004200099,%rax
  8004200051:	00 00 00 
	call *%rax
  8004200054:	ff d0                	callq  *%rax

0000008004200056 <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
  8004200056:	eb fe                	jmp    8004200056 <spin>

0000008004200058 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004200058:	55                   	push   %rbp
  8004200059:	48 89 e5             	mov    %rsp,%rbp
  800420005c:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004200060:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004200064:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004200067:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420006b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420006e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004200072:	f0 87 02             	lock xchg %eax,(%rdx)
  8004200075:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004200078:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420007b:	c9                   	leaveq 
  800420007c:	c3                   	retq   

000000800420007d <lock_kernel>:
  800420007d:	55                   	push   %rbp
  800420007e:	48 89 e5             	mov    %rsp,%rbp
  8004200081:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004200088:	00 00 00 
  800420008b:	48 b8 35 7f 21 04 80 	movabs $0x8004217f35,%rax
  8004200092:	00 00 00 
  8004200095:	ff d0                	callq  *%rax
  8004200097:	5d                   	pop    %rbp
  8004200098:	c3                   	retq   

0000008004200099 <i386_init>:
  8004200099:	55                   	push   %rbp
  800420009a:	48 89 e5             	mov    %rsp,%rbp
  800420009d:	48 ba 10 00 72 04 80 	movabs $0x8004720010,%rdx
  80042000a4:	00 00 00 
  80042000a7:	48 b8 77 d2 4d 04 80 	movabs $0x80044dd277,%rax
  80042000ae:	00 00 00 
  80042000b1:	48 29 c2             	sub    %rax,%rdx
  80042000b4:	48 89 d0             	mov    %rdx,%rax
  80042000b7:	48 89 c2             	mov    %rax,%rdx
  80042000ba:	be 00 00 00 00       	mov    $0x0,%esi
  80042000bf:	48 bf 77 d2 4d 04 80 	movabs $0x80044dd277,%rdi
  80042000c6:	00 00 00 
  80042000c9:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042000d0:	00 00 00 
  80042000d3:	ff d0                	callq  *%rax
  80042000d5:	48 b8 9a 11 20 04 80 	movabs $0x800420119a,%rax
  80042000dc:	00 00 00 
  80042000df:	ff d0                	callq  *%rax
  80042000e1:	be ac 1a 00 00       	mov    $0x1aac,%esi
  80042000e6:	48 bf 60 dd 21 04 80 	movabs $0x800421dd60,%rdi
  80042000ed:	00 00 00 
  80042000f0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042000f5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042000fc:	00 00 00 
  80042000ff:	ff d2                	callq  *%rdx
  8004200101:	48 b8 10 00 72 04 80 	movabs $0x8004720010,%rax
  8004200108:	00 00 00 
  800420010b:	48 89 c6             	mov    %rax,%rsi
  800420010e:	48 bf 00 00 01 04 80 	movabs $0x8004010000,%rdi
  8004200115:	00 00 00 
  8004200118:	48 b8 cb 65 21 04 80 	movabs $0x80042165cb,%rax
  800420011f:	00 00 00 
  8004200122:	ff d0                	callq  *%rax
  8004200124:	48 ba d0 d5 6d 04 80 	movabs $0x80046dd5d0,%rdx
  800420012b:	00 00 00 
  800420012e:	48 89 02             	mov    %rax,(%rdx)
  8004200131:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200136:	48 ba 31 26 20 04 80 	movabs $0x8004202631,%rdx
  800420013d:	00 00 00 
  8004200140:	ff d2                	callq  *%rdx
  8004200142:	48 b8 61 7f 20 04 80 	movabs $0x8004207f61,%rax
  8004200149:	00 00 00 
  800420014c:	ff d0                	callq  *%rax
  800420014e:	48 b8 ef 9d 20 04 80 	movabs $0x8004209def,%rax
  8004200155:	00 00 00 
  8004200158:	ff d0                	callq  *%rax
  800420015a:	48 b8 55 75 21 04 80 	movabs $0x8004217555,%rax
  8004200161:	00 00 00 
  8004200164:	ff d0                	callq  *%rax
  8004200166:	48 b8 b3 79 21 04 80 	movabs $0x80042179b3,%rax
  800420016d:	00 00 00 
  8004200170:	ff d0                	callq  *%rax
  8004200172:	48 b8 77 99 20 04 80 	movabs $0x8004209977,%rax
  8004200179:	00 00 00 
  800420017c:	ff d0                	callq  *%rax
  800420017e:	48 b8 d0 93 21 04 80 	movabs $0x80042193d0,%rax
  8004200185:	00 00 00 
  8004200188:	ff d0                	callq  *%rax
  800420018a:	48 b8 94 93 21 04 80 	movabs $0x8004219394,%rax
  8004200191:	00 00 00 
  8004200194:	ff d0                	callq  *%rax
  8004200196:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  800420019d:	00 00 00 
  80042001a0:	ff d0                	callq  *%rax
  80042001a2:	48 b8 fc 01 20 04 80 	movabs $0x80042001fc,%rax
  80042001a9:	00 00 00 
  80042001ac:	ff d0                	callq  *%rax
  80042001ae:	be 01 00 00 00       	mov    $0x1,%esi
  80042001b3:	48 bf ef f6 2b 04 80 	movabs $0x80042bf6ef,%rdi
  80042001ba:	00 00 00 
  80042001bd:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001c4:	00 00 00 
  80042001c7:	ff d0                	callq  *%rax
  80042001c9:	be 00 00 00 00       	mov    $0x0,%esi
  80042001ce:	48 bf 8e 87 4a 04 80 	movabs $0x80044a878e,%rdi
  80042001d5:	00 00 00 
  80042001d8:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  80042001df:	00 00 00 
  80042001e2:	ff d0                	callq  *%rax
  80042001e4:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042001eb:	00 00 00 
  80042001ee:	ff d0                	callq  *%rax
  80042001f0:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  80042001f7:	00 00 00 
  80042001fa:	ff d0                	callq  *%rax

00000080042001fc <boot_aps>:
  80042001fc:	55                   	push   %rbp
  80042001fd:	48 89 e5             	mov    %rsp,%rbp
  8004200200:	48 83 ec 30          	sub    $0x30,%rsp
  8004200204:	48 c7 45 f0 00 70 00 	movq   $0x7000,-0x10(%rbp)
  800420020b:	00 
  800420020c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200210:	48 c1 e8 0c          	shr    $0xc,%rax
  8004200214:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200217:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420021a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004200221:	00 00 00 
  8004200224:	48 8b 00             	mov    (%rax),%rax
  8004200227:	48 39 c2             	cmp    %rax,%rdx
  800420022a:	72 32                	jb     800420025e <boot_aps+0x62>
  800420022c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004200230:	48 89 c1             	mov    %rax,%rcx
  8004200233:	48 ba 80 dd 21 04 80 	movabs $0x800421dd80,%rdx
  800420023a:	00 00 00 
  800420023d:	be 01 01 00 00       	mov    $0x101,%esi
  8004200242:	48 bf a3 dd 21 04 80 	movabs $0x800421dda3,%rdi
  8004200249:	00 00 00 
  800420024c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200251:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200258:	00 00 00 
  800420025b:	41 ff d0             	callq  *%r8
  800420025e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004200265:	00 00 00 
  8004200268:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420026c:	48 01 d0             	add    %rdx,%rax
  800420026f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004200273:	48 ba 7e 70 21 04 80 	movabs $0x800421707e,%rdx
  800420027a:	00 00 00 
  800420027d:	48 b8 98 6f 21 04 80 	movabs $0x8004216f98,%rax
  8004200284:	00 00 00 
  8004200287:	48 29 c2             	sub    %rax,%rdx
  800420028a:	48 89 d0             	mov    %rdx,%rax
  800420028d:	48 89 c2             	mov    %rax,%rdx
  8004200290:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200294:	48 be 98 6f 21 04 80 	movabs $0x8004216f98,%rsi
  800420029b:	00 00 00 
  800420029e:	48 89 c7             	mov    %rax,%rdi
  80042002a1:	48 b8 36 0c 21 04 80 	movabs $0x8004210c36,%rax
  80042002a8:	00 00 00 
  80042002ab:	ff d0                	callq  *%rax
  80042002ad:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042002b4:	00 00 00 
  80042002b7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042002bb:	e9 0e 01 00 00       	jmpq   80042003ce <boot_aps+0x1d2>
  80042002c0:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042002c7:	00 00 00 
  80042002ca:	ff d0                	callq  *%rax
  80042002cc:	48 98                	cltq   
  80042002ce:	48 c1 e0 03          	shl    $0x3,%rax
  80042002d2:	48 89 c2             	mov    %rax,%rdx
  80042002d5:	48 c1 e2 04          	shl    $0x4,%rdx
  80042002d9:	48 01 c2             	add    %rax,%rdx
  80042002dc:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042002e3:	00 00 00 
  80042002e6:	48 01 d0             	add    %rdx,%rax
  80042002e9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042002ed:	75 05                	jne    80042002f4 <boot_aps+0xf8>
  80042002ef:	e9 d2 00 00 00       	jmpq   80042003c6 <boot_aps+0x1ca>
  80042002f4:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042002f8:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042002ff:	00 00 00 
  8004200302:	48 29 c2             	sub    %rax,%rdx
  8004200305:	48 89 d0             	mov    %rdx,%rax
  8004200308:	48 c1 f8 03          	sar    $0x3,%rax
  800420030c:	48 89 c2             	mov    %rax,%rdx
  800420030f:	48 b8 f1 f0 f0 f0 f0 	movabs $0xf0f0f0f0f0f0f0f1,%rax
  8004200316:	f0 f0 f0 
  8004200319:	48 0f af c2          	imul   %rdx,%rax
  800420031d:	48 83 c0 01          	add    $0x1,%rax
  8004200321:	48 c1 e0 10          	shl    $0x10,%rax
  8004200325:	48 89 c2             	mov    %rax,%rdx
  8004200328:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  800420032f:	00 00 00 
  8004200332:	48 01 c2             	add    %rax,%rdx
  8004200335:	48 b8 e0 d5 6d 04 80 	movabs $0x80046dd5e0,%rax
  800420033c:	00 00 00 
  800420033f:	48 89 10             	mov    %rdx,(%rax)
  8004200342:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004200346:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420034a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004200351:	00 00 00 
  8004200354:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004200358:	77 32                	ja     800420038c <boot_aps+0x190>
  800420035a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420035e:	48 89 c1             	mov    %rax,%rcx
  8004200361:	48 ba b8 dd 21 04 80 	movabs $0x800421ddb8,%rdx
  8004200368:	00 00 00 
  800420036b:	be 0b 01 00 00       	mov    $0x10b,%esi
  8004200370:	48 bf a3 dd 21 04 80 	movabs $0x800421dda3,%rdi
  8004200377:	00 00 00 
  800420037a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420037f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004200386:	00 00 00 
  8004200389:	41 ff d0             	callq  *%r8
  800420038c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004200393:	ff ff ff 
  8004200396:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420039a:	48 01 d0             	add    %rdx,%rax
  800420039d:	89 c2                	mov    %eax,%edx
  800420039f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003a3:	0f b6 00             	movzbl (%rax),%eax
  80042003a6:	0f b6 c0             	movzbl %al,%eax
  80042003a9:	89 d6                	mov    %edx,%esi
  80042003ab:	89 c7                	mov    %eax,%edi
  80042003ad:	48 b8 1a 7c 21 04 80 	movabs $0x8004217c1a,%rax
  80042003b4:	00 00 00 
  80042003b7:	ff d0                	callq  *%rax
  80042003b9:	90                   	nop
  80042003ba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042003be:	8b 40 04             	mov    0x4(%rax),%eax
  80042003c1:	83 f8 01             	cmp    $0x1,%eax
  80042003c4:	75 f4                	jne    80042003ba <boot_aps+0x1be>
  80042003c6:	48 81 45 f8 88 00 00 	addq   $0x88,-0x8(%rbp)
  80042003cd:	00 
  80042003ce:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  80042003d5:	00 00 00 
  80042003d8:	8b 00                	mov    (%rax),%eax
  80042003da:	48 98                	cltq   
  80042003dc:	48 c1 e0 03          	shl    $0x3,%rax
  80042003e0:	48 89 c2             	mov    %rax,%rdx
  80042003e3:	48 c1 e2 04          	shl    $0x4,%rdx
  80042003e7:	48 01 c2             	add    %rax,%rdx
  80042003ea:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  80042003f1:	00 00 00 
  80042003f4:	48 01 d0             	add    %rdx,%rax
  80042003f7:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042003fb:	0f 87 bf fe ff ff    	ja     80042002c0 <boot_aps+0xc4>
  8004200401:	c9                   	leaveq 
  8004200402:	c3                   	retq   

0000008004200403 <mp_main>:
  8004200403:	55                   	push   %rbp
  8004200404:	48 89 e5             	mov    %rsp,%rbp
  8004200407:	48 83 ec 10          	sub    $0x10,%rsp
  800420040b:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  8004200412:	00 00 00 
  8004200415:	48 8b 00             	mov    (%rax),%rax
  8004200418:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420041c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004200420:	0f 22 d8             	mov    %rax,%cr3
  8004200423:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420042a:	00 00 00 
  800420042d:	ff d0                	callq  *%rax
  800420042f:	89 c6                	mov    %eax,%esi
  8004200431:	48 bf dc dd 21 04 80 	movabs $0x800421dddc,%rdi
  8004200438:	00 00 00 
  800420043b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200440:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200447:	00 00 00 
  800420044a:	ff d2                	callq  *%rdx
  800420044c:	48 b8 b3 79 21 04 80 	movabs $0x80042179b3,%rax
  8004200453:	00 00 00 
  8004200456:	ff d0                	callq  *%rax
  8004200458:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  800420045f:	00 00 00 
  8004200462:	ff d0                	callq  *%rax
  8004200464:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420046b:	00 00 00 
  800420046e:	ff d0                	callq  *%rax
  8004200470:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004200477:	00 00 00 
  800420047a:	ff d0                	callq  *%rax
  800420047c:	48 98                	cltq   
  800420047e:	48 c1 e0 03          	shl    $0x3,%rax
  8004200482:	48 89 c2             	mov    %rax,%rdx
  8004200485:	48 c1 e2 04          	shl    $0x4,%rdx
  8004200489:	48 01 d0             	add    %rdx,%rax
  800420048c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004200493:	00 00 00 
  8004200496:	48 01 d0             	add    %rdx,%rax
  8004200499:	48 83 c0 04          	add    $0x4,%rax
  800420049d:	be 01 00 00 00       	mov    $0x1,%esi
  80042004a2:	48 89 c7             	mov    %rax,%rdi
  80042004a5:	48 b8 58 00 20 04 80 	movabs $0x8004200058,%rax
  80042004ac:	00 00 00 
  80042004af:	ff d0                	callq  *%rax
  80042004b1:	48 b8 7d 00 20 04 80 	movabs $0x800420007d,%rax
  80042004b8:	00 00 00 
  80042004bb:	ff d0                	callq  *%rax
  80042004bd:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  80042004c4:	00 00 00 
  80042004c7:	ff d0                	callq  *%rax

00000080042004c9 <_panic>:
  80042004c9:	55                   	push   %rbp
  80042004ca:	48 89 e5             	mov    %rsp,%rbp
  80042004cd:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042004d4:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042004db:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  80042004e1:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042004e8:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042004ef:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  80042004f6:	84 c0                	test   %al,%al
  80042004f8:	74 20                	je     800420051a <_panic+0x51>
  80042004fa:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042004fe:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200502:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004200506:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  800420050a:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  800420050e:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200512:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004200516:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  800420051a:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200521:	48 b8 d8 d5 6d 04 80 	movabs $0x80046dd5d8,%rax
  8004200528:	00 00 00 
  800420052b:	48 8b 00             	mov    (%rax),%rax
  800420052e:	48 85 c0             	test   %rax,%rax
  8004200531:	74 05                	je     8004200538 <_panic+0x6f>
  8004200533:	e9 b5 00 00 00       	jmpq   80042005ed <_panic+0x124>
  8004200538:	48 b8 d8 d5 6d 04 80 	movabs $0x80046dd5d8,%rax
  800420053f:	00 00 00 
  8004200542:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004200549:	48 89 10             	mov    %rdx,(%rax)
  800420054c:	fa                   	cli    
  800420054d:	fc                   	cld    
  800420054e:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004200555:	00 00 00 
  8004200558:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800420055f:	00 00 00 
  8004200562:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200566:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800420056d:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004200574:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800420057b:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004200582:	00 00 00 
  8004200585:	ff d0                	callq  *%rax
  8004200587:	8b 8d 24 ff ff ff    	mov    -0xdc(%rbp),%ecx
  800420058d:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  8004200594:	89 c6                	mov    %eax,%esi
  8004200596:	48 bf f8 dd 21 04 80 	movabs $0x800421ddf8,%rdi
  800420059d:	00 00 00 
  80042005a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005a5:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  80042005ac:	00 00 00 
  80042005af:	41 ff d0             	callq  *%r8
  80042005b2:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042005b9:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042005c0:	48 89 d6             	mov    %rdx,%rsi
  80042005c3:	48 89 c7             	mov    %rax,%rdi
  80042005c6:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042005cd:	00 00 00 
  80042005d0:	ff d0                	callq  *%rax
  80042005d2:	48 bf 1a de 21 04 80 	movabs $0x800421de1a,%rdi
  80042005d9:	00 00 00 
  80042005dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042005e1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042005e8:	00 00 00 
  80042005eb:	ff d2                	callq  *%rdx
  80042005ed:	bf 00 00 00 00       	mov    $0x0,%edi
  80042005f2:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  80042005f9:	00 00 00 
  80042005fc:	ff d0                	callq  *%rax
  80042005fe:	eb ed                	jmp    80042005ed <_panic+0x124>

0000008004200600 <_warn>:
  8004200600:	55                   	push   %rbp
  8004200601:	48 89 e5             	mov    %rsp,%rbp
  8004200604:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  800420060b:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  8004200612:	89 b5 24 ff ff ff    	mov    %esi,-0xdc(%rbp)
  8004200618:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800420061f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004200626:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800420062d:	84 c0                	test   %al,%al
  800420062f:	74 20                	je     8004200651 <_warn+0x51>
  8004200631:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004200635:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004200639:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  800420063d:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004200641:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004200645:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004200649:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  800420064d:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004200651:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  8004200658:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  800420065f:	00 00 00 
  8004200662:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  8004200669:	00 00 00 
  800420066c:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004200670:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004200677:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420067e:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004200685:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800420068b:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004200692:	48 89 c6             	mov    %rax,%rsi
  8004200695:	48 bf 1c de 21 04 80 	movabs $0x800421de1c,%rdi
  800420069c:	00 00 00 
  800420069f:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006a4:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042006ab:	00 00 00 
  80042006ae:	ff d1                	callq  *%rcx
  80042006b0:	48 8d 95 38 ff ff ff 	lea    -0xc8(%rbp),%rdx
  80042006b7:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  80042006be:	48 89 d6             	mov    %rdx,%rsi
  80042006c1:	48 89 c7             	mov    %rax,%rdi
  80042006c4:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  80042006cb:	00 00 00 
  80042006ce:	ff d0                	callq  *%rax
  80042006d0:	48 bf 1a de 21 04 80 	movabs $0x800421de1a,%rdi
  80042006d7:	00 00 00 
  80042006da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042006df:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042006e6:	00 00 00 
  80042006e9:	ff d2                	callq  *%rdx
  80042006eb:	c9                   	leaveq 
  80042006ec:	c3                   	retq   

00000080042006ed <delay>:
  80042006ed:	55                   	push   %rbp
  80042006ee:	48 89 e5             	mov    %rsp,%rbp
  80042006f1:	48 83 ec 20          	sub    $0x20,%rsp
  80042006f5:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042006fc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042006ff:	89 c2                	mov    %eax,%edx
  8004200701:	ec                   	in     (%dx),%al
  8004200702:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200705:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%rbp)
  800420070c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420070f:	89 c2                	mov    %eax,%edx
  8004200711:	ec                   	in     (%dx),%al
  8004200712:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004200715:	c7 45 ec 84 00 00 00 	movl   $0x84,-0x14(%rbp)
  800420071c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420071f:	89 c2                	mov    %eax,%edx
  8004200721:	ec                   	in     (%dx),%al
  8004200722:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004200725:	c7 45 e4 84 00 00 00 	movl   $0x84,-0x1c(%rbp)
  800420072c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420072f:	89 c2                	mov    %eax,%edx
  8004200731:	ec                   	in     (%dx),%al
  8004200732:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004200735:	c9                   	leaveq 
  8004200736:	c3                   	retq   

0000008004200737 <serial_proc_data>:
  8004200737:	55                   	push   %rbp
  8004200738:	48 89 e5             	mov    %rsp,%rbp
  800420073b:	48 83 ec 10          	sub    $0x10,%rsp
  800420073f:	c7 45 fc fd 03 00 00 	movl   $0x3fd,-0x4(%rbp)
  8004200746:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200749:	89 c2                	mov    %eax,%edx
  800420074b:	ec                   	in     (%dx),%al
  800420074c:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  800420074f:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200753:	0f b6 c0             	movzbl %al,%eax
  8004200756:	83 e0 01             	and    $0x1,%eax
  8004200759:	85 c0                	test   %eax,%eax
  800420075b:	75 07                	jne    8004200764 <serial_proc_data+0x2d>
  800420075d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200762:	eb 17                	jmp    800420077b <serial_proc_data+0x44>
  8004200764:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  800420076b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800420076e:	89 c2                	mov    %eax,%edx
  8004200770:	ec                   	in     (%dx),%al
  8004200771:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200774:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200778:	0f b6 c0             	movzbl %al,%eax
  800420077b:	c9                   	leaveq 
  800420077c:	c3                   	retq   

000000800420077d <serial_intr>:
  800420077d:	55                   	push   %rbp
  800420077e:	48 89 e5             	mov    %rsp,%rbp
  8004200781:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  8004200788:	00 00 00 
  800420078b:	0f b6 00             	movzbl (%rax),%eax
  800420078e:	84 c0                	test   %al,%al
  8004200790:	74 16                	je     80042007a8 <serial_intr+0x2b>
  8004200792:	48 bf 37 07 20 04 80 	movabs $0x8004200737,%rdi
  8004200799:	00 00 00 
  800420079c:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  80042007a3:	00 00 00 
  80042007a6:	ff d0                	callq  *%rax
  80042007a8:	5d                   	pop    %rbp
  80042007a9:	c3                   	retq   

00000080042007aa <serial_putc>:
  80042007aa:	55                   	push   %rbp
  80042007ab:	48 89 e5             	mov    %rsp,%rbp
  80042007ae:	48 83 ec 28          	sub    $0x28,%rsp
  80042007b2:	89 7d dc             	mov    %edi,-0x24(%rbp)
  80042007b5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042007bc:	eb 10                	jmp    80042007ce <serial_putc+0x24>
  80042007be:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  80042007c5:	00 00 00 
  80042007c8:	ff d0                	callq  *%rax
  80042007ca:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042007ce:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042007d5:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042007d8:	89 c2                	mov    %eax,%edx
  80042007da:	ec                   	in     (%dx),%al
  80042007db:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  80042007de:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  80042007e2:	0f b6 c0             	movzbl %al,%eax
  80042007e5:	83 e0 20             	and    $0x20,%eax
  80042007e8:	85 c0                	test   %eax,%eax
  80042007ea:	75 09                	jne    80042007f5 <serial_putc+0x4b>
  80042007ec:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  80042007f3:	7e c9                	jle    80042007be <serial_putc+0x14>
  80042007f5:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042007f8:	0f b6 c0             	movzbl %al,%eax
  80042007fb:	c7 45 f0 f8 03 00 00 	movl   $0x3f8,-0x10(%rbp)
  8004200802:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200805:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200809:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800420080c:	ee                   	out    %al,(%dx)
  800420080d:	c9                   	leaveq 
  800420080e:	c3                   	retq   

000000800420080f <serial_init>:
  800420080f:	55                   	push   %rbp
  8004200810:	48 89 e5             	mov    %rsp,%rbp
  8004200813:	48 83 ec 50          	sub    $0x50,%rsp
  8004200817:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%rbp)
  800420081e:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
  8004200822:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200826:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200829:	ee                   	out    %al,(%dx)
  800420082a:	c7 45 f4 fb 03 00 00 	movl   $0x3fb,-0xc(%rbp)
  8004200831:	c6 45 f3 80          	movb   $0x80,-0xd(%rbp)
  8004200835:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200839:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800420083c:	ee                   	out    %al,(%dx)
  800420083d:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%rbp)
  8004200844:	c6 45 eb 0c          	movb   $0xc,-0x15(%rbp)
  8004200848:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  800420084c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420084f:	ee                   	out    %al,(%dx)
  8004200850:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%rbp)
  8004200857:	c6 45 e3 00          	movb   $0x0,-0x1d(%rbp)
  800420085b:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  800420085f:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200862:	ee                   	out    %al,(%dx)
  8004200863:	c7 45 dc fb 03 00 00 	movl   $0x3fb,-0x24(%rbp)
  800420086a:	c6 45 db 03          	movb   $0x3,-0x25(%rbp)
  800420086e:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200872:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200875:	ee                   	out    %al,(%dx)
  8004200876:	c7 45 d4 fc 03 00 00 	movl   $0x3fc,-0x2c(%rbp)
  800420087d:	c6 45 d3 00          	movb   $0x0,-0x2d(%rbp)
  8004200881:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200885:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004200888:	ee                   	out    %al,(%dx)
  8004200889:	c7 45 cc f9 03 00 00 	movl   $0x3f9,-0x34(%rbp)
  8004200890:	c6 45 cb 01          	movb   $0x1,-0x35(%rbp)
  8004200894:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004200898:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420089b:	ee                   	out    %al,(%dx)
  800420089c:	c7 45 c4 fd 03 00 00 	movl   $0x3fd,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008a3:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042008a6:	89 c2                	mov    %eax,%edx
  80042008a8:	ec                   	in     (%dx),%al
  80042008a9:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  80042008ac:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  80042008b0:	3c ff                	cmp    $0xff,%al
  80042008b2:	0f 95 c2             	setne  %dl
  80042008b5:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  80042008bc:	00 00 00 
  80042008bf:	88 10                	mov    %dl,(%rax)
  80042008c1:	c7 45 bc fa 03 00 00 	movl   $0x3fa,-0x44(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  80042008c8:	8b 45 bc             	mov    -0x44(%rbp),%eax
  80042008cb:	89 c2                	mov    %eax,%edx
  80042008cd:	ec                   	in     (%dx),%al
  80042008ce:	88 45 bb             	mov    %al,-0x45(%rbp)
  80042008d1:	c7 45 b4 f8 03 00 00 	movl   $0x3f8,-0x4c(%rbp)
  80042008d8:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042008db:	89 c2                	mov    %eax,%edx
  80042008dd:	ec                   	in     (%dx),%al
  80042008de:	88 45 b3             	mov    %al,-0x4d(%rbp)
  80042008e1:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  80042008e8:	00 00 00 
  80042008eb:	0f b6 00             	movzbl (%rax),%eax
  80042008ee:	84 c0                	test   %al,%al
  80042008f0:	74 23                	je     8004200915 <serial_init+0x106>
  80042008f2:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  80042008f9:	00 00 00 
  80042008fc:	0f b7 00             	movzwl (%rax),%eax
  80042008ff:	0f b7 c0             	movzwl %ax,%eax
  8004200902:	25 ef ff 00 00       	and    $0xffef,%eax
  8004200907:	89 c7                	mov    %eax,%edi
  8004200909:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004200910:	00 00 00 
  8004200913:	ff d0                	callq  *%rax
  8004200915:	c9                   	leaveq 
  8004200916:	c3                   	retq   

0000008004200917 <lpt_putc>:
  8004200917:	55                   	push   %rbp
  8004200918:	48 89 e5             	mov    %rsp,%rbp
  800420091b:	48 83 ec 38          	sub    $0x38,%rsp
  800420091f:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200922:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004200929:	eb 10                	jmp    800420093b <lpt_putc+0x24>
  800420092b:	48 b8 ed 06 20 04 80 	movabs $0x80042006ed,%rax
  8004200932:	00 00 00 
  8004200935:	ff d0                	callq  *%rax
  8004200937:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420093b:	c7 45 f8 79 03 00 00 	movl   $0x379,-0x8(%rbp)
  8004200942:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004200945:	89 c2                	mov    %eax,%edx
  8004200947:	ec                   	in     (%dx),%al
  8004200948:	88 45 f7             	mov    %al,-0x9(%rbp)
	return data;
  800420094b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  800420094f:	84 c0                	test   %al,%al
  8004200951:	78 09                	js     800420095c <lpt_putc+0x45>
  8004200953:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%rbp)
  800420095a:	7e cf                	jle    800420092b <lpt_putc+0x14>
  800420095c:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420095f:	0f b6 c0             	movzbl %al,%eax
  8004200962:	c7 45 f0 78 03 00 00 	movl   $0x378,-0x10(%rbp)
  8004200969:	88 45 ef             	mov    %al,-0x11(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  800420096c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200970:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200973:	ee                   	out    %al,(%dx)
  8004200974:	c7 45 e8 7a 03 00 00 	movl   $0x37a,-0x18(%rbp)
  800420097b:	c6 45 e7 0d          	movb   $0xd,-0x19(%rbp)
  800420097f:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200983:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200986:	ee                   	out    %al,(%dx)
  8004200987:	c7 45 e0 7a 03 00 00 	movl   $0x37a,-0x20(%rbp)
  800420098e:	c6 45 df 08          	movb   $0x8,-0x21(%rbp)
  8004200992:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200996:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200999:	ee                   	out    %al,(%dx)
  800420099a:	c9                   	leaveq 
  800420099b:	c3                   	retq   

000000800420099c <cga_init>:
  800420099c:	55                   	push   %rbp
  800420099d:	48 89 e5             	mov    %rsp,%rbp
  80042009a0:	48 83 ec 30          	sub    $0x30,%rsp
  80042009a4:	48 b8 00 80 0b 04 80 	movabs $0x80040b8000,%rax
  80042009ab:	00 00 00 
  80042009ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009b6:	0f b7 00             	movzwl (%rax),%eax
  80042009b9:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  80042009bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009c1:	66 c7 00 5a a5       	movw   $0xa55a,(%rax)
  80042009c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009ca:	0f b7 00             	movzwl (%rax),%eax
  80042009cd:	66 3d 5a a5          	cmp    $0xa55a,%ax
  80042009d1:	74 20                	je     80042009f3 <cga_init+0x57>
  80042009d3:	48 b8 00 00 0b 04 80 	movabs $0x80040b0000,%rax
  80042009da:	00 00 00 
  80042009dd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042009e1:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  80042009e8:	00 00 00 
  80042009eb:	c7 00 b4 03 00 00    	movl   $0x3b4,(%rax)
  80042009f1:	eb 1b                	jmp    8004200a0e <cga_init+0x72>
  80042009f3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042009f7:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  80042009fb:	66 89 10             	mov    %dx,(%rax)
  80042009fe:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a05:	00 00 00 
  8004200a08:	c7 00 d4 03 00 00    	movl   $0x3d4,(%rax)
  8004200a0e:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a15:	00 00 00 
  8004200a18:	8b 00                	mov    (%rax),%eax
  8004200a1a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004200a1d:	c6 45 eb 0e          	movb   $0xe,-0x15(%rbp)
  8004200a21:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200a25:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004200a28:	ee                   	out    %al,(%dx)
  8004200a29:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a30:	00 00 00 
  8004200a33:	8b 00                	mov    (%rax),%eax
  8004200a35:	83 c0 01             	add    $0x1,%eax
  8004200a38:	89 45 e4             	mov    %eax,-0x1c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a3b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004200a3e:	89 c2                	mov    %eax,%edx
  8004200a40:	ec                   	in     (%dx),%al
  8004200a41:	88 45 e3             	mov    %al,-0x1d(%rbp)
	return data;
  8004200a44:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200a48:	0f b6 c0             	movzbl %al,%eax
  8004200a4b:	c1 e0 08             	shl    $0x8,%eax
  8004200a4e:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004200a51:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a58:	00 00 00 
  8004200a5b:	8b 00                	mov    (%rax),%eax
  8004200a5d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004200a60:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200a64:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004200a68:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004200a6b:	ee                   	out    %al,(%dx)
  8004200a6c:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200a73:	00 00 00 
  8004200a76:	8b 00                	mov    (%rax),%eax
  8004200a78:	83 c0 01             	add    $0x1,%eax
  8004200a7b:	89 45 d4             	mov    %eax,-0x2c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200a7e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  8004200a81:	89 c2                	mov    %eax,%edx
  8004200a83:	ec                   	in     (%dx),%al
  8004200a84:	88 45 d3             	mov    %al,-0x2d(%rbp)
	return data;
  8004200a87:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004200a8b:	0f b6 c0             	movzbl %al,%eax
  8004200a8e:	09 45 f0             	or     %eax,-0x10(%rbp)
  8004200a91:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200a98:	00 00 00 
  8004200a9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004200a9f:	48 89 10             	mov    %rdx,(%rax)
  8004200aa2:	8b 45 f0             	mov    -0x10(%rbp),%eax
  8004200aa5:	89 c2                	mov    %eax,%edx
  8004200aa7:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200aae:	00 00 00 
  8004200ab1:	66 89 10             	mov    %dx,(%rax)
  8004200ab4:	c9                   	leaveq 
  8004200ab5:	c3                   	retq   

0000008004200ab6 <cga_putc>:
  8004200ab6:	55                   	push   %rbp
  8004200ab7:	48 89 e5             	mov    %rsp,%rbp
  8004200aba:	48 83 ec 40          	sub    $0x40,%rsp
  8004200abe:	89 7d cc             	mov    %edi,-0x34(%rbp)
  8004200ac1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ac4:	b0 00                	mov    $0x0,%al
  8004200ac6:	85 c0                	test   %eax,%eax
  8004200ac8:	75 07                	jne    8004200ad1 <cga_putc+0x1b>
  8004200aca:	81 4d cc 00 07 00 00 	orl    $0x700,-0x34(%rbp)
  8004200ad1:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200ad4:	0f b6 c0             	movzbl %al,%eax
  8004200ad7:	83 f8 09             	cmp    $0x9,%eax
  8004200ada:	0f 84 f6 00 00 00    	je     8004200bd6 <cga_putc+0x120>
  8004200ae0:	83 f8 09             	cmp    $0x9,%eax
  8004200ae3:	7f 0a                	jg     8004200aef <cga_putc+0x39>
  8004200ae5:	83 f8 08             	cmp    $0x8,%eax
  8004200ae8:	74 18                	je     8004200b02 <cga_putc+0x4c>
  8004200aea:	e9 3e 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200aef:	83 f8 0a             	cmp    $0xa,%eax
  8004200af2:	74 75                	je     8004200b69 <cga_putc+0xb3>
  8004200af4:	83 f8 0d             	cmp    $0xd,%eax
  8004200af7:	0f 84 89 00 00 00    	je     8004200b86 <cga_putc+0xd0>
  8004200afd:	e9 2b 01 00 00       	jmpq   8004200c2d <cga_putc+0x177>
  8004200b02:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b09:	00 00 00 
  8004200b0c:	0f b7 00             	movzwl (%rax),%eax
  8004200b0f:	66 85 c0             	test   %ax,%ax
  8004200b12:	74 50                	je     8004200b64 <cga_putc+0xae>
  8004200b14:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b1b:	00 00 00 
  8004200b1e:	0f b7 00             	movzwl (%rax),%eax
  8004200b21:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004200b24:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b2b:	00 00 00 
  8004200b2e:	66 89 10             	mov    %dx,(%rax)
  8004200b31:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200b38:	00 00 00 
  8004200b3b:	48 8b 10             	mov    (%rax),%rdx
  8004200b3e:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b45:	00 00 00 
  8004200b48:	0f b7 00             	movzwl (%rax),%eax
  8004200b4b:	0f b7 c0             	movzwl %ax,%eax
  8004200b4e:	48 01 c0             	add    %rax,%rax
  8004200b51:	48 01 c2             	add    %rax,%rdx
  8004200b54:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200b57:	b0 00                	mov    $0x0,%al
  8004200b59:	83 c8 20             	or     $0x20,%eax
  8004200b5c:	66 89 02             	mov    %ax,(%rdx)
  8004200b5f:	e9 04 01 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b64:	e9 ff 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200b69:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b70:	00 00 00 
  8004200b73:	0f b7 00             	movzwl (%rax),%eax
  8004200b76:	8d 50 50             	lea    0x50(%rax),%edx
  8004200b79:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b80:	00 00 00 
  8004200b83:	66 89 10             	mov    %dx,(%rax)
  8004200b86:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b8d:	00 00 00 
  8004200b90:	0f b7 30             	movzwl (%rax),%esi
  8004200b93:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200b9a:	00 00 00 
  8004200b9d:	0f b7 08             	movzwl (%rax),%ecx
  8004200ba0:	0f b7 c1             	movzwl %cx,%eax
  8004200ba3:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
  8004200ba9:	c1 e8 10             	shr    $0x10,%eax
  8004200bac:	89 c2                	mov    %eax,%edx
  8004200bae:	66 c1 ea 06          	shr    $0x6,%dx
  8004200bb2:	89 d0                	mov    %edx,%eax
  8004200bb4:	c1 e0 02             	shl    $0x2,%eax
  8004200bb7:	01 d0                	add    %edx,%eax
  8004200bb9:	c1 e0 04             	shl    $0x4,%eax
  8004200bbc:	29 c1                	sub    %eax,%ecx
  8004200bbe:	89 ca                	mov    %ecx,%edx
  8004200bc0:	29 d6                	sub    %edx,%esi
  8004200bc2:	89 f2                	mov    %esi,%edx
  8004200bc4:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200bcb:	00 00 00 
  8004200bce:	66 89 10             	mov    %dx,(%rax)
  8004200bd1:	e9 92 00 00 00       	jmpq   8004200c68 <cga_putc+0x1b2>
  8004200bd6:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bdb:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200be2:	00 00 00 
  8004200be5:	ff d0                	callq  *%rax
  8004200be7:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bec:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200bf3:	00 00 00 
  8004200bf6:	ff d0                	callq  *%rax
  8004200bf8:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200bfd:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c04:	00 00 00 
  8004200c07:	ff d0                	callq  *%rax
  8004200c09:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c0e:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c15:	00 00 00 
  8004200c18:	ff d0                	callq  *%rax
  8004200c1a:	bf 20 00 00 00       	mov    $0x20,%edi
  8004200c1f:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  8004200c26:	00 00 00 
  8004200c29:	ff d0                	callq  *%rax
  8004200c2b:	eb 3b                	jmp    8004200c68 <cga_putc+0x1b2>
  8004200c2d:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200c34:	00 00 00 
  8004200c37:	48 8b 30             	mov    (%rax),%rsi
  8004200c3a:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200c41:	00 00 00 
  8004200c44:	0f b7 00             	movzwl (%rax),%eax
  8004200c47:	8d 48 01             	lea    0x1(%rax),%ecx
  8004200c4a:	48 ba 10 e0 4d 04 80 	movabs $0x80044de010,%rdx
  8004200c51:	00 00 00 
  8004200c54:	66 89 0a             	mov    %cx,(%rdx)
  8004200c57:	0f b7 c0             	movzwl %ax,%eax
  8004200c5a:	48 01 c0             	add    %rax,%rax
  8004200c5d:	48 8d 14 06          	lea    (%rsi,%rax,1),%rdx
  8004200c61:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004200c64:	66 89 02             	mov    %ax,(%rdx)
  8004200c67:	90                   	nop
  8004200c68:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200c6f:	00 00 00 
  8004200c72:	0f b7 00             	movzwl (%rax),%eax
  8004200c75:	66 3d cf 07          	cmp    $0x7cf,%ax
  8004200c79:	0f 86 89 00 00 00    	jbe    8004200d08 <cga_putc+0x252>
  8004200c7f:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200c86:	00 00 00 
  8004200c89:	48 8b 00             	mov    (%rax),%rax
  8004200c8c:	48 8d 88 a0 00 00 00 	lea    0xa0(%rax),%rcx
  8004200c93:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200c9a:	00 00 00 
  8004200c9d:	48 8b 00             	mov    (%rax),%rax
  8004200ca0:	ba 00 0f 00 00       	mov    $0xf00,%edx
  8004200ca5:	48 89 ce             	mov    %rcx,%rsi
  8004200ca8:	48 89 c7             	mov    %rax,%rdi
  8004200cab:	48 b8 36 0c 21 04 80 	movabs $0x8004210c36,%rax
  8004200cb2:	00 00 00 
  8004200cb5:	ff d0                	callq  *%rax
  8004200cb7:	c7 45 fc 80 07 00 00 	movl   $0x780,-0x4(%rbp)
  8004200cbe:	eb 22                	jmp    8004200ce2 <cga_putc+0x22c>
  8004200cc0:	48 b8 08 e0 4d 04 80 	movabs $0x80044de008,%rax
  8004200cc7:	00 00 00 
  8004200cca:	48 8b 00             	mov    (%rax),%rax
  8004200ccd:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004200cd0:	48 63 d2             	movslq %edx,%rdx
  8004200cd3:	48 01 d2             	add    %rdx,%rdx
  8004200cd6:	48 01 d0             	add    %rdx,%rax
  8004200cd9:	66 c7 00 20 07       	movw   $0x720,(%rax)
  8004200cde:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004200ce2:	81 7d fc cf 07 00 00 	cmpl   $0x7cf,-0x4(%rbp)
  8004200ce9:	7e d5                	jle    8004200cc0 <cga_putc+0x20a>
  8004200ceb:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200cf2:	00 00 00 
  8004200cf5:	0f b7 00             	movzwl (%rax),%eax
  8004200cf8:	8d 50 b0             	lea    -0x50(%rax),%edx
  8004200cfb:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200d02:	00 00 00 
  8004200d05:	66 89 10             	mov    %dx,(%rax)
  8004200d08:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200d0f:	00 00 00 
  8004200d12:	8b 00                	mov    (%rax),%eax
  8004200d14:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004200d17:	c6 45 f7 0e          	movb   $0xe,-0x9(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200d1b:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004200d1f:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004200d22:	ee                   	out    %al,(%dx)
  8004200d23:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200d2a:	00 00 00 
  8004200d2d:	0f b7 00             	movzwl (%rax),%eax
  8004200d30:	66 c1 e8 08          	shr    $0x8,%ax
  8004200d34:	0f b6 c0             	movzbl %al,%eax
  8004200d37:	48 ba 04 e0 4d 04 80 	movabs $0x80044de004,%rdx
  8004200d3e:	00 00 00 
  8004200d41:	8b 12                	mov    (%rdx),%edx
  8004200d43:	83 c2 01             	add    $0x1,%edx
  8004200d46:	89 55 f0             	mov    %edx,-0x10(%rbp)
  8004200d49:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004200d4c:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004200d50:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004200d53:	ee                   	out    %al,(%dx)
  8004200d54:	48 b8 04 e0 4d 04 80 	movabs $0x80044de004,%rax
  8004200d5b:	00 00 00 
  8004200d5e:	8b 00                	mov    (%rax),%eax
  8004200d60:	89 45 e8             	mov    %eax,-0x18(%rbp)
  8004200d63:	c6 45 e7 0f          	movb   $0xf,-0x19(%rbp)
  8004200d67:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004200d6b:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004200d6e:	ee                   	out    %al,(%dx)
  8004200d6f:	48 b8 10 e0 4d 04 80 	movabs $0x80044de010,%rax
  8004200d76:	00 00 00 
  8004200d79:	0f b7 00             	movzwl (%rax),%eax
  8004200d7c:	0f b6 c0             	movzbl %al,%eax
  8004200d7f:	48 ba 04 e0 4d 04 80 	movabs $0x80044de004,%rdx
  8004200d86:	00 00 00 
  8004200d89:	8b 12                	mov    (%rdx),%edx
  8004200d8b:	83 c2 01             	add    $0x1,%edx
  8004200d8e:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004200d91:	88 45 df             	mov    %al,-0x21(%rbp)
  8004200d94:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004200d98:	8b 55 e0             	mov    -0x20(%rbp),%edx
  8004200d9b:	ee                   	out    %al,(%dx)
  8004200d9c:	c9                   	leaveq 
  8004200d9d:	c3                   	retq   

0000008004200d9e <kbd_proc_data>:
  8004200d9e:	55                   	push   %rbp
  8004200d9f:	48 89 e5             	mov    %rsp,%rbp
  8004200da2:	48 83 ec 20          	sub    $0x20,%rsp
  8004200da6:	c7 45 f4 64 00 00 00 	movl   $0x64,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dad:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004200db0:	89 c2                	mov    %eax,%edx
  8004200db2:	ec                   	in     (%dx),%al
  8004200db3:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  8004200db6:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004200dba:	0f b6 c0             	movzbl %al,%eax
  8004200dbd:	83 e0 01             	and    $0x1,%eax
  8004200dc0:	85 c0                	test   %eax,%eax
  8004200dc2:	75 0a                	jne    8004200dce <kbd_proc_data+0x30>
  8004200dc4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004200dc9:	e9 fc 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200dce:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004200dd5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004200dd8:	89 c2                	mov    %eax,%edx
  8004200dda:	ec                   	in     (%dx),%al
  8004200ddb:	88 45 eb             	mov    %al,-0x15(%rbp)
	return data;
  8004200dde:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004200de2:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200de5:	80 7d fb e0          	cmpb   $0xe0,-0x5(%rbp)
  8004200de9:	75 27                	jne    8004200e12 <kbd_proc_data+0x74>
  8004200deb:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200df2:	00 00 00 
  8004200df5:	8b 00                	mov    (%rax),%eax
  8004200df7:	83 c8 40             	or     $0x40,%eax
  8004200dfa:	89 c2                	mov    %eax,%edx
  8004200dfc:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e03:	00 00 00 
  8004200e06:	89 10                	mov    %edx,(%rax)
  8004200e08:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e0d:	e9 b8 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e12:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e16:	84 c0                	test   %al,%al
  8004200e18:	79 65                	jns    8004200e7f <kbd_proc_data+0xe1>
  8004200e1a:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e21:	00 00 00 
  8004200e24:	8b 00                	mov    (%rax),%eax
  8004200e26:	83 e0 40             	and    $0x40,%eax
  8004200e29:	85 c0                	test   %eax,%eax
  8004200e2b:	75 09                	jne    8004200e36 <kbd_proc_data+0x98>
  8004200e2d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e31:	83 e0 7f             	and    $0x7f,%eax
  8004200e34:	eb 04                	jmp    8004200e3a <kbd_proc_data+0x9c>
  8004200e36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e3a:	88 45 fb             	mov    %al,-0x5(%rbp)
  8004200e3d:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200e41:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200e48:	00 00 00 
  8004200e4b:	48 98                	cltq   
  8004200e4d:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200e51:	83 c8 40             	or     $0x40,%eax
  8004200e54:	0f b6 c0             	movzbl %al,%eax
  8004200e57:	f7 d0                	not    %eax
  8004200e59:	89 c2                	mov    %eax,%edx
  8004200e5b:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e62:	00 00 00 
  8004200e65:	8b 00                	mov    (%rax),%eax
  8004200e67:	21 c2                	and    %eax,%edx
  8004200e69:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e70:	00 00 00 
  8004200e73:	89 10                	mov    %edx,(%rax)
  8004200e75:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200e7a:	e9 4b 01 00 00       	jmpq   8004200fca <kbd_proc_data+0x22c>
  8004200e7f:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e86:	00 00 00 
  8004200e89:	8b 00                	mov    (%rax),%eax
  8004200e8b:	83 e0 40             	and    $0x40,%eax
  8004200e8e:	85 c0                	test   %eax,%eax
  8004200e90:	74 21                	je     8004200eb3 <kbd_proc_data+0x115>
  8004200e92:	80 4d fb 80          	orb    $0x80,-0x5(%rbp)
  8004200e96:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200e9d:	00 00 00 
  8004200ea0:	8b 00                	mov    (%rax),%eax
  8004200ea2:	83 e0 bf             	and    $0xffffffbf,%eax
  8004200ea5:	89 c2                	mov    %eax,%edx
  8004200ea7:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200eae:	00 00 00 
  8004200eb1:	89 10                	mov    %edx,(%rax)
  8004200eb3:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200eb7:	48 ba 60 50 23 04 80 	movabs $0x8004235060,%rdx
  8004200ebe:	00 00 00 
  8004200ec1:	48 98                	cltq   
  8004200ec3:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ec7:	0f b6 d0             	movzbl %al,%edx
  8004200eca:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200ed1:	00 00 00 
  8004200ed4:	8b 00                	mov    (%rax),%eax
  8004200ed6:	09 c2                	or     %eax,%edx
  8004200ed8:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200edf:	00 00 00 
  8004200ee2:	89 10                	mov    %edx,(%rax)
  8004200ee4:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200ee8:	48 ba 60 51 23 04 80 	movabs $0x8004235160,%rdx
  8004200eef:	00 00 00 
  8004200ef2:	48 98                	cltq   
  8004200ef4:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  8004200ef8:	0f b6 d0             	movzbl %al,%edx
  8004200efb:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f02:	00 00 00 
  8004200f05:	8b 00                	mov    (%rax),%eax
  8004200f07:	31 c2                	xor    %eax,%edx
  8004200f09:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f10:	00 00 00 
  8004200f13:	89 10                	mov    %edx,(%rax)
  8004200f15:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f1c:	00 00 00 
  8004200f1f:	8b 00                	mov    (%rax),%eax
  8004200f21:	83 e0 03             	and    $0x3,%eax
  8004200f24:	89 c2                	mov    %eax,%edx
  8004200f26:	48 b8 60 55 23 04 80 	movabs $0x8004235560,%rax
  8004200f2d:	00 00 00 
  8004200f30:	89 d2                	mov    %edx,%edx
  8004200f32:	48 8b 14 d0          	mov    (%rax,%rdx,8),%rdx
  8004200f36:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004200f3a:	48 01 d0             	add    %rdx,%rax
  8004200f3d:	0f b6 00             	movzbl (%rax),%eax
  8004200f40:	0f b6 c0             	movzbl %al,%eax
  8004200f43:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004200f46:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f4d:	00 00 00 
  8004200f50:	8b 00                	mov    (%rax),%eax
  8004200f52:	83 e0 08             	and    $0x8,%eax
  8004200f55:	85 c0                	test   %eax,%eax
  8004200f57:	74 22                	je     8004200f7b <kbd_proc_data+0x1dd>
  8004200f59:	83 7d fc 60          	cmpl   $0x60,-0x4(%rbp)
  8004200f5d:	7e 0c                	jle    8004200f6b <kbd_proc_data+0x1cd>
  8004200f5f:	83 7d fc 7a          	cmpl   $0x7a,-0x4(%rbp)
  8004200f63:	7f 06                	jg     8004200f6b <kbd_proc_data+0x1cd>
  8004200f65:	83 6d fc 20          	subl   $0x20,-0x4(%rbp)
  8004200f69:	eb 10                	jmp    8004200f7b <kbd_proc_data+0x1dd>
  8004200f6b:	83 7d fc 40          	cmpl   $0x40,-0x4(%rbp)
  8004200f6f:	7e 0a                	jle    8004200f7b <kbd_proc_data+0x1dd>
  8004200f71:	83 7d fc 5a          	cmpl   $0x5a,-0x4(%rbp)
  8004200f75:	7f 04                	jg     8004200f7b <kbd_proc_data+0x1dd>
  8004200f77:	83 45 fc 20          	addl   $0x20,-0x4(%rbp)
  8004200f7b:	48 b8 28 e2 4d 04 80 	movabs $0x80044de228,%rax
  8004200f82:	00 00 00 
  8004200f85:	8b 00                	mov    (%rax),%eax
  8004200f87:	f7 d0                	not    %eax
  8004200f89:	83 e0 06             	and    $0x6,%eax
  8004200f8c:	85 c0                	test   %eax,%eax
  8004200f8e:	75 37                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f90:	81 7d fc e9 00 00 00 	cmpl   $0xe9,-0x4(%rbp)
  8004200f97:	75 2e                	jne    8004200fc7 <kbd_proc_data+0x229>
  8004200f99:	48 bf 36 de 21 04 80 	movabs $0x800421de36,%rdi
  8004200fa0:	00 00 00 
  8004200fa3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004200fa8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004200faf:	00 00 00 
  8004200fb2:	ff d2                	callq  *%rdx
  8004200fb4:	c7 45 e4 92 00 00 00 	movl   $0x92,-0x1c(%rbp)
  8004200fbb:	c6 45 e3 03          	movb   $0x3,-0x1d(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004200fbf:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004200fc3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004200fc6:	ee                   	out    %al,(%dx)
  8004200fc7:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004200fca:	c9                   	leaveq 
  8004200fcb:	c3                   	retq   

0000008004200fcc <kbd_intr>:
  8004200fcc:	55                   	push   %rbp
  8004200fcd:	48 89 e5             	mov    %rsp,%rbp
  8004200fd0:	48 bf 9e 0d 20 04 80 	movabs $0x8004200d9e,%rdi
  8004200fd7:	00 00 00 
  8004200fda:	48 b8 1d 10 20 04 80 	movabs $0x800420101d,%rax
  8004200fe1:	00 00 00 
  8004200fe4:	ff d0                	callq  *%rax
  8004200fe6:	5d                   	pop    %rbp
  8004200fe7:	c3                   	retq   

0000008004200fe8 <kbd_init>:
  8004200fe8:	55                   	push   %rbp
  8004200fe9:	48 89 e5             	mov    %rsp,%rbp
  8004200fec:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  8004200ff3:	00 00 00 
  8004200ff6:	ff d0                	callq  *%rax
  8004200ff8:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004200fff:	00 00 00 
  8004201002:	0f b7 00             	movzwl (%rax),%eax
  8004201005:	0f b7 c0             	movzwl %ax,%eax
  8004201008:	25 fd ff 00 00       	and    $0xfffd,%eax
  800420100d:	89 c7                	mov    %eax,%edi
  800420100f:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004201016:	00 00 00 
  8004201019:	ff d0                	callq  *%rax
  800420101b:	5d                   	pop    %rbp
  800420101c:	c3                   	retq   

000000800420101d <cons_intr>:
  800420101d:	55                   	push   %rbp
  800420101e:	48 89 e5             	mov    %rsp,%rbp
  8004201021:	48 83 ec 20          	sub    $0x20,%rsp
  8004201025:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201029:	eb 6a                	jmp    8004201095 <cons_intr+0x78>
  800420102b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420102f:	75 02                	jne    8004201033 <cons_intr+0x16>
  8004201031:	eb 62                	jmp    8004201095 <cons_intr+0x78>
  8004201033:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  800420103a:	00 00 00 
  800420103d:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  8004201043:	8d 48 01             	lea    0x1(%rax),%ecx
  8004201046:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  800420104d:	00 00 00 
  8004201050:	89 8a 04 02 00 00    	mov    %ecx,0x204(%rdx)
  8004201056:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004201059:	89 d1                	mov    %edx,%ecx
  800420105b:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  8004201062:	00 00 00 
  8004201065:	89 c0                	mov    %eax,%eax
  8004201067:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800420106a:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  8004201071:	00 00 00 
  8004201074:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  800420107a:	3d 00 02 00 00       	cmp    $0x200,%eax
  800420107f:	75 14                	jne    8004201095 <cons_intr+0x78>
  8004201081:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  8004201088:	00 00 00 
  800420108b:	c7 80 04 02 00 00 00 	movl   $0x0,0x204(%rax)
  8004201092:	00 00 00 
  8004201095:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201099:	ff d0                	callq  *%rax
  800420109b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420109e:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  80042010a2:	75 87                	jne    800420102b <cons_intr+0xe>
  80042010a4:	c9                   	leaveq 
  80042010a5:	c3                   	retq   

00000080042010a6 <cons_getc>:
  80042010a6:	55                   	push   %rbp
  80042010a7:	48 89 e5             	mov    %rsp,%rbp
  80042010aa:	48 83 ec 10          	sub    $0x10,%rsp
  80042010ae:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  80042010b5:	00 00 00 
  80042010b8:	ff d0                	callq  *%rax
  80042010ba:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  80042010c1:	00 00 00 
  80042010c4:	ff d0                	callq  *%rax
  80042010c6:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  80042010cd:	00 00 00 
  80042010d0:	8b 90 00 02 00 00    	mov    0x200(%rax),%edx
  80042010d6:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  80042010dd:	00 00 00 
  80042010e0:	8b 80 04 02 00 00    	mov    0x204(%rax),%eax
  80042010e6:	39 c2                	cmp    %eax,%edx
  80042010e8:	74 69                	je     8004201153 <cons_getc+0xad>
  80042010ea:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  80042010f1:	00 00 00 
  80042010f4:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  80042010fa:	8d 48 01             	lea    0x1(%rax),%ecx
  80042010fd:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  8004201104:	00 00 00 
  8004201107:	89 8a 00 02 00 00    	mov    %ecx,0x200(%rdx)
  800420110d:	48 ba 20 e0 4d 04 80 	movabs $0x80044de020,%rdx
  8004201114:	00 00 00 
  8004201117:	89 c0                	mov    %eax,%eax
  8004201119:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420111d:	0f b6 c0             	movzbl %al,%eax
  8004201120:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201123:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  800420112a:	00 00 00 
  800420112d:	8b 80 00 02 00 00    	mov    0x200(%rax),%eax
  8004201133:	3d 00 02 00 00       	cmp    $0x200,%eax
  8004201138:	75 14                	jne    800420114e <cons_getc+0xa8>
  800420113a:	48 b8 20 e0 4d 04 80 	movabs $0x80044de020,%rax
  8004201141:	00 00 00 
  8004201144:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%rax)
  800420114b:	00 00 00 
  800420114e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201151:	eb 05                	jmp    8004201158 <cons_getc+0xb2>
  8004201153:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201158:	c9                   	leaveq 
  8004201159:	c3                   	retq   

000000800420115a <cons_putc>:
  800420115a:	55                   	push   %rbp
  800420115b:	48 89 e5             	mov    %rsp,%rbp
  800420115e:	48 83 ec 10          	sub    $0x10,%rsp
  8004201162:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201165:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201168:	89 c7                	mov    %eax,%edi
  800420116a:	48 b8 aa 07 20 04 80 	movabs $0x80042007aa,%rax
  8004201171:	00 00 00 
  8004201174:	ff d0                	callq  *%rax
  8004201176:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201179:	89 c7                	mov    %eax,%edi
  800420117b:	48 b8 17 09 20 04 80 	movabs $0x8004200917,%rax
  8004201182:	00 00 00 
  8004201185:	ff d0                	callq  *%rax
  8004201187:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420118a:	89 c7                	mov    %eax,%edi
  800420118c:	48 b8 b6 0a 20 04 80 	movabs $0x8004200ab6,%rax
  8004201193:	00 00 00 
  8004201196:	ff d0                	callq  *%rax
  8004201198:	c9                   	leaveq 
  8004201199:	c3                   	retq   

000000800420119a <cons_init>:
  800420119a:	55                   	push   %rbp
  800420119b:	48 89 e5             	mov    %rsp,%rbp
  800420119e:	48 b8 9c 09 20 04 80 	movabs $0x800420099c,%rax
  80042011a5:	00 00 00 
  80042011a8:	ff d0                	callq  *%rax
  80042011aa:	48 b8 e8 0f 20 04 80 	movabs $0x8004200fe8,%rax
  80042011b1:	00 00 00 
  80042011b4:	ff d0                	callq  *%rax
  80042011b6:	48 b8 0f 08 20 04 80 	movabs $0x800420080f,%rax
  80042011bd:	00 00 00 
  80042011c0:	ff d0                	callq  *%rax
  80042011c2:	48 b8 00 e0 4d 04 80 	movabs $0x80044de000,%rax
  80042011c9:	00 00 00 
  80042011cc:	0f b6 00             	movzbl (%rax),%eax
  80042011cf:	83 f0 01             	xor    $0x1,%eax
  80042011d2:	84 c0                	test   %al,%al
  80042011d4:	74 1b                	je     80042011f1 <cons_init+0x57>
  80042011d6:	48 bf 42 de 21 04 80 	movabs $0x800421de42,%rdi
  80042011dd:	00 00 00 
  80042011e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042011e5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042011ec:	00 00 00 
  80042011ef:	ff d2                	callq  *%rdx
  80042011f1:	5d                   	pop    %rbp
  80042011f2:	c3                   	retq   

00000080042011f3 <cputchar>:
  80042011f3:	55                   	push   %rbp
  80042011f4:	48 89 e5             	mov    %rsp,%rbp
  80042011f7:	48 83 ec 10          	sub    $0x10,%rsp
  80042011fb:	89 7d fc             	mov    %edi,-0x4(%rbp)
  80042011fe:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201201:	89 c7                	mov    %eax,%edi
  8004201203:	48 b8 5a 11 20 04 80 	movabs $0x800420115a,%rax
  800420120a:	00 00 00 
  800420120d:	ff d0                	callq  *%rax
  800420120f:	c9                   	leaveq 
  8004201210:	c3                   	retq   

0000008004201211 <getchar>:
  8004201211:	55                   	push   %rbp
  8004201212:	48 89 e5             	mov    %rsp,%rbp
  8004201215:	48 83 ec 10          	sub    $0x10,%rsp
  8004201219:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  8004201220:	00 00 00 
  8004201223:	ff d0                	callq  *%rax
  8004201225:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004201228:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420122c:	74 eb                	je     8004201219 <getchar+0x8>
  800420122e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201231:	c9                   	leaveq 
  8004201232:	c3                   	retq   

0000008004201233 <iscons>:
  8004201233:	55                   	push   %rbp
  8004201234:	48 89 e5             	mov    %rsp,%rbp
  8004201237:	48 83 ec 04          	sub    $0x4,%rsp
  800420123b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420123e:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201243:	c9                   	leaveq 
  8004201244:	c3                   	retq   

0000008004201245 <mon_help>:
  8004201245:	55                   	push   %rbp
  8004201246:	48 89 e5             	mov    %rsp,%rbp
  8004201249:	48 83 ec 30          	sub    $0x30,%rsp
  800420124d:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201250:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004201254:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004201258:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420125f:	eb 6c                	jmp    80042012cd <mon_help+0x88>
  8004201261:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  8004201268:	00 00 00 
  800420126b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420126e:	48 63 d0             	movslq %eax,%rdx
  8004201271:	48 89 d0             	mov    %rdx,%rax
  8004201274:	48 01 c0             	add    %rax,%rax
  8004201277:	48 01 d0             	add    %rdx,%rax
  800420127a:	48 c1 e0 03          	shl    $0x3,%rax
  800420127e:	48 01 c8             	add    %rcx,%rax
  8004201281:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004201285:	48 be 80 55 23 04 80 	movabs $0x8004235580,%rsi
  800420128c:	00 00 00 
  800420128f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201292:	48 63 d0             	movslq %eax,%rdx
  8004201295:	48 89 d0             	mov    %rdx,%rax
  8004201298:	48 01 c0             	add    %rax,%rax
  800420129b:	48 01 d0             	add    %rdx,%rax
  800420129e:	48 c1 e0 03          	shl    $0x3,%rax
  80042012a2:	48 01 f0             	add    %rsi,%rax
  80042012a5:	48 8b 00             	mov    (%rax),%rax
  80042012a8:	48 89 ca             	mov    %rcx,%rdx
  80042012ab:	48 89 c6             	mov    %rax,%rsi
  80042012ae:	48 bf f6 de 21 04 80 	movabs $0x800421def6,%rdi
  80042012b5:	00 00 00 
  80042012b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012bd:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042012c4:	00 00 00 
  80042012c7:	ff d1                	callq  *%rcx
  80042012c9:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042012cd:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042012d0:	83 f8 03             	cmp    $0x3,%eax
  80042012d3:	76 8c                	jbe    8004201261 <mon_help+0x1c>
  80042012d5:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012da:	c9                   	leaveq 
  80042012db:	c3                   	retq   

00000080042012dc <mon_kerninfo>:
  80042012dc:	55                   	push   %rbp
  80042012dd:	48 89 e5             	mov    %rsp,%rbp
  80042012e0:	48 83 ec 30          	sub    $0x30,%rsp
  80042012e4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042012e7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042012eb:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042012ef:	48 bf ff de 21 04 80 	movabs $0x800421deff,%rdi
  80042012f6:	00 00 00 
  80042012f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042012fe:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201305:	00 00 00 
  8004201308:	ff d2                	callq  *%rdx
  800420130a:	48 be 0c 00 20 00 00 	movabs $0x20000c,%rsi
  8004201311:	00 00 00 
  8004201314:	48 bf 18 df 21 04 80 	movabs $0x800421df18,%rdi
  800420131b:	00 00 00 
  800420131e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201323:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420132a:	00 00 00 
  800420132d:	ff d2                	callq  *%rdx
  800420132f:	48 ba 0c 00 20 00 00 	movabs $0x20000c,%rdx
  8004201336:	00 00 00 
  8004201339:	48 be 0c 00 20 04 80 	movabs $0x800420000c,%rsi
  8004201340:	00 00 00 
  8004201343:	48 bf 40 df 21 04 80 	movabs $0x800421df40,%rdi
  800420134a:	00 00 00 
  800420134d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201352:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201359:	00 00 00 
  800420135c:	ff d1                	callq  *%rcx
  800420135e:	48 ba 60 dd 21 00 00 	movabs $0x21dd60,%rdx
  8004201365:	00 00 00 
  8004201368:	48 be 60 dd 21 04 80 	movabs $0x800421dd60,%rsi
  800420136f:	00 00 00 
  8004201372:	48 bf 68 df 21 04 80 	movabs $0x800421df68,%rdi
  8004201379:	00 00 00 
  800420137c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201381:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004201388:	00 00 00 
  800420138b:	ff d1                	callq  *%rcx
  800420138d:	48 ba 77 d2 4d 00 00 	movabs $0x4dd277,%rdx
  8004201394:	00 00 00 
  8004201397:	48 be 77 d2 4d 04 80 	movabs $0x80044dd277,%rsi
  800420139e:	00 00 00 
  80042013a1:	48 bf 90 df 21 04 80 	movabs $0x800421df90,%rdi
  80042013a8:	00 00 00 
  80042013ab:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013b0:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013b7:	00 00 00 
  80042013ba:	ff d1                	callq  *%rcx
  80042013bc:	48 ba 10 00 72 00 00 	movabs $0x720010,%rdx
  80042013c3:	00 00 00 
  80042013c6:	48 be 10 00 72 04 80 	movabs $0x8004720010,%rsi
  80042013cd:	00 00 00 
  80042013d0:	48 bf b8 df 21 04 80 	movabs $0x800421dfb8,%rdi
  80042013d7:	00 00 00 
  80042013da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042013df:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042013e6:	00 00 00 
  80042013e9:	ff d1                	callq  *%rcx
  80042013eb:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  80042013f2:	00 
  80042013f3:	48 b8 0c 00 20 04 80 	movabs $0x800420000c,%rax
  80042013fa:	00 00 00 
  80042013fd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201401:	48 29 c2             	sub    %rax,%rdx
  8004201404:	48 b8 10 00 72 04 80 	movabs $0x8004720010,%rax
  800420140b:	00 00 00 
  800420140e:	48 83 e8 01          	sub    $0x1,%rax
  8004201412:	48 01 d0             	add    %rdx,%rax
  8004201415:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420141d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201422:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004201426:	48 89 d0             	mov    %rdx,%rax
  8004201429:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420142d:	48 29 c2             	sub    %rax,%rdx
  8004201430:	48 89 d0             	mov    %rdx,%rax
  8004201433:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800420143a:	48 85 c0             	test   %rax,%rax
  800420143d:	48 0f 48 c2          	cmovs  %rdx,%rax
  8004201441:	48 c1 f8 0a          	sar    $0xa,%rax
  8004201445:	48 89 c6             	mov    %rax,%rsi
  8004201448:	48 bf e0 df 21 04 80 	movabs $0x800421dfe0,%rdi
  800420144f:	00 00 00 
  8004201452:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201457:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420145e:	00 00 00 
  8004201461:	ff d2                	callq  *%rdx
  8004201463:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201468:	c9                   	leaveq 
  8004201469:	c3                   	retq   

000000800420146a <mon_backtrace>:
  800420146a:	55                   	push   %rbp
  800420146b:	48 89 e5             	mov    %rsp,%rbp
  800420146e:	48 81 ec 50 05 00 00 	sub    $0x550,%rsp
  8004201475:	89 bd cc fa ff ff    	mov    %edi,-0x534(%rbp)
  800420147b:	48 89 b5 c0 fa ff ff 	mov    %rsi,-0x540(%rbp)
  8004201482:	48 89 95 b8 fa ff ff 	mov    %rdx,-0x548(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004201489:	48 89 e8             	mov    %rbp,%rax
  800420148c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return rbp;
  8004201490:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004201494:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

static __inline uint64_t
read_rsp(void)
{
	uint64_t esp;
	__asm __volatile("movq %%rsp,%0" : "=r" (esp));
  8004201498:	48 89 e0             	mov    %rsp,%rax
  800420149b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	return esp;
  800420149f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042014a3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014a7:	48 83 bd b8 fa ff ff 	cmpq   $0x0,-0x548(%rbp)
  80042014ae:	00 
  80042014af:	74 21                	je     80042014d2 <mon_backtrace+0x68>
  80042014b1:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014b8:	48 8b 40 50          	mov    0x50(%rax),%rax
  80042014bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042014c0:	48 8b 85 b8 fa ff ff 	mov    -0x548(%rbp),%rax
  80042014c7:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  80042014ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042014d2:	48 8d 05 00 00 00 00 	lea    0x0(%rip),%rax        # 80042014d9 <mon_backtrace+0x6f>
  80042014d9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042014dd:	48 bf 0a e0 21 04 80 	movabs $0x800421e00a,%rdi
  80042014e4:	00 00 00 
  80042014e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042014ec:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042014f3:	00 00 00 
  80042014f6:	ff d2                	callq  *%rdx
  80042014f8:	e9 17 03 00 00       	jmpq   8004201814 <mon_backtrace+0x3aa>
  80042014fd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201501:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004201505:	48 89 c6             	mov    %rax,%rsi
  8004201508:	48 bf 1c e0 21 04 80 	movabs $0x800421e01c,%rdi
  800420150f:	00 00 00 
  8004201512:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201517:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420151e:	00 00 00 
  8004201521:	ff d1                	callq  *%rcx
  8004201523:	48 8d 95 d0 fa ff ff 	lea    -0x530(%rbp),%rdx
  800420152a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420152e:	48 89 d6             	mov    %rdx,%rsi
  8004201531:	48 89 c7             	mov    %rax,%rdi
  8004201534:	48 b8 17 f8 20 04 80 	movabs $0x800420f817,%rax
  800420153b:	00 00 00 
  800420153e:	ff d0                	callq  *%rax
  8004201540:	85 c0                	test   %eax,%eax
  8004201542:	0f 88 9a 02 00 00    	js     80042017e2 <mon_backtrace+0x378>
  8004201548:	48 8d 85 d0 fa ff ff 	lea    -0x530(%rbp),%rax
  800420154f:	48 05 a8 00 00 00    	add    $0xa8,%rax
  8004201555:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201559:	48 8b 85 f0 fa ff ff 	mov    -0x510(%rbp),%rax
  8004201560:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201564:	48 89 d7             	mov    %rdx,%rdi
  8004201567:	48 29 c7             	sub    %rax,%rdi
  800420156a:	48 8b b5 e0 fa ff ff 	mov    -0x520(%rbp),%rsi
  8004201571:	8b 8d e8 fa ff ff    	mov    -0x518(%rbp),%ecx
  8004201577:	8b 95 d8 fa ff ff    	mov    -0x528(%rbp),%edx
  800420157d:	48 8b 85 d0 fa ff ff 	mov    -0x530(%rbp),%rax
  8004201584:	49 89 f9             	mov    %rdi,%r9
  8004201587:	49 89 f0             	mov    %rsi,%r8
  800420158a:	48 89 c6             	mov    %rax,%rsi
  800420158d:	48 bf 38 e0 21 04 80 	movabs $0x800421e038,%rdi
  8004201594:	00 00 00 
  8004201597:	b8 00 00 00 00       	mov    $0x0,%eax
  800420159c:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042015a3:	00 00 00 
  80042015a6:	41 ff d2             	callq  *%r10
  80042015a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015ad:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015b1:	66 83 f8 06          	cmp    $0x6,%ax
  80042015b5:	75 15                	jne    80042015cc <mon_backtrace+0x162>
  80042015b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015bb:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042015c3:	48 01 d0             	add    %rdx,%rax
  80042015c6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ca:	eb 28                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015cc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015d0:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  80042015d4:	66 83 f8 07          	cmp    $0x7,%ax
  80042015d8:	75 15                	jne    80042015ef <mon_backtrace+0x185>
  80042015da:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042015de:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042015e2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042015e6:	48 01 d0             	add    %rdx,%rax
  80042015e9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042015ed:	eb 05                	jmp    80042015f4 <mon_backtrace+0x18a>
  80042015ef:	e9 ee 01 00 00       	jmpq   80042017e2 <mon_backtrace+0x378>
  80042015f4:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  80042015fa:	89 c6                	mov    %eax,%esi
  80042015fc:	48 bf 53 e0 21 04 80 	movabs $0x800421e053,%rdi
  8004201603:	00 00 00 
  8004201606:	b8 00 00 00 00       	mov    $0x0,%eax
  800420160b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201612:	00 00 00 
  8004201615:	ff d2                	callq  *%rdx
  8004201617:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420161e:	e9 f2 00 00 00       	jmpq   8004201715 <mon_backtrace+0x2ab>
  8004201623:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201626:	48 98                	cltq   
  8004201628:	48 83 c0 0a          	add    $0xa,%rax
  800420162c:	48 8b 84 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rax
  8004201633:	ff 
  8004201634:	48 85 c0             	test   %rax,%rax
  8004201637:	75 35                	jne    800420166e <mon_backtrace+0x204>
  8004201639:	48 b9 5e e0 21 04 80 	movabs $0x800421e05e,%rcx
  8004201640:	00 00 00 
  8004201643:	48 ba 74 e0 21 04 80 	movabs $0x800421e074,%rdx
  800420164a:	00 00 00 
  800420164d:	be 78 00 00 00       	mov    $0x78,%esi
  8004201652:	48 bf 89 e0 21 04 80 	movabs $0x800421e089,%rdi
  8004201659:	00 00 00 
  800420165c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201661:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201668:	00 00 00 
  800420166b:	41 ff d0             	callq  *%r8
  800420166e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201671:	48 98                	cltq   
  8004201673:	48 83 c0 0a          	add    $0xa,%rax
  8004201677:	48 8b 94 c5 d8 fa ff 	mov    -0x528(%rbp,%rax,8),%rdx
  800420167e:	ff 
  800420167f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201683:	48 01 d0             	add    %rdx,%rax
  8004201686:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420168a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420168d:	48 98                	cltq   
  800420168f:	48 83 c0 08          	add    $0x8,%rax
  8004201693:	8b 84 85 dc fa ff ff 	mov    -0x524(%rbp,%rax,4),%eax
  800420169a:	83 f8 02             	cmp    $0x2,%eax
  800420169d:	74 31                	je     80042016d0 <mon_backtrace+0x266>
  800420169f:	83 f8 02             	cmp    $0x2,%eax
  80042016a2:	7f 07                	jg     80042016ab <mon_backtrace+0x241>
  80042016a4:	83 f8 01             	cmp    $0x1,%eax
  80042016a7:	74 37                	je     80042016e0 <mon_backtrace+0x276>
  80042016a9:	eb 44                	jmp    80042016ef <mon_backtrace+0x285>
  80042016ab:	83 f8 04             	cmp    $0x4,%eax
  80042016ae:	74 12                	je     80042016c2 <mon_backtrace+0x258>
  80042016b0:	83 f8 08             	cmp    $0x8,%eax
  80042016b3:	75 3a                	jne    80042016ef <mon_backtrace+0x285>
  80042016b5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016b9:	48 8b 00             	mov    (%rax),%rax
  80042016bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016c0:	eb 2d                	jmp    80042016ef <mon_backtrace+0x285>
  80042016c2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016c6:	8b 00                	mov    (%rax),%eax
  80042016c8:	89 c0                	mov    %eax,%eax
  80042016ca:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ce:	eb 1f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016d4:	0f b7 00             	movzwl (%rax),%eax
  80042016d7:	0f b7 c0             	movzwl %ax,%eax
  80042016da:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016de:	eb 0f                	jmp    80042016ef <mon_backtrace+0x285>
  80042016e0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042016e4:	0f b6 00             	movzbl (%rax),%eax
  80042016e7:	0f b6 c0             	movzbl %al,%eax
  80042016ea:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042016ee:	90                   	nop
  80042016ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042016f3:	48 89 c6             	mov    %rax,%rsi
  80042016f6:	48 bf 9b e0 21 04 80 	movabs $0x800421e09b,%rdi
  80042016fd:	00 00 00 
  8004201700:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201705:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420170c:	00 00 00 
  800420170f:	ff d2                	callq  *%rdx
  8004201711:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004201715:	8b 85 f8 fa ff ff    	mov    -0x508(%rbp),%eax
  800420171b:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800420171e:	0f 8f ff fe ff ff    	jg     8004201623 <mon_backtrace+0x1b9>
  8004201724:	0f b7 85 ea fb ff ff 	movzwl -0x416(%rbp),%eax
  800420172b:	0f b7 c0             	movzwl %ax,%eax
  800420172e:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  8004201733:	74 48                	je     800420177d <mon_backtrace+0x313>
  8004201735:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  800420173a:	75 17                	jne    8004201753 <mon_backtrace+0x2e9>
  800420173c:	48 8b 95 f0 fb ff ff 	mov    -0x410(%rbp),%rdx
  8004201743:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201747:	48 01 d0             	add    %rdx,%rax
  800420174a:	48 8b 00             	mov    (%rax),%rax
  800420174d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004201751:	eb 2b                	jmp    800420177e <mon_backtrace+0x314>
  8004201753:	48 ba a2 e0 21 04 80 	movabs $0x800421e0a2,%rdx
  800420175a:	00 00 00 
  800420175d:	be 92 00 00 00       	mov    $0x92,%esi
  8004201762:	48 bf 89 e0 21 04 80 	movabs $0x800421e089,%rdi
  8004201769:	00 00 00 
  800420176c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201771:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201778:	00 00 00 
  800420177b:	ff d1                	callq  *%rcx
  800420177d:	90                   	nop
  800420177e:	0f b7 85 8a fc ff ff 	movzwl -0x376(%rbp),%eax
  8004201785:	0f b7 c0             	movzwl %ax,%eax
  8004201788:	3d 0b 04 00 00       	cmp    $0x40b,%eax
  800420178d:	74 48                	je     80042017d7 <mon_backtrace+0x36d>
  800420178f:	3d 9c 05 00 00       	cmp    $0x59c,%eax
  8004201794:	75 17                	jne    80042017ad <mon_backtrace+0x343>
  8004201796:	48 8b 95 90 fc ff ff 	mov    -0x370(%rbp),%rdx
  800420179d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017a1:	48 01 d0             	add    %rdx,%rax
  80042017a4:	48 8b 00             	mov    (%rax),%rax
  80042017a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ab:	eb 2b                	jmp    80042017d8 <mon_backtrace+0x36e>
  80042017ad:	48 ba a2 e0 21 04 80 	movabs $0x800421e0a2,%rdx
  80042017b4:	00 00 00 
  80042017b7:	be 9d 00 00 00       	mov    $0x9d,%esi
  80042017bc:	48 bf 89 e0 21 04 80 	movabs $0x800421e089,%rdi
  80042017c3:	00 00 00 
  80042017c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042017cb:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042017d2:	00 00 00 
  80042017d5:	ff d1                	callq  *%rcx
  80042017d7:	90                   	nop
  80042017d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042017dc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042017e0:	eb 17                	jmp    80042017f9 <mon_backtrace+0x38f>
  80042017e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017e6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042017ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042017ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042017f2:	48 8b 00             	mov    (%rax),%rax
  80042017f5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042017f9:	48 bf b3 e0 21 04 80 	movabs $0x800421e0b3,%rdi
  8004201800:	00 00 00 
  8004201803:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201808:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420180f:	00 00 00 
  8004201812:	ff d2                	callq  *%rdx
  8004201814:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004201819:	0f 85 de fc ff ff    	jne    80042014fd <mon_backtrace+0x93>
  800420181f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201824:	c9                   	leaveq 
  8004201825:	c3                   	retq   

0000008004201826 <mon_exit>:
  8004201826:	55                   	push   %rbp
  8004201827:	48 89 e5             	mov    %rsp,%rbp
  800420182a:	48 83 ec 18          	sub    $0x18,%rsp
  800420182e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201831:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004201835:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004201839:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420183e:	c9                   	leaveq 
  800420183f:	c3                   	retq   

0000008004201840 <runcmd>:
  8004201840:	55                   	push   %rbp
  8004201841:	48 89 e5             	mov    %rsp,%rbp
  8004201844:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420184b:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004201852:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004201859:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004201860:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201863:	48 98                	cltq   
  8004201865:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  800420186c:	ff 00 00 00 00 
  8004201871:	eb 15                	jmp    8004201888 <runcmd+0x48>
  8004201873:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420187a:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420187e:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
  8004201885:	c6 00 00             	movb   $0x0,(%rax)
  8004201888:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420188f:	0f b6 00             	movzbl (%rax),%eax
  8004201892:	84 c0                	test   %al,%al
  8004201894:	74 2a                	je     80042018c0 <runcmd+0x80>
  8004201896:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420189d:	0f b6 00             	movzbl (%rax),%eax
  80042018a0:	0f be c0             	movsbl %al,%eax
  80042018a3:	89 c6                	mov    %eax,%esi
  80042018a5:	48 bf b5 e0 21 04 80 	movabs $0x800421e0b5,%rdi
  80042018ac:	00 00 00 
  80042018af:	48 b8 38 0b 21 04 80 	movabs $0x8004210b38,%rax
  80042018b6:	00 00 00 
  80042018b9:	ff d0                	callq  *%rax
  80042018bb:	48 85 c0             	test   %rax,%rax
  80042018be:	75 b3                	jne    8004201873 <runcmd+0x33>
  80042018c0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042018c7:	0f b6 00             	movzbl (%rax),%eax
  80042018ca:	84 c0                	test   %al,%al
  80042018cc:	75 21                	jne    80042018ef <runcmd+0xaf>
  80042018ce:	90                   	nop
  80042018cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042018d2:	48 98                	cltq   
  80042018d4:	48 c7 84 c5 70 ff ff 	movq   $0x0,-0x90(%rbp,%rax,8)
  80042018db:	ff 00 00 00 00 
  80042018e0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042018e4:	0f 85 a1 00 00 00    	jne    800420198b <runcmd+0x14b>
  80042018ea:	e9 92 00 00 00       	jmpq   8004201981 <runcmd+0x141>
  80042018ef:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  80042018f3:	75 2a                	jne    800420191f <runcmd+0xdf>
  80042018f5:	be 10 00 00 00       	mov    $0x10,%esi
  80042018fa:	48 bf ba e0 21 04 80 	movabs $0x800421e0ba,%rdi
  8004201901:	00 00 00 
  8004201904:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201909:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201910:	00 00 00 
  8004201913:	ff d2                	callq  *%rdx
  8004201915:	b8 00 00 00 00       	mov    $0x0,%eax
  800420191a:	e9 30 01 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420191f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004201922:	8d 50 01             	lea    0x1(%rax),%edx
  8004201925:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004201928:	48 98                	cltq   
  800420192a:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  8004201931:	48 89 94 c5 70 ff ff 	mov    %rdx,-0x90(%rbp,%rax,8)
  8004201938:	ff 
  8004201939:	eb 08                	jmp    8004201943 <runcmd+0x103>
  800420193b:	48 83 85 68 ff ff ff 	addq   $0x1,-0x98(%rbp)
  8004201942:	01 
  8004201943:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420194a:	0f b6 00             	movzbl (%rax),%eax
  800420194d:	84 c0                	test   %al,%al
  800420194f:	74 2a                	je     800420197b <runcmd+0x13b>
  8004201951:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004201958:	0f b6 00             	movzbl (%rax),%eax
  800420195b:	0f be c0             	movsbl %al,%eax
  800420195e:	89 c6                	mov    %eax,%esi
  8004201960:	48 bf b5 e0 21 04 80 	movabs $0x800421e0b5,%rdi
  8004201967:	00 00 00 
  800420196a:	48 b8 38 0b 21 04 80 	movabs $0x8004210b38,%rax
  8004201971:	00 00 00 
  8004201974:	ff d0                	callq  *%rax
  8004201976:	48 85 c0             	test   %rax,%rax
  8004201979:	74 c0                	je     800420193b <runcmd+0xfb>
  800420197b:	90                   	nop
  800420197c:	e9 07 ff ff ff       	jmpq   8004201888 <runcmd+0x48>
  8004201981:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201986:	e9 c4 00 00 00       	jmpq   8004201a4f <runcmd+0x20f>
  800420198b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004201992:	e9 82 00 00 00       	jmpq   8004201a19 <runcmd+0x1d9>
  8004201997:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  800420199e:	00 00 00 
  80042019a1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019a4:	48 63 d0             	movslq %eax,%rdx
  80042019a7:	48 89 d0             	mov    %rdx,%rax
  80042019aa:	48 01 c0             	add    %rax,%rax
  80042019ad:	48 01 d0             	add    %rdx,%rax
  80042019b0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019b4:	48 01 c8             	add    %rcx,%rax
  80042019b7:	48 8b 10             	mov    (%rax),%rdx
  80042019ba:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042019c1:	48 89 d6             	mov    %rdx,%rsi
  80042019c4:	48 89 c7             	mov    %rax,%rdi
  80042019c7:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  80042019ce:	00 00 00 
  80042019d1:	ff d0                	callq  *%rax
  80042019d3:	85 c0                	test   %eax,%eax
  80042019d5:	75 3e                	jne    8004201a15 <runcmd+0x1d5>
  80042019d7:	48 b9 80 55 23 04 80 	movabs $0x8004235580,%rcx
  80042019de:	00 00 00 
  80042019e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042019e4:	48 63 d0             	movslq %eax,%rdx
  80042019e7:	48 89 d0             	mov    %rdx,%rax
  80042019ea:	48 01 c0             	add    %rax,%rax
  80042019ed:	48 01 d0             	add    %rdx,%rax
  80042019f0:	48 c1 e0 03          	shl    $0x3,%rax
  80042019f4:	48 01 c8             	add    %rcx,%rax
  80042019f7:	48 83 c0 10          	add    $0x10,%rax
  80042019fb:	48 8b 00             	mov    (%rax),%rax
  80042019fe:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004201a05:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
  8004201a0c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004201a0f:	89 cf                	mov    %ecx,%edi
  8004201a11:	ff d0                	callq  *%rax
  8004201a13:	eb 3a                	jmp    8004201a4f <runcmd+0x20f>
  8004201a15:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  8004201a19:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004201a1c:	83 f8 03             	cmp    $0x3,%eax
  8004201a1f:	0f 86 72 ff ff ff    	jbe    8004201997 <runcmd+0x157>
  8004201a25:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004201a2c:	48 89 c6             	mov    %rax,%rsi
  8004201a2f:	48 bf d7 e0 21 04 80 	movabs $0x800421e0d7,%rdi
  8004201a36:	00 00 00 
  8004201a39:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a3e:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a45:	00 00 00 
  8004201a48:	ff d2                	callq  *%rdx
  8004201a4a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a4f:	c9                   	leaveq 
  8004201a50:	c3                   	retq   

0000008004201a51 <monitor>:
  8004201a51:	55                   	push   %rbp
  8004201a52:	48 89 e5             	mov    %rsp,%rbp
  8004201a55:	48 83 ec 20          	sub    $0x20,%rsp
  8004201a59:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201a5d:	48 bf f0 e0 21 04 80 	movabs $0x800421e0f0,%rdi
  8004201a64:	00 00 00 
  8004201a67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a73:	00 00 00 
  8004201a76:	ff d2                	callq  *%rdx
  8004201a78:	48 bf 18 e1 21 04 80 	movabs $0x800421e118,%rdi
  8004201a7f:	00 00 00 
  8004201a82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201a87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201a8e:	00 00 00 
  8004201a91:	ff d2                	callq  *%rdx
  8004201a93:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004201a98:	74 13                	je     8004201aad <monitor+0x5c>
  8004201a9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201a9e:	48 89 c7             	mov    %rax,%rdi
  8004201aa1:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  8004201aa8:	00 00 00 
  8004201aab:	ff d0                	callq  *%rax
  8004201aad:	48 bf 3d e1 21 04 80 	movabs $0x800421e13d,%rdi
  8004201ab4:	00 00 00 
  8004201ab7:	48 b8 51 07 21 04 80 	movabs $0x8004210751,%rax
  8004201abe:	00 00 00 
  8004201ac1:	ff d0                	callq  *%rax
  8004201ac3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201ac7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004201acc:	74 20                	je     8004201aee <monitor+0x9d>
  8004201ace:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004201ad2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201ad6:	48 89 d6             	mov    %rdx,%rsi
  8004201ad9:	48 89 c7             	mov    %rax,%rdi
  8004201adc:	48 b8 40 18 20 04 80 	movabs $0x8004201840,%rax
  8004201ae3:	00 00 00 
  8004201ae6:	ff d0                	callq  *%rax
  8004201ae8:	85 c0                	test   %eax,%eax
  8004201aea:	79 02                	jns    8004201aee <monitor+0x9d>
  8004201aec:	eb 02                	jmp    8004201af0 <monitor+0x9f>
  8004201aee:	eb bd                	jmp    8004201aad <monitor+0x5c>
  8004201af0:	c9                   	leaveq 
  8004201af1:	c3                   	retq   

0000008004201af2 <page2ppn>:
  8004201af2:	55                   	push   %rbp
  8004201af3:	48 89 e5             	mov    %rsp,%rbp
  8004201af6:	48 83 ec 08          	sub    $0x8,%rsp
  8004201afa:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201afe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201b02:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004201b09:	00 00 00 
  8004201b0c:	48 8b 00             	mov    (%rax),%rax
  8004201b0f:	48 29 c2             	sub    %rax,%rdx
  8004201b12:	48 89 d0             	mov    %rdx,%rax
  8004201b15:	48 c1 f8 04          	sar    $0x4,%rax
  8004201b19:	c9                   	leaveq 
  8004201b1a:	c3                   	retq   

0000008004201b1b <page2pa>:
  8004201b1b:	55                   	push   %rbp
  8004201b1c:	48 89 e5             	mov    %rsp,%rbp
  8004201b1f:	48 83 ec 08          	sub    $0x8,%rsp
  8004201b23:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b2b:	48 89 c7             	mov    %rax,%rdi
  8004201b2e:	48 b8 f2 1a 20 04 80 	movabs $0x8004201af2,%rax
  8004201b35:	00 00 00 
  8004201b38:	ff d0                	callq  *%rax
  8004201b3a:	48 c1 e0 0c          	shl    $0xc,%rax
  8004201b3e:	c9                   	leaveq 
  8004201b3f:	c3                   	retq   

0000008004201b40 <pa2page>:
  8004201b40:	55                   	push   %rbp
  8004201b41:	48 89 e5             	mov    %rsp,%rbp
  8004201b44:	48 83 ec 10          	sub    $0x10,%rsp
  8004201b48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004201b4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201b50:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201b54:	48 89 c2             	mov    %rax,%rdx
  8004201b57:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004201b5e:	00 00 00 
  8004201b61:	48 8b 00             	mov    (%rax),%rax
  8004201b64:	48 39 c2             	cmp    %rax,%rdx
  8004201b67:	72 2a                	jb     8004201b93 <pa2page+0x53>
  8004201b69:	48 ba 48 e1 21 04 80 	movabs $0x800421e148,%rdx
  8004201b70:	00 00 00 
  8004201b73:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004201b78:	48 bf 67 e1 21 04 80 	movabs $0x800421e167,%rdi
  8004201b7f:	00 00 00 
  8004201b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201b87:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004201b8e:	00 00 00 
  8004201b91:	ff d1                	callq  *%rcx
  8004201b93:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004201b9a:	00 00 00 
  8004201b9d:	48 8b 00             	mov    (%rax),%rax
  8004201ba0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004201ba4:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004201ba8:	48 c1 e2 04          	shl    $0x4,%rdx
  8004201bac:	48 01 d0             	add    %rdx,%rax
  8004201baf:	c9                   	leaveq 
  8004201bb0:	c3                   	retq   

0000008004201bb1 <page2kva>:
  8004201bb1:	55                   	push   %rbp
  8004201bb2:	48 89 e5             	mov    %rsp,%rbp
  8004201bb5:	48 83 ec 20          	sub    $0x20,%rsp
  8004201bb9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004201bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004201bc1:	48 89 c7             	mov    %rax,%rdi
  8004201bc4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004201bcb:	00 00 00 
  8004201bce:	ff d0                	callq  *%rax
  8004201bd0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004201bd4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bd8:	48 c1 e8 0c          	shr    $0xc,%rax
  8004201bdc:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004201bdf:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004201be2:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004201be9:	00 00 00 
  8004201bec:	48 8b 00             	mov    (%rax),%rax
  8004201bef:	48 39 c2             	cmp    %rax,%rdx
  8004201bf2:	72 32                	jb     8004201c26 <page2kva+0x75>
  8004201bf4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201bf8:	48 89 c1             	mov    %rax,%rcx
  8004201bfb:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004201c02:	00 00 00 
  8004201c05:	be 62 00 00 00       	mov    $0x62,%esi
  8004201c0a:	48 bf 67 e1 21 04 80 	movabs $0x800421e167,%rdi
  8004201c11:	00 00 00 
  8004201c14:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201c19:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004201c20:	00 00 00 
  8004201c23:	41 ff d0             	callq  *%r8
  8004201c26:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004201c2d:	00 00 00 
  8004201c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004201c34:	48 01 d0             	add    %rdx,%rax
  8004201c37:	c9                   	leaveq 
  8004201c38:	c3                   	retq   

0000008004201c39 <restrictive_type>:
  8004201c39:	55                   	push   %rbp
  8004201c3a:	48 89 e5             	mov    %rsp,%rbp
  8004201c3d:	48 83 ec 08          	sub    $0x8,%rsp
  8004201c41:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004201c44:	89 75 f8             	mov    %esi,-0x8(%rbp)
  8004201c47:	83 7d fc 05          	cmpl   $0x5,-0x4(%rbp)
  8004201c4b:	74 06                	je     8004201c53 <restrictive_type+0x1a>
  8004201c4d:	83 7d f8 05          	cmpl   $0x5,-0x8(%rbp)
  8004201c51:	75 07                	jne    8004201c5a <restrictive_type+0x21>
  8004201c53:	b8 05 00 00 00       	mov    $0x5,%eax
  8004201c58:	eb 3e                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c5a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004201c5e:	74 06                	je     8004201c66 <restrictive_type+0x2d>
  8004201c60:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
  8004201c64:	75 07                	jne    8004201c6d <restrictive_type+0x34>
  8004201c66:	b8 04 00 00 00       	mov    $0x4,%eax
  8004201c6b:	eb 2b                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c6d:	83 7d fc 02          	cmpl   $0x2,-0x4(%rbp)
  8004201c71:	74 06                	je     8004201c79 <restrictive_type+0x40>
  8004201c73:	83 7d f8 02          	cmpl   $0x2,-0x8(%rbp)
  8004201c77:	75 07                	jne    8004201c80 <restrictive_type+0x47>
  8004201c79:	b8 02 00 00 00       	mov    $0x2,%eax
  8004201c7e:	eb 18                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c80:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004201c84:	74 06                	je     8004201c8c <restrictive_type+0x53>
  8004201c86:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
  8004201c8a:	75 07                	jne    8004201c93 <restrictive_type+0x5a>
  8004201c8c:	b8 03 00 00 00       	mov    $0x3,%eax
  8004201c91:	eb 05                	jmp    8004201c98 <restrictive_type+0x5f>
  8004201c93:	b8 01 00 00 00       	mov    $0x1,%eax
  8004201c98:	c9                   	leaveq 
  8004201c99:	c3                   	retq   

0000008004201c9a <nvram_read>:
  8004201c9a:	55                   	push   %rbp
  8004201c9b:	48 89 e5             	mov    %rsp,%rbp
  8004201c9e:	53                   	push   %rbx
  8004201c9f:	48 83 ec 18          	sub    $0x18,%rsp
  8004201ca3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004201ca6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201ca9:	89 c7                	mov    %eax,%edi
  8004201cab:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cb2:	00 00 00 
  8004201cb5:	ff d0                	callq  *%rax
  8004201cb7:	89 c3                	mov    %eax,%ebx
  8004201cb9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201cbc:	83 c0 01             	add    $0x1,%eax
  8004201cbf:	89 c7                	mov    %eax,%edi
  8004201cc1:	48 b8 fb 98 20 04 80 	movabs $0x80042098fb,%rax
  8004201cc8:	00 00 00 
  8004201ccb:	ff d0                	callq  *%rax
  8004201ccd:	c1 e0 08             	shl    $0x8,%eax
  8004201cd0:	09 d8                	or     %ebx,%eax
  8004201cd2:	48 83 c4 18          	add    $0x18,%rsp
  8004201cd6:	5b                   	pop    %rbx
  8004201cd7:	5d                   	pop    %rbp
  8004201cd8:	c3                   	retq   

0000008004201cd9 <multiboot_read>:
  8004201cd9:	55                   	push   %rbp
  8004201cda:	48 89 e5             	mov    %rsp,%rbp
  8004201cdd:	41 54                	push   %r12
  8004201cdf:	53                   	push   %rbx
  8004201ce0:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004201ce7:	48 89 bd 58 ff ff ff 	mov    %rdi,-0xa8(%rbp)
  8004201cee:	48 89 b5 50 ff ff ff 	mov    %rsi,-0xb0(%rbp)
  8004201cf5:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
  8004201cfc:	48 89 e0             	mov    %rsp,%rax
  8004201cff:	49 89 c4             	mov    %rax,%r12
  8004201d02:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d09:	8b 40 30             	mov    0x30(%rax),%eax
  8004201d0c:	89 c0                	mov    %eax,%eax
  8004201d0e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004201d12:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201d19:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201d1c:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201d21:	f7 e2                	mul    %edx
  8004201d23:	89 d0                	mov    %edx,%eax
  8004201d25:	c1 e8 04             	shr    $0x4,%eax
  8004201d28:	89 c0                	mov    %eax,%eax
  8004201d2a:	48 89 c2             	mov    %rax,%rdx
  8004201d2d:	48 83 ea 01          	sub    $0x1,%rdx
  8004201d31:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004201d35:	49 89 c0             	mov    %rax,%r8
  8004201d38:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004201d3e:	48 89 c1             	mov    %rax,%rcx
  8004201d41:	bb 00 00 00 00       	mov    $0x0,%ebx
  8004201d46:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d4a:	48 8d 50 07          	lea    0x7(%rax),%rdx
  8004201d4e:	b8 10 00 00 00       	mov    $0x10,%eax
  8004201d53:	48 83 e8 01          	sub    $0x1,%rax
  8004201d57:	48 01 d0             	add    %rdx,%rax
  8004201d5a:	bb 10 00 00 00       	mov    $0x10,%ebx
  8004201d5f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004201d64:	48 f7 f3             	div    %rbx
  8004201d67:	48 6b c0 10          	imul   $0x10,%rax,%rax
  8004201d6b:	48 29 c4             	sub    %rax,%rsp
  8004201d6e:	48 89 e0             	mov    %rsp,%rax
  8004201d71:	48 83 c0 07          	add    $0x7,%rax
  8004201d75:	48 c1 e8 03          	shr    $0x3,%rax
  8004201d79:	48 c1 e0 03          	shl    $0x3,%rax
  8004201d7d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004201d81:	48 bf 9b e1 21 04 80 	movabs $0x800421e19b,%rdi
  8004201d88:	00 00 00 
  8004201d8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201d90:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201d97:	00 00 00 
  8004201d9a:	ff d2                	callq  *%rdx
  8004201d9c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004201da3:	e9 6c 01 00 00       	jmpq   8004201f14 <multiboot_read+0x23b>
  8004201da8:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201dab:	48 63 d0             	movslq %eax,%rdx
  8004201dae:	48 89 d0             	mov    %rdx,%rax
  8004201db1:	48 01 c0             	add    %rax,%rax
  8004201db4:	48 01 d0             	add    %rdx,%rax
  8004201db7:	48 c1 e0 03          	shl    $0x3,%rax
  8004201dbb:	48 89 c2             	mov    %rax,%rdx
  8004201dbe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004201dc2:	48 01 d0             	add    %rdx,%rax
  8004201dc5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004201dc9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dcd:	8b 40 08             	mov    0x8(%rax),%eax
  8004201dd0:	89 c0                	mov    %eax,%eax
  8004201dd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201dd6:	48 89 c2             	mov    %rax,%rdx
  8004201dd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ddd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201de0:	89 c0                	mov    %eax,%eax
  8004201de2:	48 01 d0             	add    %rdx,%rax
  8004201de5:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004201de9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201ded:	8b 40 10             	mov    0x10(%rax),%eax
  8004201df0:	89 c0                	mov    %eax,%eax
  8004201df2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201df6:	48 89 c2             	mov    %rax,%rdx
  8004201df9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201dfd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201e00:	89 c0                	mov    %eax,%eax
  8004201e02:	48 01 d0             	add    %rdx,%rax
  8004201e05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004201e09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e0d:	8b 70 14             	mov    0x14(%rax),%esi
  8004201e10:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e14:	8b 00                	mov    (%rax),%eax
  8004201e16:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004201e1a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004201e1e:	41 89 f0             	mov    %esi,%r8d
  8004201e21:	89 c6                	mov    %eax,%esi
  8004201e23:	48 bf b0 e1 21 04 80 	movabs $0x800421e1b0,%rdi
  8004201e2a:	00 00 00 
  8004201e2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201e32:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004201e39:	00 00 00 
  8004201e3c:	41 ff d1             	callq  *%r9
  8004201e3f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e43:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e46:	83 f8 05             	cmp    $0x5,%eax
  8004201e49:	77 0b                	ja     8004201e56 <multiboot_read+0x17d>
  8004201e4b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e4f:	8b 40 14             	mov    0x14(%rax),%eax
  8004201e52:	85 c0                	test   %eax,%eax
  8004201e54:	75 0b                	jne    8004201e61 <multiboot_read+0x188>
  8004201e56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004201e5a:	c7 40 14 02 00 00 00 	movl   $0x2,0x14(%rax)
  8004201e61:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
  8004201e68:	e9 85 00 00 00       	jmpq   8004201ef2 <multiboot_read+0x219>
  8004201e6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201e71:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201e74:	48 63 d2             	movslq %edx,%rdx
  8004201e77:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201e7b:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004201e7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e83:	8b 40 08             	mov    0x8(%rax),%eax
  8004201e86:	89 c0                	mov    %eax,%eax
  8004201e88:	48 c1 e0 20          	shl    $0x20,%rax
  8004201e8c:	48 89 c2             	mov    %rax,%rdx
  8004201e8f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004201e93:	8b 40 04             	mov    0x4(%rax),%eax
  8004201e96:	89 c0                	mov    %eax,%eax
  8004201e98:	48 01 d0             	add    %rdx,%rax
  8004201e9b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004201e9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004201ea3:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004201ea7:	76 45                	jbe    8004201eee <multiboot_read+0x215>
  8004201ea9:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201eac:	83 c0 01             	add    $0x1,%eax
  8004201eaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004201eb2:	eb 30                	jmp    8004201ee4 <multiboot_read+0x20b>
  8004201eb4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201eb8:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004201ebb:	48 63 d2             	movslq %edx,%rdx
  8004201ebe:	48 c1 e2 03          	shl    $0x3,%rdx
  8004201ec2:	48 01 c2             	add    %rax,%rdx
  8004201ec5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201ec9:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004201ecc:	48 63 c9             	movslq %ecx,%rcx
  8004201ecf:	48 c1 e1 03          	shl    $0x3,%rcx
  8004201ed3:	48 83 e9 08          	sub    $0x8,%rcx
  8004201ed7:	48 01 c8             	add    %rcx,%rax
  8004201eda:	48 8b 00             	mov    (%rax),%rax
  8004201edd:	48 89 02             	mov    %rax,(%rdx)
  8004201ee0:	83 6d e4 01          	subl   $0x1,-0x1c(%rbp)
  8004201ee4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004201ee7:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004201eea:	75 c8                	jne    8004201eb4 <multiboot_read+0x1db>
  8004201eec:	eb 10                	jmp    8004201efe <multiboot_read+0x225>
  8004201eee:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  8004201ef2:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004201ef5:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004201ef8:	0f 8c 6f ff ff ff    	jl     8004201e6d <multiboot_read+0x194>
  8004201efe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f02:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004201f05:	48 63 d2             	movslq %edx,%rdx
  8004201f08:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004201f0c:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  8004201f10:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004201f14:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f17:	48 63 c8             	movslq %eax,%rcx
  8004201f1a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004201f21:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004201f24:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004201f29:	f7 e2                	mul    %edx
  8004201f2b:	89 d0                	mov    %edx,%eax
  8004201f2d:	c1 e8 04             	shr    $0x4,%eax
  8004201f30:	89 c0                	mov    %eax,%eax
  8004201f32:	48 39 c1             	cmp    %rax,%rcx
  8004201f35:	0f 82 6d fe ff ff    	jb     8004201da8 <multiboot_read+0xcf>
  8004201f3b:	48 bf e7 e1 21 04 80 	movabs $0x800421e1e7,%rdi
  8004201f42:	00 00 00 
  8004201f45:	b8 00 00 00 00       	mov    $0x0,%eax
  8004201f4a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004201f51:	00 00 00 
  8004201f54:	ff d2                	callq  *%rdx
  8004201f56:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
  8004201f5d:	e9 93 01 00 00       	jmpq   80042020f5 <multiboot_read+0x41c>
  8004201f62:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004201f65:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004201f68:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f6c:	48 63 d2             	movslq %edx,%rdx
  8004201f6f:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f73:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004201f77:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004201f7b:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004201f7e:	48 63 d2             	movslq %edx,%rdx
  8004201f81:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004201f85:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004201f89:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f8d:	8b 40 08             	mov    0x8(%rax),%eax
  8004201f90:	89 c0                	mov    %eax,%eax
  8004201f92:	48 c1 e0 20          	shl    $0x20,%rax
  8004201f96:	48 89 c2             	mov    %rax,%rdx
  8004201f99:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201f9d:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fa0:	89 c0                	mov    %eax,%eax
  8004201fa2:	48 01 d0             	add    %rdx,%rax
  8004201fa5:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004201fa9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fad:	8b 40 08             	mov    0x8(%rax),%eax
  8004201fb0:	89 c0                	mov    %eax,%eax
  8004201fb2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fb6:	48 89 c2             	mov    %rax,%rdx
  8004201fb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fbd:	8b 40 04             	mov    0x4(%rax),%eax
  8004201fc0:	89 c0                	mov    %eax,%eax
  8004201fc2:	48 01 d0             	add    %rdx,%rax
  8004201fc5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004201fc9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fcd:	8b 40 10             	mov    0x10(%rax),%eax
  8004201fd0:	89 c0                	mov    %eax,%eax
  8004201fd2:	48 c1 e0 20          	shl    $0x20,%rax
  8004201fd6:	48 89 c2             	mov    %rax,%rdx
  8004201fd9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004201fdd:	8b 40 0c             	mov    0xc(%rax),%eax
  8004201fe0:	89 c0                	mov    %eax,%eax
  8004201fe2:	48 01 d0             	add    %rdx,%rax
  8004201fe5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004201fec:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004201ff0:	8b 40 10             	mov    0x10(%rax),%eax
  8004201ff3:	89 c0                	mov    %eax,%eax
  8004201ff5:	48 c1 e0 20          	shl    $0x20,%rax
  8004201ff9:	48 89 c2             	mov    %rax,%rdx
  8004201ffc:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202000:	8b 40 0c             	mov    0xc(%rax),%eax
  8004202003:	89 c0                	mov    %eax,%eax
  8004202005:	48 01 d0             	add    %rdx,%rax
  8004202008:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800420200f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004202016:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800420201a:	48 01 d0             	add    %rdx,%rax
  800420201d:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  8004202021:	75 7c                	jne    800420209f <multiboot_read+0x3c6>
  8004202023:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202027:	8b 50 14             	mov    0x14(%rax),%edx
  800420202a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420202e:	8b 40 14             	mov    0x14(%rax),%eax
  8004202031:	39 c2                	cmp    %eax,%edx
  8004202033:	75 6a                	jne    800420209f <multiboot_read+0x3c6>
  8004202035:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420203c:	89 c2                	mov    %eax,%edx
  800420203e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202045:	01 c2                	add    %eax,%edx
  8004202047:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420204b:	89 50 0c             	mov    %edx,0xc(%rax)
  800420204e:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004202055:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420205c:	48 01 d0             	add    %rdx,%rax
  800420205f:	48 c1 e8 20          	shr    $0x20,%rax
  8004202063:	89 c2                	mov    %eax,%edx
  8004202065:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202069:	89 50 10             	mov    %edx,0x10(%rax)
  800420206c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004202070:	8b 50 04             	mov    0x4(%rax),%edx
  8004202073:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202077:	89 50 04             	mov    %edx,0x4(%rax)
  800420207a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420207e:	8b 50 08             	mov    0x8(%rax),%edx
  8004202081:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004202085:	89 50 08             	mov    %edx,0x8(%rax)
  8004202088:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420208b:	8d 50 ff             	lea    -0x1(%rax),%edx
  800420208e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202092:	48 63 d2             	movslq %edx,%rdx
  8004202095:	48 c7 04 d0 00 00 00 	movq   $0x0,(%rax,%rdx,8)
  800420209c:	00 
  800420209d:	eb 52                	jmp    80042020f1 <multiboot_read+0x418>
  800420209f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042020a6:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  80042020aa:	48 01 d0             	add    %rdx,%rax
  80042020ad:	48 3b 45 88          	cmp    -0x78(%rbp),%rax
  80042020b1:	76 3e                	jbe    80042020f1 <multiboot_read+0x418>
  80042020b3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020b7:	8b 50 14             	mov    0x14(%rax),%edx
  80042020ba:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020be:	8b 40 14             	mov    0x14(%rax),%eax
  80042020c1:	89 d6                	mov    %edx,%esi
  80042020c3:	89 c7                	mov    %eax,%edi
  80042020c5:	48 b8 39 1c 20 04 80 	movabs $0x8004201c39,%rax
  80042020cc:	00 00 00 
  80042020cf:	ff d0                	callq  *%rax
  80042020d1:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
  80042020d7:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042020db:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020e1:	89 50 14             	mov    %edx,0x14(%rax)
  80042020e4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042020e8:	8b 95 6c ff ff ff    	mov    -0x94(%rbp),%edx
  80042020ee:	89 50 14             	mov    %edx,0x14(%rax)
  80042020f1:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042020f5:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042020f8:	48 63 c8             	movslq %eax,%rcx
  80042020fb:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202102:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202105:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  800420210a:	f7 e2                	mul    %edx
  800420210c:	89 d0                	mov    %edx,%eax
  800420210e:	c1 e8 04             	shr    $0x4,%eax
  8004202111:	89 c0                	mov    %eax,%eax
  8004202113:	48 39 c1             	cmp    %rax,%rcx
  8004202116:	0f 82 46 fe ff ff    	jb     8004201f62 <multiboot_read+0x289>
  800420211c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004202123:	e9 dc 00 00 00       	jmpq   8004202204 <multiboot_read+0x52b>
  8004202128:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420212c:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800420212f:	48 63 d2             	movslq %edx,%rdx
  8004202132:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004202136:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  800420213d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004202144:	00 
  8004202145:	0f 84 b5 00 00 00    	je     8004202200 <multiboot_read+0x527>
  800420214b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202152:	8b 40 14             	mov    0x14(%rax),%eax
  8004202155:	83 f8 01             	cmp    $0x1,%eax
  8004202158:	74 13                	je     800420216d <multiboot_read+0x494>
  800420215a:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202161:	8b 40 14             	mov    0x14(%rax),%eax
  8004202164:	83 f8 03             	cmp    $0x3,%eax
  8004202167:	0f 85 93 00 00 00    	jne    8004202200 <multiboot_read+0x527>
  800420216d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202174:	8b 40 04             	mov    0x4(%rax),%eax
  8004202177:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
  800420217c:	77 49                	ja     80042021c7 <multiboot_read+0x4ee>
  800420217e:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004202185:	8b 40 08             	mov    0x8(%rax),%eax
  8004202188:	85 c0                	test   %eax,%eax
  800420218a:	75 3b                	jne    80042021c7 <multiboot_read+0x4ee>
  800420218c:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004202193:	48 8b 10             	mov    (%rax),%rdx
  8004202196:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420219d:	8b 40 10             	mov    0x10(%rax),%eax
  80042021a0:	89 c0                	mov    %eax,%eax
  80042021a2:	48 c1 e0 20          	shl    $0x20,%rax
  80042021a6:	48 89 c1             	mov    %rax,%rcx
  80042021a9:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021b0:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021b3:	89 c0                	mov    %eax,%eax
  80042021b5:	48 01 c8             	add    %rcx,%rax
  80042021b8:	48 01 c2             	add    %rax,%rdx
  80042021bb:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042021c2:	48 89 10             	mov    %rdx,(%rax)
  80042021c5:	eb 39                	jmp    8004202200 <multiboot_read+0x527>
  80042021c7:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021ce:	48 8b 10             	mov    (%rax),%rdx
  80042021d1:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021d8:	8b 40 10             	mov    0x10(%rax),%eax
  80042021db:	89 c0                	mov    %eax,%eax
  80042021dd:	48 c1 e0 20          	shl    $0x20,%rax
  80042021e1:	48 89 c1             	mov    %rax,%rcx
  80042021e4:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042021eb:	8b 40 0c             	mov    0xc(%rax),%eax
  80042021ee:	89 c0                	mov    %eax,%eax
  80042021f0:	48 01 c8             	add    %rcx,%rax
  80042021f3:	48 01 c2             	add    %rax,%rdx
  80042021f6:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042021fd:	48 89 10             	mov    %rdx,(%rax)
  8004202200:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  8004202204:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202207:	48 63 c8             	movslq %eax,%rcx
  800420220a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004202211:	8b 40 2c             	mov    0x2c(%rax),%eax
  8004202214:	ba ab aa aa aa       	mov    $0xaaaaaaab,%edx
  8004202219:	f7 e2                	mul    %edx
  800420221b:	89 d0                	mov    %edx,%eax
  800420221d:	c1 e8 04             	shr    $0x4,%eax
  8004202220:	89 c0                	mov    %eax,%eax
  8004202222:	48 39 c1             	cmp    %rax,%rcx
  8004202225:	0f 82 fd fe ff ff    	jb     8004202128 <multiboot_read+0x44f>
  800420222b:	4c 89 e4             	mov    %r12,%rsp
  800420222e:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
  8004202232:	5b                   	pop    %rbx
  8004202233:	41 5c                	pop    %r12
  8004202235:	5d                   	pop    %rbp
  8004202236:	c3                   	retq   

0000008004202237 <i386_detect_memory>:
  8004202237:	55                   	push   %rbp
  8004202238:	48 89 e5             	mov    %rsp,%rbp
  800420223b:	48 83 ec 50          	sub    $0x50,%rsp
  800420223f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  8004202246:	00 
  8004202247:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800420224e:	00 
  800420224f:	48 b8 00 70 10 00 00 	movabs $0x107000,%rax
  8004202256:	00 00 00 
  8004202259:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420225d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202261:	48 8b 00             	mov    (%rax),%rax
  8004202264:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202268:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420226d:	74 2d                	je     800420229c <i386_detect_memory+0x65>
  800420226f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202273:	8b 00                	mov    (%rax),%eax
  8004202275:	83 e0 40             	and    $0x40,%eax
  8004202278:	85 c0                	test   %eax,%eax
  800420227a:	74 20                	je     800420229c <i386_detect_memory+0x65>
  800420227c:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
  8004202280:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
  8004202284:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202288:	48 89 ce             	mov    %rcx,%rsi
  800420228b:	48 89 c7             	mov    %rax,%rdi
  800420228e:	48 b8 d9 1c 20 04 80 	movabs $0x8004201cd9,%rax
  8004202295:	00 00 00 
  8004202298:	ff d0                	callq  *%rax
  800420229a:	eb 34                	jmp    80042022d0 <i386_detect_memory+0x99>
  800420229c:	bf 15 00 00 00       	mov    $0x15,%edi
  80042022a1:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022a8:	00 00 00 
  80042022ab:	ff d0                	callq  *%rax
  80042022ad:	c1 e0 0a             	shl    $0xa,%eax
  80042022b0:	48 98                	cltq   
  80042022b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042022b6:	bf 17 00 00 00       	mov    $0x17,%edi
  80042022bb:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  80042022c2:	00 00 00 
  80042022c5:	ff d0                	callq  *%rax
  80042022c7:	c1 e0 0a             	shl    $0xa,%eax
  80042022ca:	48 98                	cltq   
  80042022cc:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042022d0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042022d4:	48 85 c0             	test   %rax,%rax
  80042022d7:	75 35                	jne    800420230e <i386_detect_memory+0xd7>
  80042022d9:	48 b9 e9 e1 21 04 80 	movabs $0x800421e1e9,%rcx
  80042022e0:	00 00 00 
  80042022e3:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042022ea:	00 00 00 
  80042022ed:	be 8b 00 00 00       	mov    $0x8b,%esi
  80042022f2:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042022f9:	00 00 00 
  80042022fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202301:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202308:	00 00 00 
  800420230b:	41 ff d0             	callq  *%r8
  800420230e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004202312:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202316:	48 89 c2             	mov    %rax,%rdx
  8004202319:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  8004202320:	00 00 00 
  8004202323:	48 89 10             	mov    %rdx,(%rax)
  8004202326:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420232a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420232e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202332:	bf 17 00 00 00       	mov    $0x17,%edi
  8004202337:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  800420233e:	00 00 00 
  8004202341:	ff d0                	callq  *%rax
  8004202343:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004202348:	75 2c                	jne    8004202376 <i386_detect_memory+0x13f>
  800420234a:	bf 34 00 00 00       	mov    $0x34,%edi
  800420234f:	48 b8 9a 1c 20 04 80 	movabs $0x8004201c9a,%rax
  8004202356:	00 00 00 
  8004202359:	ff d0                	callq  *%rax
  800420235b:	c1 e0 10             	shl    $0x10,%eax
  800420235e:	48 98                	cltq   
  8004202360:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202368:	48 05 00 00 f0 00    	add    $0xf00000,%rax
  800420236e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202372:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202376:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420237b:	74 1a                	je     8004202397 <i386_detect_memory+0x160>
  800420237d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202381:	48 8d 90 00 01 00 00 	lea    0x100(%rax),%rdx
  8004202388:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420238f:	00 00 00 
  8004202392:	48 89 10             	mov    %rdx,(%rax)
  8004202395:	eb 1a                	jmp    80042023b1 <i386_detect_memory+0x17a>
  8004202397:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  800420239e:	00 00 00 
  80042023a1:	48 8b 10             	mov    (%rax),%rdx
  80042023a4:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042023ab:	00 00 00 
  80042023ae:	48 89 10             	mov    %rdx,(%rax)
  80042023b1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042023b8:	00 00 00 
  80042023bb:	48 8b 30             	mov    (%rax),%rsi
  80042023be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042023c2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023c6:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023ca:	48 89 c1             	mov    %rax,%rcx
  80042023cd:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  80042023d4:	00 00 00 
  80042023d7:	48 8b 00             	mov    (%rax),%rax
  80042023da:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023de:	48 c1 e8 0a          	shr    $0xa,%rax
  80042023e2:	48 89 c2             	mov    %rax,%rdx
  80042023e5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042023ec:	00 00 00 
  80042023ef:	48 8b 00             	mov    (%rax),%rax
  80042023f2:	48 c1 e0 0c          	shl    $0xc,%rax
  80042023f6:	48 c1 e8 14          	shr    $0x14,%rax
  80042023fa:	49 89 f0             	mov    %rsi,%r8
  80042023fd:	48 89 c6             	mov    %rax,%rsi
  8004202400:	48 bf 18 e2 21 04 80 	movabs $0x800421e218,%rdi
  8004202407:	00 00 00 
  800420240a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420240f:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202416:	00 00 00 
  8004202419:	41 ff d1             	callq  *%r9
  800420241c:	48 c7 45 d8 00 00 32 	movq   $0x320000,-0x28(%rbp)
  8004202423:	00 
  8004202424:	48 c7 45 d0 00 c0 ff 	movq   $0x7ffc000,-0x30(%rbp)
  800420242b:	07 
  800420242c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004202430:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202434:	48 c1 e8 14          	shr    $0x14,%rax
  8004202438:	48 89 c1             	mov    %rax,%rcx
  800420243b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420243f:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202443:	48 c1 e8 14          	shr    $0x14,%rax
  8004202447:	48 89 c6             	mov    %rax,%rsi
  800420244a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420244e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202452:	49 89 c8             	mov    %rcx,%r8
  8004202455:	48 89 d1             	mov    %rdx,%rcx
  8004202458:	48 89 f2             	mov    %rsi,%rdx
  800420245b:	48 89 c6             	mov    %rax,%rsi
  800420245e:	48 bf 68 e2 21 04 80 	movabs $0x800421e268,%rdi
  8004202465:	00 00 00 
  8004202468:	b8 00 00 00 00       	mov    $0x0,%eax
  800420246d:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004202474:	00 00 00 
  8004202477:	41 ff d1             	callq  *%r9
  800420247a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420247e:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  8004202482:	48 0f 46 45 d0       	cmovbe -0x30(%rbp),%rax
  8004202487:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420248b:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202492:	00 00 00 
  8004202495:	48 8b 00             	mov    (%rax),%rax
  8004202498:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800420249c:	76 3a                	jbe    80042024d8 <i386_detect_memory+0x2a1>
  800420249e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024a2:	48 8d 90 00 fc ff ff 	lea    -0x400(%rax),%rdx
  80042024a9:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042024b0:	00 00 00 
  80042024b3:	48 89 10             	mov    %rdx,(%rax)
  80042024b6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042024ba:	48 89 c6             	mov    %rax,%rsi
  80042024bd:	48 bf d0 e2 21 04 80 	movabs $0x800421e2d0,%rdi
  80042024c4:	00 00 00 
  80042024c7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042024cc:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042024d3:	00 00 00 
  80042024d6:	ff d2                	callq  *%rdx
  80042024d8:	c9                   	leaveq 
  80042024d9:	c3                   	retq   

00000080042024da <boot_alloc>:
  80042024da:	55                   	push   %rbp
  80042024db:	48 89 e5             	mov    %rsp,%rbp
  80042024de:	48 83 ec 40          	sub    $0x40,%rsp
  80042024e2:	89 7d cc             	mov    %edi,-0x34(%rbp)
  80042024e5:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  80042024ec:	00 00 00 
  80042024ef:	48 8b 00             	mov    (%rax),%rax
  80042024f2:	48 85 c0             	test   %rax,%rax
  80042024f5:	75 4e                	jne    8004202545 <boot_alloc+0x6b>
  80042024f7:	48 c7 45 f8 00 10 00 	movq   $0x1000,-0x8(%rbp)
  80042024fe:	00 
  80042024ff:	48 b8 d0 d5 6d 04 80 	movabs $0x80046dd5d0,%rax
  8004202506:	00 00 00 
  8004202509:	48 8b 10             	mov    (%rax),%rdx
  800420250c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202510:	48 01 d0             	add    %rdx,%rax
  8004202513:	48 83 e8 01          	sub    $0x1,%rax
  8004202517:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420251b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420251f:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202524:	48 f7 75 f8          	divq   -0x8(%rbp)
  8004202528:	48 89 d0             	mov    %rdx,%rax
  800420252b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420252f:	48 29 c2             	sub    %rax,%rdx
  8004202532:	48 89 d0             	mov    %rdx,%rax
  8004202535:	48 89 c2             	mov    %rax,%rdx
  8004202538:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  800420253f:	00 00 00 
  8004202542:	48 89 10             	mov    %rdx,(%rax)
  8004202545:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004202548:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  800420254f:	00 00 00 
  8004202552:	48 8b 00             	mov    (%rax),%rax
  8004202555:	48 01 c2             	add    %rax,%rdx
  8004202558:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  800420255f:	00 00 00 
  8004202562:	48 8b 00             	mov    (%rax),%rax
  8004202565:	48 39 c2             	cmp    %rax,%rdx
  8004202568:	72 2f                	jb     8004202599 <boot_alloc+0xbf>
  800420256a:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  8004202571:	00 00 00 
  8004202574:	48 8b 10             	mov    (%rax),%rdx
  8004202577:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420257a:	48 01 c2             	add    %rax,%rdx
  800420257d:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202584:	00 00 00 
  8004202587:	48 8b 00             	mov    (%rax),%rax
  800420258a:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202590:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202594:	48 39 c2             	cmp    %rax,%rdx
  8004202597:	76 2a                	jbe    80042025c3 <boot_alloc+0xe9>
  8004202599:	48 ba 00 e3 21 04 80 	movabs $0x800421e300,%rdx
  80042025a0:	00 00 00 
  80042025a3:	be f3 00 00 00       	mov    $0xf3,%esi
  80042025a8:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042025af:	00 00 00 
  80042025b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042025b7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042025be:	00 00 00 
  80042025c1:	ff d1                	callq  *%rcx
  80042025c3:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  80042025ca:	00 00 00 
  80042025cd:	48 8b 00             	mov    (%rax),%rax
  80042025d0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042025d4:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  80042025db:	00 
  80042025dc:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  80042025e3:	00 00 00 
  80042025e6:	48 8b 10             	mov    (%rax),%rdx
  80042025e9:	8b 45 cc             	mov    -0x34(%rbp),%eax
  80042025ec:	48 01 d0             	add    %rdx,%rax
  80042025ef:	48 89 c2             	mov    %rax,%rdx
  80042025f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042025f6:	48 01 d0             	add    %rdx,%rax
  80042025f9:	48 83 e8 01          	sub    $0x1,%rax
  80042025fd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202601:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202605:	ba 00 00 00 00       	mov    $0x0,%edx
  800420260a:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420260e:	48 89 d0             	mov    %rdx,%rax
  8004202611:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004202615:	48 29 c2             	sub    %rax,%rdx
  8004202618:	48 89 d0             	mov    %rdx,%rax
  800420261b:	48 89 c2             	mov    %rax,%rdx
  800420261e:	48 b8 48 e2 4d 04 80 	movabs $0x80044de248,%rax
  8004202625:	00 00 00 
  8004202628:	48 89 10             	mov    %rdx,(%rax)
  800420262b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420262f:	c9                   	leaveq 
  8004202630:	c3                   	retq   

0000008004202631 <x64_vm_init>:
  8004202631:	55                   	push   %rbp
  8004202632:	48 89 e5             	mov    %rsp,%rbp
  8004202635:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004202639:	48 b8 37 22 20 04 80 	movabs $0x8004202237,%rax
  8004202640:	00 00 00 
  8004202643:	ff d0                	callq  *%rax
  8004202645:	bf 00 10 00 00       	mov    $0x1000,%edi
  800420264a:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202651:	00 00 00 
  8004202654:	ff d0                	callq  *%rax
  8004202656:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420265a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420265e:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202663:	be 00 00 00 00       	mov    $0x0,%esi
  8004202668:	48 89 c7             	mov    %rax,%rdi
  800420266b:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004202672:	00 00 00 
  8004202675:	ff d0                	callq  *%rax
  8004202677:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420267e:	00 00 00 
  8004202681:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202685:	48 89 10             	mov    %rdx,(%rax)
  8004202688:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420268c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202690:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202697:	00 00 00 
  800420269a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420269e:	77 32                	ja     80042026d2 <x64_vm_init+0xa1>
  80042026a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026a4:	48 89 c1             	mov    %rax,%rcx
  80042026a7:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  80042026ae:	00 00 00 
  80042026b1:	be 18 01 00 00       	mov    $0x118,%esi
  80042026b6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042026bd:	00 00 00 
  80042026c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042026c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042026cc:	00 00 00 
  80042026cf:	41 ff d0             	callq  *%r8
  80042026d2:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042026d9:	ff ff ff 
  80042026dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042026e0:	48 01 c2             	add    %rax,%rdx
  80042026e3:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  80042026ea:	00 00 00 
  80042026ed:	48 89 10             	mov    %rdx,(%rax)
  80042026f0:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042026f7:	00 00 00 
  80042026fa:	48 8b 00             	mov    (%rax),%rax
  80042026fd:	48 c1 e0 04          	shl    $0x4,%rax
  8004202701:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202705:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202709:	89 c7                	mov    %eax,%edi
  800420270b:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202712:	00 00 00 
  8004202715:	ff d0                	callq  *%rax
  8004202717:	48 ba 00 d6 6d 04 80 	movabs $0x80046dd600,%rdx
  800420271e:	00 00 00 
  8004202721:	48 89 02             	mov    %rax,(%rdx)
  8004202724:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800420272b:	00 00 00 
  800420272e:	48 8b 00             	mov    (%rax),%rax
  8004202731:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202735:	be 00 00 00 00       	mov    $0x0,%esi
  800420273a:	48 89 c7             	mov    %rax,%rdi
  800420273d:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004202744:	00 00 00 
  8004202747:	ff d0                	callq  *%rax
  8004202749:	bf 00 a0 05 00       	mov    $0x5a000,%edi
  800420274e:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202755:	00 00 00 
  8004202758:	ff d0                	callq  *%rax
  800420275a:	48 ba 58 e2 4d 04 80 	movabs $0x80044de258,%rdx
  8004202761:	00 00 00 
  8004202764:	48 89 02             	mov    %rax,(%rdx)
  8004202767:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420276e:	00 00 00 
  8004202771:	48 8b 00             	mov    (%rax),%rax
  8004202774:	ba 00 a0 05 00       	mov    $0x5a000,%edx
  8004202779:	be 00 00 00 00       	mov    $0x0,%esi
  800420277e:	48 89 c7             	mov    %rax,%rdi
  8004202781:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004202788:	00 00 00 
  800420278b:	ff d0                	callq  *%rax
  800420278d:	48 b8 eb 2b 20 04 80 	movabs $0x8004202beb,%rax
  8004202794:	00 00 00 
  8004202797:	ff d0                	callq  *%rax
  8004202799:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042027a0:	00 00 00 
  80042027a3:	48 8b 00             	mov    (%rax),%rax
  80042027a6:	48 c1 e0 04          	shl    $0x4,%rax
  80042027aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042027ae:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042027b5:	00 00 00 
  80042027b8:	48 8b 00             	mov    (%rax),%rax
  80042027bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042027bf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042027c6:	00 00 00 
  80042027c9:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042027cd:	77 32                	ja     8004202801 <x64_vm_init+0x1d0>
  80042027cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042027d3:	48 89 c1             	mov    %rax,%rcx
  80042027d6:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  80042027dd:	00 00 00 
  80042027e0:	be 43 01 00 00       	mov    $0x143,%esi
  80042027e5:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042027ec:	00 00 00 
  80042027ef:	b8 00 00 00 00       	mov    $0x0,%eax
  80042027f4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042027fb:	00 00 00 
  80042027fe:	41 ff d0             	callq  *%r8
  8004202801:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202808:	ff ff ff 
  800420280b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420280f:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  8004202813:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420281a:	00 00 00 
  800420281d:	48 8b 00             	mov    (%rax),%rax
  8004202820:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004202824:	41 b8 04 00 00 00    	mov    $0x4,%r8d
  800420282a:	48 be 00 00 a0 00 80 	movabs $0x8000a00000,%rsi
  8004202831:	00 00 00 
  8004202834:	48 89 c7             	mov    %rax,%rdi
  8004202837:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420283e:	00 00 00 
  8004202841:	ff d0                	callq  *%rax
  8004202843:	48 c7 45 d8 00 10 00 	movq   $0x1000,-0x28(%rbp)
  800420284a:	00 
  800420284b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420284f:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  8004202855:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420285d:	ba 00 00 00 00       	mov    $0x0,%edx
  8004202862:	48 f7 75 d8          	divq   -0x28(%rbp)
  8004202866:	48 89 d0             	mov    %rdx,%rax
  8004202869:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420286d:	48 29 c2             	sub    %rax,%rdx
  8004202870:	48 89 d0             	mov    %rdx,%rax
  8004202873:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202877:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420287e:	00 00 00 
  8004202881:	48 8b 00             	mov    (%rax),%rax
  8004202884:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202888:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420288f:	00 00 00 
  8004202892:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004202896:	77 32                	ja     80042028ca <x64_vm_init+0x299>
  8004202898:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420289c:	48 89 c1             	mov    %rax,%rcx
  800420289f:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  80042028a6:	00 00 00 
  80042028a9:	be 51 01 00 00       	mov    $0x151,%esi
  80042028ae:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042028b5:	00 00 00 
  80042028b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042028bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042028c4:	00 00 00 
  80042028c7:	41 ff d0             	callq  *%r8
  80042028ca:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042028d1:	ff ff ff 
  80042028d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042028d8:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042028dc:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042028e3:	00 00 00 
  80042028e6:	48 8b 00             	mov    (%rax),%rax
  80042028e9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042028ed:	41 b8 05 00 00 00    	mov    $0x5,%r8d
  80042028f3:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  80042028fa:	00 00 00 
  80042028fd:	48 89 c7             	mov    %rax,%rdi
  8004202900:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202907:	00 00 00 
  800420290a:	ff d0                	callq  *%rax
  800420290c:	48 b8 00 50 22 04 80 	movabs $0x8004225000,%rax
  8004202913:	00 00 00 
  8004202916:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420291a:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202921:	00 00 00 
  8004202924:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  8004202928:	77 32                	ja     800420295c <x64_vm_init+0x32b>
  800420292a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420292e:	48 89 c1             	mov    %rax,%rcx
  8004202931:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  8004202938:	00 00 00 
  800420293b:	be 62 01 00 00       	mov    $0x162,%esi
  8004202940:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202947:	00 00 00 
  800420294a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420294f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202956:	00 00 00 
  8004202959:	41 ff d0             	callq  *%r8
  800420295c:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202963:	ff ff ff 
  8004202966:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420296a:	48 01 c2             	add    %rax,%rdx
  800420296d:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004202974:	00 00 00 
  8004202977:	48 8b 00             	mov    (%rax),%rax
  800420297a:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202980:	48 89 d1             	mov    %rdx,%rcx
  8004202983:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202988:	48 be 00 00 ff 03 80 	movabs $0x8003ff0000,%rsi
  800420298f:	00 00 00 
  8004202992:	48 89 c7             	mov    %rax,%rdi
  8004202995:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  800420299c:	00 00 00 
  800420299f:	ff d0                	callq  *%rax
  80042029a1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042029a8:	00 00 00 
  80042029ab:	48 8b 00             	mov    (%rax),%rax
  80042029ae:	48 c1 e0 0c          	shl    $0xc,%rax
  80042029b2:	48 89 c2             	mov    %rax,%rdx
  80042029b5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042029bc:	00 00 00 
  80042029bf:	48 8b 00             	mov    (%rax),%rax
  80042029c2:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  80042029c8:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042029cd:	48 be 00 00 00 04 80 	movabs $0x8004000000,%rsi
  80042029d4:	00 00 00 
  80042029d7:	48 89 c7             	mov    %rax,%rdi
  80042029da:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  80042029e1:	00 00 00 
  80042029e4:	ff d0                	callq  *%rax
  80042029e6:	48 b8 00 2b 20 04 80 	movabs $0x8004202b00,%rax
  80042029ed:	00 00 00 
  80042029f0:	ff d0                	callq  *%rax
  80042029f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042029f6:	48 83 c0 08          	add    $0x8,%rax
  80042029fa:	48 8b 00             	mov    (%rax),%rax
  80042029fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a03:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202a07:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a0b:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a0f:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202a12:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202a15:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202a1c:	00 00 00 
  8004202a1f:	48 8b 00             	mov    (%rax),%rax
  8004202a22:	48 39 c2             	cmp    %rax,%rdx
  8004202a25:	72 32                	jb     8004202a59 <x64_vm_init+0x428>
  8004202a27:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a2b:	48 89 c1             	mov    %rax,%rcx
  8004202a2e:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004202a35:	00 00 00 
  8004202a38:	be 82 01 00 00       	mov    $0x182,%esi
  8004202a3d:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202a44:	00 00 00 
  8004202a47:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202a4c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202a53:	00 00 00 
  8004202a56:	41 ff d0             	callq  *%r8
  8004202a59:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202a60:	00 00 00 
  8004202a63:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202a67:	48 01 d0             	add    %rdx,%rax
  8004202a6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  8004202a6e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004202a72:	48 8b 00             	mov    (%rax),%rax
  8004202a75:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004202a7b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004202a7f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202a83:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202a87:	89 45 9c             	mov    %eax,-0x64(%rbp)
  8004202a8a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004202a8d:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202a94:	00 00 00 
  8004202a97:	48 8b 00             	mov    (%rax),%rax
  8004202a9a:	48 39 c2             	cmp    %rax,%rdx
  8004202a9d:	72 32                	jb     8004202ad1 <x64_vm_init+0x4a0>
  8004202a9f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202aa3:	48 89 c1             	mov    %rax,%rcx
  8004202aa6:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004202aad:	00 00 00 
  8004202ab0:	be 83 01 00 00       	mov    $0x183,%esi
  8004202ab5:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202abc:	00 00 00 
  8004202abf:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202ac4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202acb:	00 00 00 
  8004202ace:	41 ff d0             	callq  *%r8
  8004202ad1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202ad8:	00 00 00 
  8004202adb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004202adf:	48 01 d0             	add    %rdx,%rax
  8004202ae2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004202ae6:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  8004202aed:	00 00 00 
  8004202af0:	48 8b 00             	mov    (%rax),%rax
  8004202af3:	48 89 45 88          	mov    %rax,-0x78(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004202af7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004202afb:	0f 22 d8             	mov    %rax,%cr3
  8004202afe:	c9                   	leaveq 
  8004202aff:	c3                   	retq   

0000008004202b00 <mem_init_mp>:
  8004202b00:	55                   	push   %rbp
  8004202b01:	48 89 e5             	mov    %rsp,%rbp
  8004202b04:	48 83 ec 20          	sub    $0x20,%rsp
  8004202b08:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004202b0f:	e9 cb 00 00 00       	jmpq   8004202bdf <mem_init_mp+0xdf>
  8004202b14:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004202b17:	89 d0                	mov    %edx,%eax
  8004202b19:	01 c0                	add    %eax,%eax
  8004202b1b:	01 d0                	add    %edx,%eax
  8004202b1d:	c1 e0 0f             	shl    $0xf,%eax
  8004202b20:	48 98                	cltq   
  8004202b22:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202b29:	00 00 00 
  8004202b2c:	48 29 c2             	sub    %rax,%rdx
  8004202b2f:	48 89 d0             	mov    %rdx,%rax
  8004202b32:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004202b36:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004202b39:	48 98                	cltq   
  8004202b3b:	48 c1 e0 10          	shl    $0x10,%rax
  8004202b3f:	48 89 c2             	mov    %rax,%rdx
  8004202b42:	48 b8 00 00 6e 04 80 	movabs $0x80046e0000,%rax
  8004202b49:	00 00 00 
  8004202b4c:	48 01 d0             	add    %rdx,%rax
  8004202b4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202b53:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202b5a:	00 00 00 
  8004202b5d:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004202b61:	77 32                	ja     8004202b95 <mem_init_mp+0x95>
  8004202b63:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202b67:	48 89 c1             	mov    %rax,%rcx
  8004202b6a:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  8004202b71:	00 00 00 
  8004202b74:	be a6 01 00 00       	mov    $0x1a6,%esi
  8004202b79:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202b80:	00 00 00 
  8004202b83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202b88:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202b8f:	00 00 00 
  8004202b92:	41 ff d0             	callq  *%r8
  8004202b95:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202b9c:	ff ff ff 
  8004202b9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202ba3:	48 01 c2             	add    %rax,%rdx
  8004202ba6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004202baa:	48 8d b0 00 00 ff ff 	lea    -0x10000(%rax),%rsi
  8004202bb1:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004202bb8:	00 00 00 
  8004202bbb:	48 8b 00             	mov    (%rax),%rax
  8004202bbe:	41 b8 03 00 00 00    	mov    $0x3,%r8d
  8004202bc4:	48 89 d1             	mov    %rdx,%rcx
  8004202bc7:	ba 00 00 01 00       	mov    $0x10000,%edx
  8004202bcc:	48 89 c7             	mov    %rax,%rdi
  8004202bcf:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004202bd6:	00 00 00 
  8004202bd9:	ff d0                	callq  *%rax
  8004202bdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004202bdf:	83 7d fc 03          	cmpl   $0x3,-0x4(%rbp)
  8004202be3:	0f 8e 2b ff ff ff    	jle    8004202b14 <mem_init_mp+0x14>
  8004202be9:	c9                   	leaveq 
  8004202bea:	c3                   	retq   

0000008004202beb <page_init>:
  8004202beb:	55                   	push   %rbp
  8004202bec:	48 89 e5             	mov    %rsp,%rbp
  8004202bef:	48 83 ec 50          	sub    $0x50,%rsp
  8004202bf3:	bf 00 00 00 00       	mov    $0x0,%edi
  8004202bf8:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  8004202bff:	00 00 00 
  8004202c02:	ff d0                	callq  *%rax
  8004202c04:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004202c08:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004202c0f:	00 
  8004202c10:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004202c17:	00 
  8004202c18:	e9 65 02 00 00       	jmpq   8004202e82 <page_init+0x297>
  8004202c1d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c24:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202c29:	74 1a                	je     8004202c45 <page_init+0x5a>
  8004202c2b:	48 b8 30 e2 4d 04 80 	movabs $0x80044de230,%rax
  8004202c32:	00 00 00 
  8004202c35:	48 8b 00             	mov    (%rax),%rax
  8004202c38:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202c3c:	73 07                	jae    8004202c45 <page_init+0x5a>
  8004202c3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202c45:	48 83 7d f8 07       	cmpq   $0x7,-0x8(%rbp)
  8004202c4a:	75 07                	jne    8004202c53 <page_init+0x68>
  8004202c4c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202c53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004202c57:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004202c5b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004202c62:	00 00 00 
  8004202c65:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004202c69:	77 32                	ja     8004202c9d <page_init+0xb2>
  8004202c6b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202c6f:	48 89 c1             	mov    %rax,%rcx
  8004202c72:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  8004202c79:	00 00 00 
  8004202c7c:	be d5 01 00 00       	mov    $0x1d5,%esi
  8004202c81:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202c88:	00 00 00 
  8004202c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202c90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202c97:	00 00 00 
  8004202c9a:	41 ff d0             	callq  *%r8
  8004202c9d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004202ca4:	ff ff ff 
  8004202ca7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004202cab:	48 01 d0             	add    %rdx,%rax
  8004202cae:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202cb2:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004202cb6:	77 07                	ja     8004202cbf <page_init+0xd4>
  8004202cb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004202cbf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202cc3:	48 05 00 40 00 08    	add    $0x8004000,%rax
  8004202cc9:	48 c1 e0 0c          	shl    $0xc,%rax
  8004202ccd:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004202cd1:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202cd8:	00 00 00 
  8004202cdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004202cdf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202ce3:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202ce7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004202cea:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004202ced:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202cf4:	00 00 00 
  8004202cf7:	48 8b 00             	mov    (%rax),%rax
  8004202cfa:	48 39 c2             	cmp    %rax,%rdx
  8004202cfd:	72 32                	jb     8004202d31 <page_init+0x146>
  8004202cff:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d03:	48 89 c1             	mov    %rax,%rcx
  8004202d06:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004202d0d:	00 00 00 
  8004202d10:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d15:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202d1c:	00 00 00 
  8004202d1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202d24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202d2b:	00 00 00 
  8004202d2e:	41 ff d0             	callq  *%r8
  8004202d31:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202d38:	00 00 00 
  8004202d3b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004202d3f:	48 01 d0             	add    %rdx,%rax
  8004202d42:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202d46:	0f 87 84 00 00 00    	ja     8004202dd0 <page_init+0x1e5>
  8004202d4c:	48 b8 00 20 10 00 00 	movabs $0x102000,%rax
  8004202d53:	00 00 00 
  8004202d56:	48 05 00 50 00 00    	add    $0x5000,%rax
  8004202d5c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004202d60:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d64:	48 c1 e8 0c          	shr    $0xc,%rax
  8004202d68:	89 45 b4             	mov    %eax,-0x4c(%rbp)
  8004202d6b:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004202d6e:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202d75:	00 00 00 
  8004202d78:	48 8b 00             	mov    (%rax),%rax
  8004202d7b:	48 39 c2             	cmp    %rax,%rdx
  8004202d7e:	72 32                	jb     8004202db2 <page_init+0x1c7>
  8004202d80:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202d84:	48 89 c1             	mov    %rax,%rcx
  8004202d87:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004202d8e:	00 00 00 
  8004202d91:	be d9 01 00 00       	mov    $0x1d9,%esi
  8004202d96:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202d9d:	00 00 00 
  8004202da0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202da5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004202dac:	00 00 00 
  8004202daf:	41 ff d0             	callq  *%r8
  8004202db2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004202db9:	00 00 00 
  8004202dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004202dc0:	48 01 d0             	add    %rdx,%rax
  8004202dc3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004202dc7:	76 07                	jbe    8004202dd0 <page_init+0x1e5>
  8004202dc9:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
  8004202dd0:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202dd7:	00 00 00 
  8004202dda:	48 8b 00             	mov    (%rax),%rax
  8004202ddd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202de1:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202de5:	48 01 c2             	add    %rax,%rdx
  8004202de8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004202deb:	66 89 42 08          	mov    %ax,0x8(%rdx)
  8004202def:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202df6:	00 00 00 
  8004202df9:	48 8b 00             	mov    (%rax),%rax
  8004202dfc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e00:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e04:	48 01 d0             	add    %rdx,%rax
  8004202e07:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202e0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  8004202e12:	75 69                	jne    8004202e7d <page_init+0x292>
  8004202e14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004202e19:	74 21                	je     8004202e3c <page_init+0x251>
  8004202e1b:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202e22:	00 00 00 
  8004202e25:	48 8b 00             	mov    (%rax),%rax
  8004202e28:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e2c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e30:	48 01 c2             	add    %rax,%rdx
  8004202e33:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004202e37:	48 89 10             	mov    %rdx,(%rax)
  8004202e3a:	eb 25                	jmp    8004202e61 <page_init+0x276>
  8004202e3c:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202e43:	00 00 00 
  8004202e46:	48 8b 00             	mov    (%rax),%rax
  8004202e49:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e4d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e51:	48 01 c2             	add    %rax,%rdx
  8004202e54:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202e5b:	00 00 00 
  8004202e5e:	48 89 10             	mov    %rdx,(%rax)
  8004202e61:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004202e68:	00 00 00 
  8004202e6b:	48 8b 00             	mov    (%rax),%rax
  8004202e6e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202e72:	48 c1 e2 04          	shl    $0x4,%rdx
  8004202e76:	48 01 d0             	add    %rdx,%rax
  8004202e79:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004202e7d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004202e82:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004202e89:	00 00 00 
  8004202e8c:	48 8b 00             	mov    (%rax),%rax
  8004202e8f:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004202e93:	0f 82 84 fd ff ff    	jb     8004202c1d <page_init+0x32>
  8004202e99:	c9                   	leaveq 
  8004202e9a:	c3                   	retq   

0000008004202e9b <page_alloc>:
  8004202e9b:	55                   	push   %rbp
  8004202e9c:	48 89 e5             	mov    %rsp,%rbp
  8004202e9f:	48 83 ec 20          	sub    $0x20,%rsp
  8004202ea3:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004202ea6:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202ead:	00 00 00 
  8004202eb0:	48 8b 00             	mov    (%rax),%rax
  8004202eb3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004202eb7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004202ebc:	74 5e                	je     8004202f1c <page_alloc+0x81>
  8004202ebe:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202ec5:	00 00 00 
  8004202ec8:	48 8b 00             	mov    (%rax),%rax
  8004202ecb:	48 8b 10             	mov    (%rax),%rdx
  8004202ece:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202ed5:	00 00 00 
  8004202ed8:	48 89 10             	mov    %rdx,(%rax)
  8004202edb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202edf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004202ee6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004202ee9:	83 e0 01             	and    $0x1,%eax
  8004202eec:	85 c0                	test   %eax,%eax
  8004202eee:	74 2c                	je     8004202f1c <page_alloc+0x81>
  8004202ef0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ef4:	48 89 c7             	mov    %rax,%rdi
  8004202ef7:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004202efe:	00 00 00 
  8004202f01:	ff d0                	callq  *%rax
  8004202f03:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004202f08:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f0d:	48 89 c7             	mov    %rax,%rdi
  8004202f10:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004202f17:	00 00 00 
  8004202f1a:	ff d0                	callq  *%rax
  8004202f1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f20:	c9                   	leaveq 
  8004202f21:	c3                   	retq   

0000008004202f22 <page_initpp>:
  8004202f22:	55                   	push   %rbp
  8004202f23:	48 89 e5             	mov    %rsp,%rbp
  8004202f26:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f2a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f2e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f32:	ba 10 00 00 00       	mov    $0x10,%edx
  8004202f37:	be 00 00 00 00       	mov    $0x0,%esi
  8004202f3c:	48 89 c7             	mov    %rax,%rdi
  8004202f3f:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004202f46:	00 00 00 
  8004202f49:	ff d0                	callq  *%rax
  8004202f4b:	c9                   	leaveq 
  8004202f4c:	c3                   	retq   

0000008004202f4d <page_free>:
  8004202f4d:	55                   	push   %rbp
  8004202f4e:	48 89 e5             	mov    %rsp,%rbp
  8004202f51:	48 83 ec 10          	sub    $0x10,%rsp
  8004202f55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202f59:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f5d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202f61:	66 85 c0             	test   %ax,%ax
  8004202f64:	75 0c                	jne    8004202f72 <page_free+0x25>
  8004202f66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202f6a:	48 8b 00             	mov    (%rax),%rax
  8004202f6d:	48 85 c0             	test   %rax,%rax
  8004202f70:	74 2c                	je     8004202f9e <page_free+0x51>
  8004202f72:	48 ba 50 e3 21 04 80 	movabs $0x800421e350,%rdx
  8004202f79:	00 00 00 
  8004202f7c:	be 3d 02 00 00       	mov    $0x23d,%esi
  8004202f81:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004202f88:	00 00 00 
  8004202f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004202f90:	48 b9 00 06 20 04 80 	movabs $0x8004200600,%rcx
  8004202f97:	00 00 00 
  8004202f9a:	ff d1                	callq  *%rcx
  8004202f9c:	eb 2f                	jmp    8004202fcd <page_free+0x80>
  8004202f9e:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202fa5:	00 00 00 
  8004202fa8:	48 8b 10             	mov    (%rax),%rdx
  8004202fab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202faf:	48 89 10             	mov    %rdx,(%rax)
  8004202fb2:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004202fb9:	00 00 00 
  8004202fbc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004202fc0:	48 89 10             	mov    %rdx,(%rax)
  8004202fc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fc7:	66 c7 40 08 00 00    	movw   $0x0,0x8(%rax)
  8004202fcd:	c9                   	leaveq 
  8004202fce:	c3                   	retq   

0000008004202fcf <page_decref>:
  8004202fcf:	55                   	push   %rbp
  8004202fd0:	48 89 e5             	mov    %rsp,%rbp
  8004202fd3:	48 83 ec 10          	sub    $0x10,%rsp
  8004202fd7:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004202fdb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fdf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202fe3:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004202fe6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fea:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004202fee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202ff2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004202ff6:	66 85 c0             	test   %ax,%ax
  8004202ff9:	75 13                	jne    800420300e <page_decref+0x3f>
  8004202ffb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004202fff:	48 89 c7             	mov    %rax,%rdi
  8004203002:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004203009:	00 00 00 
  800420300c:	ff d0                	callq  *%rax
  800420300e:	c9                   	leaveq 
  800420300f:	c3                   	retq   

0000008004203010 <pml4e_walk>:
  8004203010:	55                   	push   %rbp
  8004203011:	48 89 e5             	mov    %rsp,%rbp
  8004203014:	53                   	push   %rbx
  8004203015:	48 83 ec 68          	sub    $0x68,%rsp
  8004203019:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420301d:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004203021:	89 55 9c             	mov    %edx,-0x64(%rbp)
  8004203024:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004203029:	0f 84 4e 02 00 00    	je     800420327d <pml4e_walk+0x26d>
  800420302f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203033:	48 c1 e8 27          	shr    $0x27,%rax
  8004203037:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420303c:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203043:	00 
  8004203044:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203048:	48 01 d0             	add    %rdx,%rax
  800420304b:	48 8b 00             	mov    (%rax),%rax
  800420304e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203056:	83 e0 01             	and    $0x1,%eax
  8004203059:	48 85 c0             	test   %rax,%rax
  800420305c:	0f 85 7f 01 00 00    	jne    80042031e1 <pml4e_walk+0x1d1>
  8004203062:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  8004203066:	0f 84 75 01 00 00    	je     80042031e1 <pml4e_walk+0x1d1>
  800420306c:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203073:	00 
  8004203074:	bf 01 00 00 00       	mov    $0x1,%edi
  8004203079:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203080:	00 00 00 
  8004203083:	ff d0                	callq  *%rax
  8004203085:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203089:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420308e:	0f 84 43 01 00 00    	je     80042031d7 <pml4e_walk+0x1c7>
  8004203094:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203098:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420309c:	8d 50 01             	lea    0x1(%rax),%edx
  800420309f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030a3:	66 89 50 08          	mov    %dx,0x8(%rax)
  80042030a7:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030ab:	48 c1 e8 27          	shr    $0x27,%rax
  80042030af:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030b4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030bb:	00 
  80042030bc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030c0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042030c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042030c8:	48 89 c7             	mov    %rax,%rdi
  80042030cb:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042030d2:	00 00 00 
  80042030d5:	ff d0                	callq  *%rax
  80042030d7:	48 83 c8 07          	or     $0x7,%rax
  80042030db:	48 89 03             	mov    %rax,(%rbx)
  80042030de:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042030e2:	48 c1 e8 27          	shr    $0x27,%rax
  80042030e6:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042030eb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042030f2:	00 
  80042030f3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042030f7:	48 01 d0             	add    %rdx,%rax
  80042030fa:	48 8b 00             	mov    (%rax),%rax
  80042030fd:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203103:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203107:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420310b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420310f:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203112:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203115:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420311c:	00 00 00 
  800420311f:	48 8b 00             	mov    (%rax),%rax
  8004203122:	48 39 c2             	cmp    %rax,%rdx
  8004203125:	72 32                	jb     8004203159 <pml4e_walk+0x149>
  8004203127:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420312b:	48 89 c1             	mov    %rax,%rcx
  800420312e:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004203135:	00 00 00 
  8004203138:	be 79 02 00 00       	mov    $0x279,%esi
  800420313d:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203144:	00 00 00 
  8004203147:	b8 00 00 00 00       	mov    $0x0,%eax
  800420314c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203153:	00 00 00 
  8004203156:	41 ff d0             	callq  *%r8
  8004203159:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203160:	00 00 00 
  8004203163:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203167:	48 01 d0             	add    %rdx,%rax
  800420316a:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420316d:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203171:	48 89 ce             	mov    %rcx,%rsi
  8004203174:	48 89 c7             	mov    %rax,%rdi
  8004203177:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  800420317e:	00 00 00 
  8004203181:	ff d0                	callq  *%rax
  8004203183:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203187:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420318c:	74 09                	je     8004203197 <pml4e_walk+0x187>
  800420318e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203192:	e9 eb 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  8004203197:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420319b:	48 c1 e8 27          	shr    $0x27,%rax
  800420319f:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042031a4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042031ab:	00 
  80042031ac:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042031b0:	48 01 d0             	add    %rdx,%rax
  80042031b3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042031ba:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042031be:	48 89 c7             	mov    %rax,%rdi
  80042031c1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042031c8:	00 00 00 
  80042031cb:	ff d0                	callq  *%rax
  80042031cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031d2:	e9 ab 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042031dc:	e9 a1 00 00 00       	jmpq   8004203282 <pml4e_walk+0x272>
  80042031e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031e5:	83 e0 01             	and    $0x1,%eax
  80042031e8:	48 85 c0             	test   %rax,%rax
  80042031eb:	0f 84 8c 00 00 00    	je     800420327d <pml4e_walk+0x26d>
  80042031f1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042031f5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042031fb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  80042031ff:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203203:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203207:	89 45 bc             	mov    %eax,-0x44(%rbp)
  800420320a:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420320d:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203214:	00 00 00 
  8004203217:	48 8b 00             	mov    (%rax),%rax
  800420321a:	48 39 c2             	cmp    %rax,%rdx
  800420321d:	72 32                	jb     8004203251 <pml4e_walk+0x241>
  800420321f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004203223:	48 89 c1             	mov    %rax,%rcx
  8004203226:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  800420322d:	00 00 00 
  8004203230:	be 83 02 00 00       	mov    $0x283,%esi
  8004203235:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420323c:	00 00 00 
  800420323f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203244:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420324b:	00 00 00 
  800420324e:	41 ff d0             	callq  *%r8
  8004203251:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203258:	00 00 00 
  800420325b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420325f:	48 01 d0             	add    %rdx,%rax
  8004203262:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004203265:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004203269:	48 89 ce             	mov    %rcx,%rsi
  800420326c:	48 89 c7             	mov    %rax,%rdi
  800420326f:	48 b8 89 32 20 04 80 	movabs $0x8004203289,%rax
  8004203276:	00 00 00 
  8004203279:	ff d0                	callq  *%rax
  800420327b:	eb 05                	jmp    8004203282 <pml4e_walk+0x272>
  800420327d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203282:	48 83 c4 68          	add    $0x68,%rsp
  8004203286:	5b                   	pop    %rbx
  8004203287:	5d                   	pop    %rbp
  8004203288:	c3                   	retq   

0000008004203289 <pdpe_walk>:
  8004203289:	55                   	push   %rbp
  800420328a:	48 89 e5             	mov    %rsp,%rbp
  800420328d:	53                   	push   %rbx
  800420328e:	48 83 ec 68          	sub    $0x68,%rsp
  8004203292:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203296:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420329a:	89 55 9c             	mov    %edx,-0x64(%rbp)
  800420329d:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  80042032a2:	0f 84 4e 02 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  80042032a8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042032ac:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042032b0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042032b5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042032bc:	00 
  80042032bd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042032c1:	48 01 d0             	add    %rdx,%rax
  80042032c4:	48 8b 00             	mov    (%rax),%rax
  80042032c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042032cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042032cf:	83 e0 01             	and    $0x1,%eax
  80042032d2:	48 85 c0             	test   %rax,%rax
  80042032d5:	0f 85 7f 01 00 00    	jne    800420345a <pdpe_walk+0x1d1>
  80042032db:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  80042032df:	0f 84 75 01 00 00    	je     800420345a <pdpe_walk+0x1d1>
  80042032e5:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  80042032ec:	00 
  80042032ed:	bf 01 00 00 00       	mov    $0x1,%edi
  80042032f2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042032f9:	00 00 00 
  80042032fc:	ff d0                	callq  *%rax
  80042032fe:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203302:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203307:	0f 84 43 01 00 00    	je     8004203450 <pdpe_walk+0x1c7>
  800420330d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203311:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203315:	8d 50 01             	lea    0x1(%rax),%edx
  8004203318:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420331c:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203320:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203324:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203328:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420332d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203334:	00 
  8004203335:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203339:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  800420333d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203341:	48 89 c7             	mov    %rax,%rdi
  8004203344:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420334b:	00 00 00 
  800420334e:	ff d0                	callq  *%rax
  8004203350:	48 83 c8 07          	or     $0x7,%rax
  8004203354:	48 89 03             	mov    %rax,(%rbx)
  8004203357:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420335b:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420335f:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203364:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420336b:	00 
  800420336c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203370:	48 01 d0             	add    %rdx,%rax
  8004203373:	48 8b 00             	mov    (%rax),%rax
  8004203376:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420337c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203380:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203384:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203388:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420338b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420338e:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203395:	00 00 00 
  8004203398:	48 8b 00             	mov    (%rax),%rax
  800420339b:	48 39 c2             	cmp    %rax,%rdx
  800420339e:	72 32                	jb     80042033d2 <pdpe_walk+0x149>
  80042033a0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033a4:	48 89 c1             	mov    %rax,%rcx
  80042033a7:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042033ae:	00 00 00 
  80042033b1:	be 9c 02 00 00       	mov    $0x29c,%esi
  80042033b6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042033bd:	00 00 00 
  80042033c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042033c5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042033cc:	00 00 00 
  80042033cf:	41 ff d0             	callq  *%r8
  80042033d2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042033d9:	00 00 00 
  80042033dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042033e0:	48 01 d0             	add    %rdx,%rax
  80042033e3:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042033e6:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042033ea:	48 89 ce             	mov    %rcx,%rsi
  80042033ed:	48 89 c7             	mov    %rax,%rdi
  80042033f0:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042033f7:	00 00 00 
  80042033fa:	ff d0                	callq  *%rax
  80042033fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203400:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004203405:	74 09                	je     8004203410 <pdpe_walk+0x187>
  8004203407:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420340b:	e9 eb 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203410:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004203414:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203418:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420341d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203424:	00 
  8004203425:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203429:	48 01 d0             	add    %rdx,%rax
  800420342c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203433:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203437:	48 89 c7             	mov    %rax,%rdi
  800420343a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203441:	00 00 00 
  8004203444:	ff d0                	callq  *%rax
  8004203446:	b8 00 00 00 00       	mov    $0x0,%eax
  800420344b:	e9 ab 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  8004203450:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203455:	e9 a1 00 00 00       	jmpq   80042034fb <pdpe_walk+0x272>
  800420345a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420345e:	83 e0 01             	and    $0x1,%eax
  8004203461:	48 85 c0             	test   %rax,%rax
  8004203464:	0f 84 8c 00 00 00    	je     80042034f6 <pdpe_walk+0x26d>
  800420346a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420346e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203474:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004203478:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420347c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203480:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004203483:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004203486:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420348d:	00 00 00 
  8004203490:	48 8b 00             	mov    (%rax),%rax
  8004203493:	48 39 c2             	cmp    %rax,%rdx
  8004203496:	72 32                	jb     80042034ca <pdpe_walk+0x241>
  8004203498:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420349c:	48 89 c1             	mov    %rax,%rcx
  800420349f:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042034a6:	00 00 00 
  80042034a9:	be a6 02 00 00       	mov    $0x2a6,%esi
  80042034ae:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042034b5:	00 00 00 
  80042034b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042034c4:	00 00 00 
  80042034c7:	41 ff d0             	callq  *%r8
  80042034ca:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042034d1:	00 00 00 
  80042034d4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042034d8:	48 01 d0             	add    %rdx,%rax
  80042034db:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042034de:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042034e2:	48 89 ce             	mov    %rcx,%rsi
  80042034e5:	48 89 c7             	mov    %rax,%rdi
  80042034e8:	48 b8 02 35 20 04 80 	movabs $0x8004203502,%rax
  80042034ef:	00 00 00 
  80042034f2:	ff d0                	callq  *%rax
  80042034f4:	eb 05                	jmp    80042034fb <pdpe_walk+0x272>
  80042034f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042034fb:	48 83 c4 68          	add    $0x68,%rsp
  80042034ff:	5b                   	pop    %rbx
  8004203500:	5d                   	pop    %rbp
  8004203501:	c3                   	retq   

0000008004203502 <pgdir_walk>:
  8004203502:	55                   	push   %rbp
  8004203503:	48 89 e5             	mov    %rsp,%rbp
  8004203506:	53                   	push   %rbx
  8004203507:	48 83 ec 58          	sub    $0x58,%rsp
  800420350b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420350f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203513:	89 55 ac             	mov    %edx,-0x54(%rbp)
  8004203516:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  800420351b:	0f 84 fd 01 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203521:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203525:	48 c1 e8 15          	shr    $0x15,%rax
  8004203529:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420352e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203535:	00 
  8004203536:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420353a:	48 01 d0             	add    %rdx,%rax
  800420353d:	48 8b 00             	mov    (%rax),%rax
  8004203540:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203544:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203548:	83 e0 01             	and    $0x1,%eax
  800420354b:	48 85 c0             	test   %rax,%rax
  800420354e:	0f 85 2f 01 00 00    	jne    8004203683 <pgdir_walk+0x181>
  8004203554:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004203558:	0f 84 25 01 00 00    	je     8004203683 <pgdir_walk+0x181>
  800420355e:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004203565:	00 
  8004203566:	bf 01 00 00 00       	mov    $0x1,%edi
  800420356b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004203572:	00 00 00 
  8004203575:	ff d0                	callq  *%rax
  8004203577:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420357b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004203580:	0f 84 f3 00 00 00    	je     8004203679 <pgdir_walk+0x177>
  8004203586:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420358a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420358e:	8d 50 01             	lea    0x1(%rax),%edx
  8004203591:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203595:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203599:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420359d:	48 c1 e8 15          	shr    $0x15,%rax
  80042035a1:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035a6:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035ad:	00 
  80042035ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035b2:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  80042035b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042035ba:	48 89 c7             	mov    %rax,%rdi
  80042035bd:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042035c4:	00 00 00 
  80042035c7:	ff d0                	callq  *%rax
  80042035c9:	48 83 c8 07          	or     $0x7,%rax
  80042035cd:	48 89 03             	mov    %rax,(%rbx)
  80042035d0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035d4:	48 c1 e8 0c          	shr    $0xc,%rax
  80042035d8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035dd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042035e4:	00 
  80042035e5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042035e9:	48 c1 e8 15          	shr    $0x15,%rax
  80042035ed:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042035f2:	48 8d 0c c5 00 00 00 	lea    0x0(,%rax,8),%rcx
  80042035f9:	00 
  80042035fa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042035fe:	48 01 c8             	add    %rcx,%rax
  8004203601:	48 8b 00             	mov    (%rax),%rax
  8004203604:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420360a:	48 01 d0             	add    %rdx,%rax
  800420360d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203611:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203615:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203619:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  800420361c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  800420361f:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203626:	00 00 00 
  8004203629:	48 8b 00             	mov    (%rax),%rax
  800420362c:	48 39 c2             	cmp    %rax,%rdx
  800420362f:	72 32                	jb     8004203663 <pgdir_walk+0x161>
  8004203631:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203635:	48 89 c1             	mov    %rax,%rcx
  8004203638:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  800420363f:	00 00 00 
  8004203642:	be be 02 00 00       	mov    $0x2be,%esi
  8004203647:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420364e:	00 00 00 
  8004203651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203656:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420365d:	00 00 00 
  8004203660:	41 ff d0             	callq  *%r8
  8004203663:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420366a:	00 00 00 
  800420366d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203671:	48 01 d0             	add    %rdx,%rax
  8004203674:	e9 aa 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203679:	b8 00 00 00 00       	mov    $0x0,%eax
  800420367e:	e9 a0 00 00 00       	jmpq   8004203723 <pgdir_walk+0x221>
  8004203683:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203687:	83 e0 01             	and    $0x1,%eax
  800420368a:	48 85 c0             	test   %rax,%rax
  800420368d:	0f 84 8b 00 00 00    	je     800420371e <pgdir_walk+0x21c>
  8004203693:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203697:	48 c1 e8 0c          	shr    $0xc,%rax
  800420369b:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042036a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042036a7:	00 
  80042036a8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042036ac:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042036b2:	48 01 d0             	add    %rdx,%rax
  80042036b5:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042036b9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036bd:	48 c1 e8 0c          	shr    $0xc,%rax
  80042036c1:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042036c4:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042036c7:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042036ce:	00 00 00 
  80042036d1:	48 8b 00             	mov    (%rax),%rax
  80042036d4:	48 39 c2             	cmp    %rax,%rdx
  80042036d7:	72 32                	jb     800420370b <pgdir_walk+0x209>
  80042036d9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042036dd:	48 89 c1             	mov    %rax,%rcx
  80042036e0:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042036e7:	00 00 00 
  80042036ea:	be c3 02 00 00       	mov    $0x2c3,%esi
  80042036ef:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042036f6:	00 00 00 
  80042036f9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042036fe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203705:	00 00 00 
  8004203708:	41 ff d0             	callq  *%r8
  800420370b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203712:	00 00 00 
  8004203715:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203719:	48 01 d0             	add    %rdx,%rax
  800420371c:	eb 05                	jmp    8004203723 <pgdir_walk+0x221>
  800420371e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203723:	48 83 c4 58          	add    $0x58,%rsp
  8004203727:	5b                   	pop    %rbx
  8004203728:	5d                   	pop    %rbp
  8004203729:	c3                   	retq   

000000800420372a <boot_map_region>:
  800420372a:	55                   	push   %rbp
  800420372b:	48 89 e5             	mov    %rsp,%rbp
  800420372e:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004203732:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004203736:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420373a:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420373e:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  8004203742:	44 89 45 8c          	mov    %r8d,-0x74(%rbp)
  8004203746:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800420374d:	00 
  800420374e:	e9 aa 02 00 00       	jmpq   80042039fd <boot_map_region+0x2d3>
  8004203753:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203757:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420375b:	48 01 d0             	add    %rdx,%rax
  800420375e:	48 89 c1             	mov    %rax,%rcx
  8004203761:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203765:	ba 01 00 00 00       	mov    $0x1,%edx
  800420376a:	48 89 ce             	mov    %rcx,%rsi
  800420376d:	48 89 c7             	mov    %rax,%rdi
  8004203770:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203777:	00 00 00 
  800420377a:	ff d0                	callq  *%rax
  800420377c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203780:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203784:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  8004203788:	48 01 d0             	add    %rdx,%rax
  800420378b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420378f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004203794:	74 23                	je     80042037b9 <boot_map_region+0x8f>
  8004203796:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420379a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042037a0:	48 89 c2             	mov    %rax,%rdx
  80042037a3:	8b 45 8c             	mov    -0x74(%rbp),%eax
  80042037a6:	48 98                	cltq   
  80042037a8:	48 09 d0             	or     %rdx,%rax
  80042037ab:	48 83 c8 01          	or     $0x1,%rax
  80042037af:	48 89 c2             	mov    %rax,%rdx
  80042037b2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042037b6:	48 89 10             	mov    %rdx,(%rax)
  80042037b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042037bd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042037c1:	48 01 d0             	add    %rdx,%rax
  80042037c4:	48 c1 e8 27          	shr    $0x27,%rax
  80042037c8:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042037cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042037d4:	00 
  80042037d5:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042037d9:	48 01 d0             	add    %rdx,%rax
  80042037dc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042037e0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042037e4:	48 01 ca             	add    %rcx,%rdx
  80042037e7:	48 c1 ea 27          	shr    $0x27,%rdx
  80042037eb:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042037f1:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042037f8:	00 
  80042037f9:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042037fd:	48 01 ca             	add    %rcx,%rdx
  8004203800:	48 8b 0a             	mov    (%rdx),%rcx
  8004203803:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004203806:	48 63 d2             	movslq %edx,%rdx
  8004203809:	48 09 ca             	or     %rcx,%rdx
  800420380c:	48 83 ca 01          	or     $0x1,%rdx
  8004203810:	48 89 10             	mov    %rdx,(%rax)
  8004203813:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203817:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420381b:	48 01 d0             	add    %rdx,%rax
  800420381e:	48 c1 e8 27          	shr    $0x27,%rax
  8004203822:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203827:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420382e:	00 
  800420382f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203833:	48 01 d0             	add    %rdx,%rax
  8004203836:	48 8b 00             	mov    (%rax),%rax
  8004203839:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420383f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203843:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203847:	48 c1 e8 0c          	shr    $0xc,%rax
  800420384b:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420384e:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004203851:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203858:	00 00 00 
  800420385b:	48 8b 00             	mov    (%rax),%rax
  800420385e:	48 39 c2             	cmp    %rax,%rdx
  8004203861:	72 32                	jb     8004203895 <boot_map_region+0x16b>
  8004203863:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203867:	48 89 c1             	mov    %rax,%rcx
  800420386a:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004203871:	00 00 00 
  8004203874:	be e6 02 00 00       	mov    $0x2e6,%esi
  8004203879:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203880:	00 00 00 
  8004203883:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203888:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420388f:	00 00 00 
  8004203892:	41 ff d0             	callq  *%r8
  8004203895:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420389c:	00 00 00 
  800420389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042038a3:	48 01 d0             	add    %rdx,%rax
  80042038a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042038aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042038ae:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042038b2:	48 01 d0             	add    %rdx,%rax
  80042038b5:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042038b9:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042038be:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042038c5:	00 
  80042038c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042038ca:	48 01 d0             	add    %rdx,%rax
  80042038cd:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042038d1:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042038d5:	48 01 ca             	add    %rcx,%rdx
  80042038d8:	48 c1 ea 1e          	shr    $0x1e,%rdx
  80042038dc:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042038e2:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042038e9:	00 
  80042038ea:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042038ee:	48 01 ca             	add    %rcx,%rdx
  80042038f1:	48 8b 0a             	mov    (%rdx),%rcx
  80042038f4:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042038f7:	48 63 d2             	movslq %edx,%rdx
  80042038fa:	48 09 ca             	or     %rcx,%rdx
  80042038fd:	48 83 ca 01          	or     $0x1,%rdx
  8004203901:	48 89 10             	mov    %rdx,(%rax)
  8004203904:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203908:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800420390c:	48 01 d0             	add    %rdx,%rax
  800420390f:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203913:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203918:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420391f:	00 
  8004203920:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203924:	48 01 d0             	add    %rdx,%rax
  8004203927:	48 8b 00             	mov    (%rax),%rax
  800420392a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203930:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203934:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203938:	48 c1 e8 0c          	shr    $0xc,%rax
  800420393c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800420393f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004203942:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203949:	00 00 00 
  800420394c:	48 8b 00             	mov    (%rax),%rax
  800420394f:	48 39 c2             	cmp    %rax,%rdx
  8004203952:	72 32                	jb     8004203986 <boot_map_region+0x25c>
  8004203954:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203958:	48 89 c1             	mov    %rax,%rcx
  800420395b:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004203962:	00 00 00 
  8004203965:	be e8 02 00 00       	mov    $0x2e8,%esi
  800420396a:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203971:	00 00 00 
  8004203974:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203979:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203980:	00 00 00 
  8004203983:	41 ff d0             	callq  *%r8
  8004203986:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420398d:	00 00 00 
  8004203990:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203994:	48 01 d0             	add    %rdx,%rax
  8004203997:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420399b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420399f:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042039a3:	48 01 d0             	add    %rdx,%rax
  80042039a6:	48 c1 e8 15          	shr    $0x15,%rax
  80042039aa:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042039af:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042039b6:	00 
  80042039b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042039bb:	48 01 d0             	add    %rdx,%rax
  80042039be:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042039c2:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042039c6:	48 01 ca             	add    %rcx,%rdx
  80042039c9:	48 c1 ea 15          	shr    $0x15,%rdx
  80042039cd:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  80042039d3:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  80042039da:	00 
  80042039db:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042039df:	48 01 ca             	add    %rcx,%rdx
  80042039e2:	48 8b 0a             	mov    (%rdx),%rcx
  80042039e5:	8b 55 8c             	mov    -0x74(%rbp),%edx
  80042039e8:	48 63 d2             	movslq %edx,%rdx
  80042039eb:	48 09 ca             	or     %rcx,%rdx
  80042039ee:	48 83 ca 01          	or     $0x1,%rdx
  80042039f2:	48 89 10             	mov    %rdx,(%rax)
  80042039f5:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042039fc:	00 
  80042039fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203a01:	48 3b 45 98          	cmp    -0x68(%rbp),%rax
  8004203a05:	0f 82 48 fd ff ff    	jb     8004203753 <boot_map_region+0x29>
  8004203a0b:	c9                   	leaveq 
  8004203a0c:	c3                   	retq   

0000008004203a0d <page_insert>:
  8004203a0d:	55                   	push   %rbp
  8004203a0e:	48 89 e5             	mov    %rsp,%rbp
  8004203a11:	48 83 ec 60          	sub    $0x60,%rsp
  8004203a15:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004203a19:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004203a1d:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004203a21:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
  8004203a24:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004203a29:	0f 84 47 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a2f:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  8004203a34:	0f 84 3c 03 00 00    	je     8004203d76 <page_insert+0x369>
  8004203a3a:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004203a3e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a42:	ba 01 00 00 00       	mov    $0x1,%edx
  8004203a47:	48 89 ce             	mov    %rcx,%rsi
  8004203a4a:	48 89 c7             	mov    %rax,%rdi
  8004203a4d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203a54:	00 00 00 
  8004203a57:	ff d0                	callq  *%rax
  8004203a59:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203a5d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203a62:	0f 84 07 03 00 00    	je     8004203d6f <page_insert+0x362>
  8004203a68:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203a6c:	48 c1 e8 27          	shr    $0x27,%rax
  8004203a70:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203a75:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203a7c:	00 
  8004203a7d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203a81:	48 01 d0             	add    %rdx,%rax
  8004203a84:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203a88:	48 c1 ea 27          	shr    $0x27,%rdx
  8004203a8c:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203a92:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203a99:	00 
  8004203a9a:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004203a9e:	48 01 ca             	add    %rcx,%rdx
  8004203aa1:	48 8b 0a             	mov    (%rdx),%rcx
  8004203aa4:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203aa7:	80 e6 f1             	and    $0xf1,%dh
  8004203aaa:	48 63 d2             	movslq %edx,%rdx
  8004203aad:	48 09 ca             	or     %rcx,%rdx
  8004203ab0:	48 89 10             	mov    %rdx,(%rax)
  8004203ab3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203ab7:	48 c1 e8 27          	shr    $0x27,%rax
  8004203abb:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203ac0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ac7:	00 
  8004203ac8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203acc:	48 01 d0             	add    %rdx,%rax
  8004203acf:	48 8b 00             	mov    (%rax),%rax
  8004203ad2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203ad8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004203adc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203ae0:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203ae4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004203ae7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004203aea:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203af1:	00 00 00 
  8004203af4:	48 8b 00             	mov    (%rax),%rax
  8004203af7:	48 39 c2             	cmp    %rax,%rdx
  8004203afa:	72 32                	jb     8004203b2e <page_insert+0x121>
  8004203afc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b00:	48 89 c1             	mov    %rax,%rcx
  8004203b03:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004203b0a:	00 00 00 
  8004203b0d:	be 13 03 00 00       	mov    $0x313,%esi
  8004203b12:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203b19:	00 00 00 
  8004203b1c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203b21:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203b28:	00 00 00 
  8004203b2b:	41 ff d0             	callq  *%r8
  8004203b2e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203b35:	00 00 00 
  8004203b38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203b3c:	48 01 d0             	add    %rdx,%rax
  8004203b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004203b43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b47:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b4b:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b50:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203b57:	00 
  8004203b58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203b5c:	48 01 d0             	add    %rdx,%rax
  8004203b5f:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203b63:	48 c1 ea 1e          	shr    $0x1e,%rdx
  8004203b67:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203b6d:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203b74:	00 
  8004203b75:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203b79:	48 01 ca             	add    %rcx,%rdx
  8004203b7c:	48 8b 0a             	mov    (%rdx),%rcx
  8004203b7f:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203b82:	80 e6 f1             	and    $0xf1,%dh
  8004203b85:	48 63 d2             	movslq %edx,%rdx
  8004203b88:	48 09 ca             	or     %rcx,%rdx
  8004203b8b:	48 89 10             	mov    %rdx,(%rax)
  8004203b8e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203b92:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004203b96:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203b9b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203ba2:	00 
  8004203ba3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203ba7:	48 01 d0             	add    %rdx,%rax
  8004203baa:	48 8b 00             	mov    (%rax),%rax
  8004203bad:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203bb3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004203bb7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bbb:	48 c1 e8 0c          	shr    $0xc,%rax
  8004203bbf:	89 45 d4             	mov    %eax,-0x2c(%rbp)
  8004203bc2:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004203bc5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004203bcc:	00 00 00 
  8004203bcf:	48 8b 00             	mov    (%rax),%rax
  8004203bd2:	48 39 c2             	cmp    %rax,%rdx
  8004203bd5:	72 32                	jb     8004203c09 <page_insert+0x1fc>
  8004203bd7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203bdb:	48 89 c1             	mov    %rax,%rcx
  8004203bde:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004203be5:	00 00 00 
  8004203be8:	be 15 03 00 00       	mov    $0x315,%esi
  8004203bed:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203bf4:	00 00 00 
  8004203bf7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203bfc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203c03:	00 00 00 
  8004203c06:	41 ff d0             	callq  *%r8
  8004203c09:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004203c10:	00 00 00 
  8004203c13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203c17:	48 01 d0             	add    %rdx,%rax
  8004203c1a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004203c1e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004203c22:	48 c1 e8 15          	shr    $0x15,%rax
  8004203c26:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004203c2b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004203c32:	00 
  8004203c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004203c37:	48 01 d0             	add    %rdx,%rax
  8004203c3a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203c3e:	48 c1 ea 15          	shr    $0x15,%rdx
  8004203c42:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  8004203c48:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
  8004203c4f:	00 
  8004203c50:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004203c54:	48 01 ca             	add    %rcx,%rdx
  8004203c57:	48 8b 0a             	mov    (%rdx),%rcx
  8004203c5a:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203c5d:	80 e6 f1             	and    $0xf1,%dh
  8004203c60:	48 63 d2             	movslq %edx,%rdx
  8004203c63:	48 09 ca             	or     %rcx,%rdx
  8004203c66:	48 89 10             	mov    %rdx,(%rax)
  8004203c69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203c6d:	48 8b 00             	mov    (%rax),%rax
  8004203c70:	83 e0 01             	and    $0x1,%eax
  8004203c73:	48 85 c0             	test   %rax,%rax
  8004203c76:	74 70                	je     8004203ce8 <page_insert+0x2db>
  8004203c78:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203c7c:	48 89 c7             	mov    %rax,%rdi
  8004203c7f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203c86:	00 00 00 
  8004203c89:	ff d0                	callq  *%rax
  8004203c8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203c8f:	48 8b 12             	mov    (%rdx),%rdx
  8004203c92:	48 81 e2 00 f0 ff ff 	and    $0xfffffffffffff000,%rdx
  8004203c99:	48 39 d0             	cmp    %rdx,%rax
  8004203c9c:	75 4a                	jne    8004203ce8 <page_insert+0x2db>
  8004203c9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203ca2:	48 8b 00             	mov    (%rax),%rax
  8004203ca5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203cab:	48 89 c2             	mov    %rax,%rdx
  8004203cae:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004203cb1:	48 98                	cltq   
  8004203cb3:	48 09 d0             	or     %rdx,%rax
  8004203cb6:	48 83 c8 01          	or     $0x1,%rax
  8004203cba:	48 89 c2             	mov    %rax,%rdx
  8004203cbd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cc1:	48 89 10             	mov    %rdx,(%rax)
  8004203cc4:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cc8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203ccc:	48 89 d6             	mov    %rdx,%rsi
  8004203ccf:	48 89 c7             	mov    %rax,%rdi
  8004203cd2:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203cd9:	00 00 00 
  8004203cdc:	ff d0                	callq  *%rax
  8004203cde:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203ce3:	e9 93 00 00 00       	jmpq   8004203d7b <page_insert+0x36e>
  8004203ce8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203cec:	48 8b 00             	mov    (%rax),%rax
  8004203cef:	83 e0 01             	and    $0x1,%eax
  8004203cf2:	48 85 c0             	test   %rax,%rax
  8004203cf5:	74 1a                	je     8004203d11 <page_insert+0x304>
  8004203cf7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203cfb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203cff:	48 89 d6             	mov    %rdx,%rsi
  8004203d02:	48 89 c7             	mov    %rax,%rdi
  8004203d05:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004203d0c:	00 00 00 
  8004203d0f:	ff d0                	callq  *%rax
  8004203d11:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d15:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004203d19:	8d 50 01             	lea    0x1(%rax),%edx
  8004203d1c:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d20:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004203d24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004203d28:	48 89 c7             	mov    %rax,%rdi
  8004203d2b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004203d32:	00 00 00 
  8004203d35:	ff d0                	callq  *%rax
  8004203d37:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004203d3a:	48 63 d2             	movslq %edx,%rdx
  8004203d3d:	48 09 d0             	or     %rdx,%rax
  8004203d40:	48 83 c8 01          	or     $0x1,%rax
  8004203d44:	48 89 c2             	mov    %rax,%rdx
  8004203d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203d4b:	48 89 10             	mov    %rdx,(%rax)
  8004203d4e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004203d52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004203d56:	48 89 d6             	mov    %rdx,%rsi
  8004203d59:	48 89 c7             	mov    %rax,%rdi
  8004203d5c:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203d63:	00 00 00 
  8004203d66:	ff d0                	callq  *%rax
  8004203d68:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203d6d:	eb 0c                	jmp    8004203d7b <page_insert+0x36e>
  8004203d6f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d74:	eb 05                	jmp    8004203d7b <page_insert+0x36e>
  8004203d76:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004203d7b:	c9                   	leaveq 
  8004203d7c:	c3                   	retq   

0000008004203d7d <page_lookup>:
  8004203d7d:	55                   	push   %rbp
  8004203d7e:	48 89 e5             	mov    %rsp,%rbp
  8004203d81:	48 83 ec 30          	sub    $0x30,%rsp
  8004203d85:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203d89:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203d8d:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004203d91:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203d96:	74 69                	je     8004203e01 <page_lookup+0x84>
  8004203d98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203d9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203da0:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203da5:	48 89 ce             	mov    %rcx,%rsi
  8004203da8:	48 89 c7             	mov    %rax,%rdi
  8004203dab:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004203db2:	00 00 00 
  8004203db5:	ff d0                	callq  *%rax
  8004203db7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203dbb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203dc0:	74 3f                	je     8004203e01 <page_lookup+0x84>
  8004203dc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203dc6:	48 8b 00             	mov    (%rax),%rax
  8004203dc9:	83 e0 01             	and    $0x1,%eax
  8004203dcc:	48 85 c0             	test   %rax,%rax
  8004203dcf:	74 30                	je     8004203e01 <page_lookup+0x84>
  8004203dd1:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004203dd6:	74 0b                	je     8004203de3 <page_lookup+0x66>
  8004203dd8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004203ddc:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004203de0:	48 89 10             	mov    %rdx,(%rax)
  8004203de3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203de7:	48 8b 00             	mov    (%rax),%rax
  8004203dea:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004203df0:	48 89 c7             	mov    %rax,%rdi
  8004203df3:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004203dfa:	00 00 00 
  8004203dfd:	ff d0                	callq  *%rax
  8004203dff:	eb 05                	jmp    8004203e06 <page_lookup+0x89>
  8004203e01:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203e06:	c9                   	leaveq 
  8004203e07:	c3                   	retq   

0000008004203e08 <page_remove>:
  8004203e08:	55                   	push   %rbp
  8004203e09:	48 89 e5             	mov    %rsp,%rbp
  8004203e0c:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e10:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e14:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e18:	48 8d 55 f0          	lea    -0x10(%rbp),%rdx
  8004203e1c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004203e20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e24:	48 89 ce             	mov    %rcx,%rsi
  8004203e27:	48 89 c7             	mov    %rax,%rdi
  8004203e2a:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004203e31:	00 00 00 
  8004203e34:	ff d0                	callq  *%rax
  8004203e36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203e3a:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004203e3f:	74 38                	je     8004203e79 <page_remove+0x71>
  8004203e41:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004203e45:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203e49:	48 89 d6             	mov    %rdx,%rsi
  8004203e4c:	48 89 c7             	mov    %rax,%rdi
  8004203e4f:	48 b8 7b 3e 20 04 80 	movabs $0x8004203e7b,%rax
  8004203e56:	00 00 00 
  8004203e59:	ff d0                	callq  *%rax
  8004203e5b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203e5f:	48 89 c7             	mov    %rax,%rdi
  8004203e62:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004203e69:	00 00 00 
  8004203e6c:	ff d0                	callq  *%rax
  8004203e6e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203e72:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004203e79:	c9                   	leaveq 
  8004203e7a:	c3                   	retq   

0000008004203e7b <tlb_invalidate>:
  8004203e7b:	55                   	push   %rbp
  8004203e7c:	48 89 e5             	mov    %rsp,%rbp
  8004203e7f:	48 83 ec 20          	sub    $0x20,%rsp
  8004203e83:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004203e87:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004203e8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004203e90:	75 35                	jne    8004203ec7 <tlb_invalidate+0x4c>
  8004203e92:	48 b9 77 e3 21 04 80 	movabs $0x800421e377,%rcx
  8004203e99:	00 00 00 
  8004203e9c:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004203ea3:	00 00 00 
  8004203ea6:	be 72 03 00 00       	mov    $0x372,%esi
  8004203eab:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203eb2:	00 00 00 
  8004203eb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203eba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004203ec1:	00 00 00 
  8004203ec4:	41 ff d0             	callq  *%r8
  8004203ec7:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004203ece:	00 00 00 
  8004203ed1:	ff d0                	callq  *%rax
  8004203ed3:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004203eda:	00 00 00 
  8004203edd:	48 98                	cltq   
  8004203edf:	48 c1 e0 03          	shl    $0x3,%rax
  8004203ee3:	48 89 c1             	mov    %rax,%rcx
  8004203ee6:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203eea:	48 01 c8             	add    %rcx,%rax
  8004203eed:	48 01 d0             	add    %rdx,%rax
  8004203ef0:	48 83 c0 08          	add    $0x8,%rax
  8004203ef4:	48 8b 00             	mov    (%rax),%rax
  8004203ef7:	48 85 c0             	test   %rax,%rax
  8004203efa:	74 3d                	je     8004203f39 <tlb_invalidate+0xbe>
  8004203efc:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004203f03:	00 00 00 
  8004203f06:	ff d0                	callq  *%rax
  8004203f08:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004203f0f:	00 00 00 
  8004203f12:	48 98                	cltq   
  8004203f14:	48 c1 e0 03          	shl    $0x3,%rax
  8004203f18:	48 89 c1             	mov    %rax,%rcx
  8004203f1b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004203f1f:	48 01 c8             	add    %rcx,%rax
  8004203f22:	48 01 d0             	add    %rdx,%rax
  8004203f25:	48 83 c0 08          	add    $0x8,%rax
  8004203f29:	48 8b 00             	mov    (%rax),%rax
  8004203f2c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004203f33:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004203f37:	75 0f                	jne    8004203f48 <tlb_invalidate+0xcd>
  8004203f39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004203f3d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
}

static __inline void 
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
  8004203f41:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004203f45:	0f 01 38             	invlpg (%rax)
  8004203f48:	c9                   	leaveq 
  8004203f49:	c3                   	retq   

0000008004203f4a <mmio_map_region>:
  8004203f4a:	55                   	push   %rbp
  8004203f4b:	48 89 e5             	mov    %rsp,%rbp
  8004203f4e:	48 83 ec 30          	sub    $0x30,%rsp
  8004203f52:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004203f56:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004203f5a:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203f61:	00 00 00 
  8004203f64:	48 8b 00             	mov    (%rax),%rax
  8004203f67:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004203f6b:	48 c7 45 f0 00 10 00 	movq   $0x1000,-0x10(%rbp)
  8004203f72:	00 
  8004203f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004203f77:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004203f7b:	48 01 d0             	add    %rdx,%rax
  8004203f7e:	48 83 e8 01          	sub    $0x1,%rax
  8004203f82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004203f86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004203f8a:	ba 00 00 00 00       	mov    $0x0,%edx
  8004203f8f:	48 f7 75 f0          	divq   -0x10(%rbp)
  8004203f93:	48 89 d0             	mov    %rdx,%rax
  8004203f96:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004203f9a:	48 29 c2             	sub    %rax,%rdx
  8004203f9d:	48 89 d0             	mov    %rdx,%rax
  8004203fa0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004203fa4:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fab:	00 00 00 
  8004203fae:	48 8b 10             	mov    (%rax),%rdx
  8004203fb1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004203fb5:	48 01 c2             	add    %rax,%rdx
  8004203fb8:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fbf:	00 00 00 
  8004203fc2:	48 89 10             	mov    %rdx,(%rax)
  8004203fc5:	48 b8 e0 55 23 04 80 	movabs $0x80042355e0,%rax
  8004203fcc:	00 00 00 
  8004203fcf:	48 8b 10             	mov    (%rax),%rdx
  8004203fd2:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004203fd9:	00 00 00 
  8004203fdc:	48 39 c2             	cmp    %rax,%rdx
  8004203fdf:	76 2a                	jbe    800420400b <mmio_map_region+0xc1>
  8004203fe1:	48 ba 88 e3 21 04 80 	movabs $0x800421e388,%rdx
  8004203fe8:	00 00 00 
  8004203feb:	be a2 03 00 00       	mov    $0x3a2,%esi
  8004203ff0:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004203ff7:	00 00 00 
  8004203ffa:	b8 00 00 00 00       	mov    $0x0,%eax
  8004203fff:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004204006:	00 00 00 
  8004204009:	ff d1                	callq  *%rcx
  800420400b:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004204012:	00 00 00 
  8004204015:	48 8b 00             	mov    (%rax),%rax
  8004204018:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420401c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204020:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004204024:	41 b8 1b 00 00 00    	mov    $0x1b,%r8d
  800420402a:	48 89 c7             	mov    %rax,%rdi
  800420402d:	48 b8 2a 37 20 04 80 	movabs $0x800420372a,%rax
  8004204034:	00 00 00 
  8004204037:	ff d0                	callq  *%rax
  8004204039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420403d:	c9                   	leaveq 
  800420403e:	c3                   	retq   

000000800420403f <user_mem_check>:
  800420403f:	55                   	push   %rbp
  8004204040:	48 89 e5             	mov    %rsp,%rbp
  8004204043:	48 83 ec 40          	sub    $0x40,%rsp
  8004204047:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420404b:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420404f:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004204053:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
  8004204056:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420405a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420405e:	48 01 d0             	add    %rdx,%rax
  8004204061:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204065:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204069:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004204070:	00 00 00 
  8004204073:	48 39 c2             	cmp    %rax,%rdx
  8004204076:	77 0a                	ja     8004204082 <user_mem_check+0x43>
  8004204078:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420407c:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204080:	76 1b                	jbe    800420409d <user_mem_check+0x5e>
  8004204082:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004204086:	48 b8 40 e2 4d 04 80 	movabs $0x80044de240,%rax
  800420408d:	00 00 00 
  8004204090:	48 89 10             	mov    %rdx,(%rax)
  8004204093:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204098:	e9 c0 00 00 00       	jmpq   800420415d <user_mem_check+0x11e>
  800420409d:	e9 a8 00 00 00       	jmpq   800420414a <user_mem_check+0x10b>
  80042040a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042040a6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042040ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  80042040b1:	ba 00 00 00 00       	mov    $0x0,%edx
  80042040b6:	48 89 ce             	mov    %rcx,%rsi
  80042040b9:	48 89 c7             	mov    %rax,%rdi
  80042040bc:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042040c3:	00 00 00 
  80042040c6:	ff d0                	callq  *%rax
  80042040c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042040cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042040d1:	74 1f                	je     80042040f2 <user_mem_check+0xb3>
  80042040d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042040d7:	48 8b 10             	mov    (%rax),%rdx
  80042040da:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040dd:	83 c8 01             	or     $0x1,%eax
  80042040e0:	48 98                	cltq   
  80042040e2:	48 21 c2             	and    %rax,%rdx
  80042040e5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042040e8:	83 c8 01             	or     $0x1,%eax
  80042040eb:	48 98                	cltq   
  80042040ed:	48 39 c2             	cmp    %rax,%rdx
  80042040f0:	74 18                	je     800420410a <user_mem_check+0xcb>
  80042040f2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042040f6:	48 b8 40 e2 4d 04 80 	movabs $0x80044de240,%rax
  80042040fd:	00 00 00 
  8004204100:	48 89 10             	mov    %rdx,(%rax)
  8004204103:	b8 fa ff ff ff       	mov    $0xfffffffa,%eax
  8004204108:	eb 53                	jmp    800420415d <user_mem_check+0x11e>
  800420410a:	48 c7 45 e8 00 10 00 	movq   $0x1000,-0x18(%rbp)
  8004204111:	00 
  8004204112:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004204116:	48 83 c0 01          	add    $0x1,%rax
  800420411a:	48 89 c2             	mov    %rax,%rdx
  800420411d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204121:	48 01 d0             	add    %rdx,%rax
  8004204124:	48 83 e8 01          	sub    $0x1,%rax
  8004204128:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420412c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204130:	ba 00 00 00 00       	mov    $0x0,%edx
  8004204135:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004204139:	48 89 d0             	mov    %rdx,%rax
  800420413c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004204140:	48 29 c2             	sub    %rax,%rdx
  8004204143:	48 89 d0             	mov    %rdx,%rax
  8004204146:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420414a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420414e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204152:	0f 82 4a ff ff ff    	jb     80042040a2 <user_mem_check+0x63>
  8004204158:	b8 00 00 00 00       	mov    $0x0,%eax
  800420415d:	c9                   	leaveq 
  800420415e:	c3                   	retq   

000000800420415f <user_mem_assert>:
  800420415f:	55                   	push   %rbp
  8004204160:	48 89 e5             	mov    %rsp,%rbp
  8004204163:	48 83 ec 20          	sub    $0x20,%rsp
  8004204167:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420416b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420416f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004204173:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004204176:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004204179:	83 c8 04             	or     $0x4,%eax
  800420417c:	89 c1                	mov    %eax,%ecx
  800420417e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004204182:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004204186:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420418a:	48 89 c7             	mov    %rax,%rdi
  800420418d:	48 b8 3f 40 20 04 80 	movabs $0x800420403f,%rax
  8004204194:	00 00 00 
  8004204197:	ff d0                	callq  *%rax
  8004204199:	85 c0                	test   %eax,%eax
  800420419b:	79 47                	jns    80042041e4 <user_mem_assert+0x85>
  800420419d:	48 b8 40 e2 4d 04 80 	movabs $0x80044de240,%rax
  80042041a4:	00 00 00 
  80042041a7:	48 8b 10             	mov    (%rax),%rdx
  80042041aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041ae:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042041b4:	89 c6                	mov    %eax,%esi
  80042041b6:	48 bf a8 e3 21 04 80 	movabs $0x800421e3a8,%rdi
  80042041bd:	00 00 00 
  80042041c0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042041c5:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042041cc:	00 00 00 
  80042041cf:	ff d1                	callq  *%rcx
  80042041d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042041d5:	48 89 c7             	mov    %rax,%rdi
  80042041d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  80042041df:	00 00 00 
  80042041e2:	ff d0                	callq  *%rax
  80042041e4:	c9                   	leaveq 
  80042041e5:	c3                   	retq   

00000080042041e6 <check_page_free_list>:
  80042041e6:	55                   	push   %rbp
  80042041e7:	48 89 e5             	mov    %rsp,%rbp
  80042041ea:	48 83 ec 60          	sub    $0x60,%rsp
  80042041ee:	89 f8                	mov    %edi,%eax
  80042041f0:	88 45 ac             	mov    %al,-0x54(%rbp)
  80042041f3:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  80042041f7:	74 07                	je     8004204200 <check_page_free_list+0x1a>
  80042041f9:	b8 01 00 00 00       	mov    $0x1,%eax
  80042041fe:	eb 05                	jmp    8004204205 <check_page_free_list+0x1f>
  8004204200:	b8 00 02 00 00       	mov    $0x200,%eax
  8004204205:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004204208:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420420f:	00 
  8004204210:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204217:	00 
  8004204218:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420421f:	00 00 00 
  8004204222:	48 8b 00             	mov    (%rax),%rax
  8004204225:	48 85 c0             	test   %rax,%rax
  8004204228:	75 2a                	jne    8004204254 <check_page_free_list+0x6e>
  800420422a:	48 ba e0 e3 21 04 80 	movabs $0x800421e3e0,%rdx
  8004204231:	00 00 00 
  8004204234:	be fd 03 00 00       	mov    $0x3fd,%esi
  8004204239:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204240:	00 00 00 
  8004204243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204248:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420424f:	00 00 00 
  8004204252:	ff d1                	callq  *%rcx
  8004204254:	80 7d ac 00          	cmpb   $0x0,-0x54(%rbp)
  8004204258:	0f 84 a9 00 00 00    	je     8004204307 <check_page_free_list+0x121>
  800420425e:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  8004204262:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004204266:	48 8d 45 c8          	lea    -0x38(%rbp),%rax
  800420426a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420426e:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204275:	00 00 00 
  8004204278:	48 8b 00             	mov    (%rax),%rax
  800420427b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420427f:	eb 58                	jmp    80042042d9 <check_page_free_list+0xf3>
  8004204281:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204285:	48 89 c7             	mov    %rax,%rdi
  8004204288:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420428f:	00 00 00 
  8004204292:	ff d0                	callq  *%rax
  8004204294:	48 c1 e8 15          	shr    $0x15,%rax
  8004204298:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420429d:	48 89 c2             	mov    %rax,%rdx
  80042042a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042042a3:	48 39 c2             	cmp    %rax,%rdx
  80042042a6:	0f 93 c0             	setae  %al
  80042042a9:	0f b6 c0             	movzbl %al,%eax
  80042042ac:	89 45 e0             	mov    %eax,-0x20(%rbp)
  80042042af:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042b2:	48 98                	cltq   
  80042042b4:	48 8b 44 c5 b0       	mov    -0x50(%rbp,%rax,8),%rax
  80042042b9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042bd:	48 89 10             	mov    %rdx,(%rax)
  80042042c0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042042c4:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042042c7:	48 98                	cltq   
  80042042c9:	48 89 54 c5 b0       	mov    %rdx,-0x50(%rbp,%rax,8)
  80042042ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042042d2:	48 8b 00             	mov    (%rax),%rax
  80042042d5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042042d9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042042de:	75 a1                	jne    8004204281 <check_page_free_list+0x9b>
  80042042e0:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042042e4:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042042eb:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042042ef:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042042f3:	48 89 10             	mov    %rdx,(%rax)
  80042042f6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042042fa:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204301:	00 00 00 
  8004204304:	48 89 10             	mov    %rdx,(%rax)
  8004204307:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420430e:	00 00 00 
  8004204311:	48 8b 00             	mov    (%rax),%rax
  8004204314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204318:	eb 5e                	jmp    8004204378 <check_page_free_list+0x192>
  800420431a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420431e:	48 89 c7             	mov    %rax,%rdi
  8004204321:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204328:	00 00 00 
  800420432b:	ff d0                	callq  *%rax
  800420432d:	48 c1 e8 15          	shr    $0x15,%rax
  8004204331:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004204336:	48 89 c2             	mov    %rax,%rdx
  8004204339:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420433c:	48 39 c2             	cmp    %rax,%rdx
  800420433f:	73 2c                	jae    800420436d <check_page_free_list+0x187>
  8004204341:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204345:	48 89 c7             	mov    %rax,%rdi
  8004204348:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  800420434f:	00 00 00 
  8004204352:	ff d0                	callq  *%rax
  8004204354:	ba 80 00 00 00       	mov    $0x80,%edx
  8004204359:	be 97 00 00 00       	mov    $0x97,%esi
  800420435e:	48 89 c7             	mov    %rax,%rdi
  8004204361:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004204368:	00 00 00 
  800420436b:	ff d0                	callq  *%rax
  800420436d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204371:	48 8b 00             	mov    (%rax),%rax
  8004204374:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204378:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800420437d:	75 9b                	jne    800420431a <check_page_free_list+0x134>
  800420437f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204384:	48 b8 da 24 20 04 80 	movabs $0x80042024da,%rax
  800420438b:	00 00 00 
  800420438e:	ff d0                	callq  *%rax
  8004204390:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204394:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420439b:	00 00 00 
  800420439e:	48 8b 00             	mov    (%rax),%rax
  80042043a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042043a5:	e9 20 03 00 00       	jmpq   80042046ca <check_page_free_list+0x4e4>
  80042043aa:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042043b1:	00 00 00 
  80042043b4:	48 8b 00             	mov    (%rax),%rax
  80042043b7:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042043bb:	73 35                	jae    80042043f2 <check_page_free_list+0x20c>
  80042043bd:	48 b9 04 e4 21 04 80 	movabs $0x800421e404,%rcx
  80042043c4:	00 00 00 
  80042043c7:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042043ce:	00 00 00 
  80042043d1:	be 17 04 00 00       	mov    $0x417,%esi
  80042043d6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042043dd:	00 00 00 
  80042043e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042043e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042043ec:	00 00 00 
  80042043ef:	41 ff d0             	callq  *%r8
  80042043f2:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042043f9:	00 00 00 
  80042043fc:	48 8b 10             	mov    (%rax),%rdx
  80042043ff:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004204406:	00 00 00 
  8004204409:	48 8b 00             	mov    (%rax),%rax
  800420440c:	48 c1 e0 04          	shl    $0x4,%rax
  8004204410:	48 01 d0             	add    %rdx,%rax
  8004204413:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204417:	77 35                	ja     800420444e <check_page_free_list+0x268>
  8004204419:	48 b9 10 e4 21 04 80 	movabs $0x800421e410,%rcx
  8004204420:	00 00 00 
  8004204423:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420442a:	00 00 00 
  800420442d:	be 18 04 00 00       	mov    $0x418,%esi
  8004204432:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204439:	00 00 00 
  800420443c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204441:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204448:	00 00 00 
  800420444b:	41 ff d0             	callq  *%r8
  800420444e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004204452:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004204459:	00 00 00 
  800420445c:	48 8b 00             	mov    (%rax),%rax
  800420445f:	48 29 c2             	sub    %rax,%rdx
  8004204462:	48 89 d0             	mov    %rdx,%rax
  8004204465:	83 e0 0f             	and    $0xf,%eax
  8004204468:	48 85 c0             	test   %rax,%rax
  800420446b:	74 35                	je     80042044a2 <check_page_free_list+0x2bc>
  800420446d:	48 b9 28 e4 21 04 80 	movabs $0x800421e428,%rcx
  8004204474:	00 00 00 
  8004204477:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420447e:	00 00 00 
  8004204481:	be 19 04 00 00       	mov    $0x419,%esi
  8004204486:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420448d:	00 00 00 
  8004204490:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204495:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420449c:	00 00 00 
  800420449f:	41 ff d0             	callq  *%r8
  80042044a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044a6:	48 89 c7             	mov    %rax,%rdi
  80042044a9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044b0:	00 00 00 
  80042044b3:	ff d0                	callq  *%rax
  80042044b5:	48 85 c0             	test   %rax,%rax
  80042044b8:	75 35                	jne    80042044ef <check_page_free_list+0x309>
  80042044ba:	48 b9 5a e4 21 04 80 	movabs $0x800421e45a,%rcx
  80042044c1:	00 00 00 
  80042044c4:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042044cb:	00 00 00 
  80042044ce:	be 1c 04 00 00       	mov    $0x41c,%esi
  80042044d3:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042044da:	00 00 00 
  80042044dd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042044e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042044e9:	00 00 00 
  80042044ec:	41 ff d0             	callq  *%r8
  80042044ef:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042044f3:	48 89 c7             	mov    %rax,%rdi
  80042044f6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042044fd:	00 00 00 
  8004204500:	ff d0                	callq  *%rax
  8004204502:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  8004204508:	75 35                	jne    800420453f <check_page_free_list+0x359>
  800420450a:	48 b9 6b e4 21 04 80 	movabs $0x800421e46b,%rcx
  8004204511:	00 00 00 
  8004204514:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420451b:	00 00 00 
  800420451e:	be 1d 04 00 00       	mov    $0x41d,%esi
  8004204523:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420452a:	00 00 00 
  800420452d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204532:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204539:	00 00 00 
  800420453c:	41 ff d0             	callq  *%r8
  800420453f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204543:	48 89 c7             	mov    %rax,%rdi
  8004204546:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420454d:	00 00 00 
  8004204550:	ff d0                	callq  *%rax
  8004204552:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  8004204558:	75 35                	jne    800420458f <check_page_free_list+0x3a9>
  800420455a:	48 b9 88 e4 21 04 80 	movabs $0x800421e488,%rcx
  8004204561:	00 00 00 
  8004204564:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420456b:	00 00 00 
  800420456e:	be 1e 04 00 00       	mov    $0x41e,%esi
  8004204573:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420457a:	00 00 00 
  800420457d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204582:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204589:	00 00 00 
  800420458c:	41 ff d0             	callq  *%r8
  800420458f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204593:	48 89 c7             	mov    %rax,%rdi
  8004204596:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420459d:	00 00 00 
  80042045a0:	ff d0                	callq  *%rax
  80042045a2:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  80042045a8:	75 35                	jne    80042045df <check_page_free_list+0x3f9>
  80042045aa:	48 b9 ab e4 21 04 80 	movabs $0x800421e4ab,%rcx
  80042045b1:	00 00 00 
  80042045b4:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042045bb:	00 00 00 
  80042045be:	be 1f 04 00 00       	mov    $0x41f,%esi
  80042045c3:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042045ca:	00 00 00 
  80042045cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042045d2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042045d9:	00 00 00 
  80042045dc:	41 ff d0             	callq  *%r8
  80042045df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045e3:	48 89 c7             	mov    %rax,%rdi
  80042045e6:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042045ed:	00 00 00 
  80042045f0:	ff d0                	callq  *%rax
  80042045f2:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042045f8:	76 4e                	jbe    8004204648 <check_page_free_list+0x462>
  80042045fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042045fe:	48 89 c7             	mov    %rax,%rdi
  8004204601:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204608:	00 00 00 
  800420460b:	ff d0                	callq  *%rax
  800420460d:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004204611:	73 35                	jae    8004204648 <check_page_free_list+0x462>
  8004204613:	48 b9 c8 e4 21 04 80 	movabs $0x800421e4c8,%rcx
  800420461a:	00 00 00 
  800420461d:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204624:	00 00 00 
  8004204627:	be 20 04 00 00       	mov    $0x420,%esi
  800420462c:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204633:	00 00 00 
  8004204636:	b8 00 00 00 00       	mov    $0x0,%eax
  800420463b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204642:	00 00 00 
  8004204645:	41 ff d0             	callq  *%r8
  8004204648:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420464c:	48 89 c7             	mov    %rax,%rdi
  800420464f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204656:	00 00 00 
  8004204659:	ff d0                	callq  *%rax
  800420465b:	48 3d 00 70 00 00    	cmp    $0x7000,%rax
  8004204661:	75 35                	jne    8004204698 <check_page_free_list+0x4b2>
  8004204663:	48 b9 0d e5 21 04 80 	movabs $0x800421e50d,%rcx
  800420466a:	00 00 00 
  800420466d:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204674:	00 00 00 
  8004204677:	be 23 04 00 00       	mov    $0x423,%esi
  800420467c:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204683:	00 00 00 
  8004204686:	b8 00 00 00 00       	mov    $0x0,%eax
  800420468b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204692:	00 00 00 
  8004204695:	41 ff d0             	callq  *%r8
  8004204698:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420469c:	48 89 c7             	mov    %rax,%rdi
  800420469f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042046a6:	00 00 00 
  80042046a9:	ff d0                	callq  *%rax
  80042046ab:	48 3d ff ff 0f 00    	cmp    $0xfffff,%rax
  80042046b1:	77 07                	ja     80042046ba <check_page_free_list+0x4d4>
  80042046b3:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042046b8:	eb 05                	jmp    80042046bf <check_page_free_list+0x4d9>
  80042046ba:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042046bf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042046c3:	48 8b 00             	mov    (%rax),%rax
  80042046c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042046ca:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042046cf:	0f 85 d5 fc ff ff    	jne    80042043aa <check_page_free_list+0x1c4>
  80042046d5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042046da:	75 35                	jne    8004204711 <check_page_free_list+0x52b>
  80042046dc:	48 b9 2a e5 21 04 80 	movabs $0x800421e52a,%rcx
  80042046e3:	00 00 00 
  80042046e6:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042046ed:	00 00 00 
  80042046f0:	be 2c 04 00 00       	mov    $0x42c,%esi
  80042046f5:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042046fc:	00 00 00 
  80042046ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204704:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420470b:	00 00 00 
  800420470e:	41 ff d0             	callq  *%r8
  8004204711:	c9                   	leaveq 
  8004204712:	c3                   	retq   

0000008004204713 <check_page_alloc>:
  8004204713:	55                   	push   %rbp
  8004204714:	48 89 e5             	mov    %rsp,%rbp
  8004204717:	48 83 ec 40          	sub    $0x40,%rsp
  800420471b:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204722:	00 00 00 
  8004204725:	48 8b 00             	mov    (%rax),%rax
  8004204728:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420472c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  8004204733:	eb 37                	jmp    800420476c <check_page_alloc+0x59>
  8004204735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204739:	48 89 c7             	mov    %rax,%rdi
  800420473c:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204743:	00 00 00 
  8004204746:	ff d0                	callq  *%rax
  8004204748:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420474d:	be 97 00 00 00       	mov    $0x97,%esi
  8004204752:	48 89 c7             	mov    %rax,%rdi
  8004204755:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  800420475c:	00 00 00 
  800420475f:	ff d0                	callq  *%rax
  8004204761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204765:	48 8b 00             	mov    (%rax),%rax
  8004204768:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420476c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204771:	75 c2                	jne    8004204735 <check_page_alloc+0x22>
  8004204773:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420477a:	00 00 00 
  800420477d:	48 8b 00             	mov    (%rax),%rax
  8004204780:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204784:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
  800420478b:	e9 ec 01 00 00       	jmpq   800420497c <check_page_alloc+0x269>
  8004204790:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004204797:	00 00 00 
  800420479a:	48 8b 00             	mov    (%rax),%rax
  800420479d:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  80042047a1:	73 35                	jae    80042047d8 <check_page_alloc+0xc5>
  80042047a3:	48 b9 3b e5 21 04 80 	movabs $0x800421e53b,%rcx
  80042047aa:	00 00 00 
  80042047ad:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042047b4:	00 00 00 
  80042047b7:	be 46 04 00 00       	mov    $0x446,%esi
  80042047bc:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042047c3:	00 00 00 
  80042047c6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042047cb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042047d2:	00 00 00 
  80042047d5:	41 ff d0             	callq  *%r8
  80042047d8:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  80042047df:	00 00 00 
  80042047e2:	48 8b 10             	mov    (%rax),%rdx
  80042047e5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042047ec:	00 00 00 
  80042047ef:	48 8b 00             	mov    (%rax),%rax
  80042047f2:	48 c1 e0 04          	shl    $0x4,%rax
  80042047f6:	48 01 d0             	add    %rdx,%rax
  80042047f9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042047fd:	77 35                	ja     8004204834 <check_page_alloc+0x121>
  80042047ff:	48 b9 48 e5 21 04 80 	movabs $0x800421e548,%rcx
  8004204806:	00 00 00 
  8004204809:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204810:	00 00 00 
  8004204813:	be 47 04 00 00       	mov    $0x447,%esi
  8004204818:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420481f:	00 00 00 
  8004204822:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204827:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420482e:	00 00 00 
  8004204831:	41 ff d0             	callq  *%r8
  8004204834:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204838:	48 89 c7             	mov    %rax,%rdi
  800420483b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204842:	00 00 00 
  8004204845:	ff d0                	callq  *%rax
  8004204847:	48 85 c0             	test   %rax,%rax
  800420484a:	75 35                	jne    8004204881 <check_page_alloc+0x16e>
  800420484c:	48 b9 5d e5 21 04 80 	movabs $0x800421e55d,%rcx
  8004204853:	00 00 00 
  8004204856:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420485d:	00 00 00 
  8004204860:	be 4a 04 00 00       	mov    $0x44a,%esi
  8004204865:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420486c:	00 00 00 
  800420486f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204874:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420487b:	00 00 00 
  800420487e:	41 ff d0             	callq  *%r8
  8004204881:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204885:	48 89 c7             	mov    %rax,%rdi
  8004204888:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420488f:	00 00 00 
  8004204892:	ff d0                	callq  *%rax
  8004204894:	48 3d 00 00 0a 00    	cmp    $0xa0000,%rax
  800420489a:	75 35                	jne    80042048d1 <check_page_alloc+0x1be>
  800420489c:	48 b9 6f e5 21 04 80 	movabs $0x800421e56f,%rcx
  80042048a3:	00 00 00 
  80042048a6:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042048ad:	00 00 00 
  80042048b0:	be 4b 04 00 00       	mov    $0x44b,%esi
  80042048b5:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042048bc:	00 00 00 
  80042048bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042048c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042048cb:	00 00 00 
  80042048ce:	41 ff d0             	callq  *%r8
  80042048d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042048d5:	48 89 c7             	mov    %rax,%rdi
  80042048d8:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042048df:	00 00 00 
  80042048e2:	ff d0                	callq  *%rax
  80042048e4:	48 3d 00 f0 0f 00    	cmp    $0xff000,%rax
  80042048ea:	75 35                	jne    8004204921 <check_page_alloc+0x20e>
  80042048ec:	48 b9 90 e5 21 04 80 	movabs $0x800421e590,%rcx
  80042048f3:	00 00 00 
  80042048f6:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042048fd:	00 00 00 
  8004204900:	be 4c 04 00 00       	mov    $0x44c,%esi
  8004204905:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420490c:	00 00 00 
  800420490f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204914:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420491b:	00 00 00 
  800420491e:	41 ff d0             	callq  *%r8
  8004204921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204925:	48 89 c7             	mov    %rax,%rdi
  8004204928:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420492f:	00 00 00 
  8004204932:	ff d0                	callq  *%rax
  8004204934:	48 3d 00 00 10 00    	cmp    $0x100000,%rax
  800420493a:	75 35                	jne    8004204971 <check_page_alloc+0x25e>
  800420493c:	48 b9 b4 e5 21 04 80 	movabs $0x800421e5b4,%rcx
  8004204943:	00 00 00 
  8004204946:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420494d:	00 00 00 
  8004204950:	be 4d 04 00 00       	mov    $0x44d,%esi
  8004204955:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420495c:	00 00 00 
  800420495f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204964:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420496b:	00 00 00 
  800420496e:	41 ff d0             	callq  *%r8
  8004204971:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204975:	48 8b 00             	mov    (%rax),%rax
  8004204978:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420497c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204981:	0f 85 09 fe ff ff    	jne    8004204790 <check_page_alloc+0x7d>
  8004204987:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800420498e:	00 
  800420498f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204993:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204997:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420499b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420499f:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049a4:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049ab:	00 00 00 
  80042049ae:	ff d0                	callq  *%rax
  80042049b0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042049b4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042049b9:	75 35                	jne    80042049f0 <check_page_alloc+0x2dd>
  80042049bb:	48 b9 cf e5 21 04 80 	movabs $0x800421e5cf,%rcx
  80042049c2:	00 00 00 
  80042049c5:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042049cc:	00 00 00 
  80042049cf:	be 51 04 00 00       	mov    $0x451,%esi
  80042049d4:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042049db:	00 00 00 
  80042049de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042049e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042049ea:	00 00 00 
  80042049ed:	41 ff d0             	callq  *%r8
  80042049f0:	bf 00 00 00 00       	mov    $0x0,%edi
  80042049f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042049fc:	00 00 00 
  80042049ff:	ff d0                	callq  *%rax
  8004204a01:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204a05:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204a0a:	75 35                	jne    8004204a41 <check_page_alloc+0x32e>
  8004204a0c:	48 b9 e5 e5 21 04 80 	movabs $0x800421e5e5,%rcx
  8004204a13:	00 00 00 
  8004204a16:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204a1d:	00 00 00 
  8004204a20:	be 52 04 00 00       	mov    $0x452,%esi
  8004204a25:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204a2c:	00 00 00 
  8004204a2f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a34:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a3b:	00 00 00 
  8004204a3e:	41 ff d0             	callq  *%r8
  8004204a41:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204a46:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204a4d:	00 00 00 
  8004204a50:	ff d0                	callq  *%rax
  8004204a52:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204a56:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204a5b:	75 35                	jne    8004204a92 <check_page_alloc+0x37f>
  8004204a5d:	48 b9 fb e5 21 04 80 	movabs $0x800421e5fb,%rcx
  8004204a64:	00 00 00 
  8004204a67:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204a6e:	00 00 00 
  8004204a71:	be 53 04 00 00       	mov    $0x453,%esi
  8004204a76:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204a7d:	00 00 00 
  8004204a80:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204a85:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204a8c:	00 00 00 
  8004204a8f:	41 ff d0             	callq  *%r8
  8004204a92:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204a97:	75 35                	jne    8004204ace <check_page_alloc+0x3bb>
  8004204a99:	48 b9 11 e6 21 04 80 	movabs $0x800421e611,%rcx
  8004204aa0:	00 00 00 
  8004204aa3:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204aaa:	00 00 00 
  8004204aad:	be 54 04 00 00       	mov    $0x454,%esi
  8004204ab2:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204ab9:	00 00 00 
  8004204abc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ac1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ac8:	00 00 00 
  8004204acb:	41 ff d0             	callq  *%r8
  8004204ace:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204ad3:	74 0a                	je     8004204adf <check_page_alloc+0x3cc>
  8004204ad5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204ad9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204add:	75 35                	jne    8004204b14 <check_page_alloc+0x401>
  8004204adf:	48 b9 15 e6 21 04 80 	movabs $0x800421e615,%rcx
  8004204ae6:	00 00 00 
  8004204ae9:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204af0:	00 00 00 
  8004204af3:	be 55 04 00 00       	mov    $0x455,%esi
  8004204af8:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204aff:	00 00 00 
  8004204b02:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b07:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b0e:	00 00 00 
  8004204b11:	41 ff d0             	callq  *%r8
  8004204b14:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204b19:	74 14                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b1f:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204b23:	74 0a                	je     8004204b2f <check_page_alloc+0x41c>
  8004204b25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204b29:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204b2d:	75 35                	jne    8004204b64 <check_page_alloc+0x451>
  8004204b2f:	48 b9 28 e6 21 04 80 	movabs $0x800421e628,%rcx
  8004204b36:	00 00 00 
  8004204b39:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204b40:	00 00 00 
  8004204b43:	be 56 04 00 00       	mov    $0x456,%esi
  8004204b48:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204b4f:	00 00 00 
  8004204b52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204b57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204b5e:	00 00 00 
  8004204b61:	41 ff d0             	callq  *%r8
  8004204b64:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204b68:	48 89 c7             	mov    %rax,%rdi
  8004204b6b:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204b72:	00 00 00 
  8004204b75:	ff d0                	callq  *%rax
  8004204b77:	48 ba f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rdx
  8004204b7e:	00 00 00 
  8004204b81:	48 8b 12             	mov    (%rdx),%rdx
  8004204b84:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204b88:	48 39 d0             	cmp    %rdx,%rax
  8004204b8b:	72 35                	jb     8004204bc2 <check_page_alloc+0x4af>
  8004204b8d:	48 b9 48 e6 21 04 80 	movabs $0x800421e648,%rcx
  8004204b94:	00 00 00 
  8004204b97:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204b9e:	00 00 00 
  8004204ba1:	be 57 04 00 00       	mov    $0x457,%esi
  8004204ba6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204bad:	00 00 00 
  8004204bb0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204bb5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204bbc:	00 00 00 
  8004204bbf:	41 ff d0             	callq  *%r8
  8004204bc2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204bc6:	48 89 c7             	mov    %rax,%rdi
  8004204bc9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204bd0:	00 00 00 
  8004204bd3:	ff d0                	callq  *%rax
  8004204bd5:	48 ba f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rdx
  8004204bdc:	00 00 00 
  8004204bdf:	48 8b 12             	mov    (%rdx),%rdx
  8004204be2:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204be6:	48 39 d0             	cmp    %rdx,%rax
  8004204be9:	72 35                	jb     8004204c20 <check_page_alloc+0x50d>
  8004204beb:	48 b9 65 e6 21 04 80 	movabs $0x800421e665,%rcx
  8004204bf2:	00 00 00 
  8004204bf5:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204bfc:	00 00 00 
  8004204bff:	be 58 04 00 00       	mov    $0x458,%esi
  8004204c04:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204c0b:	00 00 00 
  8004204c0e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c13:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c1a:	00 00 00 
  8004204c1d:	41 ff d0             	callq  *%r8
  8004204c20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204c24:	48 89 c7             	mov    %rax,%rdi
  8004204c27:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004204c2e:	00 00 00 
  8004204c31:	ff d0                	callq  *%rax
  8004204c33:	48 ba f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rdx
  8004204c3a:	00 00 00 
  8004204c3d:	48 8b 12             	mov    (%rdx),%rdx
  8004204c40:	48 c1 e2 0c          	shl    $0xc,%rdx
  8004204c44:	48 39 d0             	cmp    %rdx,%rax
  8004204c47:	72 35                	jb     8004204c7e <check_page_alloc+0x56b>
  8004204c49:	48 b9 82 e6 21 04 80 	movabs $0x800421e682,%rcx
  8004204c50:	00 00 00 
  8004204c53:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204c5a:	00 00 00 
  8004204c5d:	be 59 04 00 00       	mov    $0x459,%esi
  8004204c62:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204c69:	00 00 00 
  8004204c6c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204c71:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204c78:	00 00 00 
  8004204c7b:	41 ff d0             	callq  *%r8
  8004204c7e:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204c85:	00 00 00 
  8004204c88:	48 8b 00             	mov    (%rax),%rax
  8004204c8b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004204c8f:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004204c96:	00 00 00 
  8004204c99:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004204ca0:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204ca5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204cac:	00 00 00 
  8004204caf:	ff d0                	callq  *%rax
  8004204cb1:	48 85 c0             	test   %rax,%rax
  8004204cb4:	74 35                	je     8004204ceb <check_page_alloc+0x5d8>
  8004204cb6:	48 b9 9f e6 21 04 80 	movabs $0x800421e69f,%rcx
  8004204cbd:	00 00 00 
  8004204cc0:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204cc7:	00 00 00 
  8004204cca:	be 60 04 00 00       	mov    $0x460,%esi
  8004204ccf:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204cd6:	00 00 00 
  8004204cd9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204cde:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204ce5:	00 00 00 
  8004204ce8:	41 ff d0             	callq  *%r8
  8004204ceb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204cef:	48 89 c7             	mov    %rax,%rdi
  8004204cf2:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204cf9:	00 00 00 
  8004204cfc:	ff d0                	callq  *%rax
  8004204cfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d02:	48 89 c7             	mov    %rax,%rdi
  8004204d05:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d0c:	00 00 00 
  8004204d0f:	ff d0                	callq  *%rax
  8004204d11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d15:	48 89 c7             	mov    %rax,%rdi
  8004204d18:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204d1f:	00 00 00 
  8004204d22:	ff d0                	callq  *%rax
  8004204d24:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004204d2b:	00 
  8004204d2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204d30:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204d34:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204d38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d3c:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d41:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d48:	00 00 00 
  8004204d4b:	ff d0                	callq  *%rax
  8004204d4d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004204d51:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204d56:	75 35                	jne    8004204d8d <check_page_alloc+0x67a>
  8004204d58:	48 b9 cf e5 21 04 80 	movabs $0x800421e5cf,%rcx
  8004204d5f:	00 00 00 
  8004204d62:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204d69:	00 00 00 
  8004204d6c:	be 67 04 00 00       	mov    $0x467,%esi
  8004204d71:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204d78:	00 00 00 
  8004204d7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204d80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204d87:	00 00 00 
  8004204d8a:	41 ff d0             	callq  *%r8
  8004204d8d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204d92:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204d99:	00 00 00 
  8004204d9c:	ff d0                	callq  *%rax
  8004204d9e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004204da2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204da7:	75 35                	jne    8004204dde <check_page_alloc+0x6cb>
  8004204da9:	48 b9 e5 e5 21 04 80 	movabs $0x800421e5e5,%rcx
  8004204db0:	00 00 00 
  8004204db3:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204dba:	00 00 00 
  8004204dbd:	be 68 04 00 00       	mov    $0x468,%esi
  8004204dc2:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204dc9:	00 00 00 
  8004204dcc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204dd1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204dd8:	00 00 00 
  8004204ddb:	41 ff d0             	callq  *%r8
  8004204dde:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204de3:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204dea:	00 00 00 
  8004204ded:	ff d0                	callq  *%rax
  8004204def:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004204df3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204df8:	75 35                	jne    8004204e2f <check_page_alloc+0x71c>
  8004204dfa:	48 b9 fb e5 21 04 80 	movabs $0x800421e5fb,%rcx
  8004204e01:	00 00 00 
  8004204e04:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204e0b:	00 00 00 
  8004204e0e:	be 69 04 00 00       	mov    $0x469,%esi
  8004204e13:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204e1a:	00 00 00 
  8004204e1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e29:	00 00 00 
  8004204e2c:	41 ff d0             	callq  *%r8
  8004204e2f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004204e34:	75 35                	jne    8004204e6b <check_page_alloc+0x758>
  8004204e36:	48 b9 11 e6 21 04 80 	movabs $0x800421e611,%rcx
  8004204e3d:	00 00 00 
  8004204e40:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204e47:	00 00 00 
  8004204e4a:	be 6a 04 00 00       	mov    $0x46a,%esi
  8004204e4f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204e56:	00 00 00 
  8004204e59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204e5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204e65:	00 00 00 
  8004204e68:	41 ff d0             	callq  *%r8
  8004204e6b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004204e70:	74 0a                	je     8004204e7c <check_page_alloc+0x769>
  8004204e72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004204e76:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204e7a:	75 35                	jne    8004204eb1 <check_page_alloc+0x79e>
  8004204e7c:	48 b9 15 e6 21 04 80 	movabs $0x800421e615,%rcx
  8004204e83:	00 00 00 
  8004204e86:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204e8d:	00 00 00 
  8004204e90:	be 6b 04 00 00       	mov    $0x46b,%esi
  8004204e95:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204e9c:	00 00 00 
  8004204e9f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ea4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204eab:	00 00 00 
  8004204eae:	41 ff d0             	callq  *%r8
  8004204eb1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004204eb6:	74 14                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ebc:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004204ec0:	74 0a                	je     8004204ecc <check_page_alloc+0x7b9>
  8004204ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004204ec6:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004204eca:	75 35                	jne    8004204f01 <check_page_alloc+0x7ee>
  8004204ecc:	48 b9 28 e6 21 04 80 	movabs $0x800421e628,%rcx
  8004204ed3:	00 00 00 
  8004204ed6:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204edd:	00 00 00 
  8004204ee0:	be 6c 04 00 00       	mov    $0x46c,%esi
  8004204ee5:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204eec:	00 00 00 
  8004204eef:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204ef4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204efb:	00 00 00 
  8004204efe:	41 ff d0             	callq  *%r8
  8004204f01:	bf 00 00 00 00       	mov    $0x0,%edi
  8004204f06:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f0d:	00 00 00 
  8004204f10:	ff d0                	callq  *%rax
  8004204f12:	48 85 c0             	test   %rax,%rax
  8004204f15:	74 35                	je     8004204f4c <check_page_alloc+0x839>
  8004204f17:	48 b9 9f e6 21 04 80 	movabs $0x800421e69f,%rcx
  8004204f1e:	00 00 00 
  8004204f21:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204f28:	00 00 00 
  8004204f2b:	be 6d 04 00 00       	mov    $0x46d,%esi
  8004204f30:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204f37:	00 00 00 
  8004204f3a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204f3f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204f46:	00 00 00 
  8004204f49:	41 ff d0             	callq  *%r8
  8004204f4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f50:	48 89 c7             	mov    %rax,%rdi
  8004204f53:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004204f5a:	00 00 00 
  8004204f5d:	ff d0                	callq  *%rax
  8004204f5f:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004204f64:	be 01 00 00 00       	mov    $0x1,%esi
  8004204f69:	48 89 c7             	mov    %rax,%rdi
  8004204f6c:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004204f73:	00 00 00 
  8004204f76:	ff d0                	callq  *%rax
  8004204f78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204f7c:	48 89 c7             	mov    %rax,%rdi
  8004204f7f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004204f86:	00 00 00 
  8004204f89:	ff d0                	callq  *%rax
  8004204f8b:	bf 01 00 00 00       	mov    $0x1,%edi
  8004204f90:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004204f97:	00 00 00 
  8004204f9a:	ff d0                	callq  *%rax
  8004204f9c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004204fa0:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fa5:	75 35                	jne    8004204fdc <check_page_alloc+0x8c9>
  8004204fa7:	48 b9 ae e6 21 04 80 	movabs $0x800421e6ae,%rcx
  8004204fae:	00 00 00 
  8004204fb1:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204fb8:	00 00 00 
  8004204fbb:	be 72 04 00 00       	mov    $0x472,%esi
  8004204fc0:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004204fc7:	00 00 00 
  8004204fca:	b8 00 00 00 00       	mov    $0x0,%eax
  8004204fcf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004204fd6:	00 00 00 
  8004204fd9:	41 ff d0             	callq  *%r8
  8004204fdc:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004204fe1:	74 0a                	je     8004204fed <check_page_alloc+0x8da>
  8004204fe3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004204fe7:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004204feb:	74 35                	je     8004205022 <check_page_alloc+0x90f>
  8004204fed:	48 b9 cc e6 21 04 80 	movabs $0x800421e6cc,%rcx
  8004204ff4:	00 00 00 
  8004204ff7:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004204ffe:	00 00 00 
  8004205001:	be 73 04 00 00       	mov    $0x473,%esi
  8004205006:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420500d:	00 00 00 
  8004205010:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205015:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420501c:	00 00 00 
  800420501f:	41 ff d0             	callq  *%r8
  8004205022:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205026:	48 89 c7             	mov    %rax,%rdi
  8004205029:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004205030:	00 00 00 
  8004205033:	ff d0                	callq  *%rax
  8004205035:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205039:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004205040:	eb 4d                	jmp    800420508f <check_page_alloc+0x97c>
  8004205042:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004205045:	48 63 d0             	movslq %eax,%rdx
  8004205048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420504c:	48 01 d0             	add    %rdx,%rax
  800420504f:	0f b6 00             	movzbl (%rax),%eax
  8004205052:	84 c0                	test   %al,%al
  8004205054:	74 35                	je     800420508b <check_page_alloc+0x978>
  8004205056:	48 b9 dc e6 21 04 80 	movabs $0x800421e6dc,%rcx
  800420505d:	00 00 00 
  8004205060:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205067:	00 00 00 
  800420506a:	be 76 04 00 00       	mov    $0x476,%esi
  800420506f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205076:	00 00 00 
  8004205079:	b8 00 00 00 00       	mov    $0x0,%eax
  800420507e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205085:	00 00 00 
  8004205088:	41 ff d0             	callq  *%r8
  800420508b:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800420508f:	81 7d f4 ff 0f 00 00 	cmpl   $0xfff,-0xc(%rbp)
  8004205096:	7e aa                	jle    8004205042 <check_page_alloc+0x92f>
  8004205098:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  800420509f:	00 00 00 
  80042050a2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042050a6:	48 89 10             	mov    %rdx,(%rax)
  80042050a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042050ad:	48 89 c7             	mov    %rax,%rdi
  80042050b0:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050b7:	00 00 00 
  80042050ba:	ff d0                	callq  *%rax
  80042050bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042050c0:	48 89 c7             	mov    %rax,%rdi
  80042050c3:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050ca:	00 00 00 
  80042050cd:	ff d0                	callq  *%rax
  80042050cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042050d3:	48 89 c7             	mov    %rax,%rdi
  80042050d6:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042050dd:	00 00 00 
  80042050e0:	ff d0                	callq  *%rax
  80042050e2:	48 bf e8 e6 21 04 80 	movabs $0x800421e6e8,%rdi
  80042050e9:	00 00 00 
  80042050ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042050f1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042050f8:	00 00 00 
  80042050fb:	ff d2                	callq  *%rdx
  80042050fd:	c9                   	leaveq 
  80042050fe:	c3                   	retq   

00000080042050ff <check_boot_pml4e>:
  80042050ff:	55                   	push   %rbp
  8004205100:	48 89 e5             	mov    %rsp,%rbp
  8004205103:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
  800420510a:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004205111:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004205118:	00 00 00 
  800420511b:	48 8b 00             	mov    (%rax),%rax
  800420511e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205122:	48 c7 45 e0 00 10 00 	movq   $0x1000,-0x20(%rbp)
  8004205129:	00 
  800420512a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205131:	00 00 00 
  8004205134:	48 8b 00             	mov    (%rax),%rax
  8004205137:	48 c1 e0 04          	shl    $0x4,%rax
  800420513b:	48 89 c2             	mov    %rax,%rdx
  800420513e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205142:	48 01 d0             	add    %rdx,%rax
  8004205145:	48 83 e8 01          	sub    $0x1,%rax
  8004205149:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420514d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205151:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205156:	48 f7 75 e0          	divq   -0x20(%rbp)
  800420515a:	48 89 d0             	mov    %rdx,%rax
  800420515d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004205161:	48 29 c2             	sub    %rax,%rdx
  8004205164:	48 89 d0             	mov    %rdx,%rax
  8004205167:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420516b:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205172:	00 
  8004205173:	e9 d4 00 00 00       	jmpq   800420524c <check_boot_pml4e+0x14d>
  8004205178:	48 ba 00 00 a0 00 80 	movabs $0x8000a00000,%rdx
  800420517f:	00 00 00 
  8004205182:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205186:	48 01 c2             	add    %rax,%rdx
  8004205189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420518d:	48 89 d6             	mov    %rdx,%rsi
  8004205190:	48 89 c7             	mov    %rax,%rdi
  8004205193:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420519a:	00 00 00 
  800420519d:	ff d0                	callq  *%rax
  800420519f:	48 ba 00 d6 6d 04 80 	movabs $0x80046dd600,%rdx
  80042051a6:	00 00 00 
  80042051a9:	48 8b 12             	mov    (%rdx),%rdx
  80042051ac:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  80042051b0:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042051b7:	00 00 00 
  80042051ba:	48 39 55 d0          	cmp    %rdx,-0x30(%rbp)
  80042051be:	77 32                	ja     80042051f2 <check_boot_pml4e+0xf3>
  80042051c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042051c4:	48 89 c1             	mov    %rax,%rcx
  80042051c7:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  80042051ce:	00 00 00 
  80042051d1:	be 96 04 00 00       	mov    $0x496,%esi
  80042051d6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042051dd:	00 00 00 
  80042051e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042051e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042051ec:	00 00 00 
  80042051ef:	41 ff d0             	callq  *%r8
  80042051f2:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042051f9:	ff ff ff 
  80042051fc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004205200:	48 01 d1             	add    %rdx,%rcx
  8004205203:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004205207:	48 01 ca             	add    %rcx,%rdx
  800420520a:	48 39 d0             	cmp    %rdx,%rax
  800420520d:	74 35                	je     8004205244 <check_boot_pml4e+0x145>
  800420520f:	48 b9 08 e7 21 04 80 	movabs $0x800421e708,%rcx
  8004205216:	00 00 00 
  8004205219:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205220:	00 00 00 
  8004205223:	be 96 04 00 00       	mov    $0x496,%esi
  8004205228:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420522f:	00 00 00 
  8004205232:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205237:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420523e:	00 00 00 
  8004205241:	41 ff d0             	callq  *%r8
  8004205244:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420524b:	00 
  800420524c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205250:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205254:	0f 82 1e ff ff ff    	jb     8004205178 <check_boot_pml4e+0x79>
  800420525a:	48 c7 45 c8 00 10 00 	movq   $0x1000,-0x38(%rbp)
  8004205261:	00 
  8004205262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205266:	48 05 ff 9f 05 00    	add    $0x59fff,%rax
  800420526c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205270:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205274:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205279:	48 f7 75 c8          	divq   -0x38(%rbp)
  800420527d:	48 89 d0             	mov    %rdx,%rax
  8004205280:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004205284:	48 29 c2             	sub    %rax,%rdx
  8004205287:	48 89 d0             	mov    %rdx,%rax
  800420528a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420528e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205295:	00 
  8004205296:	e9 d4 00 00 00       	jmpq   800420536f <check_boot_pml4e+0x270>
  800420529b:	48 ba 00 00 80 00 80 	movabs $0x8000800000,%rdx
  80042052a2:	00 00 00 
  80042052a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042052a9:	48 01 c2             	add    %rax,%rdx
  80042052ac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042052b0:	48 89 d6             	mov    %rdx,%rsi
  80042052b3:	48 89 c7             	mov    %rax,%rdi
  80042052b6:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042052bd:	00 00 00 
  80042052c0:	ff d0                	callq  *%rax
  80042052c2:	48 ba 58 e2 4d 04 80 	movabs $0x80044de258,%rdx
  80042052c9:	00 00 00 
  80042052cc:	48 8b 12             	mov    (%rdx),%rdx
  80042052cf:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042052d3:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  80042052da:	00 00 00 
  80042052dd:	48 39 55 b8          	cmp    %rdx,-0x48(%rbp)
  80042052e1:	77 32                	ja     8004205315 <check_boot_pml4e+0x216>
  80042052e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042052e7:	48 89 c1             	mov    %rax,%rcx
  80042052ea:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  80042052f1:	00 00 00 
  80042052f4:	be 9d 04 00 00       	mov    $0x49d,%esi
  80042052f9:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205300:	00 00 00 
  8004205303:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205308:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420530f:	00 00 00 
  8004205312:	41 ff d0             	callq  *%r8
  8004205315:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800420531c:	ff ff ff 
  800420531f:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004205323:	48 01 d1             	add    %rdx,%rcx
  8004205326:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420532a:	48 01 ca             	add    %rcx,%rdx
  800420532d:	48 39 d0             	cmp    %rdx,%rax
  8004205330:	74 35                	je     8004205367 <check_boot_pml4e+0x268>
  8004205332:	48 b9 40 e7 21 04 80 	movabs $0x800421e740,%rcx
  8004205339:	00 00 00 
  800420533c:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205343:	00 00 00 
  8004205346:	be 9d 04 00 00       	mov    $0x49d,%esi
  800420534b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205352:	00 00 00 
  8004205355:	b8 00 00 00 00       	mov    $0x0,%eax
  800420535a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205361:	00 00 00 
  8004205364:	41 ff d0             	callq  *%r8
  8004205367:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420536e:	00 
  800420536f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205373:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004205377:	0f 82 1e ff ff ff    	jb     800420529b <check_boot_pml4e+0x19c>
  800420537d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205384:	00 
  8004205385:	eb 6a                	jmp    80042053f1 <check_boot_pml4e+0x2f2>
  8004205387:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420538e:	00 00 00 
  8004205391:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205395:	48 01 c2             	add    %rax,%rdx
  8004205398:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420539c:	48 89 d6             	mov    %rdx,%rsi
  800420539f:	48 89 c7             	mov    %rax,%rdi
  80042053a2:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042053a9:	00 00 00 
  80042053ac:	ff d0                	callq  *%rax
  80042053ae:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042053b2:	74 35                	je     80042053e9 <check_boot_pml4e+0x2ea>
  80042053b4:	48 b9 78 e7 21 04 80 	movabs $0x800421e778,%rcx
  80042053bb:	00 00 00 
  80042053be:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042053c5:	00 00 00 
  80042053c8:	be a2 04 00 00       	mov    $0x4a2,%esi
  80042053cd:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042053d4:	00 00 00 
  80042053d7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042053dc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042053e3:	00 00 00 
  80042053e6:	41 ff d0             	callq  *%r8
  80042053e9:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042053f0:	00 
  80042053f1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042053f8:	00 00 00 
  80042053fb:	48 8b 00             	mov    (%rax),%rax
  80042053fe:	48 c1 e0 0c          	shl    $0xc,%rax
  8004205402:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004205406:	0f 87 7b ff ff ff    	ja     8004205387 <check_boot_pml4e+0x288>
  800420540c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004205413:	00 
  8004205414:	e9 a1 01 00 00       	jmpq   80042055ba <check_boot_pml4e+0x4bb>
  8004205419:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420541d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004205421:	48 89 d0             	mov    %rdx,%rax
  8004205424:	48 01 c0             	add    %rax,%rax
  8004205427:	48 01 d0             	add    %rdx,%rax
  800420542a:	48 c1 e0 0f          	shl    $0xf,%rax
  800420542e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205435:	00 00 00 
  8004205438:	48 29 c2             	sub    %rax,%rdx
  800420543b:	48 89 d0             	mov    %rdx,%rax
  800420543e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205442:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205449:	00 
  800420544a:	e9 e0 00 00 00       	jmpq   800420552f <check_boot_pml4e+0x430>
  800420544f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205453:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004205457:	48 01 d0             	add    %rdx,%rax
  800420545a:	48 8d 90 00 80 00 00 	lea    0x8000(%rax),%rdx
  8004205461:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205465:	48 89 d6             	mov    %rdx,%rsi
  8004205468:	48 89 c7             	mov    %rax,%rdi
  800420546b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205472:	00 00 00 
  8004205475:	ff d0                	callq  *%rax
  8004205477:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420547b:	48 89 d1             	mov    %rdx,%rcx
  800420547e:	48 c1 e1 10          	shl    $0x10,%rcx
  8004205482:	48 ba 00 00 6e 04 80 	movabs $0x80046e0000,%rdx
  8004205489:	00 00 00 
  800420548c:	48 01 ca             	add    %rcx,%rdx
  800420548f:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004205493:	48 ba ff ff ff 03 80 	movabs $0x8003ffffff,%rdx
  800420549a:	00 00 00 
  800420549d:	48 39 55 a8          	cmp    %rdx,-0x58(%rbp)
  80042054a1:	77 32                	ja     80042054d5 <check_boot_pml4e+0x3d6>
  80042054a3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042054a7:	48 89 c1             	mov    %rax,%rcx
  80042054aa:	48 ba 28 e3 21 04 80 	movabs $0x800421e328,%rdx
  80042054b1:	00 00 00 
  80042054b4:	be ab 04 00 00       	mov    $0x4ab,%esi
  80042054b9:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042054c0:	00 00 00 
  80042054c3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042054c8:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042054cf:	00 00 00 
  80042054d2:	41 ff d0             	callq  *%r8
  80042054d5:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042054dc:	ff ff ff 
  80042054df:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042054e3:	48 01 d1             	add    %rdx,%rcx
  80042054e6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042054ea:	48 01 ca             	add    %rcx,%rdx
  80042054ed:	48 39 d0             	cmp    %rdx,%rax
  80042054f0:	74 35                	je     8004205527 <check_boot_pml4e+0x428>
  80042054f2:	48 b9 a0 e7 21 04 80 	movabs $0x800421e7a0,%rcx
  80042054f9:	00 00 00 
  80042054fc:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205503:	00 00 00 
  8004205506:	be ab 04 00 00       	mov    $0x4ab,%esi
  800420550b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205512:	00 00 00 
  8004205515:	b8 00 00 00 00       	mov    $0x0,%eax
  800420551a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205521:	00 00 00 
  8004205524:	41 ff d0             	callq  *%r8
  8004205527:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  800420552e:	00 
  800420552f:	48 81 7d f8 ff ff 00 	cmpq   $0xffff,-0x8(%rbp)
  8004205536:	00 
  8004205537:	0f 86 12 ff ff ff    	jbe    800420544f <check_boot_pml4e+0x350>
  800420553d:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004205544:	00 
  8004205545:	eb 64                	jmp    80042055ab <check_boot_pml4e+0x4ac>
  8004205547:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420554b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800420554f:	48 01 c2             	add    %rax,%rdx
  8004205552:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205556:	48 89 d6             	mov    %rdx,%rsi
  8004205559:	48 89 c7             	mov    %rax,%rdi
  800420555c:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004205563:	00 00 00 
  8004205566:	ff d0                	callq  *%rax
  8004205568:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  800420556c:	74 35                	je     80042055a3 <check_boot_pml4e+0x4a4>
  800420556e:	48 b9 e8 e7 21 04 80 	movabs $0x800421e7e8,%rcx
  8004205575:	00 00 00 
  8004205578:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420557f:	00 00 00 
  8004205582:	be ad 04 00 00       	mov    $0x4ad,%esi
  8004205587:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420558e:	00 00 00 
  8004205591:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205596:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420559d:	00 00 00 
  80042055a0:	41 ff d0             	callq  *%r8
  80042055a3:	48 81 45 f8 00 10 00 	addq   $0x1000,-0x8(%rbp)
  80042055aa:	00 
  80042055ab:	48 81 7d f8 ff 7f 00 	cmpq   $0x7fff,-0x8(%rbp)
  80042055b2:	00 
  80042055b3:	76 92                	jbe    8004205547 <check_boot_pml4e+0x448>
  80042055b5:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  80042055ba:	48 83 7d f0 03       	cmpq   $0x3,-0x10(%rbp)
  80042055bf:	0f 86 54 fe ff ff    	jbe    8004205419 <check_boot_pml4e+0x31a>
  80042055c5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042055cc:	00 00 00 
  80042055cf:	48 8b 00             	mov    (%rax),%rax
  80042055d2:	48 83 c0 08          	add    $0x8,%rax
  80042055d6:	48 8b 00             	mov    (%rax),%rax
  80042055d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042055df:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  80042055e3:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042055e7:	48 c1 e8 0c          	shr    $0xc,%rax
  80042055eb:	89 45 9c             	mov    %eax,-0x64(%rbp)
  80042055ee:	8b 55 9c             	mov    -0x64(%rbp),%edx
  80042055f1:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042055f8:	00 00 00 
  80042055fb:	48 8b 00             	mov    (%rax),%rax
  80042055fe:	48 39 c2             	cmp    %rax,%rdx
  8004205601:	72 32                	jb     8004205635 <check_boot_pml4e+0x536>
  8004205603:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205607:	48 89 c1             	mov    %rax,%rcx
  800420560a:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004205611:	00 00 00 
  8004205614:	be b7 04 00 00       	mov    $0x4b7,%esi
  8004205619:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205620:	00 00 00 
  8004205623:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205628:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420562f:	00 00 00 
  8004205632:	41 ff d0             	callq  *%r8
  8004205635:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420563c:	00 00 00 
  800420563f:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205643:	48 01 d0             	add    %rdx,%rax
  8004205646:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  800420564a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800420564e:	48 8b 00             	mov    (%rax),%rax
  8004205651:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205657:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800420565b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420565f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205663:	89 45 84             	mov    %eax,-0x7c(%rbp)
  8004205666:	8b 55 84             	mov    -0x7c(%rbp),%edx
  8004205669:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205670:	00 00 00 
  8004205673:	48 8b 00             	mov    (%rax),%rax
  8004205676:	48 39 c2             	cmp    %rax,%rdx
  8004205679:	72 32                	jb     80042056ad <check_boot_pml4e+0x5ae>
  800420567b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800420567f:	48 89 c1             	mov    %rax,%rcx
  8004205682:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004205689:	00 00 00 
  800420568c:	be b8 04 00 00       	mov    $0x4b8,%esi
  8004205691:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205698:	00 00 00 
  800420569b:	b8 00 00 00 00       	mov    $0x0,%eax
  80042056a0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042056a7:	00 00 00 
  80042056aa:	41 ff d0             	callq  *%r8
  80042056ad:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042056b4:	00 00 00 
  80042056b7:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042056bb:	48 01 d0             	add    %rdx,%rax
  80042056be:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042056c5:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042056cc:	00 
  80042056cd:	e9 50 01 00 00       	jmpq   8004205822 <check_boot_pml4e+0x723>
  80042056d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056d6:	48 83 f8 04          	cmp    $0x4,%rax
  80042056da:	72 67                	jb     8004205743 <check_boot_pml4e+0x644>
  80042056dc:	48 83 f8 05          	cmp    $0x5,%rax
  80042056e0:	76 06                	jbe    80042056e8 <check_boot_pml4e+0x5e9>
  80042056e2:	48 83 f8 1f          	cmp    $0x1f,%rax
  80042056e6:	75 5b                	jne    8004205743 <check_boot_pml4e+0x644>
  80042056e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042056ec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042056f3:	00 
  80042056f4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042056fb:	48 01 d0             	add    %rdx,%rax
  80042056fe:	48 8b 00             	mov    (%rax),%rax
  8004205701:	83 e0 01             	and    $0x1,%eax
  8004205704:	48 85 c0             	test   %rax,%rax
  8004205707:	75 35                	jne    800420573e <check_boot_pml4e+0x63f>
  8004205709:	48 b9 0b e8 21 04 80 	movabs $0x800421e80b,%rcx
  8004205710:	00 00 00 
  8004205713:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420571a:	00 00 00 
  800420571d:	be c2 04 00 00       	mov    $0x4c2,%esi
  8004205722:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205729:	00 00 00 
  800420572c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205731:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205738:	00 00 00 
  800420573b:	41 ff d0             	callq  *%r8
  800420573e:	e9 da 00 00 00       	jmpq   800420581d <check_boot_pml4e+0x71e>
  8004205743:	48 83 7d f8 1f       	cmpq   $0x1f,-0x8(%rbp)
  8004205748:	0f 86 ce 00 00 00    	jbe    800420581c <check_boot_pml4e+0x71d>
  800420574e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205752:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205759:	00 
  800420575a:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205761:	48 01 d0             	add    %rdx,%rax
  8004205764:	48 8b 00             	mov    (%rax),%rax
  8004205767:	83 e0 01             	and    $0x1,%eax
  800420576a:	48 85 c0             	test   %rax,%rax
  800420576d:	74 5a                	je     80042057c9 <check_boot_pml4e+0x6ca>
  800420576f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004205773:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420577a:	00 
  800420577b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004205782:	48 01 d0             	add    %rdx,%rax
  8004205785:	48 8b 00             	mov    (%rax),%rax
  8004205788:	83 e0 02             	and    $0x2,%eax
  800420578b:	48 85 c0             	test   %rax,%rax
  800420578e:	0f 85 88 00 00 00    	jne    800420581c <check_boot_pml4e+0x71d>
  8004205794:	48 b9 1c e8 21 04 80 	movabs $0x800421e81c,%rcx
  800420579b:	00 00 00 
  800420579e:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042057a5:	00 00 00 
  80042057a8:	be c7 04 00 00       	mov    $0x4c7,%esi
  80042057ad:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042057b4:	00 00 00 
  80042057b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042057bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042057c3:	00 00 00 
  80042057c6:	41 ff d0             	callq  *%r8
  80042057c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042057cd:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042057d4:	00 
  80042057d5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042057dc:	48 01 d0             	add    %rdx,%rax
  80042057df:	48 8b 00             	mov    (%rax),%rax
  80042057e2:	48 85 c0             	test   %rax,%rax
  80042057e5:	74 35                	je     800420581c <check_boot_pml4e+0x71d>
  80042057e7:	48 b9 2d e8 21 04 80 	movabs $0x800421e82d,%rcx
  80042057ee:	00 00 00 
  80042057f1:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042057f8:	00 00 00 
  80042057fb:	be c9 04 00 00       	mov    $0x4c9,%esi
  8004205800:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205807:	00 00 00 
  800420580a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420580f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205816:	00 00 00 
  8004205819:	41 ff d0             	callq  *%r8
  800420581c:	90                   	nop
  800420581d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004205822:	48 81 7d f8 ff 01 00 	cmpq   $0x1ff,-0x8(%rbp)
  8004205829:	00 
  800420582a:	0f 86 a2 fe ff ff    	jbe    80042056d2 <check_boot_pml4e+0x5d3>
  8004205830:	48 bf 40 e8 21 04 80 	movabs $0x800421e840,%rdi
  8004205837:	00 00 00 
  800420583a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420583f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004205846:	00 00 00 
  8004205849:	ff d2                	callq  *%rdx
  800420584b:	c9                   	leaveq 
  800420584c:	c3                   	retq   

000000800420584d <check_va2pa>:
  800420584d:	55                   	push   %rbp
  800420584e:	48 89 e5             	mov    %rsp,%rbp
  8004205851:	48 83 ec 60          	sub    $0x60,%rsp
  8004205855:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004205859:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420585d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205861:	48 c1 e8 27          	shr    $0x27,%rax
  8004205865:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420586a:	48 c1 e0 03          	shl    $0x3,%rax
  800420586e:	48 01 45 a8          	add    %rax,-0x58(%rbp)
  8004205872:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205876:	48 8b 00             	mov    (%rax),%rax
  8004205879:	83 e0 01             	and    $0x1,%eax
  800420587c:	48 85 c0             	test   %rax,%rax
  800420587f:	75 0c                	jne    800420588d <check_va2pa+0x40>
  8004205881:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205888:	e9 38 02 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  800420588d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004205891:	48 8b 00             	mov    (%rax),%rax
  8004205894:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420589a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420589e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058a2:	48 c1 e8 0c          	shr    $0xc,%rax
  80042058a6:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042058a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042058ac:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042058b3:	00 00 00 
  80042058b6:	48 8b 00             	mov    (%rax),%rax
  80042058b9:	48 39 c2             	cmp    %rax,%rdx
  80042058bc:	72 32                	jb     80042058f0 <check_va2pa+0xa3>
  80042058be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058c2:	48 89 c1             	mov    %rax,%rcx
  80042058c5:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042058cc:	00 00 00 
  80042058cf:	be e1 04 00 00       	mov    $0x4e1,%esi
  80042058d4:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042058db:	00 00 00 
  80042058de:	b8 00 00 00 00       	mov    $0x0,%eax
  80042058e3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042058ea:	00 00 00 
  80042058ed:	41 ff d0             	callq  *%r8
  80042058f0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042058f7:	00 00 00 
  80042058fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042058fe:	48 01 d0             	add    %rdx,%rax
  8004205901:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004205905:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205909:	48 c1 e8 1e          	shr    $0x1e,%rax
  800420590d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205912:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205919:	00 
  800420591a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420591e:	48 01 d0             	add    %rdx,%rax
  8004205921:	48 8b 00             	mov    (%rax),%rax
  8004205924:	83 e0 01             	and    $0x1,%eax
  8004205927:	48 85 c0             	test   %rax,%rax
  800420592a:	75 0c                	jne    8004205938 <check_va2pa+0xeb>
  800420592c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205933:	e9 8d 01 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  8004205938:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800420593c:	48 c1 e8 1e          	shr    $0x1e,%rax
  8004205940:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205945:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420594c:	00 
  800420594d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004205951:	48 01 d0             	add    %rdx,%rax
  8004205954:	48 8b 00             	mov    (%rax),%rax
  8004205957:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420595d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205961:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205965:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205969:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800420596c:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800420596f:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205976:	00 00 00 
  8004205979:	48 8b 00             	mov    (%rax),%rax
  800420597c:	48 39 c2             	cmp    %rax,%rdx
  800420597f:	72 32                	jb     80042059b3 <check_va2pa+0x166>
  8004205981:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205985:	48 89 c1             	mov    %rax,%rcx
  8004205988:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  800420598f:	00 00 00 
  8004205992:	be e5 04 00 00       	mov    $0x4e5,%esi
  8004205997:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420599e:	00 00 00 
  80042059a1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042059a6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042059ad:	00 00 00 
  80042059b0:	41 ff d0             	callq  *%r8
  80042059b3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042059ba:	00 00 00 
  80042059bd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042059c1:	48 01 d0             	add    %rdx,%rax
  80042059c4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042059c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042059cc:	48 c1 e8 15          	shr    $0x15,%rax
  80042059d0:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042059d5:	48 c1 e0 03          	shl    $0x3,%rax
  80042059d9:	48 01 45 d0          	add    %rax,-0x30(%rbp)
  80042059dd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059e1:	48 8b 00             	mov    (%rax),%rax
  80042059e4:	83 e0 01             	and    $0x1,%eax
  80042059e7:	48 85 c0             	test   %rax,%rax
  80042059ea:	75 0c                	jne    80042059f8 <check_va2pa+0x1ab>
  80042059ec:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  80042059f3:	e9 cd 00 00 00       	jmpq   8004205ac5 <check_va2pa+0x278>
  80042059f8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042059fc:	48 8b 00             	mov    (%rax),%rax
  80042059ff:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205a05:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205a09:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a0d:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a11:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  8004205a14:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004205a17:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004205a1e:	00 00 00 
  8004205a21:	48 8b 00             	mov    (%rax),%rax
  8004205a24:	48 39 c2             	cmp    %rax,%rdx
  8004205a27:	72 32                	jb     8004205a5b <check_va2pa+0x20e>
  8004205a29:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a2d:	48 89 c1             	mov    %rax,%rcx
  8004205a30:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004205a37:	00 00 00 
  8004205a3a:	be ea 04 00 00       	mov    $0x4ea,%esi
  8004205a3f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205a46:	00 00 00 
  8004205a49:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205a4e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205a55:	00 00 00 
  8004205a58:	41 ff d0             	callq  *%r8
  8004205a5b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004205a62:	00 00 00 
  8004205a65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205a69:	48 01 d0             	add    %rdx,%rax
  8004205a6c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205a70:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205a74:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205a78:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205a7d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205a84:	00 
  8004205a85:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205a89:	48 01 d0             	add    %rdx,%rax
  8004205a8c:	48 8b 00             	mov    (%rax),%rax
  8004205a8f:	83 e0 01             	and    $0x1,%eax
  8004205a92:	48 85 c0             	test   %rax,%rax
  8004205a95:	75 09                	jne    8004205aa0 <check_va2pa+0x253>
  8004205a97:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
  8004205a9e:	eb 25                	jmp    8004205ac5 <check_va2pa+0x278>
  8004205aa0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004205aa4:	48 c1 e8 0c          	shr    $0xc,%rax
  8004205aa8:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004205aad:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004205ab4:	00 
  8004205ab5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004205ab9:	48 01 d0             	add    %rdx,%rax
  8004205abc:	48 8b 00             	mov    (%rax),%rax
  8004205abf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004205ac5:	c9                   	leaveq 
  8004205ac6:	c3                   	retq   

0000008004205ac7 <page_check>:
  8004205ac7:	55                   	push   %rbp
  8004205ac8:	48 89 e5             	mov    %rsp,%rbp
  8004205acb:	53                   	push   %rbx
  8004205acc:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
  8004205ad3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  8004205ada:	00 
  8004205adb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205adf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205ae3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205ae7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205aeb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205aef:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205afb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205aff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b03:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b08:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b0f:	00 00 00 
  8004205b12:	ff d0                	callq  *%rax
  8004205b14:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  8004205b18:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205b1d:	75 35                	jne    8004205b54 <page_check+0x8d>
  8004205b1f:	48 b9 5f e8 21 04 80 	movabs $0x800421e85f,%rcx
  8004205b26:	00 00 00 
  8004205b29:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205b30:	00 00 00 
  8004205b33:	be 02 05 00 00       	mov    $0x502,%esi
  8004205b38:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205b3f:	00 00 00 
  8004205b42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b4e:	00 00 00 
  8004205b51:	41 ff d0             	callq  *%r8
  8004205b54:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205b59:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205b60:	00 00 00 
  8004205b63:	ff d0                	callq  *%rax
  8004205b65:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004205b69:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205b6e:	75 35                	jne    8004205ba5 <page_check+0xde>
  8004205b70:	48 b9 73 e8 21 04 80 	movabs $0x800421e873,%rcx
  8004205b77:	00 00 00 
  8004205b7a:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205b81:	00 00 00 
  8004205b84:	be 03 05 00 00       	mov    $0x503,%esi
  8004205b89:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205b90:	00 00 00 
  8004205b93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205b98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205b9f:	00 00 00 
  8004205ba2:	41 ff d0             	callq  *%r8
  8004205ba5:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205baa:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205bb1:	00 00 00 
  8004205bb4:	ff d0                	callq  *%rax
  8004205bb6:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004205bba:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205bbf:	75 35                	jne    8004205bf6 <page_check+0x12f>
  8004205bc1:	48 b9 87 e8 21 04 80 	movabs $0x800421e887,%rcx
  8004205bc8:	00 00 00 
  8004205bcb:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205bd2:	00 00 00 
  8004205bd5:	be 04 05 00 00       	mov    $0x504,%esi
  8004205bda:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205be1:	00 00 00 
  8004205be4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205be9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205bf0:	00 00 00 
  8004205bf3:	41 ff d0             	callq  *%r8
  8004205bf6:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205bfb:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c02:	00 00 00 
  8004205c05:	ff d0                	callq  *%rax
  8004205c07:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004205c0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205c10:	75 35                	jne    8004205c47 <page_check+0x180>
  8004205c12:	48 b9 9b e8 21 04 80 	movabs $0x800421e89b,%rcx
  8004205c19:	00 00 00 
  8004205c1c:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205c23:	00 00 00 
  8004205c26:	be 05 05 00 00       	mov    $0x505,%esi
  8004205c2b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205c32:	00 00 00 
  8004205c35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c41:	00 00 00 
  8004205c44:	41 ff d0             	callq  *%r8
  8004205c47:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c4c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205c53:	00 00 00 
  8004205c56:	ff d0                	callq  *%rax
  8004205c58:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004205c5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205c61:	75 35                	jne    8004205c98 <page_check+0x1d1>
  8004205c63:	48 b9 af e8 21 04 80 	movabs $0x800421e8af,%rcx
  8004205c6a:	00 00 00 
  8004205c6d:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205c74:	00 00 00 
  8004205c77:	be 06 05 00 00       	mov    $0x506,%esi
  8004205c7c:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205c83:	00 00 00 
  8004205c86:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205c8b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205c92:	00 00 00 
  8004205c95:	41 ff d0             	callq  *%r8
  8004205c98:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205c9d:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205ca4:	00 00 00 
  8004205ca7:	ff d0                	callq  *%rax
  8004205ca9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004205cad:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205cb2:	75 35                	jne    8004205ce9 <page_check+0x222>
  8004205cb4:	48 b9 c3 e8 21 04 80 	movabs $0x800421e8c3,%rcx
  8004205cbb:	00 00 00 
  8004205cbe:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205cc5:	00 00 00 
  8004205cc8:	be 07 05 00 00       	mov    $0x507,%esi
  8004205ccd:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205cd4:	00 00 00 
  8004205cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205cdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ce3:	00 00 00 
  8004205ce6:	41 ff d0             	callq  *%r8
  8004205ce9:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004205cee:	75 35                	jne    8004205d25 <page_check+0x25e>
  8004205cf0:	48 b9 11 e6 21 04 80 	movabs $0x800421e611,%rcx
  8004205cf7:	00 00 00 
  8004205cfa:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205d01:	00 00 00 
  8004205d04:	be 09 05 00 00       	mov    $0x509,%esi
  8004205d09:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205d10:	00 00 00 
  8004205d13:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d18:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d1f:	00 00 00 
  8004205d22:	41 ff d0             	callq  *%r8
  8004205d25:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004205d2a:	74 0a                	je     8004205d36 <page_check+0x26f>
  8004205d2c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004205d30:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d34:	75 35                	jne    8004205d6b <page_check+0x2a4>
  8004205d36:	48 b9 15 e6 21 04 80 	movabs $0x800421e615,%rcx
  8004205d3d:	00 00 00 
  8004205d40:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205d47:	00 00 00 
  8004205d4a:	be 0a 05 00 00       	mov    $0x50a,%esi
  8004205d4f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205d56:	00 00 00 
  8004205d59:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205d5e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205d65:	00 00 00 
  8004205d68:	41 ff d0             	callq  *%r8
  8004205d6b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004205d70:	74 14                	je     8004205d86 <page_check+0x2bf>
  8004205d72:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d76:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205d7a:	74 0a                	je     8004205d86 <page_check+0x2bf>
  8004205d7c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004205d80:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205d84:	75 35                	jne    8004205dbb <page_check+0x2f4>
  8004205d86:	48 b9 28 e6 21 04 80 	movabs $0x800421e628,%rcx
  8004205d8d:	00 00 00 
  8004205d90:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205d97:	00 00 00 
  8004205d9a:	be 0b 05 00 00       	mov    $0x50b,%esi
  8004205d9f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205da6:	00 00 00 
  8004205da9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205dae:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205db5:	00 00 00 
  8004205db8:	41 ff d0             	callq  *%r8
  8004205dbb:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004205dc0:	74 1e                	je     8004205de0 <page_check+0x319>
  8004205dc2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dc6:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205dca:	74 14                	je     8004205de0 <page_check+0x319>
  8004205dcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dd0:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205dd4:	74 0a                	je     8004205de0 <page_check+0x319>
  8004205dd6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004205dda:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205dde:	75 35                	jne    8004205e15 <page_check+0x34e>
  8004205de0:	48 b9 d8 e8 21 04 80 	movabs $0x800421e8d8,%rcx
  8004205de7:	00 00 00 
  8004205dea:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205df1:	00 00 00 
  8004205df4:	be 0c 05 00 00       	mov    $0x50c,%esi
  8004205df9:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205e00:	00 00 00 
  8004205e03:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e08:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e0f:	00 00 00 
  8004205e12:	41 ff d0             	callq  *%r8
  8004205e15:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004205e1a:	74 28                	je     8004205e44 <page_check+0x37d>
  8004205e1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e20:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e24:	74 1e                	je     8004205e44 <page_check+0x37d>
  8004205e26:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e2a:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e2e:	74 14                	je     8004205e44 <page_check+0x37d>
  8004205e30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e34:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205e38:	74 0a                	je     8004205e44 <page_check+0x37d>
  8004205e3a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004205e3e:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205e42:	75 35                	jne    8004205e79 <page_check+0x3b2>
  8004205e44:	48 b9 08 e9 21 04 80 	movabs $0x800421e908,%rcx
  8004205e4b:	00 00 00 
  8004205e4e:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205e55:	00 00 00 
  8004205e58:	be 0d 05 00 00       	mov    $0x50d,%esi
  8004205e5d:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205e64:	00 00 00 
  8004205e67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205e6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205e73:	00 00 00 
  8004205e76:	41 ff d0             	callq  *%r8
  8004205e79:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004205e7e:	74 32                	je     8004205eb2 <page_check+0x3eb>
  8004205e80:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e84:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  8004205e88:	74 28                	je     8004205eb2 <page_check+0x3eb>
  8004205e8a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e8e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004205e92:	74 1e                	je     8004205eb2 <page_check+0x3eb>
  8004205e94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205e98:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004205e9c:	74 14                	je     8004205eb2 <page_check+0x3eb>
  8004205e9e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205ea2:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004205ea6:	74 0a                	je     8004205eb2 <page_check+0x3eb>
  8004205ea8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004205eac:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004205eb0:	75 35                	jne    8004205ee7 <page_check+0x420>
  8004205eb2:	48 b9 48 e9 21 04 80 	movabs $0x800421e948,%rcx
  8004205eb9:	00 00 00 
  8004205ebc:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205ec3:	00 00 00 
  8004205ec6:	be 0e 05 00 00       	mov    $0x50e,%esi
  8004205ecb:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205ed2:	00 00 00 
  8004205ed5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205eda:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205ee1:	00 00 00 
  8004205ee4:	41 ff d0             	callq  *%r8
  8004205ee7:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004205eee:	00 00 00 
  8004205ef1:	48 8b 00             	mov    (%rax),%rax
  8004205ef4:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  8004205ef8:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  8004205eff:	00 00 00 
  8004205f02:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004205f09:	bf 00 00 00 00       	mov    $0x0,%edi
  8004205f0e:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004205f15:	00 00 00 
  8004205f18:	ff d0                	callq  *%rax
  8004205f1a:	48 85 c0             	test   %rax,%rax
  8004205f1d:	74 35                	je     8004205f54 <page_check+0x48d>
  8004205f1f:	48 b9 9f e6 21 04 80 	movabs $0x800421e69f,%rcx
  8004205f26:	00 00 00 
  8004205f29:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205f30:	00 00 00 
  8004205f33:	be 15 05 00 00       	mov    $0x515,%esi
  8004205f38:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205f3f:	00 00 00 
  8004205f42:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205f47:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205f4e:	00 00 00 
  8004205f51:	41 ff d0             	callq  *%r8
  8004205f54:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004205f5b:	00 00 00 
  8004205f5e:	48 8b 00             	mov    (%rax),%rax
  8004205f61:	48 8d 95 e0 fe ff ff 	lea    -0x120(%rbp),%rdx
  8004205f68:	be 00 00 00 00       	mov    $0x0,%esi
  8004205f6d:	48 89 c7             	mov    %rax,%rdi
  8004205f70:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  8004205f77:	00 00 00 
  8004205f7a:	ff d0                	callq  *%rax
  8004205f7c:	48 85 c0             	test   %rax,%rax
  8004205f7f:	74 35                	je     8004205fb6 <page_check+0x4ef>
  8004205f81:	48 b9 98 e9 21 04 80 	movabs $0x800421e998,%rcx
  8004205f88:	00 00 00 
  8004205f8b:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205f92:	00 00 00 
  8004205f95:	be 18 05 00 00       	mov    $0x518,%esi
  8004205f9a:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004205fa1:	00 00 00 
  8004205fa4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004205fa9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004205fb0:	00 00 00 
  8004205fb3:	41 ff d0             	callq  *%r8
  8004205fb6:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004205fbd:	00 00 00 
  8004205fc0:	48 8b 00             	mov    (%rax),%rax
  8004205fc3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004205fc7:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004205fcc:	ba 00 00 00 00       	mov    $0x0,%edx
  8004205fd1:	48 89 c7             	mov    %rax,%rdi
  8004205fd4:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004205fdb:	00 00 00 
  8004205fde:	ff d0                	callq  *%rax
  8004205fe0:	85 c0                	test   %eax,%eax
  8004205fe2:	78 35                	js     8004206019 <page_check+0x552>
  8004205fe4:	48 b9 d0 e9 21 04 80 	movabs $0x800421e9d0,%rcx
  8004205feb:	00 00 00 
  8004205fee:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004205ff5:	00 00 00 
  8004205ff8:	be 1b 05 00 00       	mov    $0x51b,%esi
  8004205ffd:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206004:	00 00 00 
  8004206007:	b8 00 00 00 00       	mov    $0x0,%eax
  800420600c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206013:	00 00 00 
  8004206016:	41 ff d0             	callq  *%r8
  8004206019:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420601d:	48 89 c7             	mov    %rax,%rdi
  8004206020:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  8004206027:	00 00 00 
  800420602a:	ff d0                	callq  *%rax
  800420602c:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206033:	00 00 00 
  8004206036:	48 8b 00             	mov    (%rax),%rax
  8004206039:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420603d:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206042:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206047:	48 89 c7             	mov    %rax,%rdi
  800420604a:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206051:	00 00 00 
  8004206054:	ff d0                	callq  *%rax
  8004206056:	85 c0                	test   %eax,%eax
  8004206058:	78 35                	js     800420608f <page_check+0x5c8>
  800420605a:	48 b9 d0 e9 21 04 80 	movabs $0x800421e9d0,%rcx
  8004206061:	00 00 00 
  8004206064:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420606b:	00 00 00 
  800420606e:	be 1f 05 00 00       	mov    $0x51f,%esi
  8004206073:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420607a:	00 00 00 
  800420607d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206082:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206089:	00 00 00 
  800420608c:	41 ff d0             	callq  *%r8
  800420608f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004206093:	48 89 c7             	mov    %rax,%rdi
  8004206096:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420609d:	00 00 00 
  80042060a0:	ff d0                	callq  *%rax
  80042060a2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042060a6:	48 89 c7             	mov    %rax,%rdi
  80042060a9:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  80042060b0:	00 00 00 
  80042060b3:	ff d0                	callq  *%rax
  80042060b5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042060bc:	00 00 00 
  80042060bf:	48 8b 00             	mov    (%rax),%rax
  80042060c2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042060c6:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042060cb:	ba 00 00 00 00       	mov    $0x0,%edx
  80042060d0:	48 89 c7             	mov    %rax,%rdi
  80042060d3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042060da:	00 00 00 
  80042060dd:	ff d0                	callq  *%rax
  80042060df:	85 c0                	test   %eax,%eax
  80042060e1:	74 35                	je     8004206118 <page_check+0x651>
  80042060e3:	48 b9 00 ea 21 04 80 	movabs $0x800421ea00,%rcx
  80042060ea:	00 00 00 
  80042060ed:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042060f4:	00 00 00 
  80042060f7:	be 25 05 00 00       	mov    $0x525,%esi
  80042060fc:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206103:	00 00 00 
  8004206106:	b8 00 00 00 00       	mov    $0x0,%eax
  800420610b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206112:	00 00 00 
  8004206115:	41 ff d0             	callq  *%r8
  8004206118:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420611f:	00 00 00 
  8004206122:	48 8b 00             	mov    (%rax),%rax
  8004206125:	48 8b 00             	mov    (%rax),%rax
  8004206128:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420612e:	48 89 c3             	mov    %rax,%rbx
  8004206131:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004206135:	48 89 c7             	mov    %rax,%rdi
  8004206138:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  800420613f:	00 00 00 
  8004206142:	ff d0                	callq  *%rax
  8004206144:	48 39 c3             	cmp    %rax,%rbx
  8004206147:	0f 84 97 00 00 00    	je     80042061e4 <page_check+0x71d>
  800420614d:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206154:	00 00 00 
  8004206157:	48 8b 00             	mov    (%rax),%rax
  800420615a:	48 8b 00             	mov    (%rax),%rax
  800420615d:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206163:	48 89 c3             	mov    %rax,%rbx
  8004206166:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420616a:	48 89 c7             	mov    %rax,%rdi
  800420616d:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206174:	00 00 00 
  8004206177:	ff d0                	callq  *%rax
  8004206179:	48 39 c3             	cmp    %rax,%rbx
  800420617c:	74 66                	je     80042061e4 <page_check+0x71d>
  800420617e:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206185:	00 00 00 
  8004206188:	48 8b 00             	mov    (%rax),%rax
  800420618b:	48 8b 00             	mov    (%rax),%rax
  800420618e:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206194:	48 89 c3             	mov    %rax,%rbx
  8004206197:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420619b:	48 89 c7             	mov    %rax,%rdi
  800420619e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042061a5:	00 00 00 
  80042061a8:	ff d0                	callq  *%rax
  80042061aa:	48 39 c3             	cmp    %rax,%rbx
  80042061ad:	74 35                	je     80042061e4 <page_check+0x71d>
  80042061af:	48 b9 30 ea 21 04 80 	movabs $0x800421ea30,%rcx
  80042061b6:	00 00 00 
  80042061b9:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042061c0:	00 00 00 
  80042061c3:	be 26 05 00 00       	mov    $0x526,%esi
  80042061c8:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042061cf:	00 00 00 
  80042061d2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042061d7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042061de:	00 00 00 
  80042061e1:	41 ff d0             	callq  *%r8
  80042061e4:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042061eb:	00 00 00 
  80042061ee:	48 8b 00             	mov    (%rax),%rax
  80042061f1:	be 00 00 00 00       	mov    $0x0,%esi
  80042061f6:	48 89 c7             	mov    %rax,%rdi
  80042061f9:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206200:	00 00 00 
  8004206203:	ff d0                	callq  *%rax
  8004206205:	48 89 c3             	mov    %rax,%rbx
  8004206208:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800420620c:	48 89 c7             	mov    %rax,%rdi
  800420620f:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206216:	00 00 00 
  8004206219:	ff d0                	callq  *%rax
  800420621b:	48 39 c3             	cmp    %rax,%rbx
  800420621e:	74 35                	je     8004206255 <page_check+0x78e>
  8004206220:	48 b9 b8 ea 21 04 80 	movabs $0x800421eab8,%rcx
  8004206227:	00 00 00 
  800420622a:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206231:	00 00 00 
  8004206234:	be 27 05 00 00       	mov    $0x527,%esi
  8004206239:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206240:	00 00 00 
  8004206243:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206248:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420624f:	00 00 00 
  8004206252:	41 ff d0             	callq  *%r8
  8004206255:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206259:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420625d:	66 83 f8 01          	cmp    $0x1,%ax
  8004206261:	74 35                	je     8004206298 <page_check+0x7d1>
  8004206263:	48 b9 e5 ea 21 04 80 	movabs $0x800421eae5,%rcx
  800420626a:	00 00 00 
  800420626d:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206274:	00 00 00 
  8004206277:	be 28 05 00 00       	mov    $0x528,%esi
  800420627c:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206283:	00 00 00 
  8004206286:	b8 00 00 00 00       	mov    $0x0,%eax
  800420628b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206292:	00 00 00 
  8004206295:	41 ff d0             	callq  *%r8
  8004206298:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800420629c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062a0:	66 83 f8 01          	cmp    $0x1,%ax
  80042062a4:	74 35                	je     80042062db <page_check+0x814>
  80042062a6:	48 b9 f6 ea 21 04 80 	movabs $0x800421eaf6,%rcx
  80042062ad:	00 00 00 
  80042062b0:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042062b7:	00 00 00 
  80042062ba:	be 29 05 00 00       	mov    $0x529,%esi
  80042062bf:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042062c6:	00 00 00 
  80042062c9:	b8 00 00 00 00       	mov    $0x0,%eax
  80042062ce:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042062d5:	00 00 00 
  80042062d8:	41 ff d0             	callq  *%r8
  80042062db:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042062df:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042062e3:	66 83 f8 01          	cmp    $0x1,%ax
  80042062e7:	74 35                	je     800420631e <page_check+0x857>
  80042062e9:	48 b9 07 eb 21 04 80 	movabs $0x800421eb07,%rcx
  80042062f0:	00 00 00 
  80042062f3:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042062fa:	00 00 00 
  80042062fd:	be 2a 05 00 00       	mov    $0x52a,%esi
  8004206302:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206309:	00 00 00 
  800420630c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206311:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206318:	00 00 00 
  800420631b:	41 ff d0             	callq  *%r8
  800420631e:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206325:	00 00 00 
  8004206328:	48 8b 00             	mov    (%rax),%rax
  800420632b:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  800420632f:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206334:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206339:	48 89 c7             	mov    %rax,%rdi
  800420633c:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206343:	00 00 00 
  8004206346:	ff d0                	callq  *%rax
  8004206348:	85 c0                	test   %eax,%eax
  800420634a:	74 35                	je     8004206381 <page_check+0x8ba>
  800420634c:	48 b9 18 eb 21 04 80 	movabs $0x800421eb18,%rcx
  8004206353:	00 00 00 
  8004206356:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420635d:	00 00 00 
  8004206360:	be 2c 05 00 00       	mov    $0x52c,%esi
  8004206365:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420636c:	00 00 00 
  800420636f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206374:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420637b:	00 00 00 
  800420637e:	41 ff d0             	callq  *%r8
  8004206381:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206388:	00 00 00 
  800420638b:	48 8b 00             	mov    (%rax),%rax
  800420638e:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206393:	48 89 c7             	mov    %rax,%rdi
  8004206396:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  800420639d:	00 00 00 
  80042063a0:	ff d0                	callq  *%rax
  80042063a2:	48 89 c3             	mov    %rax,%rbx
  80042063a5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063a9:	48 89 c7             	mov    %rax,%rdi
  80042063ac:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  80042063b3:	00 00 00 
  80042063b6:	ff d0                	callq  *%rax
  80042063b8:	48 39 c3             	cmp    %rax,%rbx
  80042063bb:	74 35                	je     80042063f2 <page_check+0x92b>
  80042063bd:	48 b9 50 eb 21 04 80 	movabs $0x800421eb50,%rcx
  80042063c4:	00 00 00 
  80042063c7:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042063ce:	00 00 00 
  80042063d1:	be 2d 05 00 00       	mov    $0x52d,%esi
  80042063d6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042063dd:	00 00 00 
  80042063e0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042063e5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042063ec:	00 00 00 
  80042063ef:	41 ff d0             	callq  *%r8
  80042063f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042063f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042063fa:	66 83 f8 02          	cmp    $0x2,%ax
  80042063fe:	74 35                	je     8004206435 <page_check+0x96e>
  8004206400:	48 b9 80 eb 21 04 80 	movabs $0x800421eb80,%rcx
  8004206407:	00 00 00 
  800420640a:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206411:	00 00 00 
  8004206414:	be 2e 05 00 00       	mov    $0x52e,%esi
  8004206419:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206420:	00 00 00 
  8004206423:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206428:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420642f:	00 00 00 
  8004206432:	41 ff d0             	callq  *%r8
  8004206435:	bf 00 00 00 00       	mov    $0x0,%edi
  800420643a:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004206441:	00 00 00 
  8004206444:	ff d0                	callq  *%rax
  8004206446:	48 85 c0             	test   %rax,%rax
  8004206449:	74 35                	je     8004206480 <page_check+0x9b9>
  800420644b:	48 b9 9f e6 21 04 80 	movabs $0x800421e69f,%rcx
  8004206452:	00 00 00 
  8004206455:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420645c:	00 00 00 
  800420645f:	be 31 05 00 00       	mov    $0x531,%esi
  8004206464:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420646b:	00 00 00 
  800420646e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206473:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420647a:	00 00 00 
  800420647d:	41 ff d0             	callq  *%r8
  8004206480:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206487:	00 00 00 
  800420648a:	48 8b 00             	mov    (%rax),%rax
  800420648d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004206491:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206496:	ba 00 10 00 00       	mov    $0x1000,%edx
  800420649b:	48 89 c7             	mov    %rax,%rdi
  800420649e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042064a5:	00 00 00 
  80042064a8:	ff d0                	callq  *%rax
  80042064aa:	85 c0                	test   %eax,%eax
  80042064ac:	74 35                	je     80042064e3 <page_check+0xa1c>
  80042064ae:	48 b9 18 eb 21 04 80 	movabs $0x800421eb18,%rcx
  80042064b5:	00 00 00 
  80042064b8:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042064bf:	00 00 00 
  80042064c2:	be 34 05 00 00       	mov    $0x534,%esi
  80042064c7:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042064ce:	00 00 00 
  80042064d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042064d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042064dd:	00 00 00 
  80042064e0:	41 ff d0             	callq  *%r8
  80042064e3:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042064ea:	00 00 00 
  80042064ed:	48 8b 00             	mov    (%rax),%rax
  80042064f0:	be 00 10 00 00       	mov    $0x1000,%esi
  80042064f5:	48 89 c7             	mov    %rax,%rdi
  80042064f8:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042064ff:	00 00 00 
  8004206502:	ff d0                	callq  *%rax
  8004206504:	48 89 c3             	mov    %rax,%rbx
  8004206507:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420650b:	48 89 c7             	mov    %rax,%rdi
  800420650e:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206515:	00 00 00 
  8004206518:	ff d0                	callq  *%rax
  800420651a:	48 39 c3             	cmp    %rax,%rbx
  800420651d:	74 35                	je     8004206554 <page_check+0xa8d>
  800420651f:	48 b9 50 eb 21 04 80 	movabs $0x800421eb50,%rcx
  8004206526:	00 00 00 
  8004206529:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206530:	00 00 00 
  8004206533:	be 35 05 00 00       	mov    $0x535,%esi
  8004206538:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420653f:	00 00 00 
  8004206542:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206547:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420654e:	00 00 00 
  8004206551:	41 ff d0             	callq  *%r8
  8004206554:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206558:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420655c:	66 83 f8 02          	cmp    $0x2,%ax
  8004206560:	74 35                	je     8004206597 <page_check+0xad0>
  8004206562:	48 b9 80 eb 21 04 80 	movabs $0x800421eb80,%rcx
  8004206569:	00 00 00 
  800420656c:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206573:	00 00 00 
  8004206576:	be 36 05 00 00       	mov    $0x536,%esi
  800420657b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206582:	00 00 00 
  8004206585:	b8 00 00 00 00       	mov    $0x0,%eax
  800420658a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206591:	00 00 00 
  8004206594:	41 ff d0             	callq  *%r8
  8004206597:	bf 00 00 00 00       	mov    $0x0,%edi
  800420659c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042065a3:	00 00 00 
  80042065a6:	ff d0                	callq  *%rax
  80042065a8:	48 85 c0             	test   %rax,%rax
  80042065ab:	74 35                	je     80042065e2 <page_check+0xb1b>
  80042065ad:	48 b9 9f e6 21 04 80 	movabs $0x800421e69f,%rcx
  80042065b4:	00 00 00 
  80042065b7:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042065be:	00 00 00 
  80042065c1:	be 3a 05 00 00       	mov    $0x53a,%esi
  80042065c6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042065cd:	00 00 00 
  80042065d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042065d5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042065dc:	00 00 00 
  80042065df:	41 ff d0             	callq  *%r8
  80042065e2:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042065e9:	00 00 00 
  80042065ec:	48 8b 00             	mov    (%rax),%rax
  80042065ef:	48 8b 00             	mov    (%rax),%rax
  80042065f2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042065f8:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  80042065fc:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206600:	48 c1 e8 0c          	shr    $0xc,%rax
  8004206604:	89 45 a4             	mov    %eax,-0x5c(%rbp)
  8004206607:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  800420660a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004206611:	00 00 00 
  8004206614:	48 8b 00             	mov    (%rax),%rax
  8004206617:	48 39 c2             	cmp    %rax,%rdx
  800420661a:	72 32                	jb     800420664e <page_check+0xb87>
  800420661c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004206620:	48 89 c1             	mov    %rax,%rcx
  8004206623:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  800420662a:	00 00 00 
  800420662d:	be 3c 05 00 00       	mov    $0x53c,%esi
  8004206632:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206639:	00 00 00 
  800420663c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206641:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206648:	00 00 00 
  800420664b:	41 ff d0             	callq  *%r8
  800420664e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206655:	00 00 00 
  8004206658:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420665c:	48 01 d0             	add    %rdx,%rax
  800420665f:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004206663:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004206667:	48 8b 00             	mov    (%rax),%rax
  800420666a:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206670:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004206674:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206678:	48 c1 e8 0c          	shr    $0xc,%rax
  800420667c:	89 45 8c             	mov    %eax,-0x74(%rbp)
  800420667f:	8b 55 8c             	mov    -0x74(%rbp),%edx
  8004206682:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004206689:	00 00 00 
  800420668c:	48 8b 00             	mov    (%rax),%rax
  800420668f:	48 39 c2             	cmp    %rax,%rdx
  8004206692:	72 32                	jb     80042066c6 <page_check+0xbff>
  8004206694:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004206698:	48 89 c1             	mov    %rax,%rcx
  800420669b:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042066a2:	00 00 00 
  80042066a5:	be 3d 05 00 00       	mov    $0x53d,%esi
  80042066aa:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042066b1:	00 00 00 
  80042066b4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042066b9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042066c0:	00 00 00 
  80042066c3:	41 ff d0             	callq  *%r8
  80042066c6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042066cd:	00 00 00 
  80042066d0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042066d4:	48 01 d0             	add    %rdx,%rax
  80042066d7:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042066db:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042066df:	48 8b 00             	mov    (%rax),%rax
  80042066e2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042066e8:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042066ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042066f6:	48 c1 e8 0c          	shr    $0xc,%rax
  80042066fa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%rbp)
  8004206700:	8b 95 74 ff ff ff    	mov    -0x8c(%rbp),%edx
  8004206706:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420670d:	00 00 00 
  8004206710:	48 8b 00             	mov    (%rax),%rax
  8004206713:	48 39 c2             	cmp    %rax,%rdx
  8004206716:	72 35                	jb     800420674d <page_check+0xc86>
  8004206718:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420671f:	48 89 c1             	mov    %rax,%rcx
  8004206722:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004206729:	00 00 00 
  800420672c:	be 3e 05 00 00       	mov    $0x53e,%esi
  8004206731:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206738:	00 00 00 
  800420673b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206740:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206747:	00 00 00 
  800420674a:	41 ff d0             	callq  *%r8
  800420674d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004206754:	00 00 00 
  8004206757:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420675e:	48 01 d0             	add    %rdx,%rax
  8004206761:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004206768:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420676f:	00 00 00 
  8004206772:	48 8b 00             	mov    (%rax),%rax
  8004206775:	ba 00 00 00 00       	mov    $0x0,%edx
  800420677a:	be 00 10 00 00       	mov    $0x1000,%esi
  800420677f:	48 89 c7             	mov    %rax,%rdi
  8004206782:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206789:	00 00 00 
  800420678c:	ff d0                	callq  *%rax
  800420678e:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  8004206795:	48 83 c2 08          	add    $0x8,%rdx
  8004206799:	48 39 d0             	cmp    %rdx,%rax
  800420679c:	74 35                	je     80042067d3 <page_check+0xd0c>
  800420679e:	48 b9 98 eb 21 04 80 	movabs $0x800421eb98,%rcx
  80042067a5:	00 00 00 
  80042067a8:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042067af:	00 00 00 
  80042067b2:	be 3f 05 00 00       	mov    $0x53f,%esi
  80042067b7:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042067be:	00 00 00 
  80042067c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042067c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042067cd:	00 00 00 
  80042067d0:	41 ff d0             	callq  *%r8
  80042067d3:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042067da:	00 00 00 
  80042067dd:	48 8b 00             	mov    (%rax),%rax
  80042067e0:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042067e4:	b9 04 00 00 00       	mov    $0x4,%ecx
  80042067e9:	ba 00 10 00 00       	mov    $0x1000,%edx
  80042067ee:	48 89 c7             	mov    %rax,%rdi
  80042067f1:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042067f8:	00 00 00 
  80042067fb:	ff d0                	callq  *%rax
  80042067fd:	85 c0                	test   %eax,%eax
  80042067ff:	74 35                	je     8004206836 <page_check+0xd6f>
  8004206801:	48 b9 d8 eb 21 04 80 	movabs $0x800421ebd8,%rcx
  8004206808:	00 00 00 
  800420680b:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206812:	00 00 00 
  8004206815:	be 42 05 00 00       	mov    $0x542,%esi
  800420681a:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206821:	00 00 00 
  8004206824:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206829:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206830:	00 00 00 
  8004206833:	41 ff d0             	callq  *%r8
  8004206836:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420683d:	00 00 00 
  8004206840:	48 8b 00             	mov    (%rax),%rax
  8004206843:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206848:	48 89 c7             	mov    %rax,%rdi
  800420684b:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206852:	00 00 00 
  8004206855:	ff d0                	callq  *%rax
  8004206857:	48 89 c3             	mov    %rax,%rbx
  800420685a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420685e:	48 89 c7             	mov    %rax,%rdi
  8004206861:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206868:	00 00 00 
  800420686b:	ff d0                	callq  *%rax
  800420686d:	48 39 c3             	cmp    %rax,%rbx
  8004206870:	74 35                	je     80042068a7 <page_check+0xde0>
  8004206872:	48 b9 50 eb 21 04 80 	movabs $0x800421eb50,%rcx
  8004206879:	00 00 00 
  800420687c:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206883:	00 00 00 
  8004206886:	be 43 05 00 00       	mov    $0x543,%esi
  800420688b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206892:	00 00 00 
  8004206895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420689a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068a1:	00 00 00 
  80042068a4:	41 ff d0             	callq  *%r8
  80042068a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042068ab:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042068af:	66 83 f8 02          	cmp    $0x2,%ax
  80042068b3:	74 35                	je     80042068ea <page_check+0xe23>
  80042068b5:	48 b9 80 eb 21 04 80 	movabs $0x800421eb80,%rcx
  80042068bc:	00 00 00 
  80042068bf:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042068c6:	00 00 00 
  80042068c9:	be 44 05 00 00       	mov    $0x544,%esi
  80042068ce:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042068d5:	00 00 00 
  80042068d8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042068dd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042068e4:	00 00 00 
  80042068e7:	41 ff d0             	callq  *%r8
  80042068ea:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042068f1:	00 00 00 
  80042068f4:	48 8b 00             	mov    (%rax),%rax
  80042068f7:	ba 00 00 00 00       	mov    $0x0,%edx
  80042068fc:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206901:	48 89 c7             	mov    %rax,%rdi
  8004206904:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  800420690b:	00 00 00 
  800420690e:	ff d0                	callq  *%rax
  8004206910:	48 8b 00             	mov    (%rax),%rax
  8004206913:	83 e0 04             	and    $0x4,%eax
  8004206916:	48 85 c0             	test   %rax,%rax
  8004206919:	75 35                	jne    8004206950 <page_check+0xe89>
  800420691b:	48 b9 18 ec 21 04 80 	movabs $0x800421ec18,%rcx
  8004206922:	00 00 00 
  8004206925:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420692c:	00 00 00 
  800420692f:	be 45 05 00 00       	mov    $0x545,%esi
  8004206934:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420693b:	00 00 00 
  800420693e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206943:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420694a:	00 00 00 
  800420694d:	41 ff d0             	callq  *%r8
  8004206950:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206957:	00 00 00 
  800420695a:	48 8b 00             	mov    (%rax),%rax
  800420695d:	48 8b 00             	mov    (%rax),%rax
  8004206960:	83 e0 04             	and    $0x4,%eax
  8004206963:	48 85 c0             	test   %rax,%rax
  8004206966:	75 35                	jne    800420699d <page_check+0xed6>
  8004206968:	48 b9 4b ec 21 04 80 	movabs $0x800421ec4b,%rcx
  800420696f:	00 00 00 
  8004206972:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206979:	00 00 00 
  800420697c:	be 46 05 00 00       	mov    $0x546,%esi
  8004206981:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206988:	00 00 00 
  800420698b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206990:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206997:	00 00 00 
  800420699a:	41 ff d0             	callq  *%r8
  800420699d:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042069a4:	00 00 00 
  80042069a7:	48 8b 00             	mov    (%rax),%rax
  80042069aa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  80042069ae:	b9 00 00 00 00       	mov    $0x0,%ecx
  80042069b3:	ba 00 00 20 00       	mov    $0x200000,%edx
  80042069b8:	48 89 c7             	mov    %rax,%rdi
  80042069bb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  80042069c2:	00 00 00 
  80042069c5:	ff d0                	callq  *%rax
  80042069c7:	85 c0                	test   %eax,%eax
  80042069c9:	78 35                	js     8004206a00 <page_check+0xf39>
  80042069cb:	48 b9 68 ec 21 04 80 	movabs $0x800421ec68,%rcx
  80042069d2:	00 00 00 
  80042069d5:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042069dc:	00 00 00 
  80042069df:	be 4a 05 00 00       	mov    $0x54a,%esi
  80042069e4:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042069eb:	00 00 00 
  80042069ee:	b8 00 00 00 00       	mov    $0x0,%eax
  80042069f3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042069fa:	00 00 00 
  80042069fd:	41 ff d0             	callq  *%r8
  8004206a00:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206a07:	00 00 00 
  8004206a0a:	48 8b 00             	mov    (%rax),%rax
  8004206a0d:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206a11:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206a16:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206a1b:	48 89 c7             	mov    %rax,%rdi
  8004206a1e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206a25:	00 00 00 
  8004206a28:	ff d0                	callq  *%rax
  8004206a2a:	85 c0                	test   %eax,%eax
  8004206a2c:	74 35                	je     8004206a63 <page_check+0xf9c>
  8004206a2e:	48 b9 a0 ec 21 04 80 	movabs $0x800421eca0,%rcx
  8004206a35:	00 00 00 
  8004206a38:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206a3f:	00 00 00 
  8004206a42:	be 4d 05 00 00       	mov    $0x54d,%esi
  8004206a47:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206a4e:	00 00 00 
  8004206a51:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206a56:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206a5d:	00 00 00 
  8004206a60:	41 ff d0             	callq  *%r8
  8004206a63:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206a6a:	00 00 00 
  8004206a6d:	48 8b 00             	mov    (%rax),%rax
  8004206a70:	ba 00 00 00 00       	mov    $0x0,%edx
  8004206a75:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206a7a:	48 89 c7             	mov    %rax,%rdi
  8004206a7d:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004206a84:	00 00 00 
  8004206a87:	ff d0                	callq  *%rax
  8004206a89:	48 8b 00             	mov    (%rax),%rax
  8004206a8c:	83 e0 04             	and    $0x4,%eax
  8004206a8f:	48 85 c0             	test   %rax,%rax
  8004206a92:	74 35                	je     8004206ac9 <page_check+0x1002>
  8004206a94:	48 b9 d8 ec 21 04 80 	movabs $0x800421ecd8,%rcx
  8004206a9b:	00 00 00 
  8004206a9e:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206aa5:	00 00 00 
  8004206aa8:	be 4e 05 00 00       	mov    $0x54e,%esi
  8004206aad:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206ab4:	00 00 00 
  8004206ab7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206abc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ac3:	00 00 00 
  8004206ac6:	41 ff d0             	callq  *%r8
  8004206ac9:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206ad0:	00 00 00 
  8004206ad3:	48 8b 00             	mov    (%rax),%rax
  8004206ad6:	be 00 00 00 00       	mov    $0x0,%esi
  8004206adb:	48 89 c7             	mov    %rax,%rdi
  8004206ade:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ae5:	00 00 00 
  8004206ae8:	ff d0                	callq  *%rax
  8004206aea:	48 89 c3             	mov    %rax,%rbx
  8004206aed:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206af1:	48 89 c7             	mov    %rax,%rdi
  8004206af4:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206afb:	00 00 00 
  8004206afe:	ff d0                	callq  *%rax
  8004206b00:	48 39 c3             	cmp    %rax,%rbx
  8004206b03:	74 35                	je     8004206b3a <page_check+0x1073>
  8004206b05:	48 b9 10 ed 21 04 80 	movabs $0x800421ed10,%rcx
  8004206b0c:	00 00 00 
  8004206b0f:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206b16:	00 00 00 
  8004206b19:	be 51 05 00 00       	mov    $0x551,%esi
  8004206b1e:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206b25:	00 00 00 
  8004206b28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206b34:	00 00 00 
  8004206b37:	41 ff d0             	callq  *%r8
  8004206b3a:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206b41:	00 00 00 
  8004206b44:	48 8b 00             	mov    (%rax),%rax
  8004206b47:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206b4c:	48 89 c7             	mov    %rax,%rdi
  8004206b4f:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206b56:	00 00 00 
  8004206b59:	ff d0                	callq  *%rax
  8004206b5b:	48 89 c3             	mov    %rax,%rbx
  8004206b5e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206b62:	48 89 c7             	mov    %rax,%rdi
  8004206b65:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206b6c:	00 00 00 
  8004206b6f:	ff d0                	callq  *%rax
  8004206b71:	48 39 c3             	cmp    %rax,%rbx
  8004206b74:	74 35                	je     8004206bab <page_check+0x10e4>
  8004206b76:	48 b9 40 ed 21 04 80 	movabs $0x800421ed40,%rcx
  8004206b7d:	00 00 00 
  8004206b80:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206b87:	00 00 00 
  8004206b8a:	be 52 05 00 00       	mov    $0x552,%esi
  8004206b8f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206b96:	00 00 00 
  8004206b99:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206b9e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ba5:	00 00 00 
  8004206ba8:	41 ff d0             	callq  *%r8
  8004206bab:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206baf:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bb3:	66 83 f8 02          	cmp    $0x2,%ax
  8004206bb7:	74 35                	je     8004206bee <page_check+0x1127>
  8004206bb9:	48 b9 70 ed 21 04 80 	movabs $0x800421ed70,%rcx
  8004206bc0:	00 00 00 
  8004206bc3:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206bca:	00 00 00 
  8004206bcd:	be 54 05 00 00       	mov    $0x554,%esi
  8004206bd2:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206bd9:	00 00 00 
  8004206bdc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206be1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206be8:	00 00 00 
  8004206beb:	41 ff d0             	callq  *%r8
  8004206bee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206bf2:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206bf6:	66 83 f8 01          	cmp    $0x1,%ax
  8004206bfa:	74 35                	je     8004206c31 <page_check+0x116a>
  8004206bfc:	48 b9 81 ed 21 04 80 	movabs $0x800421ed81,%rcx
  8004206c03:	00 00 00 
  8004206c06:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206c0d:	00 00 00 
  8004206c10:	be 55 05 00 00       	mov    $0x555,%esi
  8004206c15:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206c1c:	00 00 00 
  8004206c1f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206c24:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206c2b:	00 00 00 
  8004206c2e:	41 ff d0             	callq  *%r8
  8004206c31:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206c38:	00 00 00 
  8004206c3b:	48 8b 00             	mov    (%rax),%rax
  8004206c3e:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c43:	48 89 c7             	mov    %rax,%rdi
  8004206c46:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206c4d:	00 00 00 
  8004206c50:	ff d0                	callq  *%rax
  8004206c52:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206c59:	00 00 00 
  8004206c5c:	48 8b 00             	mov    (%rax),%rax
  8004206c5f:	be 00 00 00 00       	mov    $0x0,%esi
  8004206c64:	48 89 c7             	mov    %rax,%rdi
  8004206c67:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206c6e:	00 00 00 
  8004206c71:	ff d0                	callq  *%rax
  8004206c73:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206c77:	74 35                	je     8004206cae <page_check+0x11e7>
  8004206c79:	48 b9 98 ed 21 04 80 	movabs $0x800421ed98,%rcx
  8004206c80:	00 00 00 
  8004206c83:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206c8a:	00 00 00 
  8004206c8d:	be 5a 05 00 00       	mov    $0x55a,%esi
  8004206c92:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206c99:	00 00 00 
  8004206c9c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206ca1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206ca8:	00 00 00 
  8004206cab:	41 ff d0             	callq  *%r8
  8004206cae:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206cb5:	00 00 00 
  8004206cb8:	48 8b 00             	mov    (%rax),%rax
  8004206cbb:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206cc0:	48 89 c7             	mov    %rax,%rdi
  8004206cc3:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206cca:	00 00 00 
  8004206ccd:	ff d0                	callq  *%rax
  8004206ccf:	48 89 c3             	mov    %rax,%rbx
  8004206cd2:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206cd6:	48 89 c7             	mov    %rax,%rdi
  8004206cd9:	48 b8 1b 1b 20 04 80 	movabs $0x8004201b1b,%rax
  8004206ce0:	00 00 00 
  8004206ce3:	ff d0                	callq  *%rax
  8004206ce5:	48 39 c3             	cmp    %rax,%rbx
  8004206ce8:	74 35                	je     8004206d1f <page_check+0x1258>
  8004206cea:	48 b9 40 ed 21 04 80 	movabs $0x800421ed40,%rcx
  8004206cf1:	00 00 00 
  8004206cf4:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206cfb:	00 00 00 
  8004206cfe:	be 5b 05 00 00       	mov    $0x55b,%esi
  8004206d03:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206d0a:	00 00 00 
  8004206d0d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d12:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d19:	00 00 00 
  8004206d1c:	41 ff d0             	callq  *%r8
  8004206d1f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206d23:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d27:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d2b:	74 35                	je     8004206d62 <page_check+0x129b>
  8004206d2d:	48 b9 e5 ea 21 04 80 	movabs $0x800421eae5,%rcx
  8004206d34:	00 00 00 
  8004206d37:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206d3e:	00 00 00 
  8004206d41:	be 5c 05 00 00       	mov    $0x55c,%esi
  8004206d46:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206d4d:	00 00 00 
  8004206d50:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d55:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d5c:	00 00 00 
  8004206d5f:	41 ff d0             	callq  *%r8
  8004206d62:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206d66:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206d6a:	66 83 f8 01          	cmp    $0x1,%ax
  8004206d6e:	74 35                	je     8004206da5 <page_check+0x12de>
  8004206d70:	48 b9 81 ed 21 04 80 	movabs $0x800421ed81,%rcx
  8004206d77:	00 00 00 
  8004206d7a:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206d81:	00 00 00 
  8004206d84:	be 5d 05 00 00       	mov    $0x55d,%esi
  8004206d89:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206d90:	00 00 00 
  8004206d93:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206d98:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206d9f:	00 00 00 
  8004206da2:	41 ff d0             	callq  *%r8
  8004206da5:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206dac:	00 00 00 
  8004206daf:	48 8b 00             	mov    (%rax),%rax
  8004206db2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  8004206db6:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004206dbb:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004206dc0:	48 89 c7             	mov    %rax,%rdi
  8004206dc3:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004206dca:	00 00 00 
  8004206dcd:	ff d0                	callq  *%rax
  8004206dcf:	85 c0                	test   %eax,%eax
  8004206dd1:	74 35                	je     8004206e08 <page_check+0x1341>
  8004206dd3:	48 b9 a0 ec 21 04 80 	movabs $0x800421eca0,%rcx
  8004206dda:	00 00 00 
  8004206ddd:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206de4:	00 00 00 
  8004206de7:	be 61 05 00 00       	mov    $0x561,%esi
  8004206dec:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206df3:	00 00 00 
  8004206df6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206dfb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e02:	00 00 00 
  8004206e05:	41 ff d0             	callq  *%r8
  8004206e08:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e0c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206e10:	66 85 c0             	test   %ax,%ax
  8004206e13:	75 35                	jne    8004206e4a <page_check+0x1383>
  8004206e15:	48 b9 bb ed 21 04 80 	movabs $0x800421edbb,%rcx
  8004206e1c:	00 00 00 
  8004206e1f:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206e26:	00 00 00 
  8004206e29:	be 62 05 00 00       	mov    $0x562,%esi
  8004206e2e:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206e35:	00 00 00 
  8004206e38:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e3d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e44:	00 00 00 
  8004206e47:	41 ff d0             	callq  *%r8
  8004206e4a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206e4e:	48 8b 00             	mov    (%rax),%rax
  8004206e51:	48 85 c0             	test   %rax,%rax
  8004206e54:	74 35                	je     8004206e8b <page_check+0x13c4>
  8004206e56:	48 b9 c7 ed 21 04 80 	movabs $0x800421edc7,%rcx
  8004206e5d:	00 00 00 
  8004206e60:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206e67:	00 00 00 
  8004206e6a:	be 63 05 00 00       	mov    $0x563,%esi
  8004206e6f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206e76:	00 00 00 
  8004206e79:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206e7e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206e85:	00 00 00 
  8004206e88:	41 ff d0             	callq  *%r8
  8004206e8b:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206e92:	00 00 00 
  8004206e95:	48 8b 00             	mov    (%rax),%rax
  8004206e98:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206e9d:	48 89 c7             	mov    %rax,%rdi
  8004206ea0:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  8004206ea7:	00 00 00 
  8004206eaa:	ff d0                	callq  *%rax
  8004206eac:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206eb3:	00 00 00 
  8004206eb6:	48 8b 00             	mov    (%rax),%rax
  8004206eb9:	be 00 00 00 00       	mov    $0x0,%esi
  8004206ebe:	48 89 c7             	mov    %rax,%rdi
  8004206ec1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206ec8:	00 00 00 
  8004206ecb:	ff d0                	callq  *%rax
  8004206ecd:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206ed1:	74 35                	je     8004206f08 <page_check+0x1441>
  8004206ed3:	48 b9 98 ed 21 04 80 	movabs $0x800421ed98,%rcx
  8004206eda:	00 00 00 
  8004206edd:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206ee4:	00 00 00 
  8004206ee7:	be 67 05 00 00       	mov    $0x567,%esi
  8004206eec:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206ef3:	00 00 00 
  8004206ef6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206efb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f02:	00 00 00 
  8004206f05:	41 ff d0             	callq  *%r8
  8004206f08:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206f0f:	00 00 00 
  8004206f12:	48 8b 00             	mov    (%rax),%rax
  8004206f15:	be 00 10 00 00       	mov    $0x1000,%esi
  8004206f1a:	48 89 c7             	mov    %rax,%rdi
  8004206f1d:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004206f24:	00 00 00 
  8004206f27:	ff d0                	callq  *%rax
  8004206f29:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004206f2d:	74 35                	je     8004206f64 <page_check+0x149d>
  8004206f2f:	48 b9 e0 ed 21 04 80 	movabs $0x800421ede0,%rcx
  8004206f36:	00 00 00 
  8004206f39:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206f40:	00 00 00 
  8004206f43:	be 68 05 00 00       	mov    $0x568,%esi
  8004206f48:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206f4f:	00 00 00 
  8004206f52:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f57:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206f5e:	00 00 00 
  8004206f61:	41 ff d0             	callq  *%r8
  8004206f64:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004206f68:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206f6c:	66 85 c0             	test   %ax,%ax
  8004206f6f:	74 35                	je     8004206fa6 <page_check+0x14df>
  8004206f71:	48 b9 06 ee 21 04 80 	movabs $0x800421ee06,%rcx
  8004206f78:	00 00 00 
  8004206f7b:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206f82:	00 00 00 
  8004206f85:	be 69 05 00 00       	mov    $0x569,%esi
  8004206f8a:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206f91:	00 00 00 
  8004206f94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206f99:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fa0:	00 00 00 
  8004206fa3:	41 ff d0             	callq  *%r8
  8004206fa6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004206faa:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004206fae:	66 83 f8 01          	cmp    $0x1,%ax
  8004206fb2:	74 35                	je     8004206fe9 <page_check+0x1522>
  8004206fb4:	48 b9 81 ed 21 04 80 	movabs $0x800421ed81,%rcx
  8004206fbb:	00 00 00 
  8004206fbe:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004206fc5:	00 00 00 
  8004206fc8:	be 6a 05 00 00       	mov    $0x56a,%esi
  8004206fcd:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004206fd4:	00 00 00 
  8004206fd7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004206fdc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004206fe3:	00 00 00 
  8004206fe6:	41 ff d0             	callq  *%r8
  8004206fe9:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004206ff0:	00 00 00 
  8004206ff3:	48 8b 00             	mov    (%rax),%rax
  8004206ff6:	48 8b 00             	mov    (%rax),%rax
  8004206ff9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004206fff:	48 89 c7             	mov    %rax,%rdi
  8004207002:	48 b8 40 1b 20 04 80 	movabs $0x8004201b40,%rax
  8004207009:	00 00 00 
  800420700c:	ff d0                	callq  *%rax
  800420700e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004207015:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420701c:	00 00 00 
  800420701f:	48 8b 00             	mov    (%rax),%rax
  8004207022:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207029:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420702d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207031:	66 83 f8 01          	cmp    $0x1,%ax
  8004207035:	74 35                	je     800420706c <page_check+0x15a5>
  8004207037:	48 b9 81 ed 21 04 80 	movabs $0x800421ed81,%rcx
  800420703e:	00 00 00 
  8004207041:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207048:	00 00 00 
  800420704b:	be 80 05 00 00       	mov    $0x580,%esi
  8004207050:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207057:	00 00 00 
  800420705a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420705f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207066:	00 00 00 
  8004207069:	41 ff d0             	callq  *%r8
  800420706c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207073:	48 89 c7             	mov    %rax,%rdi
  8004207076:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420707d:	00 00 00 
  8004207080:	ff d0                	callq  *%rax
  8004207082:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004207089:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800420708d:	74 13                	je     80042070a2 <page_check+0x15db>
  800420708f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207093:	48 89 c7             	mov    %rax,%rdi
  8004207096:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420709d:	00 00 00 
  80042070a0:	ff d0                	callq  *%rax
  80042070a2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070a9:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  80042070ad:	74 13                	je     80042070c2 <page_check+0x15fb>
  80042070af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042070b3:	48 89 c7             	mov    %rax,%rdi
  80042070b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070bd:	00 00 00 
  80042070c0:	ff d0                	callq  *%rax
  80042070c2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042070c9:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  80042070cd:	74 13                	je     80042070e2 <page_check+0x161b>
  80042070cf:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042070d3:	48 89 c7             	mov    %rax,%rdi
  80042070d6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042070dd:	00 00 00 
  80042070e0:	ff d0                	callq  *%rax
  80042070e2:	48 c7 85 60 ff ff ff 	movq   $0x64000,-0xa0(%rbp)
  80042070e9:	00 40 06 00 
  80042070ed:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042070f4:	00 00 00 
  80042070f7:	48 8b 00             	mov    (%rax),%rax
  80042070fa:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004207101:	ba 01 00 00 00       	mov    $0x1,%edx
  8004207106:	48 89 ce             	mov    %rcx,%rsi
  8004207109:	48 89 c7             	mov    %rax,%rdi
  800420710c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207113:	00 00 00 
  8004207116:	ff d0                	callq  *%rax
  8004207118:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  800420711f:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207126:	00 00 00 
  8004207129:	48 8b 00             	mov    (%rax),%rax
  800420712c:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004207133:	48 c1 ea 27          	shr    $0x27,%rdx
  8004207137:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
  800420713d:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207141:	48 01 d0             	add    %rdx,%rax
  8004207144:	48 8b 00             	mov    (%rax),%rax
  8004207147:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420714d:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004207154:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800420715b:	48 c1 e8 0c          	shr    $0xc,%rax
  800420715f:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
  8004207165:	8b 95 54 ff ff ff    	mov    -0xac(%rbp),%edx
  800420716b:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207172:	00 00 00 
  8004207175:	48 8b 00             	mov    (%rax),%rax
  8004207178:	48 39 c2             	cmp    %rax,%rdx
  800420717b:	72 35                	jb     80042071b2 <page_check+0x16eb>
  800420717d:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  8004207184:	48 89 c1             	mov    %rax,%rcx
  8004207187:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  800420718e:	00 00 00 
  8004207191:	be 88 05 00 00       	mov    $0x588,%esi
  8004207196:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420719d:	00 00 00 
  80042071a0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042071a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042071ac:	00 00 00 
  80042071af:	41 ff d0             	callq  *%r8
  80042071b2:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042071b9:	00 00 00 
  80042071bc:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042071c3:	48 01 d0             	add    %rdx,%rax
  80042071c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042071ca:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  80042071d1:	48 c1 e8 1e          	shr    $0x1e,%rax
  80042071d5:	25 ff 01 00 00       	and    $0x1ff,%eax
  80042071da:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042071e1:	00 
  80042071e2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042071e6:	48 01 d0             	add    %rdx,%rax
  80042071e9:	48 8b 00             	mov    (%rax),%rax
  80042071ec:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042071f2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  80042071f9:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207200:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207204:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
  800420720a:	8b 95 44 ff ff ff    	mov    -0xbc(%rbp),%edx
  8004207210:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207217:	00 00 00 
  800420721a:	48 8b 00             	mov    (%rax),%rax
  800420721d:	48 39 c2             	cmp    %rax,%rdx
  8004207220:	72 35                	jb     8004207257 <page_check+0x1790>
  8004207222:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207229:	48 89 c1             	mov    %rax,%rcx
  800420722c:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004207233:	00 00 00 
  8004207236:	be 89 05 00 00       	mov    $0x589,%esi
  800420723b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207242:	00 00 00 
  8004207245:	b8 00 00 00 00       	mov    $0x0,%eax
  800420724a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207251:	00 00 00 
  8004207254:	41 ff d0             	callq  *%r8
  8004207257:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420725e:	00 00 00 
  8004207261:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004207268:	48 01 d0             	add    %rdx,%rax
  800420726b:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  800420726f:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004207276:	48 c1 e8 15          	shr    $0x15,%rax
  800420727a:	25 ff 01 00 00       	and    $0x1ff,%eax
  800420727f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004207286:	00 
  8004207287:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800420728b:	48 01 d0             	add    %rdx,%rax
  800420728e:	48 8b 00             	mov    (%rax),%rax
  8004207291:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004207297:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800420729e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072a5:	48 c1 e8 0c          	shr    $0xc,%rax
  80042072a9:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
  80042072af:	8b 95 34 ff ff ff    	mov    -0xcc(%rbp),%edx
  80042072b5:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042072bc:	00 00 00 
  80042072bf:	48 8b 00             	mov    (%rax),%rax
  80042072c2:	48 39 c2             	cmp    %rax,%rdx
  80042072c5:	72 35                	jb     80042072fc <page_check+0x1835>
  80042072c7:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  80042072ce:	48 89 c1             	mov    %rax,%rcx
  80042072d1:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042072d8:	00 00 00 
  80042072db:	be 8a 05 00 00       	mov    $0x58a,%esi
  80042072e0:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042072e7:	00 00 00 
  80042072ea:	b8 00 00 00 00       	mov    $0x0,%eax
  80042072ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042072f6:	00 00 00 
  80042072f9:	41 ff d0             	callq  *%r8
  80042072fc:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207303:	00 00 00 
  8004207306:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  800420730d:	48 01 d0             	add    %rdx,%rax
  8004207310:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004207317:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800420731e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207322:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004207327:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420732e:	00 
  800420732f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004207336:	48 01 c2             	add    %rax,%rdx
  8004207339:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207340:	48 39 c2             	cmp    %rax,%rdx
  8004207343:	74 35                	je     800420737a <page_check+0x18b3>
  8004207345:	48 b9 17 ee 21 04 80 	movabs $0x800421ee17,%rcx
  800420734c:	00 00 00 
  800420734f:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207356:	00 00 00 
  8004207359:	be 8b 05 00 00       	mov    $0x58b,%esi
  800420735e:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207365:	00 00 00 
  8004207368:	b8 00 00 00 00       	mov    $0x0,%eax
  800420736d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207374:	00 00 00 
  8004207377:	41 ff d0             	callq  *%r8
  800420737a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420737e:	48 89 c7             	mov    %rax,%rdi
  8004207381:	48 b8 b1 1b 20 04 80 	movabs $0x8004201bb1,%rax
  8004207388:	00 00 00 
  800420738b:	ff d0                	callq  *%rax
  800420738d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004207392:	be ff 00 00 00       	mov    $0xff,%esi
  8004207397:	48 89 c7             	mov    %rax,%rdi
  800420739a:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042073a1:	00 00 00 
  80042073a4:	ff d0                	callq  *%rax
  80042073a6:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042073ad:	00 00 00 
  80042073b0:	48 8b 00             	mov    (%rax),%rax
  80042073b3:	ba 01 00 00 00       	mov    $0x1,%edx
  80042073b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042073bd:	48 89 c7             	mov    %rax,%rdi
  80042073c0:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  80042073c7:	00 00 00 
  80042073ca:	ff d0                	callq  *%rax
  80042073cc:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042073d3:	00 00 00 
  80042073d6:	48 8b 00             	mov    (%rax),%rax
  80042073d9:	48 8b 00             	mov    (%rax),%rax
  80042073dc:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042073e2:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  80042073e9:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  80042073f0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042073f4:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  80042073fa:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  8004207400:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207407:	00 00 00 
  800420740a:	48 8b 00             	mov    (%rax),%rax
  800420740d:	48 39 c2             	cmp    %rax,%rdx
  8004207410:	72 35                	jb     8004207447 <page_check+0x1980>
  8004207412:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207419:	48 89 c1             	mov    %rax,%rcx
  800420741c:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004207423:	00 00 00 
  8004207426:	be 90 05 00 00       	mov    $0x590,%esi
  800420742b:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207432:	00 00 00 
  8004207435:	b8 00 00 00 00       	mov    $0x0,%eax
  800420743a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207441:	00 00 00 
  8004207444:	41 ff d0             	callq  *%r8
  8004207447:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420744e:	00 00 00 
  8004207451:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004207458:	48 01 d0             	add    %rdx,%rax
  800420745b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420745f:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004207463:	48 8b 00             	mov    (%rax),%rax
  8004207466:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420746c:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004207473:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  800420747a:	48 c1 e8 0c          	shr    $0xc,%rax
  800420747e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004207484:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800420748a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207491:	00 00 00 
  8004207494:	48 8b 00             	mov    (%rax),%rax
  8004207497:	48 39 c2             	cmp    %rax,%rdx
  800420749a:	72 35                	jb     80042074d1 <page_check+0x1a0a>
  800420749c:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074a3:	48 89 c1             	mov    %rax,%rcx
  80042074a6:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  80042074ad:	00 00 00 
  80042074b0:	be 91 05 00 00       	mov    $0x591,%esi
  80042074b5:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042074bc:	00 00 00 
  80042074bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042074c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042074cb:	00 00 00 
  80042074ce:	41 ff d0             	callq  *%r8
  80042074d1:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042074d8:	00 00 00 
  80042074db:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  80042074e2:	48 01 d0             	add    %rdx,%rax
  80042074e5:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042074e9:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042074ed:	48 8b 00             	mov    (%rax),%rax
  80042074f0:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042074f6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  80042074fd:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004207504:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207508:	89 85 fc fe ff ff    	mov    %eax,-0x104(%rbp)
  800420750e:	8b 95 fc fe ff ff    	mov    -0x104(%rbp),%edx
  8004207514:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420751b:	00 00 00 
  800420751e:	48 8b 00             	mov    (%rax),%rax
  8004207521:	48 39 c2             	cmp    %rax,%rdx
  8004207524:	72 35                	jb     800420755b <page_check+0x1a94>
  8004207526:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420752d:	48 89 c1             	mov    %rax,%rcx
  8004207530:	48 ba 78 e1 21 04 80 	movabs $0x800421e178,%rdx
  8004207537:	00 00 00 
  800420753a:	be 92 05 00 00       	mov    $0x592,%esi
  800420753f:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207546:	00 00 00 
  8004207549:	b8 00 00 00 00       	mov    $0x0,%eax
  800420754e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207555:	00 00 00 
  8004207558:	41 ff d0             	callq  *%r8
  800420755b:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207562:	00 00 00 
  8004207565:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800420756c:	48 01 d0             	add    %rdx,%rax
  800420756f:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
  8004207576:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  800420757d:	eb 58                	jmp    80042075d7 <page_check+0x1b10>
  800420757f:	48 8b 85 e0 fe ff ff 	mov    -0x120(%rbp),%rax
  8004207586:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004207589:	48 63 d2             	movslq %edx,%rdx
  800420758c:	48 c1 e2 03          	shl    $0x3,%rdx
  8004207590:	48 01 d0             	add    %rdx,%rax
  8004207593:	48 8b 00             	mov    (%rax),%rax
  8004207596:	83 e0 01             	and    $0x1,%eax
  8004207599:	48 85 c0             	test   %rax,%rax
  800420759c:	74 35                	je     80042075d3 <page_check+0x1b0c>
  800420759e:	48 b9 2f ee 21 04 80 	movabs $0x800421ee2f,%rcx
  80042075a5:	00 00 00 
  80042075a8:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042075af:	00 00 00 
  80042075b2:	be 94 05 00 00       	mov    $0x594,%esi
  80042075b7:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042075be:	00 00 00 
  80042075c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042075c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042075cd:	00 00 00 
  80042075d0:	41 ff d0             	callq  *%r8
  80042075d3:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042075d7:	81 7d ec ff 01 00 00 	cmpl   $0x1ff,-0x14(%rbp)
  80042075de:	7e 9f                	jle    800420757f <page_check+0x1ab8>
  80042075e0:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042075e7:	00 00 00 
  80042075ea:	48 8b 00             	mov    (%rax),%rax
  80042075ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042075f4:	48 b8 38 e2 4d 04 80 	movabs $0x80044de238,%rax
  80042075fb:	00 00 00 
  80042075fe:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004207602:	48 89 10             	mov    %rdx,(%rax)
  8004207605:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207609:	48 89 c7             	mov    %rax,%rdi
  800420760c:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207613:	00 00 00 
  8004207616:	ff d0                	callq  *%rax
  8004207618:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420761c:	48 89 c7             	mov    %rax,%rdi
  800420761f:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207626:	00 00 00 
  8004207629:	ff d0                	callq  *%rax
  800420762b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420762f:	48 89 c7             	mov    %rax,%rdi
  8004207632:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004207639:	00 00 00 
  800420763c:	ff d0                	callq  *%rax
  800420763e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004207642:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207646:	66 85 c0             	test   %ax,%ax
  8004207649:	74 35                	je     8004207680 <page_check+0x1bb9>
  800420764b:	48 b9 46 ee 21 04 80 	movabs $0x800421ee46,%rcx
  8004207652:	00 00 00 
  8004207655:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420765c:	00 00 00 
  800420765f:	be a0 05 00 00       	mov    $0x5a0,%esi
  8004207664:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420766b:	00 00 00 
  800420766e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207673:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420767a:	00 00 00 
  800420767d:	41 ff d0             	callq  *%r8
  8004207680:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004207684:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207688:	66 85 c0             	test   %ax,%ax
  800420768b:	74 35                	je     80042076c2 <page_check+0x1bfb>
  800420768d:	48 b9 06 ee 21 04 80 	movabs $0x800421ee06,%rcx
  8004207694:	00 00 00 
  8004207697:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420769e:	00 00 00 
  80042076a1:	be a1 05 00 00       	mov    $0x5a1,%esi
  80042076a6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042076ad:	00 00 00 
  80042076b0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076b5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076bc:	00 00 00 
  80042076bf:	41 ff d0             	callq  *%r8
  80042076c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042076c6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042076ca:	66 85 c0             	test   %ax,%ax
  80042076cd:	74 35                	je     8004207704 <page_check+0x1c3d>
  80042076cf:	48 b9 57 ee 21 04 80 	movabs $0x800421ee57,%rcx
  80042076d6:	00 00 00 
  80042076d9:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042076e0:	00 00 00 
  80042076e3:	be a2 05 00 00       	mov    $0x5a2,%esi
  80042076e8:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042076ef:	00 00 00 
  80042076f2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042076f7:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042076fe:	00 00 00 
  8004207701:	41 ff d0             	callq  *%r8
  8004207704:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207708:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420770c:	66 85 c0             	test   %ax,%ax
  800420770f:	74 35                	je     8004207746 <page_check+0x1c7f>
  8004207711:	48 b9 68 ee 21 04 80 	movabs $0x800421ee68,%rcx
  8004207718:	00 00 00 
  800420771b:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207722:	00 00 00 
  8004207725:	be a3 05 00 00       	mov    $0x5a3,%esi
  800420772a:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207731:	00 00 00 
  8004207734:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207739:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207740:	00 00 00 
  8004207743:	41 ff d0             	callq  *%r8
  8004207746:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420774a:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800420774e:	66 85 c0             	test   %ax,%ax
  8004207751:	74 35                	je     8004207788 <page_check+0x1cc1>
  8004207753:	48 b9 79 ee 21 04 80 	movabs $0x800421ee79,%rcx
  800420775a:	00 00 00 
  800420775d:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207764:	00 00 00 
  8004207767:	be a4 05 00 00       	mov    $0x5a4,%esi
  800420776c:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207773:	00 00 00 
  8004207776:	b8 00 00 00 00       	mov    $0x0,%eax
  800420777b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207782:	00 00 00 
  8004207785:	41 ff d0             	callq  *%r8
  8004207788:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420778c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004207790:	66 85 c0             	test   %ax,%ax
  8004207793:	74 35                	je     80042077ca <page_check+0x1d03>
  8004207795:	48 b9 8a ee 21 04 80 	movabs $0x800421ee8a,%rcx
  800420779c:	00 00 00 
  800420779f:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042077a6:	00 00 00 
  80042077a9:	be a5 05 00 00       	mov    $0x5a5,%esi
  80042077ae:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042077b5:	00 00 00 
  80042077b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042077bd:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042077c4:	00 00 00 
  80042077c7:	41 ff d0             	callq  *%r8
  80042077ca:	be 01 10 00 00       	mov    $0x1001,%esi
  80042077cf:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077d4:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077db:	00 00 00 
  80042077de:	ff d0                	callq  *%rax
  80042077e0:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
  80042077e7:	be 00 10 00 00       	mov    $0x1000,%esi
  80042077ec:	bf 00 00 00 00       	mov    $0x0,%edi
  80042077f1:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042077f8:	00 00 00 
  80042077fb:	ff d0                	callq  *%rax
  80042077fd:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
  8004207804:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420780b:	00 00 00 
  800420780e:	48 39 85 f0 fe ff ff 	cmp    %rax,-0x110(%rbp)
  8004207815:	76 1d                	jbe    8004207834 <page_check+0x1d6d>
  8004207817:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420781e:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  8004207825:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  800420782c:	00 00 00 
  800420782f:	48 39 c2             	cmp    %rax,%rdx
  8004207832:	76 35                	jbe    8004207869 <page_check+0x1da2>
  8004207834:	48 b9 a0 ee 21 04 80 	movabs $0x800421eea0,%rcx
  800420783b:	00 00 00 
  800420783e:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207845:	00 00 00 
  8004207848:	be ac 05 00 00       	mov    $0x5ac,%esi
  800420784d:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207854:	00 00 00 
  8004207857:	b8 00 00 00 00       	mov    $0x0,%eax
  800420785c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207863:	00 00 00 
  8004207866:	41 ff d0             	callq  *%r8
  8004207869:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004207870:	00 00 00 
  8004207873:	48 39 85 e8 fe ff ff 	cmp    %rax,-0x118(%rbp)
  800420787a:	76 1d                	jbe    8004207899 <page_check+0x1dd2>
  800420787c:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207883:	48 8d 90 a0 1f 00 00 	lea    0x1fa0(%rax),%rdx
  800420788a:	48 b8 ff ff df 03 80 	movabs $0x8003dfffff,%rax
  8004207891:	00 00 00 
  8004207894:	48 39 c2             	cmp    %rax,%rdx
  8004207897:	76 35                	jbe    80042078ce <page_check+0x1e07>
  8004207899:	48 b9 c8 ee 21 04 80 	movabs $0x800421eec8,%rcx
  80042078a0:	00 00 00 
  80042078a3:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042078aa:	00 00 00 
  80042078ad:	be ad 05 00 00       	mov    $0x5ad,%esi
  80042078b2:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042078b9:	00 00 00 
  80042078bc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042078c1:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042078c8:	00 00 00 
  80042078cb:	41 ff d0             	callq  *%r8
  80042078ce:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042078d5:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078da:	48 85 c0             	test   %rax,%rax
  80042078dd:	75 11                	jne    80042078f0 <page_check+0x1e29>
  80042078df:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  80042078e6:	25 ff 0f 00 00       	and    $0xfff,%eax
  80042078eb:	48 85 c0             	test   %rax,%rax
  80042078ee:	74 35                	je     8004207925 <page_check+0x1e5e>
  80042078f0:	48 b9 f0 ee 21 04 80 	movabs $0x800421eef0,%rcx
  80042078f7:	00 00 00 
  80042078fa:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207901:	00 00 00 
  8004207904:	be af 05 00 00       	mov    $0x5af,%esi
  8004207909:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207910:	00 00 00 
  8004207913:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207918:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420791f:	00 00 00 
  8004207922:	41 ff d0             	callq  *%r8
  8004207925:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800420792c:	48 05 a0 1f 00 00    	add    $0x1fa0,%rax
  8004207932:	48 3b 85 e8 fe ff ff 	cmp    -0x118(%rbp),%rax
  8004207939:	76 35                	jbe    8004207970 <page_check+0x1ea9>
  800420793b:	48 b9 17 ef 21 04 80 	movabs $0x800421ef17,%rcx
  8004207942:	00 00 00 
  8004207945:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  800420794c:	00 00 00 
  800420794f:	be b1 05 00 00       	mov    $0x5b1,%esi
  8004207954:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  800420795b:	00 00 00 
  800420795e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207963:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420796a:	00 00 00 
  800420796d:	41 ff d0             	callq  *%r8
  8004207970:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207977:	00 00 00 
  800420797a:	48 8b 00             	mov    (%rax),%rax
  800420797d:	48 8b 95 f0 fe ff ff 	mov    -0x110(%rbp),%rdx
  8004207984:	48 89 d6             	mov    %rdx,%rsi
  8004207987:	48 89 c7             	mov    %rax,%rdi
  800420798a:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207991:	00 00 00 
  8004207994:	ff d0                	callq  *%rax
  8004207996:	48 85 c0             	test   %rax,%rax
  8004207999:	74 35                	je     80042079d0 <page_check+0x1f09>
  800420799b:	48 b9 30 ef 21 04 80 	movabs $0x800421ef30,%rcx
  80042079a2:	00 00 00 
  80042079a5:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  80042079ac:	00 00 00 
  80042079af:	be b4 05 00 00       	mov    $0x5b4,%esi
  80042079b4:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  80042079bb:	00 00 00 
  80042079be:	b8 00 00 00 00       	mov    $0x0,%eax
  80042079c3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042079ca:	00 00 00 
  80042079cd:	41 ff d0             	callq  *%r8
  80042079d0:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  80042079d7:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  80042079de:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  80042079e5:	00 00 00 
  80042079e8:	48 8b 00             	mov    (%rax),%rax
  80042079eb:	48 89 d6             	mov    %rdx,%rsi
  80042079ee:	48 89 c7             	mov    %rax,%rdi
  80042079f1:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  80042079f8:	00 00 00 
  80042079fb:	ff d0                	callq  *%rax
  80042079fd:	48 3d 00 10 00 00    	cmp    $0x1000,%rax
  8004207a03:	74 35                	je     8004207a3a <page_check+0x1f73>
  8004207a05:	48 b9 58 ef 21 04 80 	movabs $0x800421ef58,%rcx
  8004207a0c:	00 00 00 
  8004207a0f:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207a16:	00 00 00 
  8004207a19:	be b5 05 00 00       	mov    $0x5b5,%esi
  8004207a1e:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207a25:	00 00 00 
  8004207a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a2d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a34:	00 00 00 
  8004207a37:	41 ff d0             	callq  *%r8
  8004207a3a:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207a41:	00 00 00 
  8004207a44:	48 8b 00             	mov    (%rax),%rax
  8004207a47:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  8004207a4e:	48 89 d6             	mov    %rdx,%rsi
  8004207a51:	48 89 c7             	mov    %rax,%rdi
  8004207a54:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207a5b:	00 00 00 
  8004207a5e:	ff d0                	callq  *%rax
  8004207a60:	48 85 c0             	test   %rax,%rax
  8004207a63:	74 35                	je     8004207a9a <page_check+0x1fd3>
  8004207a65:	48 b9 88 ef 21 04 80 	movabs $0x800421ef88,%rcx
  8004207a6c:	00 00 00 
  8004207a6f:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207a76:	00 00 00 
  8004207a79:	be b6 05 00 00       	mov    $0x5b6,%esi
  8004207a7e:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207a85:	00 00 00 
  8004207a88:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207a8d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207a94:	00 00 00 
  8004207a97:	41 ff d0             	callq  *%r8
  8004207a9a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
  8004207aa1:	48 8d 90 00 10 00 00 	lea    0x1000(%rax),%rdx
  8004207aa8:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207aaf:	00 00 00 
  8004207ab2:	48 8b 00             	mov    (%rax),%rax
  8004207ab5:	48 89 d6             	mov    %rdx,%rsi
  8004207ab8:	48 89 c7             	mov    %rax,%rdi
  8004207abb:	48 b8 4d 58 20 04 80 	movabs $0x800420584d,%rax
  8004207ac2:	00 00 00 
  8004207ac5:	ff d0                	callq  *%rax
  8004207ac7:	48 83 f8 ff          	cmp    $0xffffffffffffffff,%rax
  8004207acb:	74 35                	je     8004207b02 <page_check+0x203b>
  8004207acd:	48 b9 b0 ef 21 04 80 	movabs $0x800421efb0,%rcx
  8004207ad4:	00 00 00 
  8004207ad7:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207ade:	00 00 00 
  8004207ae1:	be b7 05 00 00       	mov    $0x5b7,%esi
  8004207ae6:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207aed:	00 00 00 
  8004207af0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207af5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207afc:	00 00 00 
  8004207aff:	41 ff d0             	callq  *%r8
  8004207b02:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b09:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207b10:	00 00 00 
  8004207b13:	48 8b 00             	mov    (%rax),%rax
  8004207b16:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b1b:	48 89 ce             	mov    %rcx,%rsi
  8004207b1e:	48 89 c7             	mov    %rax,%rdi
  8004207b21:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b28:	00 00 00 
  8004207b2b:	ff d0                	callq  *%rax
  8004207b2d:	48 8b 00             	mov    (%rax),%rax
  8004207b30:	83 e0 1a             	and    $0x1a,%eax
  8004207b33:	48 85 c0             	test   %rax,%rax
  8004207b36:	75 35                	jne    8004207b6d <page_check+0x20a6>
  8004207b38:	48 b9 e0 ef 21 04 80 	movabs $0x800421efe0,%rcx
  8004207b3f:	00 00 00 
  8004207b42:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207b49:	00 00 00 
  8004207b4c:	be b9 05 00 00       	mov    $0x5b9,%esi
  8004207b51:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207b58:	00 00 00 
  8004207b5b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207b60:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207b67:	00 00 00 
  8004207b6a:	41 ff d0             	callq  *%r8
  8004207b6d:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207b74:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207b7b:	00 00 00 
  8004207b7e:	48 8b 00             	mov    (%rax),%rax
  8004207b81:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207b86:	48 89 ce             	mov    %rcx,%rsi
  8004207b89:	48 89 c7             	mov    %rax,%rdi
  8004207b8c:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207b93:	00 00 00 
  8004207b96:	ff d0                	callq  *%rax
  8004207b98:	48 8b 00             	mov    (%rax),%rax
  8004207b9b:	83 e0 04             	and    $0x4,%eax
  8004207b9e:	48 85 c0             	test   %rax,%rax
  8004207ba1:	74 35                	je     8004207bd8 <page_check+0x2111>
  8004207ba3:	48 b9 28 f0 21 04 80 	movabs $0x800421f028,%rcx
  8004207baa:	00 00 00 
  8004207bad:	48 ba f1 e1 21 04 80 	movabs $0x800421e1f1,%rdx
  8004207bb4:	00 00 00 
  8004207bb7:	be ba 05 00 00       	mov    $0x5ba,%esi
  8004207bbc:	48 bf 06 e2 21 04 80 	movabs $0x800421e206,%rdi
  8004207bc3:	00 00 00 
  8004207bc6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207bcb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207bd2:	00 00 00 
  8004207bd5:	41 ff d0             	callq  *%r8
  8004207bd8:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
  8004207bdf:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207be6:	00 00 00 
  8004207be9:	48 8b 00             	mov    (%rax),%rax
  8004207bec:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207bf1:	48 89 ce             	mov    %rcx,%rsi
  8004207bf4:	48 89 c7             	mov    %rax,%rdi
  8004207bf7:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207bfe:	00 00 00 
  8004207c01:	ff d0                	callq  *%rax
  8004207c03:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c0a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  8004207c11:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004207c17:	48 89 c1             	mov    %rax,%rcx
  8004207c1a:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207c21:	00 00 00 
  8004207c24:	48 8b 00             	mov    (%rax),%rax
  8004207c27:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c2c:	48 89 ce             	mov    %rcx,%rsi
  8004207c2f:	48 89 c7             	mov    %rax,%rdi
  8004207c32:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c39:	00 00 00 
  8004207c3c:	ff d0                	callq  *%rax
  8004207c3e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c45:	48 8b 8d e8 fe ff ff 	mov    -0x118(%rbp),%rcx
  8004207c4c:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  8004207c53:	00 00 00 
  8004207c56:	48 8b 00             	mov    (%rax),%rax
  8004207c59:	ba 00 00 00 00       	mov    $0x0,%edx
  8004207c5e:	48 89 ce             	mov    %rcx,%rsi
  8004207c61:	48 89 c7             	mov    %rax,%rdi
  8004207c64:	48 b8 10 30 20 04 80 	movabs $0x8004203010,%rax
  8004207c6b:	00 00 00 
  8004207c6e:	ff d0                	callq  *%rax
  8004207c70:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004207c77:	48 bf 5b f0 21 04 80 	movabs $0x800421f05b,%rdi
  8004207c7e:	00 00 00 
  8004207c81:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207c86:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004207c8d:	00 00 00 
  8004207c90:	ff d2                	callq  *%rdx
  8004207c92:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
  8004207c99:	5b                   	pop    %rbx
  8004207c9a:	5d                   	pop    %rbp
  8004207c9b:	c3                   	retq   

0000008004207c9c <page2ppn>:
  8004207c9c:	55                   	push   %rbp
  8004207c9d:	48 89 e5             	mov    %rsp,%rbp
  8004207ca0:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ca4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207ca8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207cac:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004207cb3:	00 00 00 
  8004207cb6:	48 8b 00             	mov    (%rax),%rax
  8004207cb9:	48 29 c2             	sub    %rax,%rdx
  8004207cbc:	48 89 d0             	mov    %rdx,%rax
  8004207cbf:	48 c1 f8 04          	sar    $0x4,%rax
  8004207cc3:	c9                   	leaveq 
  8004207cc4:	c3                   	retq   

0000008004207cc5 <page2pa>:
  8004207cc5:	55                   	push   %rbp
  8004207cc6:	48 89 e5             	mov    %rsp,%rbp
  8004207cc9:	48 83 ec 08          	sub    $0x8,%rsp
  8004207ccd:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cd1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cd5:	48 89 c7             	mov    %rax,%rdi
  8004207cd8:	48 b8 9c 7c 20 04 80 	movabs $0x8004207c9c,%rax
  8004207cdf:	00 00 00 
  8004207ce2:	ff d0                	callq  *%rax
  8004207ce4:	48 c1 e0 0c          	shl    $0xc,%rax
  8004207ce8:	c9                   	leaveq 
  8004207ce9:	c3                   	retq   

0000008004207cea <pa2page>:
  8004207cea:	55                   	push   %rbp
  8004207ceb:	48 89 e5             	mov    %rsp,%rbp
  8004207cee:	48 83 ec 10          	sub    $0x10,%rsp
  8004207cf2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004207cf6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207cfa:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207cfe:	48 89 c2             	mov    %rax,%rdx
  8004207d01:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207d08:	00 00 00 
  8004207d0b:	48 8b 00             	mov    (%rax),%rax
  8004207d0e:	48 39 c2             	cmp    %rax,%rdx
  8004207d11:	72 2a                	jb     8004207d3d <pa2page+0x53>
  8004207d13:	48 ba 78 f0 21 04 80 	movabs $0x800421f078,%rdx
  8004207d1a:	00 00 00 
  8004207d1d:	be 5b 00 00 00       	mov    $0x5b,%esi
  8004207d22:	48 bf 97 f0 21 04 80 	movabs $0x800421f097,%rdi
  8004207d29:	00 00 00 
  8004207d2c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207d31:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004207d38:	00 00 00 
  8004207d3b:	ff d1                	callq  *%rcx
  8004207d3d:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  8004207d44:	00 00 00 
  8004207d47:	48 8b 00             	mov    (%rax),%rax
  8004207d4a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004207d4e:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004207d52:	48 c1 e2 04          	shl    $0x4,%rdx
  8004207d56:	48 01 d0             	add    %rdx,%rax
  8004207d59:	c9                   	leaveq 
  8004207d5a:	c3                   	retq   

0000008004207d5b <page2kva>:
  8004207d5b:	55                   	push   %rbp
  8004207d5c:	48 89 e5             	mov    %rsp,%rbp
  8004207d5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004207d63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004207d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207d6b:	48 89 c7             	mov    %rax,%rdi
  8004207d6e:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004207d75:	00 00 00 
  8004207d78:	ff d0                	callq  *%rax
  8004207d7a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004207d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207d82:	48 c1 e8 0c          	shr    $0xc,%rax
  8004207d86:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004207d89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004207d8c:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004207d93:	00 00 00 
  8004207d96:	48 8b 00             	mov    (%rax),%rax
  8004207d99:	48 39 c2             	cmp    %rax,%rdx
  8004207d9c:	72 32                	jb     8004207dd0 <page2kva+0x75>
  8004207d9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207da2:	48 89 c1             	mov    %rax,%rcx
  8004207da5:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  8004207dac:	00 00 00 
  8004207daf:	be 62 00 00 00       	mov    $0x62,%esi
  8004207db4:	48 bf 97 f0 21 04 80 	movabs $0x800421f097,%rdi
  8004207dbb:	00 00 00 
  8004207dbe:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207dc3:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004207dca:	00 00 00 
  8004207dcd:	41 ff d0             	callq  *%r8
  8004207dd0:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004207dd7:	00 00 00 
  8004207dda:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004207dde:	48 01 d0             	add    %rdx,%rax
  8004207de1:	c9                   	leaveq 
  8004207de2:	c3                   	retq   

0000008004207de3 <unlock_kernel>:
  8004207de3:	55                   	push   %rbp
  8004207de4:	48 89 e5             	mov    %rsp,%rbp
  8004207de7:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004207dee:	00 00 00 
  8004207df1:	48 b8 0c 80 21 04 80 	movabs $0x800421800c,%rax
  8004207df8:	00 00 00 
  8004207dfb:	ff d0                	callq  *%rax
  8004207dfd:	f3 90                	pause  
  8004207dff:	5d                   	pop    %rbp
  8004207e00:	c3                   	retq   

0000008004207e01 <envid2env>:
//   On error, sets *env_store to NULL.
//
// CHANGED FOR LAB 0
int
envid2env(envid_t envid, struct Env **env_store, bool checkperm)
{
  8004207e01:	55                   	push   %rbp
  8004207e02:	48 89 e5             	mov    %rsp,%rbp
  8004207e05:	53                   	push   %rbx
  8004207e06:	48 83 ec 28          	sub    $0x28,%rsp
  8004207e0a:	89 7d dc             	mov    %edi,-0x24(%rbp)
  8004207e0d:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004207e11:	89 d0                	mov    %edx,%eax
  8004207e13:	88 45 d8             	mov    %al,-0x28(%rbp)
	struct Env *e;

	// if envid is 0, the function should return the current environment
	// it doesn't actually return the env - it puts the env in *env_store
	if (envid == 0) {
  8004207e16:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004207e1a:	75 41                	jne    8004207e5d <envid2env+0x5c>
		*env_store = curenv;
  8004207e1c:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004207e23:	00 00 00 
  8004207e26:	ff d0                	callq  *%rax
  8004207e28:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004207e2f:	00 00 00 
  8004207e32:	48 98                	cltq   
  8004207e34:	48 c1 e0 03          	shl    $0x3,%rax
  8004207e38:	48 89 c1             	mov    %rax,%rcx
  8004207e3b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207e3f:	48 01 c8             	add    %rcx,%rax
  8004207e42:	48 01 d0             	add    %rdx,%rax
  8004207e45:	48 83 c0 08          	add    $0x8,%rax
  8004207e49:	48 8b 10             	mov    (%rax),%rdx
  8004207e4c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207e50:	48 89 10             	mov    %rdx,(%rax)
		return 0;
  8004207e53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004207e58:	e9 fd 00 00 00       	jmpq   8004207f5a <envid2env+0x159>

	// it should use the ENVX() macro found in inc/env.h, not straight reference
	// e = &envs[envid];
	// use ENVX() macro to get the correct index in the envs variable 
	// and use that to look stuff up
	e = &envs[ENVX(envid)];
  8004207e5d:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207e64:	00 00 00 
  8004207e67:	48 8b 10             	mov    (%rax),%rdx
  8004207e6a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004207e6d:	48 98                	cltq   
  8004207e6f:	25 ff 03 00 00       	and    $0x3ff,%eax
  8004207e74:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207e7b:	48 01 d0             	add    %rdx,%rax
  8004207e7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
  8004207e82:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e86:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004207e8c:	85 c0                	test   %eax,%eax
  8004207e8e:	74 0f                	je     8004207e9f <envid2env+0x9e>
  8004207e90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207e94:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207e9a:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  8004207e9d:	74 15                	je     8004207eb4 <envid2env+0xb3>
		*env_store = 0;
  8004207e9f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207ea3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207eaa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207eaf:	e9 a6 00 00 00       	jmpq   8004207f5a <envid2env+0x159>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
  8004207eb4:	80 7d d8 00          	cmpb   $0x0,-0x28(%rbp)
  8004207eb8:	0f 84 8c 00 00 00    	je     8004207f4a <envid2env+0x149>
  8004207ebe:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004207ec5:	00 00 00 
  8004207ec8:	ff d0                	callq  *%rax
  8004207eca:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004207ed1:	00 00 00 
  8004207ed4:	48 98                	cltq   
  8004207ed6:	48 c1 e0 03          	shl    $0x3,%rax
  8004207eda:	48 89 c1             	mov    %rax,%rcx
  8004207edd:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207ee1:	48 01 c8             	add    %rcx,%rax
  8004207ee4:	48 01 d0             	add    %rdx,%rax
  8004207ee7:	48 83 c0 08          	add    $0x8,%rax
  8004207eeb:	48 8b 00             	mov    (%rax),%rax
  8004207eee:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004207ef2:	74 56                	je     8004207f4a <envid2env+0x149>
  8004207ef4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004207ef8:	8b 98 cc 00 00 00    	mov    0xcc(%rax),%ebx
  8004207efe:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004207f05:	00 00 00 
  8004207f08:	ff d0                	callq  *%rax
  8004207f0a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004207f11:	00 00 00 
  8004207f14:	48 98                	cltq   
  8004207f16:	48 c1 e0 03          	shl    $0x3,%rax
  8004207f1a:	48 89 c1             	mov    %rax,%rcx
  8004207f1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004207f21:	48 01 c8             	add    %rcx,%rax
  8004207f24:	48 01 d0             	add    %rdx,%rax
  8004207f27:	48 83 c0 08          	add    $0x8,%rax
  8004207f2b:	48 8b 00             	mov    (%rax),%rax
  8004207f2e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004207f34:	39 c3                	cmp    %eax,%ebx
  8004207f36:	74 12                	je     8004207f4a <envid2env+0x149>
		*env_store = 0;
  8004207f38:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f3c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return -E_BAD_ENV;
  8004207f43:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
  8004207f48:	eb 10                	jmp    8004207f5a <envid2env+0x159>
	}

	// should be *env_store = e;, this might literaly work tho
	// env_store = &e;
	*env_store = e;
  8004207f4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004207f4e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004207f52:	48 89 10             	mov    %rdx,(%rax)
	return 0;
  8004207f55:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004207f5a:	48 83 c4 28          	add    $0x28,%rsp
  8004207f5e:	5b                   	pop    %rbx
  8004207f5f:	5d                   	pop    %rbp
  8004207f60:	c3                   	retq   

0000008004207f61 <env_init>:
// they are in the envs array (i.e., so that the first call to
// env_alloc() returns envs[0]).
//
void
env_init(void)
{
  8004207f61:	55                   	push   %rbp
  8004207f62:	48 89 e5             	mov    %rsp,%rbp
  8004207f65:	48 83 ec 10          	sub    $0x10,%rsp
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207f69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004207f70:	eb 6d                	jmp    8004207fdf <env_init+0x7e>
		envs[i].env_status = ENV_FREE;
  8004207f72:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207f79:	00 00 00 
  8004207f7c:	48 8b 10             	mov    (%rax),%rdx
  8004207f7f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207f82:	48 98                	cltq   
  8004207f84:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207f8b:	48 01 d0             	add    %rdx,%rax
  8004207f8e:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004207f95:	00 00 00 
		envs[i].env_link = &envs[i+1];
  8004207f98:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207f9f:	00 00 00 
  8004207fa2:	48 8b 10             	mov    (%rax),%rdx
  8004207fa5:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fa8:	48 98                	cltq   
  8004207faa:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fb1:	48 01 c2             	add    %rax,%rdx
  8004207fb4:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207fbb:	00 00 00 
  8004207fbe:	48 8b 08             	mov    (%rax),%rcx
  8004207fc1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004207fc4:	48 98                	cltq   
  8004207fc6:	48 83 c0 01          	add    $0x1,%rax
  8004207fca:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  8004207fd1:	48 01 c8             	add    %rcx,%rax
  8004207fd4:	48 89 82 c0 00 00 00 	mov    %rax,0xc0(%rdx)
env_init(void)
{
	// Set up envs array
	// LAB 3: Your code here.
	int i;
	for (i = 0; i < NENV; i++) {
  8004207fdb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004207fdf:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  8004207fe6:	7e 8a                	jle    8004207f72 <env_init+0x11>
		envs[i].env_status = ENV_FREE;
		envs[i].env_link = &envs[i+1];
	}
	envs[NENV-1].env_link = NULL;
  8004207fe8:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004207fef:	00 00 00 
  8004207ff2:	48 8b 00             	mov    (%rax),%rax
  8004207ff5:	48 05 98 9e 05 00    	add    $0x59e98,%rax
  8004207ffb:	48 c7 80 c0 00 00 00 	movq   $0x0,0xc0(%rax)
  8004208002:	00 00 00 00 
	env_free_list = &envs[0];
  8004208006:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420800d:	00 00 00 
  8004208010:	48 8b 10             	mov    (%rax),%rdx
  8004208013:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  800420801a:	00 00 00 
  800420801d:	48 89 10             	mov    %rdx,(%rax)

	// Per-CPU part of the initialization
	env_init_percpu();
  8004208020:	48 b8 2e 80 20 04 80 	movabs $0x800420802e,%rax
  8004208027:	00 00 00 
  800420802a:	ff d0                	callq  *%rax
}
  800420802c:	c9                   	leaveq 
  800420802d:	c3                   	retq   

000000800420802e <env_init_percpu>:

// Load GDT and segment descriptors.
void
env_init_percpu(void)
{
  800420802e:	55                   	push   %rbp
  800420802f:	48 89 e5             	mov    %rsp,%rbp
  8004208032:	53                   	push   %rbx
  8004208033:	48 83 ec 10          	sub    $0x10,%rsp
  8004208037:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420803e:	00 00 00 
  8004208041:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
}

static __inline void
lgdt(void *p)
{
	__asm __volatile("lgdt (%0)" : : "r" (p));
  8004208045:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208049:	0f 01 10             	lgdt   (%rax)
	lgdt(&gdt_pd);

	// The kernel never uses GS or FS, so we leave those set to
	// the user data segment.
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
  800420804c:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208051:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
  8004208053:	b8 23 00 00 00       	mov    $0x23,%eax
  8004208058:	8e e0                	mov    %eax,%fs
	// The kernel does use ES, DS, and SS.  We'll change between
	// the kernel and user data segments as needed.
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
  800420805a:	b8 10 00 00 00       	mov    $0x10,%eax
  800420805f:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
  8004208061:	b8 10 00 00 00       	mov    $0x10,%eax
  8004208066:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
  8004208068:	b8 10 00 00 00       	mov    $0x10,%eax
  800420806d:	8e d0                	mov    %eax,%ss
	// Load the kernel text segment into CS.
	asm volatile("pushq %%rbx \n \t movabs $1f,%%rax \n \t pushq %%rax \n\t lretq \n 1:\n" :: "b" (GD_KT):"cc","memory");
  800420806f:	b8 08 00 00 00       	mov    $0x8,%eax
  8004208074:	89 c3                	mov    %eax,%ebx
  8004208076:	53                   	push   %rbx
  8004208077:	48 b8 84 80 20 04 80 	movabs $0x8004208084,%rax
  800420807e:	00 00 00 
  8004208081:	50                   	push   %rax
  8004208082:	48 cb                	lretq  
  8004208084:	66 c7 45 ee 00 00    	movw   $0x0,-0x12(%rbp)
}

static __inline void
lldt(uint16_t sel)
{
	__asm __volatile("lldt %0" : : "r" (sel));
  800420808a:	0f b7 45 ee          	movzwl -0x12(%rbp),%eax
  800420808e:	0f 00 d0             	lldt   %ax
	// For good measure, clear the local descriptor table (LDT),
	// since we don't use it.
	lldt(0);
}
  8004208091:	48 83 c4 10          	add    $0x10,%rsp
  8004208095:	5b                   	pop    %rbx
  8004208096:	5d                   	pop    %rbp
  8004208097:	c3                   	retq   

0000008004208098 <env_setup_vm>:
// Returns 0 on success, < 0 on error.  Errors include:
//	-E_NO_MEM if page directory or table could not be allocated.
//
static int
env_setup_vm(struct Env *e)
{
  8004208098:	55                   	push   %rbp
  8004208099:	48 89 e5             	mov    %rsp,%rbp
  800420809c:	48 83 ec 20          	sub    $0x20,%rsp
  80042080a0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	int r;
	int i;
	struct PageInfo *p = NULL;
  80042080a4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042080ab:	00 

	// Allocate a page for the page directory
	if (!(p = page_alloc(ALLOC_ZERO)))
  80042080ac:	bf 01 00 00 00       	mov    $0x1,%edi
  80042080b1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042080b8:	00 00 00 
  80042080bb:	ff d0                	callq  *%rax
  80042080bd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042080c1:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042080c6:	75 0a                	jne    80042080d2 <env_setup_vm+0x3a>
		return -E_NO_MEM;
  80042080c8:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042080cd:	e9 bc 00 00 00       	jmpq   800420818e <env_setup_vm+0xf6>
	//	is an exception -- you need to increment env_pml4e's
	//	pp_ref for env_free to work correctly.
	//    - The functions in kern/pmap.h are handy.

	// LAB 3: Your code here.
	p->pp_ref       += 1;
  80042080d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080d6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042080da:	8d 50 01             	lea    0x1(%rax),%edx
  80042080dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e1:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  80042080e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042080e9:	48 89 c7             	mov    %rax,%rdi
  80042080ec:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042080f3:	00 00 00 
  80042080f6:	ff d0                	callq  *%rax
  80042080f8:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042080fc:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208103:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004208107:	48 89 c7             	mov    %rax,%rdi
  800420810a:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  8004208111:	00 00 00 
  8004208114:	ff d0                	callq  *%rax
  8004208116:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420811a:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	memset(e->env_pml4e, 0, PGSIZE);
  8004208121:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208125:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420812c:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208131:	be 00 00 00 00       	mov    $0x0,%esi
  8004208136:	48 89 c7             	mov    %rax,%rdi
  8004208139:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004208140:	00 00 00 
  8004208143:	ff d0                	callq  *%rax
	e->env_pml4e[1] = boot_pml4e[1];
  8004208145:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208149:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208150:	48 8d 50 08          	lea    0x8(%rax),%rdx
  8004208154:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420815b:	00 00 00 
  800420815e:	48 8b 00             	mov    (%rax),%rax
  8004208161:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004208165:	48 89 02             	mov    %rax,(%rdx)

	// UVPT maps the env's own page table read-only.
	// Permissions: kernel R, user R
	e->env_pml4e[PML4(UVPT)] = e->env_cr3 | PTE_P | PTE_U;
  8004208168:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420816c:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208173:	48 8d 50 10          	lea    0x10(%rax),%rdx
  8004208177:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420817b:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004208182:	48 83 c8 05          	or     $0x5,%rax
  8004208186:	48 89 02             	mov    %rax,(%rdx)

	return 0;
  8004208189:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420818e:	c9                   	leaveq 
  800420818f:	c3                   	retq   

0000008004208190 <env_guest_alloc>:

#ifndef VMM_GUEST
int
env_guest_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208190:	55                   	push   %rbp
  8004208191:	48 89 e5             	mov    %rsp,%rbp
  8004208194:	48 83 ec 50          	sub    $0x50,%rsp
  8004208198:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800420819c:	89 75 b4             	mov    %esi,-0x4c(%rbp)
	int32_t generation;
	struct Env *e;

	if (!(e = env_free_list))
  800420819f:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042081a6:	00 00 00 
  80042081a9:	48 8b 00             	mov    (%rax),%rax
  80042081ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042081b0:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  80042081b5:	75 0a                	jne    80042081c1 <env_guest_alloc+0x31>
		return -E_NO_FREE_ENV;
  80042081b7:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  80042081bc:	e9 47 04 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(&e->env_vmxinfo, 0, sizeof(struct VmxGuestInfo));
  80042081c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042081c5:	48 05 20 01 00 00    	add    $0x120,%rax
  80042081cb:	ba 48 00 00 00       	mov    $0x48,%edx
  80042081d0:	be 00 00 00 00       	mov    $0x0,%esi
  80042081d5:	48 89 c7             	mov    %rax,%rdi
  80042081d8:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042081df:	00 00 00 
  80042081e2:	ff d0                	callq  *%rax

	// allocate a page for the EPT PML4..
	struct PageInfo *p = NULL;
  80042081e4:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042081eb:	00 

	if (!(p = page_alloc(ALLOC_ZERO)))
  80042081ec:	bf 01 00 00 00       	mov    $0x1,%edi
  80042081f1:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042081f8:	00 00 00 
  80042081fb:	ff d0                	callq  *%rax
  80042081fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208201:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004208206:	75 0a                	jne    8004208212 <env_guest_alloc+0x82>
		return -E_NO_MEM;
  8004208208:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420820d:	e9 f6 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>

	memset(p, 0, sizeof(struct PageInfo));
  8004208212:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208216:	ba 10 00 00 00       	mov    $0x10,%edx
  800420821b:	be 00 00 00 00       	mov    $0x0,%esi
  8004208220:	48 89 c7             	mov    %rax,%rdi
  8004208223:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  800420822a:	00 00 00 
  800420822d:	ff d0                	callq  *%rax
	p->pp_ref       += 1;
  800420822f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208233:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208237:	8d 50 01             	lea    0x1(%rax),%edx
  800420823a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420823e:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_pml4e    = page2kva(p);
  8004208242:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208246:	48 89 c7             	mov    %rax,%rdi
  8004208249:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  8004208250:	00 00 00 
  8004208253:	ff d0                	callq  *%rax
  8004208255:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208259:	48 89 82 e0 00 00 00 	mov    %rax,0xe0(%rdx)
	e->env_cr3      = page2pa(p);
  8004208260:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208264:	48 89 c7             	mov    %rax,%rdi
  8004208267:	48 b8 c5 7c 20 04 80 	movabs $0x8004207cc5,%rax
  800420826e:	00 00 00 
  8004208271:	ff d0                	callq  *%rax
  8004208273:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208277:	48 89 82 e8 00 00 00 	mov    %rax,0xe8(%rdx)

	// Allocate a VMCS.
	struct PageInfo *q = vmx_init_vmcs();
  800420827e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208283:	48 ba e2 ac 21 04 80 	movabs $0x800421ace2,%rdx
  800420828a:	00 00 00 
  800420828d:	ff d2                	callq  *%rdx
  800420828f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	if (!q) {
  8004208293:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004208298:	75 1d                	jne    80042082b7 <env_guest_alloc+0x127>
		page_decref(p);
  800420829a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420829e:	48 89 c7             	mov    %rax,%rdi
  80042082a1:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042082a8:	00 00 00 
  80042082ab:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042082ad:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042082b2:	e9 51 03 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	q->pp_ref += 1;
  80042082b7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082bb:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042082bf:	8d 50 01             	lea    0x1(%rax),%edx
  80042082c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082c6:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.vmcs = page2kva(q);
  80042082ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042082ce:	48 89 c7             	mov    %rax,%rdi
  80042082d1:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042082d8:	00 00 00 
  80042082db:	ff d0                	callq  *%rax
  80042082dd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042082e1:	48 89 82 28 01 00 00 	mov    %rax,0x128(%rdx)

	// Allocate a page for msr load/store area.
	struct PageInfo *r = NULL;
  80042082e8:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  80042082ef:	00 
	if (!(r = page_alloc(ALLOC_ZERO))) {
  80042082f0:	bf 01 00 00 00       	mov    $0x1,%edi
  80042082f5:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042082fc:	00 00 00 
  80042082ff:	ff d0                	callq  *%rax
  8004208301:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208305:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800420830a:	75 30                	jne    800420833c <env_guest_alloc+0x1ac>
		page_decref(p);
  800420830c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208310:	48 89 c7             	mov    %rax,%rdi
  8004208313:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420831a:	00 00 00 
  800420831d:	ff d0                	callq  *%rax
		page_decref(q);
  800420831f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208323:	48 89 c7             	mov    %rax,%rdi
  8004208326:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420832d:	00 00 00 
  8004208330:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  8004208332:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  8004208337:	e9 cc 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	r->pp_ref += 1;
  800420833c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208340:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208344:	8d 50 01             	lea    0x1(%rax),%edx
  8004208347:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420834b:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.msr_host_area = page2kva(r);
  800420834f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208353:	48 89 c7             	mov    %rax,%rdi
  8004208356:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420835d:	00 00 00 
  8004208360:	ff d0                	callq  *%rax
  8004208362:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208366:	48 89 82 50 01 00 00 	mov    %rax,0x150(%rdx)
	e->env_vmxinfo.msr_guest_area = page2kva(r) + PGSIZE / 2;
  800420836d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208371:	48 89 c7             	mov    %rax,%rdi
  8004208374:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420837b:	00 00 00 
  800420837e:	ff d0                	callq  *%rax
  8004208380:	48 8d 90 00 08 00 00 	lea    0x800(%rax),%rdx
  8004208387:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420838b:	48 89 90 58 01 00 00 	mov    %rdx,0x158(%rax)

	// Allocate pages for IO bitmaps.
	struct PageInfo *s = NULL;
  8004208392:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004208399:	00 
	if (!(s = page_alloc(ALLOC_ZERO))) {
  800420839a:	bf 01 00 00 00       	mov    $0x1,%edi
  800420839f:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042083a6:	00 00 00 
  80042083a9:	ff d0                	callq  *%rax
  80042083ab:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042083af:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042083b4:	75 43                	jne    80042083f9 <env_guest_alloc+0x269>
		page_decref(p);
  80042083b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042083ba:	48 89 c7             	mov    %rax,%rdi
  80042083bd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083c4:	00 00 00 
  80042083c7:	ff d0                	callq  *%rax
		page_decref(q);
  80042083c9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042083cd:	48 89 c7             	mov    %rax,%rdi
  80042083d0:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083d7:	00 00 00 
  80042083da:	ff d0                	callq  *%rax
		page_decref(r);
  80042083dc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042083e0:	48 89 c7             	mov    %rax,%rdi
  80042083e3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042083ea:	00 00 00 
  80042083ed:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  80042083ef:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  80042083f4:	e9 0f 02 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	s->pp_ref += 1;
  80042083f9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042083fd:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004208401:	8d 50 01             	lea    0x1(%rax),%edx
  8004208404:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208408:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_a = page2kva(s);
  800420840c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208410:	48 89 c7             	mov    %rax,%rdi
  8004208413:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  800420841a:	00 00 00 
  800420841d:	ff d0                	callq  *%rax
  800420841f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208423:	48 89 82 38 01 00 00 	mov    %rax,0x138(%rdx)

	struct PageInfo *t = NULL;
  800420842a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004208431:	00 
	if (!(t = page_alloc(ALLOC_ZERO))) {
  8004208432:	bf 01 00 00 00       	mov    $0x1,%edi
  8004208437:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420843e:	00 00 00 
  8004208441:	ff d0                	callq  *%rax
  8004208443:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208447:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420844c:	75 56                	jne    80042084a4 <env_guest_alloc+0x314>
		page_decref(p);
  800420844e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208452:	48 89 c7             	mov    %rax,%rdi
  8004208455:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420845c:	00 00 00 
  800420845f:	ff d0                	callq  *%rax
		page_decref(q);
  8004208461:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208465:	48 89 c7             	mov    %rax,%rdi
  8004208468:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420846f:	00 00 00 
  8004208472:	ff d0                	callq  *%rax
		page_decref(r);
  8004208474:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208478:	48 89 c7             	mov    %rax,%rdi
  800420847b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208482:	00 00 00 
  8004208485:	ff d0                	callq  *%rax
		page_decref(s);
  8004208487:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420848b:	48 89 c7             	mov    %rax,%rdi
  800420848e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208495:	00 00 00 
  8004208498:	ff d0                	callq  *%rax
		return -E_NO_MEM;
  800420849a:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420849f:	e9 64 01 00 00       	jmpq   8004208608 <env_guest_alloc+0x478>
	}
	t->pp_ref += 1;
  80042084a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084a8:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042084ac:	8d 50 01             	lea    0x1(%rax),%edx
  80042084af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084b3:	66 89 50 08          	mov    %dx,0x8(%rax)
	e->env_vmxinfo.io_bmap_b = page2kva(t);
  80042084b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042084bb:	48 89 c7             	mov    %rax,%rdi
  80042084be:	48 b8 5b 7d 20 04 80 	movabs $0x8004207d5b,%rax
  80042084c5:	00 00 00 
  80042084c8:	ff d0                	callq  *%rax
  80042084ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084ce:	48 89 82 40 01 00 00 	mov    %rax,0x140(%rdx)

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042084d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042084d9:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042084df:	05 00 10 00 00       	add    $0x1000,%eax
  80042084e4:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042084e9:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042084ec:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042084f0:	7f 07                	jg     80042084f9 <env_guest_alloc+0x369>
		generation = 1 << ENVGENSHIFT;
  80042084f2:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042084f9:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042084fd:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  8004208504:	00 00 00 
  8004208507:	48 8b 00             	mov    (%rax),%rax
  800420850a:	48 29 c2             	sub    %rax,%rdx
  800420850d:	48 89 d0             	mov    %rdx,%rax
  8004208510:	48 c1 f8 03          	sar    $0x3,%rax
  8004208514:	48 89 c2             	mov    %rax,%rdx
  8004208517:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420851e:	fa a4 4f 
  8004208521:	48 0f af c2          	imul   %rdx,%rax
  8004208525:	0b 45 fc             	or     -0x4(%rbp),%eax
  8004208528:	89 c2                	mov    %eax,%edx
  800420852a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420852e:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208534:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208538:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  800420853b:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_GUEST;
  8004208541:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208545:	c7 80 d0 00 00 00 03 	movl   $0x3,0xd0(%rax)
  800420854c:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  800420854f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208553:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420855a:	00 00 00 

	e->env_vmxinfo.vcpunum = vcpu_count++;
  800420855d:	48 b8 50 e2 4d 04 80 	movabs $0x80044de250,%rax
  8004208564:	00 00 00 
  8004208567:	8b 00                	mov    (%rax),%eax
  8004208569:	8d 48 01             	lea    0x1(%rax),%ecx
  800420856c:	48 ba 50 e2 4d 04 80 	movabs $0x80044de250,%rdx
  8004208573:	00 00 00 
  8004208576:	89 0a                	mov    %ecx,(%rdx)
  8004208578:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420857c:	89 82 60 01 00 00    	mov    %eax,0x160(%rdx)
    	cprintf("VCPUNUM allocated: %d\n", e->env_vmxinfo.vcpunum);
  8004208582:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208586:	8b 80 60 01 00 00    	mov    0x160(%rax),%eax
  800420858c:	89 c6                	mov    %eax,%esi
  800420858e:	48 bf cb f0 21 04 80 	movabs $0x800421f0cb,%rdi
  8004208595:	00 00 00 
  8004208598:	b8 00 00 00 00       	mov    $0x0,%eax
  800420859d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042085a4:	00 00 00 
  80042085a7:	ff d2                	callq  *%rdx

	memset(&e->env_tf, 0, sizeof(e->env_tf));
  80042085a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ad:	ba c0 00 00 00       	mov    $0xc0,%edx
  80042085b2:	be 00 00 00 00       	mov    $0x0,%esi
  80042085b7:	48 89 c7             	mov    %rax,%rdi
  80042085ba:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042085c1:	00 00 00 
  80042085c4:	ff d0                	callq  *%rax

	e->env_pgfault_upcall = 0;
  80042085c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085ca:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  80042085d1:	00 00 00 00 
	e->env_ipc_recving = 0;
  80042085d5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085d9:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  80042085e0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042085e4:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  80042085eb:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042085f2:	00 00 00 
  80042085f5:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  80042085f8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042085fc:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208600:	48 89 10             	mov    %rdx,(%rax)

	return 0;
  8004208603:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208608:	c9                   	leaveq 
  8004208609:	c3                   	retq   

000000800420860a <env_guest_free>:

void env_guest_free(struct Env *e) {
  800420860a:	55                   	push   %rbp
  800420860b:	48 89 e5             	mov    %rsp,%rbp
  800420860e:	53                   	push   %rbx
  800420860f:	48 83 ec 38          	sub    $0x38,%rsp
  8004208613:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
	// Free the VMCS.
	page_decref(pa2page(PADDR(e->env_vmxinfo.vmcs)));
  8004208617:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420861b:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  8004208622:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004208626:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420862d:	00 00 00 
  8004208630:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004208634:	77 32                	ja     8004208668 <env_guest_free+0x5e>
  8004208636:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420863a:	48 89 c1             	mov    %rax,%rcx
  800420863d:	48 ba e8 f0 21 04 80 	movabs $0x800421f0e8,%rdx
  8004208644:	00 00 00 
  8004208647:	be 40 01 00 00       	mov    $0x140,%esi
  800420864c:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208653:	00 00 00 
  8004208656:	b8 00 00 00 00       	mov    $0x0,%eax
  800420865b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208662:	00 00 00 
  8004208665:	41 ff d0             	callq  *%r8
  8004208668:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420866f:	ff ff ff 
  8004208672:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208676:	48 01 d0             	add    %rdx,%rax
  8004208679:	48 89 c7             	mov    %rax,%rdi
  800420867c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208683:	00 00 00 
  8004208686:	ff d0                	callq  *%rax
  8004208688:	48 89 c7             	mov    %rax,%rdi
  800420868b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208692:	00 00 00 
  8004208695:	ff d0                	callq  *%rax
	// Free msr load/store area.
	page_decref(pa2page(PADDR(e->env_vmxinfo.msr_host_area)));
  8004208697:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420869b:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  80042086a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042086a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042086ad:	00 00 00 
  80042086b0:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042086b4:	77 32                	ja     80042086e8 <env_guest_free+0xde>
  80042086b6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086ba:	48 89 c1             	mov    %rax,%rcx
  80042086bd:	48 ba e8 f0 21 04 80 	movabs $0x800421f0e8,%rdx
  80042086c4:	00 00 00 
  80042086c7:	be 42 01 00 00       	mov    $0x142,%esi
  80042086cc:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  80042086d3:	00 00 00 
  80042086d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042086db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042086e2:	00 00 00 
  80042086e5:	41 ff d0             	callq  *%r8
  80042086e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042086ef:	ff ff ff 
  80042086f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042086f6:	48 01 d0             	add    %rdx,%rax
  80042086f9:	48 89 c7             	mov    %rax,%rdi
  80042086fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208703:	00 00 00 
  8004208706:	ff d0                	callq  *%rax
  8004208708:	48 89 c7             	mov    %rax,%rdi
  800420870b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208712:	00 00 00 
  8004208715:	ff d0                	callq  *%rax
	// Free IO bitmaps page.
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_a)));
  8004208717:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420871b:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  8004208722:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004208726:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420872d:	00 00 00 
  8004208730:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  8004208734:	77 32                	ja     8004208768 <env_guest_free+0x15e>
  8004208736:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420873a:	48 89 c1             	mov    %rax,%rcx
  800420873d:	48 ba e8 f0 21 04 80 	movabs $0x800421f0e8,%rdx
  8004208744:	00 00 00 
  8004208747:	be 44 01 00 00       	mov    $0x144,%esi
  800420874c:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208753:	00 00 00 
  8004208756:	b8 00 00 00 00       	mov    $0x0,%eax
  800420875b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208762:	00 00 00 
  8004208765:	41 ff d0             	callq  *%r8
  8004208768:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420876f:	ff ff ff 
  8004208772:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208776:	48 01 d0             	add    %rdx,%rax
  8004208779:	48 89 c7             	mov    %rax,%rdi
  800420877c:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208783:	00 00 00 
  8004208786:	ff d0                	callq  *%rax
  8004208788:	48 89 c7             	mov    %rax,%rdi
  800420878b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208792:	00 00 00 
  8004208795:	ff d0                	callq  *%rax
	page_decref(pa2page(PADDR(e->env_vmxinfo.io_bmap_b)));
  8004208797:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420879b:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  80042087a2:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042087a6:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042087ad:	00 00 00 
  80042087b0:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  80042087b4:	77 32                	ja     80042087e8 <env_guest_free+0x1de>
  80042087b6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087ba:	48 89 c1             	mov    %rax,%rcx
  80042087bd:	48 ba e8 f0 21 04 80 	movabs $0x800421f0e8,%rdx
  80042087c4:	00 00 00 
  80042087c7:	be 45 01 00 00       	mov    $0x145,%esi
  80042087cc:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  80042087d3:	00 00 00 
  80042087d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042087db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042087e2:	00 00 00 
  80042087e5:	41 ff d0             	callq  *%r8
  80042087e8:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042087ef:	ff ff ff 
  80042087f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042087f6:	48 01 d0             	add    %rdx,%rax
  80042087f9:	48 89 c7             	mov    %rax,%rdi
  80042087fc:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208803:	00 00 00 
  8004208806:	ff d0                	callq  *%rax
  8004208808:	48 89 c7             	mov    %rax,%rdi
  800420880b:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208812:	00 00 00 
  8004208815:	ff d0                	callq  *%rax

	// Free the host pages that were allocated for the guest and
	// the EPT tables itself.
	free_guest_mem(e->env_pml4e);
  8004208817:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420881b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208822:	48 89 c7             	mov    %rax,%rdi
  8004208825:	48 b8 4e 99 21 04 80 	movabs $0x800421994e,%rax
  800420882c:	00 00 00 
  800420882f:	ff d0                	callq  *%rax

	// Free the EPT PML4 page.
	page_decref(pa2page(e->env_cr3));
  8004208831:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208835:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800420883c:	48 89 c7             	mov    %rax,%rdi
  800420883f:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004208846:	00 00 00 
  8004208849:	ff d0                	callq  *%rax
  800420884b:	48 89 c7             	mov    %rax,%rdi
  800420884e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004208855:	00 00 00 
  8004208858:	ff d0                	callq  *%rax
	e->env_pml4e = 0;
  800420885a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420885e:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004208865:	00 00 00 00 
	e->env_cr3 = 0;
  8004208869:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420886d:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  8004208874:	00 00 00 00 

	// return the environment to the free list
	e->env_status = ENV_FREE;
  8004208878:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420887c:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  8004208883:	00 00 00 
	e->env_link = env_free_list;
  8004208886:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  800420888d:	00 00 00 
  8004208890:	48 8b 10             	mov    (%rax),%rdx
  8004208893:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208897:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  800420889e:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042088a5:	00 00 00 
  80042088a8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042088ac:	48 89 10             	mov    %rdx,(%rax)

	cprintf("[%08x] free vmx guest env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
  80042088af:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042088b3:	8b 98 c8 00 00 00    	mov    0xc8(%rax),%ebx
  80042088b9:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042088c0:	00 00 00 
  80042088c3:	ff d0                	callq  *%rax
  80042088c5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042088cc:	00 00 00 
  80042088cf:	48 98                	cltq   
  80042088d1:	48 c1 e0 03          	shl    $0x3,%rax
  80042088d5:	48 89 c1             	mov    %rax,%rcx
  80042088d8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042088dc:	48 01 c8             	add    %rcx,%rax
  80042088df:	48 01 d0             	add    %rdx,%rax
  80042088e2:	48 83 c0 08          	add    $0x8,%rax
  80042088e6:	48 8b 00             	mov    (%rax),%rax
  80042088e9:	48 85 c0             	test   %rax,%rax
  80042088ec:	74 38                	je     8004208926 <env_guest_free+0x31c>
  80042088ee:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042088f5:	00 00 00 
  80042088f8:	ff d0                	callq  *%rax
  80042088fa:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004208901:	00 00 00 
  8004208904:	48 98                	cltq   
  8004208906:	48 c1 e0 03          	shl    $0x3,%rax
  800420890a:	48 89 c1             	mov    %rax,%rcx
  800420890d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004208911:	48 01 c8             	add    %rcx,%rax
  8004208914:	48 01 d0             	add    %rdx,%rax
  8004208917:	48 83 c0 08          	add    $0x8,%rax
  800420891b:	48 8b 00             	mov    (%rax),%rax
  800420891e:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004208924:	eb 05                	jmp    800420892b <env_guest_free+0x321>
  8004208926:	b8 00 00 00 00       	mov    $0x0,%eax
  800420892b:	89 da                	mov    %ebx,%edx
  800420892d:	89 c6                	mov    %eax,%esi
  800420892f:	48 bf 18 f1 21 04 80 	movabs $0x800421f118,%rdi
  8004208936:	00 00 00 
  8004208939:	b8 00 00 00 00       	mov    $0x0,%eax
  800420893e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  8004208945:	00 00 00 
  8004208948:	ff d1                	callq  *%rcx
}
  800420894a:	48 83 c4 38          	add    $0x38,%rsp
  800420894e:	5b                   	pop    %rbx
  800420894f:	5d                   	pop    %rbp
  8004208950:	c3                   	retq   

0000008004208951 <env_alloc>:
//	-E_NO_MEM on memory exhaustion
//
// CHANGED FOR LAB 0
int
env_alloc(struct Env **newenv_store, envid_t parent_id)
{
  8004208951:	55                   	push   %rbp
  8004208952:	48 89 e5             	mov    %rsp,%rbp
  8004208955:	48 83 ec 30          	sub    $0x30,%rsp
  8004208959:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800420895d:	89 75 d4             	mov    %esi,-0x2c(%rbp)
	int32_t generation;
	int r;
	struct Env *e;

	if (!(e = env_free_list))
  8004208960:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  8004208967:	00 00 00 
  800420896a:	48 8b 00             	mov    (%rax),%rax
  800420896d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208971:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208976:	75 0a                	jne    8004208982 <env_alloc+0x31>
		return -E_NO_FREE_ENV;
  8004208978:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
  800420897d:	e9 5b 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Allocate and set up the page directory for this environment.
	if ((r = env_setup_vm(e)) < 0)
  8004208982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208986:	48 89 c7             	mov    %rax,%rdi
  8004208989:	48 b8 98 80 20 04 80 	movabs $0x8004208098,%rax
  8004208990:	00 00 00 
  8004208993:	ff d0                	callq  *%rax
  8004208995:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208998:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420899c:	79 08                	jns    80042089a6 <env_alloc+0x55>
		return r;
  800420899e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042089a1:	e9 37 01 00 00       	jmpq   8004208add <env_alloc+0x18c>

	// Generate an env_id for this environment.
	generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NENV - 1);
  80042089a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089aa:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  80042089b0:	05 00 10 00 00       	add    $0x1000,%eax
  80042089b5:	25 00 fc ff ff       	and    $0xfffffc00,%eax
  80042089ba:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (generation <= 0)	// Don't create a negative env_id.
  80042089bd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042089c1:	7f 07                	jg     80042089ca <env_alloc+0x79>
		generation = 1 << ENVGENSHIFT;
  80042089c3:	c7 45 fc 00 10 00 00 	movl   $0x1000,-0x4(%rbp)
	e->env_id = generation | (e - envs);
  80042089ca:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042089ce:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  80042089d5:	00 00 00 
  80042089d8:	48 8b 00             	mov    (%rax),%rax
  80042089db:	48 29 c2             	sub    %rax,%rdx
  80042089de:	48 89 d0             	mov    %rdx,%rax
  80042089e1:	48 c1 f8 03          	sar    $0x3,%rax
  80042089e5:	48 89 c2             	mov    %rax,%rdx
  80042089e8:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  80042089ef:	fa a4 4f 
  80042089f2:	48 0f af c2          	imul   %rdx,%rax
  80042089f6:	0b 45 fc             	or     -0x4(%rbp),%eax
  80042089f9:	89 c2                	mov    %eax,%edx
  80042089fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042089ff:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)

	// Set the basic status variables.
	e->env_parent_id = parent_id;
  8004208a05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a09:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004208a0c:	89 90 cc 00 00 00    	mov    %edx,0xcc(%rax)
	e->env_type = ENV_TYPE_USER;
  8004208a12:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a16:	c7 80 d0 00 00 00 00 	movl   $0x0,0xd0(%rax)
  8004208a1d:	00 00 00 
	e->env_status = ENV_RUNNABLE;
  8004208a20:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a24:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  8004208a2b:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
  8004208a2e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a32:	ba c0 00 00 00       	mov    $0xc0,%edx
  8004208a37:	be 00 00 00 00       	mov    $0x0,%esi
  8004208a3c:	48 89 c7             	mov    %rax,%rdi
  8004208a3f:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004208a46:	00 00 00 
  8004208a49:	ff d0                	callq  *%rax
	// The low 2 bits of each segment register contains the
	// Requestor Privilege Level (RPL); 3 means user mode.  When
	// we switch privilege levels, the hardware does various
	// checks involving the RPL and the Descriptor Privilege Level
	// (DPL) stored in the descriptors themselves.
	e->env_tf.tf_ds = GD_UD | 3;
  8004208a4b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a4f:	66 c7 80 80 00 00 00 	movw   $0x23,0x80(%rax)
  8004208a56:	23 00 
	e->env_tf.tf_es = GD_UD | 3;
  8004208a58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a5c:	66 c7 40 78 23 00    	movw   $0x23,0x78(%rax)
	e->env_tf.tf_ss = GD_UD | 3;
  8004208a62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a66:	66 c7 80 b8 00 00 00 	movw   $0x23,0xb8(%rax)
  8004208a6d:	23 00 
	e->env_tf.tf_rsp = USTACKTOP;
  8004208a6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a73:	b9 00 e0 7f ef       	mov    $0xef7fe000,%ecx
  8004208a78:	48 89 88 b0 00 00 00 	mov    %rcx,0xb0(%rax)
	e->env_tf.tf_cs = GD_UT | 3;
  8004208a7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a83:	66 c7 80 a0 00 00 00 	movw   $0x1b,0xa0(%rax)
  8004208a8a:	1b 00 
	// You will set e->env_tf.tf_rip later.

	// Enable interrupts while in user mode.
	e->env_tf.tf_eflags = FL_IF; // interrupts enabled
  8004208a8c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a90:	48 c7 80 a8 00 00 00 	movq   $0x200,0xa8(%rax)
  8004208a97:	00 02 00 00 

	// Clear the page fault handler until user installs one.
	e->env_pgfault_upcall = 0;
  8004208a9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208a9f:	48 c7 80 f0 00 00 00 	movq   $0x0,0xf0(%rax)
  8004208aa6:	00 00 00 00 

	// Also clear the IPC receiving flag.
	e->env_ipc_recving = 0;
  8004208aaa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208aae:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)

	// commit the allocation
	env_free_list = e->env_link;
  8004208ab5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004208ab9:	48 8b 90 c0 00 00 00 	mov    0xc0(%rax),%rdx
  8004208ac0:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  8004208ac7:	00 00 00 
  8004208aca:	48 89 10             	mov    %rdx,(%rax)
	*newenv_store = e;
  8004208acd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208ad1:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004208ad5:	48 89 10             	mov    %rdx,(%rax)

	// cprintf("[%08x] new env %08x\n", curenv ? curenv->env_id : 0, e->env_id);
	return 0;
  8004208ad8:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004208add:	c9                   	leaveq 
  8004208ade:	c3                   	retq   

0000008004208adf <region_alloc>:
// Pages should be writable by user and kernel.
// Panic if any allocation attempt fails.
//
static void
region_alloc(struct Env *e, void *va, size_t len)
{
  8004208adf:	55                   	push   %rbp
  8004208ae0:	48 89 e5             	mov    %rsp,%rbp
  8004208ae3:	48 83 ec 40          	sub    $0x40,%rsp
  8004208ae7:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004208aeb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004208aef:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;
  8004208af3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208af7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208afb:	48 01 d0             	add    %rdx,%rax
  8004208afe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	while (va < endva) {
  8004208b02:	e9 c8 00 00 00       	jmpq   8004208bcf <region_alloc+0xf0>
		// Allocate and map a page covering virtual address va.
		if (!(pp = page_alloc(0)))
  8004208b07:	bf 00 00 00 00       	mov    $0x0,%edi
  8004208b0c:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004208b13:	00 00 00 
  8004208b16:	ff d0                	callq  *%rax
  8004208b18:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004208b1c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  8004208b21:	75 30                	jne    8004208b53 <region_alloc+0x74>
			panic("map_segment: could not alloc page: %e\n", -E_NO_MEM);
  8004208b23:	b9 fc ff ff ff       	mov    $0xfffffffc,%ecx
  8004208b28:	48 ba 38 f1 21 04 80 	movabs $0x800421f138,%rdx
  8004208b2f:	00 00 00 
  8004208b32:	be b2 01 00 00       	mov    $0x1b2,%esi
  8004208b37:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208b3e:	00 00 00 
  8004208b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208b46:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208b4d:	00 00 00 
  8004208b50:	41 ff d0             	callq  *%r8

		// Insert the page into the env's address space
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
  8004208b53:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208b57:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208b5e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004208b62:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004208b66:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004208b6b:	48 89 c7             	mov    %rax,%rdi
  8004208b6e:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004208b75:	00 00 00 
  8004208b78:	ff d0                	callq  *%rax
  8004208b7a:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004208b7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  8004208b81:	79 30                	jns    8004208bb3 <region_alloc+0xd4>
			panic("map_segment: could not insert page: %e\n", r);
  8004208b83:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004208b86:	89 c1                	mov    %eax,%ecx
  8004208b88:	48 ba 60 f1 21 04 80 	movabs $0x800421f160,%rdx
  8004208b8f:	00 00 00 
  8004208b92:	be b6 01 00 00       	mov    $0x1b6,%esi
  8004208b97:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208b9e:	00 00 00 
  8004208ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208ba6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208bad:	00 00 00 
  8004208bb0:	41 ff d0             	callq  *%r8

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
  8004208bb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bb7:	48 05 00 10 00 00    	add    $0x1000,%rax
  8004208bbd:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004208bc1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208bc5:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004208bcb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
{
	int r;
	struct PageInfo *pp;
	void *endva = (uint8_t*) va + len;

	while (va < endva) {
  8004208bcf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208bd3:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004208bd7:	0f 82 2a ff ff ff    	jb     8004208b07 <region_alloc+0x28>
		if ((r = page_insert(e->env_pml4e, pp, va, PTE_P|PTE_W|PTE_U)) < 0)
			panic("map_segment: could not insert page: %e\n", r);

		va = ROUNDDOWN((uint8_t*) va + PGSIZE, PGSIZE);
	}
}
  8004208bdd:	c9                   	leaveq 
  8004208bde:	c3                   	retq   

0000008004208bdf <load_icode>:
//
// load_icode panics if it encounters problems.
//
void
load_icode(struct Env *e, uint8_t *binary)
{
  8004208bdf:	55                   	push   %rbp
  8004208be0:	48 89 e5             	mov    %rsp,%rbp
  8004208be3:	53                   	push   %rbx
  8004208be4:	48 83 ec 78          	sub    $0x78,%rsp
  8004208be8:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004208bec:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
	struct Elf *elf = (struct Elf *)binary;
  8004208bf0:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004208bf4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208bf8:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004208bfd:	0f 84 6f 03 00 00    	je     8004208f72 <load_icode+0x393>
  8004208c03:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c07:	8b 00                	mov    (%rax),%eax
  8004208c09:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
  8004208c0e:	0f 85 5e 03 00 00    	jne    8004208f72 <load_icode+0x393>
		lcr3(PADDR((uint64_t)e->env_pml4e));
  8004208c14:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208c18:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004208c1f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  8004208c23:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004208c2a:	00 00 00 
  8004208c2d:	48 39 45 c8          	cmp    %rax,-0x38(%rbp)
  8004208c31:	77 32                	ja     8004208c65 <load_icode+0x86>
  8004208c33:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c37:	48 89 c1             	mov    %rax,%rcx
  8004208c3a:	48 ba e8 f0 21 04 80 	movabs $0x800421f0e8,%rdx
  8004208c41:	00 00 00 
  8004208c44:	be d8 01 00 00       	mov    $0x1d8,%esi
  8004208c49:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208c50:	00 00 00 
  8004208c53:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208c58:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004208c5f:	00 00 00 
  8004208c62:	41 ff d0             	callq  *%r8
  8004208c65:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004208c6c:	ff ff ff 
  8004208c6f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004208c73:	48 01 d0             	add    %rdx,%rax
  8004208c76:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  8004208c7a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004208c7e:	0f 22 d8             	mov    %rax,%cr3
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
  8004208c81:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c85:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208c89:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c8d:	48 01 d0             	add    %rdx,%rax
  8004208c90:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
		eph = ph + elf->e_phnum;
  8004208c94:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208c98:	0f b7 40 38          	movzwl 0x38(%rax),%eax
  8004208c9c:	0f b7 c0             	movzwl %ax,%eax
  8004208c9f:	48 c1 e0 03          	shl    $0x3,%rax
  8004208ca3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004208caa:	00 
  8004208cab:	48 29 c2             	sub    %rax,%rdx
  8004208cae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cb2:	48 01 d0             	add    %rdx,%rax
  8004208cb5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		for(;ph < eph; ph++) {
  8004208cb9:	e9 bd 00 00 00       	jmpq   8004208d7b <load_icode+0x19c>
			if (ph->p_type == ELF_PROG_LOAD) {
  8004208cbe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cc2:	8b 00                	mov    (%rax),%eax
  8004208cc4:	83 f8 01             	cmp    $0x1,%eax
  8004208cc7:	0f 85 a9 00 00 00    	jne    8004208d76 <load_icode+0x197>
				region_alloc(e, (void *)ph->p_va, ph->p_memsz);
  8004208ccd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd1:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208cd5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cd9:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208cdd:	48 89 c1             	mov    %rax,%rcx
  8004208ce0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208ce4:	48 89 ce             	mov    %rcx,%rsi
  8004208ce7:	48 89 c7             	mov    %rax,%rdi
  8004208cea:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208cf1:	00 00 00 
  8004208cf4:	ff d0                	callq  *%rax
				memcpy((void *)ph->p_va, (void *)((uint8_t *)elf + ph->p_offset), ph->p_filesz);
  8004208cf6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208cfa:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208cfe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d02:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004208d06:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208d0a:	48 01 c1             	add    %rax,%rcx
  8004208d0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d11:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004208d15:	48 89 ce             	mov    %rcx,%rsi
  8004208d18:	48 89 c7             	mov    %rax,%rdi
  8004208d1b:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  8004208d22:	00 00 00 
  8004208d25:	ff d0                	callq  *%rax
				if (ph->p_filesz < ph->p_memsz) {
  8004208d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d2b:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208d2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d33:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004208d37:	48 39 c2             	cmp    %rax,%rdx
  8004208d3a:	73 3a                	jae    8004208d76 <load_icode+0x197>
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
  8004208d3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d40:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208d44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d48:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d4c:	48 29 c2             	sub    %rax,%rdx
  8004208d4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d53:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004208d57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d5b:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208d5f:	48 01 c8             	add    %rcx,%rax
  8004208d62:	be 00 00 00 00       	mov    $0x0,%esi
  8004208d67:	48 89 c7             	mov    %rax,%rdi
  8004208d6a:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004208d71:	00 00 00 
  8004208d74:	ff d0                	callq  *%rax

	if (elf && elf->e_magic == ELF_MAGIC) {
		lcr3(PADDR((uint64_t)e->env_pml4e));
		ph  = (struct Proghdr *)((uint8_t *)elf + elf->e_phoff);
		eph = ph + elf->e_phnum;
		for(;ph < eph; ph++) {
  8004208d76:	48 83 45 e8 38       	addq   $0x38,-0x18(%rbp)
  8004208d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004208d7f:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
  8004208d83:	0f 82 35 ff ff ff    	jb     8004208cbe <load_icode+0xdf>
				if (ph->p_filesz < ph->p_memsz) {
					memset((void *)(ph->p_va + ph->p_filesz), 0, ph->p_memsz-ph->p_filesz);
				}
			}
		}
		region_alloc(e, (void*) (USTACKTOP - PGSIZE), PGSIZE);
  8004208d89:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208d8d:	ba 00 10 00 00       	mov    $0x1000,%edx
  8004208d92:	be 00 d0 7f ef       	mov    $0xef7fd000,%esi
  8004208d97:	48 89 c7             	mov    %rax,%rdi
  8004208d9a:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208da1:	00 00 00 
  8004208da4:	ff d0                	callq  *%rax
		e->env_tf.tf_rip    = elf->e_entry;
  8004208da6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208daa:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208dae:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208db2:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		e->env_tf.tf_rsp    = USTACKTOP; //keeping stack 8 byte aligned
  8004208db9:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208dbd:	bb 00 e0 7f ef       	mov    $0xef7fe000,%ebx
  8004208dc2:	48 89 98 b0 00 00 00 	mov    %rbx,0xb0(%rax)

		uintptr_t debug_address = USTABDATA;
  8004208dc9:	48 c7 45 e0 00 00 20 	movq   $0x200000,-0x20(%rbp)
  8004208dd0:	00 
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
  8004208dd1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208dd5:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004208dd9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208ddd:	48 01 d0             	add    %rdx,%rax
  8004208de0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
  8004208de4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208de8:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004208dec:	0f b7 c0             	movzwl %ax,%eax
  8004208def:	48 c1 e0 06          	shl    $0x6,%rax
  8004208df3:	48 89 c2             	mov    %rax,%rdx
  8004208df6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208dfa:	48 01 d0             	add    %rdx,%rax
  8004208dfd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		struct Secthdr* esh = sh + elf->e_shnum;
  8004208e01:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e05:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004208e09:	0f b7 c0             	movzwl %ax,%eax
  8004208e0c:	48 c1 e0 06          	shl    $0x6,%rax
  8004208e10:	48 89 c2             	mov    %rax,%rdx
  8004208e13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e17:	48 01 d0             	add    %rdx,%rax
  8004208e1a:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		for(;sh < esh; sh++) {
  8004208e1e:	e9 27 01 00 00       	jmpq   8004208f4a <load_icode+0x36b>
			char* name = (char*)((uint8_t*)elf + shstr_tab->sh_offset) + sh->sh_name;
  8004208e23:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004208e27:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004208e2b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208e2f:	8b 00                	mov    (%rax),%eax
  8004208e31:	89 c0                	mov    %eax,%eax
  8004208e33:	48 01 c2             	add    %rax,%rdx
  8004208e36:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208e3a:	48 01 d0             	add    %rdx,%rax
  8004208e3d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			if(!strcmp(name, ".debug_info") || !strcmp(name, ".debug_abbrev")
  8004208e41:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e45:	48 be 88 f1 21 04 80 	movabs $0x800421f188,%rsi
  8004208e4c:	00 00 00 
  8004208e4f:	48 89 c7             	mov    %rax,%rdi
  8004208e52:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004208e59:	00 00 00 
  8004208e5c:	ff d0                	callq  *%rax
  8004208e5e:	85 c0                	test   %eax,%eax
  8004208e60:	0f 84 84 00 00 00    	je     8004208eea <load_icode+0x30b>
  8004208e66:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e6a:	48 be 94 f1 21 04 80 	movabs $0x800421f194,%rsi
  8004208e71:	00 00 00 
  8004208e74:	48 89 c7             	mov    %rax,%rdi
  8004208e77:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004208e7e:	00 00 00 
  8004208e81:	ff d0                	callq  *%rax
  8004208e83:	85 c0                	test   %eax,%eax
  8004208e85:	74 63                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_line") || !strcmp(name, ".eh_frame")
  8004208e87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208e8b:	48 be a2 f1 21 04 80 	movabs $0x800421f1a2,%rsi
  8004208e92:	00 00 00 
  8004208e95:	48 89 c7             	mov    %rax,%rdi
  8004208e98:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004208e9f:	00 00 00 
  8004208ea2:	ff d0                	callq  *%rax
  8004208ea4:	85 c0                	test   %eax,%eax
  8004208ea6:	74 42                	je     8004208eea <load_icode+0x30b>
  8004208ea8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208eac:	48 be ae f1 21 04 80 	movabs $0x800421f1ae,%rsi
  8004208eb3:	00 00 00 
  8004208eb6:	48 89 c7             	mov    %rax,%rdi
  8004208eb9:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004208ec0:	00 00 00 
  8004208ec3:	ff d0                	callq  *%rax
  8004208ec5:	85 c0                	test   %eax,%eax
  8004208ec7:	74 21                	je     8004208eea <load_icode+0x30b>
			   || !strcmp(name, ".debug_str")) {
  8004208ec9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004208ecd:	48 be b8 f1 21 04 80 	movabs $0x800421f1b8,%rsi
  8004208ed4:	00 00 00 
  8004208ed7:	48 89 c7             	mov    %rax,%rdi
  8004208eda:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004208ee1:	00 00 00 
  8004208ee4:	ff d0                	callq  *%rax
  8004208ee6:	85 c0                	test   %eax,%eax
  8004208ee8:	75 5b                	jne    8004208f45 <load_icode+0x366>
				region_alloc(e ,(void*)debug_address, sh->sh_size);
  8004208eea:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208eee:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208ef2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  8004208ef6:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208efa:	48 89 ce             	mov    %rcx,%rsi
  8004208efd:	48 89 c7             	mov    %rax,%rdi
  8004208f00:	48 b8 df 8a 20 04 80 	movabs $0x8004208adf,%rax
  8004208f07:	00 00 00 
  8004208f0a:	ff d0                	callq  *%rax
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
  8004208f0c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f10:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004208f14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f18:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004208f1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004208f20:	48 01 c1             	add    %rax,%rcx
  8004208f23:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004208f27:	48 89 ce             	mov    %rcx,%rsi
  8004208f2a:	48 89 c7             	mov    %rax,%rdi
  8004208f2d:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  8004208f34:	00 00 00 
  8004208f37:	ff d0                	callq  *%rax
				       sh->sh_size);
				debug_address += sh->sh_size;
  8004208f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f3d:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004208f41:	48 01 45 e0          	add    %rax,-0x20(%rbp)

		uintptr_t debug_address = USTABDATA;
		struct Secthdr *sh = (struct Secthdr *)(((uint8_t *)elf + elf->e_shoff));
		struct Secthdr *shstr_tab = sh + elf->e_shstrndx;
		struct Secthdr* esh = sh + elf->e_shnum;
		for(;sh < esh; sh++) {
  8004208f45:	48 83 45 d8 40       	addq   $0x40,-0x28(%rbp)
  8004208f4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004208f4e:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  8004208f52:	0f 82 cb fe ff ff    	jb     8004208e23 <load_icode+0x244>
				memcpy((void *)debug_address, (void *)((uint8_t *)elf + sh->sh_offset),
				       sh->sh_size);
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
  8004208f58:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  8004208f5f:	00 00 00 
  8004208f62:	48 8b 00             	mov    (%rax),%rax
  8004208f65:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004208f69:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004208f6d:	0f 22 d8             	mov    %rax,%cr3
load_icode(struct Env *e, uint8_t *binary)
{
	struct Elf *elf = (struct Elf *)binary;
	struct Proghdr *ph, *eph;

	if (elf && elf->e_magic == ELF_MAGIC) {
  8004208f70:	eb 2a                	jmp    8004208f9c <load_icode+0x3bd>
				debug_address += sh->sh_size;
			}
		}
		lcr3(boot_cr3);
	} else {
		panic("Invalid Binary");
  8004208f72:	48 ba c3 f1 21 04 80 	movabs $0x800421f1c3,%rdx
  8004208f79:	00 00 00 
  8004208f7c:	be f9 01 00 00       	mov    $0x1f9,%esi
  8004208f81:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208f88:	00 00 00 
  8004208f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004208f90:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004208f97:	00 00 00 
  8004208f9a:	ff d1                	callq  *%rcx
	}
	// Give environment a stack
	e->elf = binary;
  8004208f9c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004208fa0:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004208fa4:	48 89 90 18 01 00 00 	mov    %rdx,0x118(%rax)
}
  8004208fab:	48 83 c4 78          	add    $0x78,%rsp
  8004208faf:	5b                   	pop    %rbx
  8004208fb0:	5d                   	pop    %rbp
  8004208fb1:	c3                   	retq   

0000008004208fb2 <env_create>:
// before running the first user-mode environment.
// The new env's parent ID is set to 0.
//
void
env_create(uint8_t *binary, enum EnvType type)
{
  8004208fb2:	55                   	push   %rbp
  8004208fb3:	48 89 e5             	mov    %rsp,%rbp
  8004208fb6:	48 83 ec 20          	sub    $0x20,%rsp
  8004208fba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004208fbe:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	// LAB 3: Your code here.
	int r;
	struct Env *e;
	if ((r = env_alloc(&e, 0)) < 0)
  8004208fc1:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  8004208fc5:	be 00 00 00 00       	mov    $0x0,%esi
  8004208fca:	48 89 c7             	mov    %rax,%rdi
  8004208fcd:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  8004208fd4:	00 00 00 
  8004208fd7:	ff d0                	callq  *%rax
  8004208fd9:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004208fdc:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004208fe0:	79 30                	jns    8004209012 <env_create+0x60>
		panic("env_create: could not allocate env: %e\n", r);
  8004208fe2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004208fe5:	89 c1                	mov    %eax,%ecx
  8004208fe7:	48 ba d8 f1 21 04 80 	movabs $0x800421f1d8,%rdx
  8004208fee:	00 00 00 
  8004208ff1:	be 0d 02 00 00       	mov    $0x20d,%esi
  8004208ff6:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004208ffd:	00 00 00 
  8004209000:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209005:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420900c:	00 00 00 
  800420900f:	41 ff d0             	callq  *%r8
	load_icode(e, binary);
  8004209012:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209016:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420901a:	48 89 d6             	mov    %rdx,%rsi
  800420901d:	48 89 c7             	mov    %rax,%rdi
  8004209020:	48 b8 df 8b 20 04 80 	movabs $0x8004208bdf,%rax
  8004209027:	00 00 00 
  800420902a:	ff d0                	callq  *%rax
	e->env_type = type;
  800420902c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209030:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004209033:	89 90 d0 00 00 00    	mov    %edx,0xd0(%rax)

	// If this is the file server (type == ENV_TYPE_FS) give it I/O privileges.
	// LAB 5: Your code here.
	if (type == ENV_TYPE_FS)
  8004209039:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420903d:	75 19                	jne    8004209058 <env_create+0xa6>
		e->env_tf.tf_eflags |= FL_IOPL_3;
  800420903f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209043:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004209047:	48 8b 92 a8 00 00 00 	mov    0xa8(%rdx),%rdx
  800420904e:	80 ce 30             	or     $0x30,%dh
  8004209051:	48 89 90 a8 00 00 00 	mov    %rdx,0xa8(%rax)
}
  8004209058:	c9                   	leaveq 
  8004209059:	c3                   	retq   

000000800420905a <env_free>:
//
// Frees env e and all memory it uses.
//
void
env_free(struct Env *e)
{
  800420905a:	55                   	push   %rbp
  800420905b:	48 89 e5             	mov    %rsp,%rbp
  800420905e:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
  8004209065:	48 89 bd 78 ff ff ff 	mov    %rdi,-0x88(%rbp)
	pte_t *pt;
	uint64_t pdeno, pteno;
	physaddr_t pa;

#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  800420906c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209073:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209079:	83 f8 03             	cmp    $0x3,%eax
  800420907c:	75 1b                	jne    8004209099 <env_free+0x3f>
		env_guest_free(e);
  800420907e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209085:	48 89 c7             	mov    %rax,%rdi
  8004209088:	48 b8 0a 86 20 04 80 	movabs $0x800420860a,%rax
  800420908f:	00 00 00 
  8004209092:	ff d0                	callq  *%rax
		return;
  8004209094:	e9 78 04 00 00       	jmpq   8004209511 <env_free+0x4b7>
#endif

	// If freeing the current environment, switch to kern_pgdir
	// before freeing the page directory, just in case the page
	// gets reused.
	if (e == curenv)
  8004209099:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042090a0:	00 00 00 
  80042090a3:	ff d0                	callq  *%rax
  80042090a5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042090ac:	00 00 00 
  80042090af:	48 98                	cltq   
  80042090b1:	48 c1 e0 03          	shl    $0x3,%rax
  80042090b5:	48 89 c1             	mov    %rax,%rcx
  80042090b8:	48 c1 e1 04          	shl    $0x4,%rcx
  80042090bc:	48 01 c8             	add    %rcx,%rax
  80042090bf:	48 01 d0             	add    %rdx,%rax
  80042090c2:	48 83 c0 08          	add    $0x8,%rax
  80042090c6:	48 8b 00             	mov    (%rax),%rax
  80042090c9:	48 3b 85 78 ff ff ff 	cmp    -0x88(%rbp),%rax
  80042090d0:	75 18                	jne    80042090ea <env_free+0x90>
		lcr3(boot_cr3);
  80042090d2:	48 b8 e8 d5 6d 04 80 	movabs $0x80046dd5e8,%rax
  80042090d9:	00 00 00 
  80042090dc:	48 8b 00             	mov    (%rax),%rax
  80042090df:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  80042090e3:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  80042090e7:	0f 22 d8             	mov    %rax,%cr3

	// Note the environment's demise.
	// cprintf("[%08x] free env %08x\n", curenv ? curenv->env_id : 0, e->env_id);

	// Flush all mapped pages in the user portion of the address space
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
  80042090ea:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042090f1:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  80042090f8:	48 8b 00             	mov    (%rax),%rax
  80042090fb:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209101:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004209105:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209109:	48 c1 e8 0c          	shr    $0xc,%rax
  800420910d:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004209110:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004209113:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800420911a:	00 00 00 
  800420911d:	48 8b 00             	mov    (%rax),%rax
  8004209120:	48 39 c2             	cmp    %rax,%rdx
  8004209123:	72 32                	jb     8004209157 <env_free+0xfd>
  8004209125:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209129:	48 89 c1             	mov    %rax,%rcx
  800420912c:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  8004209133:	00 00 00 
  8004209136:	be 32 02 00 00       	mov    $0x232,%esi
  800420913b:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  8004209142:	00 00 00 
  8004209145:	b8 00 00 00 00       	mov    $0x0,%eax
  800420914a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209151:	00 00 00 
  8004209154:	41 ff d0             	callq  *%r8
  8004209157:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420915e:	00 00 00 
  8004209161:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004209165:	48 01 d0             	add    %rdx,%rax
  8004209168:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420916c:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004209173:	00 
  8004209174:	e9 ab 02 00 00       	jmpq   8004209424 <env_free+0x3ca>
		if(!(env_pdpe[pdpe_index] & PTE_P))
  8004209179:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420917d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209184:	00 
  8004209185:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004209189:	48 01 d0             	add    %rdx,%rax
  800420918c:	48 8b 00             	mov    (%rax),%rax
  800420918f:	83 e0 01             	and    $0x1,%eax
  8004209192:	48 85 c0             	test   %rax,%rax
  8004209195:	75 05                	jne    800420919c <env_free+0x142>
			continue;
  8004209197:	e9 83 02 00 00       	jmpq   800420941f <env_free+0x3c5>
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
  800420919c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042091a0:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042091a7:	00 
  80042091a8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042091ac:	48 01 d0             	add    %rdx,%rax
  80042091af:	48 8b 00             	mov    (%rax),%rax
  80042091b2:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042091b8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  80042091bc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091c0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042091c4:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042091c7:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  80042091ca:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042091d1:	00 00 00 
  80042091d4:	48 8b 00             	mov    (%rax),%rax
  80042091d7:	48 39 c2             	cmp    %rax,%rdx
  80042091da:	72 32                	jb     800420920e <env_free+0x1b4>
  80042091dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042091e0:	48 89 c1             	mov    %rax,%rcx
  80042091e3:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  80042091ea:	00 00 00 
  80042091ed:	be 3a 02 00 00       	mov    $0x23a,%esi
  80042091f2:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  80042091f9:	00 00 00 
  80042091fc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209201:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004209208:	00 00 00 
  800420920b:	41 ff d0             	callq  *%r8
  800420920e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004209215:	00 00 00 
  8004209218:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420921c:	48 01 d0             	add    %rdx,%rax
  800420921f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
  8004209223:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209228:	75 07                	jne    8004209231 <env_free+0x1d7>
  800420922a:	b8 04 00 00 00       	mov    $0x4,%eax
  800420922f:	eb 05                	jmp    8004209236 <env_free+0x1dc>
  8004209231:	b8 ff 01 00 00       	mov    $0x1ff,%eax
  8004209236:	89 45 b4             	mov    %eax,-0x4c(%rbp)
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  8004209239:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004209240:	00 
  8004209241:	e9 6e 01 00 00       	jmpq   80042093b4 <env_free+0x35a>

			// only look at mapped page tables
			if (!(env_pgdir[pdeno] & PTE_P))
  8004209246:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420924a:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209251:	00 
  8004209252:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209256:	48 01 d0             	add    %rdx,%rax
  8004209259:	48 8b 00             	mov    (%rax),%rax
  800420925c:	83 e0 01             	and    $0x1,%eax
  800420925f:	48 85 c0             	test   %rax,%rax
  8004209262:	75 05                	jne    8004209269 <env_free+0x20f>
				continue;
  8004209264:	e9 46 01 00 00       	jmpq   80042093af <env_free+0x355>
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
  8004209269:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420926d:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004209274:	00 
  8004209275:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209279:	48 01 d0             	add    %rdx,%rax
  800420927c:	48 8b 00             	mov    (%rax),%rax
  800420927f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209285:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			pt = (pte_t*) KADDR(pa);
  8004209289:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420928d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004209291:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004209295:	48 c1 e8 0c          	shr    $0xc,%rax
  8004209299:	89 45 9c             	mov    %eax,-0x64(%rbp)
  800420929c:	8b 55 9c             	mov    -0x64(%rbp),%edx
  800420929f:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042092a6:	00 00 00 
  80042092a9:	48 8b 00             	mov    (%rax),%rax
  80042092ac:	48 39 c2             	cmp    %rax,%rdx
  80042092af:	72 32                	jb     80042092e3 <env_free+0x289>
  80042092b1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092b5:	48 89 c1             	mov    %rax,%rcx
  80042092b8:	48 ba a8 f0 21 04 80 	movabs $0x800421f0a8,%rdx
  80042092bf:	00 00 00 
  80042092c2:	be 44 02 00 00       	mov    $0x244,%esi
  80042092c7:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  80042092ce:	00 00 00 
  80042092d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042092d6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042092dd:	00 00 00 
  80042092e0:	41 ff d0             	callq  *%r8
  80042092e3:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042092ea:	00 00 00 
  80042092ed:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042092f1:	48 01 d0             	add    %rdx,%rax
  80042092f4:	48 89 45 90          	mov    %rax,-0x70(%rbp)

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  80042092f8:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  80042092ff:	00 
  8004209300:	eb 67                	jmp    8004209369 <env_free+0x30f>
				if (pt[pteno] & PTE_P){
  8004209302:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209306:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420930d:	00 
  800420930e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004209312:	48 01 d0             	add    %rdx,%rax
  8004209315:	48 8b 00             	mov    (%rax),%rax
  8004209318:	83 e0 01             	and    $0x1,%eax
  800420931b:	48 85 c0             	test   %rax,%rax
  800420931e:	74 44                	je     8004209364 <env_free+0x30a>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
  8004209320:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209324:	48 c1 e0 1e          	shl    $0x1e,%rax
  8004209328:	48 89 c2             	mov    %rax,%rdx
  800420932b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420932f:	48 c1 e0 15          	shl    $0x15,%rax
  8004209333:	48 09 c2             	or     %rax,%rdx
  8004209336:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420933a:	48 c1 e0 0c          	shl    $0xc,%rax
  800420933e:	48 09 d0             	or     %rdx,%rax
  8004209341:	48 89 c2             	mov    %rax,%rdx
  8004209344:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420934b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209352:	48 89 d6             	mov    %rdx,%rsi
  8004209355:	48 89 c7             	mov    %rax,%rdi
  8004209358:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420935f:	00 00 00 
  8004209362:	ff d0                	callq  *%rax
			// find the pa and va of the page table
			pa = PTE_ADDR(env_pgdir[pdeno]);
			pt = (pte_t*) KADDR(pa);

			// unmap all PTEs in this page table
			for (pteno = 0; pteno < PTX(~0); pteno++) {
  8004209364:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004209369:	48 81 7d f0 fe 01 00 	cmpq   $0x1fe,-0x10(%rbp)
  8004209370:	00 
  8004209371:	76 8f                	jbe    8004209302 <env_free+0x2a8>
					page_remove(e->env_pml4e, PGADDR((uint64_t)0,pdpe_index,pdeno, pteno, 0));
				}
			}

			// free the page table itself
			env_pgdir[pdeno] = 0;
  8004209373:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209377:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420937e:	00 
  800420937f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004209383:	48 01 d0             	add    %rdx,%rax
  8004209386:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
			page_decref(pa2page(pa));
  800420938d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209391:	48 89 c7             	mov    %rax,%rdi
  8004209394:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420939b:	00 00 00 
  800420939e:	ff d0                	callq  *%rax
  80042093a0:	48 89 c7             	mov    %rax,%rdi
  80042093a3:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042093aa:	00 00 00 
  80042093ad:	ff d0                	callq  *%rax
		if(!(env_pdpe[pdpe_index] & PTE_P))
			continue;
		pde_t *env_pgdir = KADDR(PTE_ADDR(env_pdpe[pdpe_index]));
		pdeno_limit  = pdpe_index==3?PDX(UTOP):PDX(0xFFFFFFFF);
		static_assert(UTOP % PTSIZE == 0);
		for (pdeno = 0; pdeno < pdeno_limit; pdeno++) {
  80042093af:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042093b4:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  80042093b7:	48 98                	cltq   
  80042093b9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042093bd:	0f 87 83 fe ff ff    	ja     8004209246 <env_free+0x1ec>
			// free the page table itself
			env_pgdir[pdeno] = 0;
			page_decref(pa2page(pa));
		}
		// free the page directory
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
  80042093c3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093c7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ce:	00 
  80042093cf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093d3:	48 01 d0             	add    %rdx,%rax
  80042093d6:	48 8b 00             	mov    (%rax),%rax
  80042093d9:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042093df:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
		env_pdpe[pdpe_index] = 0;
  80042093e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042093e7:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042093ee:	00 
  80042093ef:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042093f3:	48 01 d0             	add    %rdx,%rax
  80042093f6:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		page_decref(pa2page(pa));
  80042093fd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004209401:	48 89 c7             	mov    %rax,%rdi
  8004209404:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  800420940b:	00 00 00 
  800420940e:	ff d0                	callq  *%rax
  8004209410:	48 89 c7             	mov    %rax,%rdi
  8004209413:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420941a:	00 00 00 
  800420941d:	ff d0                	callq  *%rax
	pdpe_t *env_pdpe = KADDR(PTE_ADDR(e->env_pml4e[0]));
	int pdeno_limit;
	uint64_t pdpe_index;
	// using 3 instead of NPDPENTRIES as we have only first three indices
	// set for 4GB of address space.
	for(pdpe_index=0;pdpe_index<=3;pdpe_index++){
  800420941f:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004209424:	48 83 7d e8 03       	cmpq   $0x3,-0x18(%rbp)
  8004209429:	0f 86 4a fd ff ff    	jbe    8004209179 <env_free+0x11f>
		pa = PTE_ADDR(env_pdpe[pdpe_index]);
		env_pdpe[pdpe_index] = 0;
		page_decref(pa2page(pa));
	}
	// free the page directory pointer
	page_decref(pa2page(PTE_ADDR(e->env_pml4e[0])));
  800420942f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209436:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420943d:	48 8b 00             	mov    (%rax),%rax
  8004209440:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  8004209446:	48 89 c7             	mov    %rax,%rdi
  8004209449:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  8004209450:	00 00 00 
  8004209453:	ff d0                	callq  *%rax
  8004209455:	48 89 c7             	mov    %rax,%rdi
  8004209458:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800420945f:	00 00 00 
  8004209462:	ff d0                	callq  *%rax
	// free the page map level 4 (PML4)
	e->env_pml4e[0] = 0;
  8004209464:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800420946b:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004209472:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	pa = e->env_cr3;
  8004209479:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209480:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209487:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	e->env_pml4e = 0;
  800420948b:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004209492:	48 c7 80 e0 00 00 00 	movq   $0x0,0xe0(%rax)
  8004209499:	00 00 00 00 
	e->env_cr3 = 0;
  800420949d:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094a4:	48 c7 80 e8 00 00 00 	movq   $0x0,0xe8(%rax)
  80042094ab:	00 00 00 00 
	page_decref(pa2page(pa));
  80042094af:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042094b3:	48 89 c7             	mov    %rax,%rdi
  80042094b6:	48 b8 ea 7c 20 04 80 	movabs $0x8004207cea,%rax
  80042094bd:	00 00 00 
  80042094c0:	ff d0                	callq  *%rax
  80042094c2:	48 89 c7             	mov    %rax,%rdi
  80042094c5:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042094cc:	00 00 00 
  80042094cf:	ff d0                	callq  *%rax

	// return the environment to the free list
	e->env_status = ENV_FREE;
  80042094d1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094d8:	c7 80 d4 00 00 00 00 	movl   $0x0,0xd4(%rax)
  80042094df:	00 00 00 
	e->env_link = env_free_list;
  80042094e2:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  80042094e9:	00 00 00 
  80042094ec:	48 8b 10             	mov    (%rax),%rdx
  80042094ef:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042094f6:	48 89 90 c0 00 00 00 	mov    %rdx,0xc0(%rax)
	env_free_list = e;
  80042094fd:	48 b8 60 e2 4d 04 80 	movabs $0x80044de260,%rax
  8004209504:	00 00 00 
  8004209507:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800420950e:	48 89 10             	mov    %rdx,(%rax)
}
  8004209511:	c9                   	leaveq 
  8004209512:	c3                   	retq   

0000008004209513 <env_destroy>:
// If e was the current env, then runs a new environment (and does not return
// to the caller).
//
void
env_destroy(struct Env *e)
{
  8004209513:	55                   	push   %rbp
  8004209514:	48 89 e5             	mov    %rsp,%rbp
  8004209517:	48 83 ec 10          	sub    $0x10,%rsp
  800420951b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	// If e is currently running on other CPUs, we change its state to
	// ENV_DYING. A zombie environment will be freed the next time
	// it traps to the kernel.
	if (e->env_status == ENV_RUNNING && curenv != e) {
  800420951f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209523:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209529:	83 f8 03             	cmp    $0x3,%eax
  800420952c:	75 49                	jne    8004209577 <env_destroy+0x64>
  800420952e:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004209535:	00 00 00 
  8004209538:	ff d0                	callq  *%rax
  800420953a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004209541:	00 00 00 
  8004209544:	48 98                	cltq   
  8004209546:	48 c1 e0 03          	shl    $0x3,%rax
  800420954a:	48 89 c1             	mov    %rax,%rcx
  800420954d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209551:	48 01 c8             	add    %rcx,%rax
  8004209554:	48 01 d0             	add    %rdx,%rax
  8004209557:	48 83 c0 08          	add    $0x8,%rax
  800420955b:	48 8b 00             	mov    (%rax),%rax
  800420955e:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004209562:	74 13                	je     8004209577 <env_destroy+0x64>
		e->env_status = ENV_DYING;
  8004209564:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209568:	c7 80 d4 00 00 00 01 	movl   $0x1,0xd4(%rax)
  800420956f:	00 00 00 
		return;
  8004209572:	e9 89 00 00 00       	jmpq   8004209600 <env_destroy+0xed>
	}

	env_free(e);
  8004209577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420957b:	48 89 c7             	mov    %rax,%rdi
  800420957e:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  8004209585:	00 00 00 
  8004209588:	ff d0                	callq  *%rax
	if (curenv == e) {
  800420958a:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004209591:	00 00 00 
  8004209594:	ff d0                	callq  *%rax
  8004209596:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420959d:	00 00 00 
  80042095a0:	48 98                	cltq   
  80042095a2:	48 c1 e0 03          	shl    $0x3,%rax
  80042095a6:	48 89 c1             	mov    %rax,%rcx
  80042095a9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095ad:	48 01 c8             	add    %rcx,%rax
  80042095b0:	48 01 d0             	add    %rdx,%rax
  80042095b3:	48 83 c0 08          	add    $0x8,%rax
  80042095b7:	48 8b 00             	mov    (%rax),%rax
  80042095ba:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042095be:	75 40                	jne    8004209600 <env_destroy+0xed>
		curenv = NULL;
  80042095c0:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042095c7:	00 00 00 
  80042095ca:	ff d0                	callq  *%rax
  80042095cc:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042095d3:	00 00 00 
  80042095d6:	48 98                	cltq   
  80042095d8:	48 c1 e0 03          	shl    $0x3,%rax
  80042095dc:	48 89 c1             	mov    %rax,%rcx
  80042095df:	48 c1 e1 04          	shl    $0x4,%rcx
  80042095e3:	48 01 c8             	add    %rcx,%rax
  80042095e6:	48 01 d0             	add    %rdx,%rax
  80042095e9:	48 83 c0 08          	add    $0x8,%rax
  80042095ed:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		sched_yield();
  80042095f4:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  80042095fb:	00 00 00 
  80042095fe:	ff d0                	callq  *%rax
	}
}
  8004209600:	c9                   	leaveq 
  8004209601:	c3                   	retq   

0000008004209602 <env_pop_tf>:
//
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
  8004209602:	55                   	push   %rbp
  8004209603:	48 89 e5             	mov    %rsp,%rbp
  8004209606:	53                   	push   %rbx
  8004209607:	48 83 ec 18          	sub    $0x18,%rsp
  800420960b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Record the CPU we are running on for user-space debugging
	curenv->env_cpunum = cpunum();
  800420960f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004209616:	00 00 00 
  8004209619:	ff d0                	callq  *%rax
  800420961b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004209622:	00 00 00 
  8004209625:	48 98                	cltq   
  8004209627:	48 c1 e0 03          	shl    $0x3,%rax
  800420962b:	48 89 c1             	mov    %rax,%rcx
  800420962e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209632:	48 01 c8             	add    %rcx,%rax
  8004209635:	48 01 d0             	add    %rdx,%rax
  8004209638:	48 83 c0 08          	add    $0x8,%rax
  800420963c:	48 8b 18             	mov    (%rax),%rbx
  800420963f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004209646:	00 00 00 
  8004209649:	ff d0                	callq  *%rax
  800420964b:	89 83 dc 00 00 00    	mov    %eax,0xdc(%rbx)
	__asm __volatile("movq %0,%%rsp\n"
  8004209651:	48 8b 65 e8          	mov    -0x18(%rbp),%rsp
  8004209655:	4c 8b 3c 24          	mov    (%rsp),%r15
  8004209659:	4c 8b 74 24 08       	mov    0x8(%rsp),%r14
  800420965e:	4c 8b 6c 24 10       	mov    0x10(%rsp),%r13
  8004209663:	4c 8b 64 24 18       	mov    0x18(%rsp),%r12
  8004209668:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
  800420966d:	4c 8b 54 24 28       	mov    0x28(%rsp),%r10
  8004209672:	4c 8b 4c 24 30       	mov    0x30(%rsp),%r9
  8004209677:	4c 8b 44 24 38       	mov    0x38(%rsp),%r8
  800420967c:	48 8b 74 24 40       	mov    0x40(%rsp),%rsi
  8004209681:	48 8b 7c 24 48       	mov    0x48(%rsp),%rdi
  8004209686:	48 8b 6c 24 50       	mov    0x50(%rsp),%rbp
  800420968b:	48 8b 54 24 58       	mov    0x58(%rsp),%rdx
  8004209690:	48 8b 4c 24 60       	mov    0x60(%rsp),%rcx
  8004209695:	48 8b 5c 24 68       	mov    0x68(%rsp),%rbx
  800420969a:	48 8b 44 24 70       	mov    0x70(%rsp),%rax
  800420969f:	48 83 c4 78          	add    $0x78,%rsp
  80042096a3:	8e 04 24             	mov    (%rsp),%es
  80042096a6:	8e 5c 24 08          	mov    0x8(%rsp),%ds
  80042096aa:	48 83 c4 10          	add    $0x10,%rsp
  80042096ae:	48 83 c4 10          	add    $0x10,%rsp
  80042096b2:	48 cf                	iretq  
			 "movw 8(%%rsp),%%ds\n"
			 "addq $16,%%rsp\n"
			 "\taddq $16,%%rsp\n" /* skip tf_trapno and tf_errcode */
			 "\tiretq"
			 : : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
  80042096b4:	48 ba 00 f2 21 04 80 	movabs $0x800421f200,%rdx
  80042096bb:	00 00 00 
  80042096be:	be 90 02 00 00       	mov    $0x290,%esi
  80042096c3:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  80042096ca:	00 00 00 
  80042096cd:	b8 00 00 00 00       	mov    $0x0,%eax
  80042096d2:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042096d9:	00 00 00 
  80042096dc:	ff d1                	callq  *%rcx

00000080042096de <env_run>:
// This function does not return.
//
// CHANGED FOR LAB 0
void
env_run(struct Env *e)
{
  80042096de:	55                   	push   %rbp
  80042096df:	48 89 e5             	mov    %rsp,%rbp
  80042096e2:	48 83 ec 20          	sub    $0x20,%rsp
  80042096e6:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	// Is this a context switch or just a return?
	if (curenv != e) {
  80042096ea:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042096f1:	00 00 00 
  80042096f4:	ff d0                	callq  *%rax
  80042096f6:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042096fd:	00 00 00 
  8004209700:	48 98                	cltq   
  8004209702:	48 c1 e0 03          	shl    $0x3,%rax
  8004209706:	48 89 c1             	mov    %rax,%rcx
  8004209709:	48 c1 e1 04          	shl    $0x4,%rcx
  800420970d:	48 01 c8             	add    %rcx,%rax
  8004209710:	48 01 d0             	add    %rdx,%rax
  8004209713:	48 83 c0 08          	add    $0x8,%rax
  8004209717:	48 8b 00             	mov    (%rax),%rax
  800420971a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800420971e:	0f 84 28 01 00 00    	je     800420984c <env_run+0x16e>
		if (curenv && curenv->env_status == ENV_RUNNING)
  8004209724:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420972b:	00 00 00 
  800420972e:	ff d0                	callq  *%rax
  8004209730:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004209737:	00 00 00 
  800420973a:	48 98                	cltq   
  800420973c:	48 c1 e0 03          	shl    $0x3,%rax
  8004209740:	48 89 c1             	mov    %rax,%rcx
  8004209743:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209747:	48 01 c8             	add    %rcx,%rax
  800420974a:	48 01 d0             	add    %rdx,%rax
  800420974d:	48 83 c0 08          	add    $0x8,%rax
  8004209751:	48 8b 00             	mov    (%rax),%rax
  8004209754:	48 85 c0             	test   %rax,%rax
  8004209757:	74 75                	je     80042097ce <env_run+0xf0>
  8004209759:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004209760:	00 00 00 
  8004209763:	ff d0                	callq  *%rax
  8004209765:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420976c:	00 00 00 
  800420976f:	48 98                	cltq   
  8004209771:	48 c1 e0 03          	shl    $0x3,%rax
  8004209775:	48 89 c1             	mov    %rax,%rcx
  8004209778:	48 c1 e1 04          	shl    $0x4,%rcx
  800420977c:	48 01 c8             	add    %rcx,%rax
  800420977f:	48 01 d0             	add    %rdx,%rax
  8004209782:	48 83 c0 08          	add    $0x8,%rax
  8004209786:	48 8b 00             	mov    (%rax),%rax
  8004209789:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420978f:	83 f8 03             	cmp    $0x3,%eax
  8004209792:	75 3a                	jne    80042097ce <env_run+0xf0>
			curenv->env_status = ENV_RUNNABLE;
  8004209794:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420979b:	00 00 00 
  800420979e:	ff d0                	callq  *%rax
  80042097a0:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042097a7:	00 00 00 
  80042097aa:	48 98                	cltq   
  80042097ac:	48 c1 e0 03          	shl    $0x3,%rax
  80042097b0:	48 89 c1             	mov    %rax,%rcx
  80042097b3:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097b7:	48 01 c8             	add    %rcx,%rax
  80042097ba:	48 01 d0             	add    %rdx,%rax
  80042097bd:	48 83 c0 08          	add    $0x8,%rax
  80042097c1:	48 8b 00             	mov    (%rax),%rax
  80042097c4:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  80042097cb:	00 00 00 
		// cprintf("cpu %d switch from env %d to env %d\n",
		// 	cpunum(), curenv ? curenv - envs : -1, e - envs);

		// keep track of which environment we're currently
		// running
		curenv = e;
  80042097ce:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042097d5:	00 00 00 
  80042097d8:	ff d0                	callq  *%rax
  80042097da:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  80042097e1:	00 00 00 
  80042097e4:	48 98                	cltq   
  80042097e6:	48 c1 e0 03          	shl    $0x3,%rax
  80042097ea:	48 89 c1             	mov    %rax,%rcx
  80042097ed:	48 c1 e1 04          	shl    $0x4,%rcx
  80042097f1:	48 01 c8             	add    %rcx,%rax
  80042097f4:	48 01 d0             	add    %rdx,%rax
  80042097f7:	48 8d 50 08          	lea    0x8(%rax),%rdx
  80042097fb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042097ff:	48 89 02             	mov    %rax,(%rdx)
		e->env_status = ENV_RUNNING;
  8004209802:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209806:	c7 80 d4 00 00 00 03 	movl   $0x3,0xd4(%rax)
  800420980d:	00 00 00 

		// Hint, Lab 0: An environment has started running. We should keep track of that somewhere, right?
		e->env_runs++; // increment the number of times the env has been run
  8004209810:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209814:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800420981a:	8d 50 01             	lea    0x1(%rax),%edx
  800420981d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209821:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)

		// restore e's address space
		if(e->env_type != ENV_TYPE_GUEST)
  8004209827:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420982b:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  8004209831:	83 f8 03             	cmp    $0x3,%eax
  8004209834:	74 16                	je     800420984c <env_run+0x16e>
			lcr3(e->env_cr3);
  8004209836:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420983a:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  8004209841:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004209845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004209849:	0f 22 d8             	mov    %rax,%cr3
	}

	assert(e->env_status == ENV_RUNNING);
  800420984c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209850:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  8004209856:	83 f8 03             	cmp    $0x3,%eax
  8004209859:	74 35                	je     8004209890 <env_run+0x1b2>
  800420985b:	48 b9 0c f2 21 04 80 	movabs $0x800421f20c,%rcx
  8004209862:	00 00 00 
  8004209865:	48 ba 29 f2 21 04 80 	movabs $0x800421f229,%rdx
  800420986c:	00 00 00 
  800420986f:	be b2 02 00 00       	mov    $0x2b2,%esi
  8004209874:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  800420987b:	00 00 00 
  800420987e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209883:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420988a:	00 00 00 
  800420988d:	41 ff d0             	callq  *%r8


#ifndef VMM_GUEST
	if(e->env_type == ENV_TYPE_GUEST) {
  8004209890:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004209894:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420989a:	83 f8 03             	cmp    $0x3,%eax
  800420989d:	75 3d                	jne    80042098dc <env_run+0x1fe>
		vmx_vmrun(e);
  800420989f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098a3:	48 89 c7             	mov    %rax,%rdi
  80042098a6:	48 b8 44 d0 21 04 80 	movabs $0x800421d044,%rax
  80042098ad:	00 00 00 
  80042098b0:	ff d0                	callq  *%rax
		panic ("vmx_run never returns\n");
  80042098b2:	48 ba 3e f2 21 04 80 	movabs $0x800421f23e,%rdx
  80042098b9:	00 00 00 
  80042098bc:	be b8 02 00 00       	mov    $0x2b8,%esi
  80042098c1:	48 bf 0c f1 21 04 80 	movabs $0x800421f10c,%rdi
  80042098c8:	00 00 00 
  80042098cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042098d0:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  80042098d7:	00 00 00 
  80042098da:	ff d1                	callq  *%rcx
	}
	else {
		unlock_kernel();
  80042098dc:	48 b8 e3 7d 20 04 80 	movabs $0x8004207de3,%rax
  80042098e3:	00 00 00 
  80042098e6:	ff d0                	callq  *%rax
		env_pop_tf(&e->env_tf);
  80042098e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042098ec:	48 89 c7             	mov    %rax,%rdi
  80042098ef:	48 b8 02 96 20 04 80 	movabs $0x8004209602,%rax
  80042098f6:	00 00 00 
  80042098f9:	ff d0                	callq  *%rax

00000080042098fb <mc146818_read>:
  80042098fb:	55                   	push   %rbp
  80042098fc:	48 89 e5             	mov    %rsp,%rbp
  80042098ff:	48 83 ec 14          	sub    $0x14,%rsp
  8004209903:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209906:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209909:	0f b6 c0             	movzbl %al,%eax
  800420990c:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209913:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209916:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420991a:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420991d:	ee                   	out    %al,(%dx)
  800420991e:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004209925:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004209928:	89 c2                	mov    %eax,%edx
  800420992a:	ec                   	in     (%dx),%al
  800420992b:	88 45 f3             	mov    %al,-0xd(%rbp)
	return data;
  800420992e:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209932:	0f b6 c0             	movzbl %al,%eax
  8004209935:	c9                   	leaveq 
  8004209936:	c3                   	retq   

0000008004209937 <mc146818_write>:
  8004209937:	55                   	push   %rbp
  8004209938:	48 89 e5             	mov    %rsp,%rbp
  800420993b:	48 83 ec 18          	sub    $0x18,%rsp
  800420993f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004209942:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004209945:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004209948:	0f b6 c0             	movzbl %al,%eax
  800420994b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%rbp)
  8004209952:	88 45 fb             	mov    %al,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004209955:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209959:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420995c:	ee                   	out    %al,(%dx)
  800420995d:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004209960:	0f b6 c0             	movzbl %al,%eax
  8004209963:	c7 45 f4 71 00 00 00 	movl   $0x71,-0xc(%rbp)
  800420996a:	88 45 f3             	mov    %al,-0xd(%rbp)
  800420996d:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209971:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209974:	ee                   	out    %al,(%dx)
  8004209975:	c9                   	leaveq 
  8004209976:	c3                   	retq   

0000008004209977 <pic_init>:
  8004209977:	55                   	push   %rbp
  8004209978:	48 89 e5             	mov    %rsp,%rbp
  800420997b:	48 83 ec 70          	sub    $0x70,%rsp
  800420997f:	48 b8 68 e2 4d 04 80 	movabs $0x80044de268,%rax
  8004209986:	00 00 00 
  8004209989:	c6 00 01             	movb   $0x1,(%rax)
  800420998c:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%rbp)
  8004209993:	c6 45 fb ff          	movb   $0xff,-0x5(%rbp)
  8004209997:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  800420999b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800420999e:	ee                   	out    %al,(%dx)
  800420999f:	c7 45 f4 a1 00 00 00 	movl   $0xa1,-0xc(%rbp)
  80042099a6:	c6 45 f3 ff          	movb   $0xff,-0xd(%rbp)
  80042099aa:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  80042099ae:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042099b1:	ee                   	out    %al,(%dx)
  80042099b2:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%rbp)
  80042099b9:	c6 45 eb 11          	movb   $0x11,-0x15(%rbp)
  80042099bd:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  80042099c1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042099c4:	ee                   	out    %al,(%dx)
  80042099c5:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%rbp)
  80042099cc:	c6 45 e3 20          	movb   $0x20,-0x1d(%rbp)
  80042099d0:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  80042099d4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042099d7:	ee                   	out    %al,(%dx)
  80042099d8:	c7 45 dc 21 00 00 00 	movl   $0x21,-0x24(%rbp)
  80042099df:	c6 45 db 04          	movb   $0x4,-0x25(%rbp)
  80042099e3:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  80042099e7:	8b 55 dc             	mov    -0x24(%rbp),%edx
  80042099ea:	ee                   	out    %al,(%dx)
  80042099eb:	c7 45 d4 21 00 00 00 	movl   $0x21,-0x2c(%rbp)
  80042099f2:	c6 45 d3 03          	movb   $0x3,-0x2d(%rbp)
  80042099f6:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  80042099fa:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  80042099fd:	ee                   	out    %al,(%dx)
  80042099fe:	c7 45 cc a0 00 00 00 	movl   $0xa0,-0x34(%rbp)
  8004209a05:	c6 45 cb 11          	movb   $0x11,-0x35(%rbp)
  8004209a09:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  8004209a0d:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004209a10:	ee                   	out    %al,(%dx)
  8004209a11:	c7 45 c4 a1 00 00 00 	movl   $0xa1,-0x3c(%rbp)
  8004209a18:	c6 45 c3 28          	movb   $0x28,-0x3d(%rbp)
  8004209a1c:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004209a20:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004209a23:	ee                   	out    %al,(%dx)
  8004209a24:	c7 45 bc a1 00 00 00 	movl   $0xa1,-0x44(%rbp)
  8004209a2b:	c6 45 bb 02          	movb   $0x2,-0x45(%rbp)
  8004209a2f:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004209a33:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004209a36:	ee                   	out    %al,(%dx)
  8004209a37:	c7 45 b4 a1 00 00 00 	movl   $0xa1,-0x4c(%rbp)
  8004209a3e:	c6 45 b3 01          	movb   $0x1,-0x4d(%rbp)
  8004209a42:	0f b6 45 b3          	movzbl -0x4d(%rbp),%eax
  8004209a46:	8b 55 b4             	mov    -0x4c(%rbp),%edx
  8004209a49:	ee                   	out    %al,(%dx)
  8004209a4a:	c7 45 ac 20 00 00 00 	movl   $0x20,-0x54(%rbp)
  8004209a51:	c6 45 ab 68          	movb   $0x68,-0x55(%rbp)
  8004209a55:	0f b6 45 ab          	movzbl -0x55(%rbp),%eax
  8004209a59:	8b 55 ac             	mov    -0x54(%rbp),%edx
  8004209a5c:	ee                   	out    %al,(%dx)
  8004209a5d:	c7 45 a4 20 00 00 00 	movl   $0x20,-0x5c(%rbp)
  8004209a64:	c6 45 a3 0a          	movb   $0xa,-0x5d(%rbp)
  8004209a68:	0f b6 45 a3          	movzbl -0x5d(%rbp),%eax
  8004209a6c:	8b 55 a4             	mov    -0x5c(%rbp),%edx
  8004209a6f:	ee                   	out    %al,(%dx)
  8004209a70:	c7 45 9c a0 00 00 00 	movl   $0xa0,-0x64(%rbp)
  8004209a77:	c6 45 9b 68          	movb   $0x68,-0x65(%rbp)
  8004209a7b:	0f b6 45 9b          	movzbl -0x65(%rbp),%eax
  8004209a7f:	8b 55 9c             	mov    -0x64(%rbp),%edx
  8004209a82:	ee                   	out    %al,(%dx)
  8004209a83:	c7 45 94 a0 00 00 00 	movl   $0xa0,-0x6c(%rbp)
  8004209a8a:	c6 45 93 0a          	movb   $0xa,-0x6d(%rbp)
  8004209a8e:	0f b6 45 93          	movzbl -0x6d(%rbp),%eax
  8004209a92:	8b 55 94             	mov    -0x6c(%rbp),%edx
  8004209a95:	ee                   	out    %al,(%dx)
  8004209a96:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209a9d:	00 00 00 
  8004209aa0:	0f b7 00             	movzwl (%rax),%eax
  8004209aa3:	66 83 f8 ff          	cmp    $0xffff,%ax
  8004209aa7:	74 1e                	je     8004209ac7 <pic_init+0x150>
  8004209aa9:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209ab0:	00 00 00 
  8004209ab3:	0f b7 00             	movzwl (%rax),%eax
  8004209ab6:	0f b7 c0             	movzwl %ax,%eax
  8004209ab9:	89 c7                	mov    %eax,%edi
  8004209abb:	48 b8 c9 9a 20 04 80 	movabs $0x8004209ac9,%rax
  8004209ac2:	00 00 00 
  8004209ac5:	ff d0                	callq  *%rax
  8004209ac7:	c9                   	leaveq 
  8004209ac8:	c3                   	retq   

0000008004209ac9 <irq_setmask_8259A>:
  8004209ac9:	55                   	push   %rbp
  8004209aca:	48 89 e5             	mov    %rsp,%rbp
  8004209acd:	48 83 ec 30          	sub    $0x30,%rsp
  8004209ad1:	89 f8                	mov    %edi,%eax
  8004209ad3:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
  8004209ad7:	48 b8 72 56 23 04 80 	movabs $0x8004235672,%rax
  8004209ade:	00 00 00 
  8004209ae1:	0f b7 55 dc          	movzwl -0x24(%rbp),%edx
  8004209ae5:	66 89 10             	mov    %dx,(%rax)
  8004209ae8:	48 b8 68 e2 4d 04 80 	movabs $0x80044de268,%rax
  8004209aef:	00 00 00 
  8004209af2:	0f b6 00             	movzbl (%rax),%eax
  8004209af5:	83 f0 01             	xor    $0x1,%eax
  8004209af8:	84 c0                	test   %al,%al
  8004209afa:	74 05                	je     8004209b01 <irq_setmask_8259A+0x38>
  8004209afc:	e9 b7 00 00 00       	jmpq   8004209bb8 <irq_setmask_8259A+0xef>
  8004209b01:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b05:	0f b6 c0             	movzbl %al,%eax
  8004209b08:	c7 45 f8 21 00 00 00 	movl   $0x21,-0x8(%rbp)
  8004209b0f:	88 45 f7             	mov    %al,-0x9(%rbp)
  8004209b12:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
  8004209b16:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004209b19:	ee                   	out    %al,(%dx)
  8004209b1a:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b1e:	66 c1 e8 08          	shr    $0x8,%ax
  8004209b22:	0f b6 c0             	movzbl %al,%eax
  8004209b25:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%rbp)
  8004209b2c:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004209b2f:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  8004209b33:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004209b36:	ee                   	out    %al,(%dx)
  8004209b37:	48 bf 55 f2 21 04 80 	movabs $0x800421f255,%rdi
  8004209b3e:	00 00 00 
  8004209b41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b4d:	00 00 00 
  8004209b50:	ff d2                	callq  *%rdx
  8004209b52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209b59:	eb 3c                	jmp    8004209b97 <irq_setmask_8259A+0xce>
  8004209b5b:	0f b7 45 dc          	movzwl -0x24(%rbp),%eax
  8004209b5f:	f7 d0                	not    %eax
  8004209b61:	89 c2                	mov    %eax,%edx
  8004209b63:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b66:	89 c1                	mov    %eax,%ecx
  8004209b68:	d3 fa                	sar    %cl,%edx
  8004209b6a:	89 d0                	mov    %edx,%eax
  8004209b6c:	83 e0 01             	and    $0x1,%eax
  8004209b6f:	85 c0                	test   %eax,%eax
  8004209b71:	74 20                	je     8004209b93 <irq_setmask_8259A+0xca>
  8004209b73:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209b76:	89 c6                	mov    %eax,%esi
  8004209b78:	48 bf 69 f2 21 04 80 	movabs $0x800421f269,%rdi
  8004209b7f:	00 00 00 
  8004209b82:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209b87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209b8e:	00 00 00 
  8004209b91:	ff d2                	callq  *%rdx
  8004209b93:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209b97:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  8004209b9b:	7e be                	jle    8004209b5b <irq_setmask_8259A+0x92>
  8004209b9d:	48 bf 6d f2 21 04 80 	movabs $0x800421f26d,%rdi
  8004209ba4:	00 00 00 
  8004209ba7:	b8 00 00 00 00       	mov    $0x0,%eax
  8004209bac:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004209bb3:	00 00 00 
  8004209bb6:	ff d2                	callq  *%rdx
  8004209bb8:	c9                   	leaveq 
  8004209bb9:	c3                   	retq   

0000008004209bba <irq_eoi>:
  8004209bba:	55                   	push   %rbp
  8004209bbb:	48 89 e5             	mov    %rsp,%rbp
  8004209bbe:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bc2:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%rbp)
  8004209bc9:	c6 45 fb 20          	movb   $0x20,-0x5(%rbp)
  8004209bcd:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004209bd1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209bd4:	ee                   	out    %al,(%dx)
  8004209bd5:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%rbp)
  8004209bdc:	c6 45 f3 20          	movb   $0x20,-0xd(%rbp)
  8004209be0:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004209be4:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004209be7:	ee                   	out    %al,(%dx)
  8004209be8:	c9                   	leaveq 
  8004209be9:	c3                   	retq   

0000008004209bea <putch>:
  8004209bea:	55                   	push   %rbp
  8004209beb:	48 89 e5             	mov    %rsp,%rbp
  8004209bee:	48 83 ec 10          	sub    $0x10,%rsp
  8004209bf2:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209bf5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004209bf9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209bfc:	89 c7                	mov    %eax,%edi
  8004209bfe:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004209c05:	00 00 00 
  8004209c08:	ff d0                	callq  *%rax
  8004209c0a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004209c0e:	48 83 c0 04          	add    $0x4,%rax
  8004209c12:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004209c16:	c9                   	leaveq 
  8004209c17:	c3                   	retq   

0000008004209c18 <vcprintf>:
  8004209c18:	55                   	push   %rbp
  8004209c19:	48 89 e5             	mov    %rsp,%rbp
  8004209c1c:	48 83 ec 30          	sub    $0x30,%rsp
  8004209c20:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004209c24:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004209c28:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209c2f:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004209c33:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004209c37:	48 8b 0a             	mov    (%rdx),%rcx
  8004209c3a:	48 89 08             	mov    %rcx,(%rax)
  8004209c3d:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209c41:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209c45:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209c49:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209c4d:	48 8d 4d e0          	lea    -0x20(%rbp),%rcx
  8004209c51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004209c55:	48 8d 45 fc          	lea    -0x4(%rbp),%rax
  8004209c59:	48 89 c6             	mov    %rax,%rsi
  8004209c5c:	48 bf ea 9b 20 04 80 	movabs $0x8004209bea,%rdi
  8004209c63:	00 00 00 
  8004209c66:	48 b8 bb ff 20 04 80 	movabs $0x800420ffbb,%rax
  8004209c6d:	00 00 00 
  8004209c70:	ff d0                	callq  *%rax
  8004209c72:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209c75:	c9                   	leaveq 
  8004209c76:	c3                   	retq   

0000008004209c77 <cprintf>:
  8004209c77:	55                   	push   %rbp
  8004209c78:	48 89 e5             	mov    %rsp,%rbp
  8004209c7b:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
  8004209c82:	48 89 b5 58 ff ff ff 	mov    %rsi,-0xa8(%rbp)
  8004209c89:	48 89 95 60 ff ff ff 	mov    %rdx,-0xa0(%rbp)
  8004209c90:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  8004209c97:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004209c9e:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004209ca5:	84 c0                	test   %al,%al
  8004209ca7:	74 20                	je     8004209cc9 <cprintf+0x52>
  8004209ca9:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004209cad:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  8004209cb1:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004209cb5:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004209cb9:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004209cbd:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  8004209cc1:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004209cc5:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004209cc9:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004209cd0:	c7 85 30 ff ff ff 08 	movl   $0x8,-0xd0(%rbp)
  8004209cd7:	00 00 00 
  8004209cda:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  8004209ce1:	00 00 00 
  8004209ce4:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004209ce8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004209cef:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004209cf6:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004209cfd:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  8004209d04:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004209d0b:	48 8b 0a             	mov    (%rdx),%rcx
  8004209d0e:	48 89 08             	mov    %rcx,(%rax)
  8004209d11:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004209d15:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004209d19:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004209d1d:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004209d21:	48 8d 95 18 ff ff ff 	lea    -0xe8(%rbp),%rdx
  8004209d28:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004209d2f:	48 89 d6             	mov    %rdx,%rsi
  8004209d32:	48 89 c7             	mov    %rax,%rdi
  8004209d35:	48 b8 18 9c 20 04 80 	movabs $0x8004209c18,%rax
  8004209d3c:	00 00 00 
  8004209d3f:	ff d0                	callq  *%rax
  8004209d41:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004209d47:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  8004209d4d:	c9                   	leaveq 
  8004209d4e:	c3                   	retq   

0000008004209d4f <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004209d4f:	55                   	push   %rbp
  8004209d50:	48 89 e5             	mov    %rsp,%rbp
  8004209d53:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004209d57:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004209d5b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004209d5e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004209d62:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004209d65:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004209d69:	f0 87 02             	lock xchg %eax,(%rdx)
  8004209d6c:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004209d6f:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004209d72:	c9                   	leaveq 
  8004209d73:	c3                   	retq   

0000008004209d74 <lock_kernel>:
  8004209d74:	55                   	push   %rbp
  8004209d75:	48 89 e5             	mov    %rsp,%rbp
  8004209d78:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  8004209d7f:	00 00 00 
  8004209d82:	48 b8 35 7f 21 04 80 	movabs $0x8004217f35,%rax
  8004209d89:	00 00 00 
  8004209d8c:	ff d0                	callq  *%rax
  8004209d8e:	5d                   	pop    %rbp
  8004209d8f:	c3                   	retq   

0000008004209d90 <trapname>:
  8004209d90:	55                   	push   %rbp
  8004209d91:	48 89 e5             	mov    %rsp,%rbp
  8004209d94:	48 83 ec 04          	sub    $0x4,%rsp
  8004209d98:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004209d9b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209d9e:	83 f8 13             	cmp    $0x13,%eax
  8004209da1:	77 16                	ja     8004209db9 <trapname+0x29>
  8004209da3:	48 b8 80 f6 21 04 80 	movabs $0x800421f680,%rax
  8004209daa:	00 00 00 
  8004209dad:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209db0:	48 63 d2             	movslq %edx,%rdx
  8004209db3:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004209db7:	eb 34                	jmp    8004209ded <trapname+0x5d>
  8004209db9:	83 7d fc 30          	cmpl   $0x30,-0x4(%rbp)
  8004209dbd:	75 0c                	jne    8004209dcb <trapname+0x3b>
  8004209dbf:	48 b8 80 f2 21 04 80 	movabs $0x800421f280,%rax
  8004209dc6:	00 00 00 
  8004209dc9:	eb 22                	jmp    8004209ded <trapname+0x5d>
  8004209dcb:	83 7d fc 1f          	cmpl   $0x1f,-0x4(%rbp)
  8004209dcf:	7e 12                	jle    8004209de3 <trapname+0x53>
  8004209dd1:	83 7d fc 2f          	cmpl   $0x2f,-0x4(%rbp)
  8004209dd5:	7f 0c                	jg     8004209de3 <trapname+0x53>
  8004209dd7:	48 b8 8c f2 21 04 80 	movabs $0x800421f28c,%rax
  8004209dde:	00 00 00 
  8004209de1:	eb 0a                	jmp    8004209ded <trapname+0x5d>
  8004209de3:	48 b8 9f f2 21 04 80 	movabs $0x800421f29f,%rax
  8004209dea:	00 00 00 
  8004209ded:	c9                   	leaveq 
  8004209dee:	c3                   	retq   

0000008004209def <trap_init>:
  8004209def:	55                   	push   %rbp
  8004209df0:	48 89 e5             	mov    %rsp,%rbp
  8004209df3:	48 83 ec 10          	sub    $0x10,%rsp
  8004209df7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004209dfe:	e9 7d 01 00 00       	jmpq   8004209f80 <trap_init+0x191>
  8004209e03:	48 b8 06 d9 20 04 80 	movabs $0x800420d906,%rax
  8004209e0a:	00 00 00 
  8004209e0d:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  8004209e14:	00 00 00 
  8004209e17:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209e1a:	48 63 c9             	movslq %ecx,%rcx
  8004209e1d:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209e21:	48 01 ca             	add    %rcx,%rdx
  8004209e24:	66 89 02             	mov    %ax,(%rdx)
  8004209e27:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e2e:	00 00 00 
  8004209e31:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e34:	48 63 d2             	movslq %edx,%rdx
  8004209e37:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e3b:	48 01 d0             	add    %rdx,%rax
  8004209e3e:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209e44:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e4b:	00 00 00 
  8004209e4e:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e51:	48 63 d2             	movslq %edx,%rdx
  8004209e54:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e58:	48 01 d0             	add    %rdx,%rax
  8004209e5b:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e5f:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209e62:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e65:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e6c:	00 00 00 
  8004209e6f:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e72:	48 63 d2             	movslq %edx,%rdx
  8004209e75:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e79:	48 01 d0             	add    %rdx,%rax
  8004209e7c:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209e80:	83 e2 07             	and    $0x7,%edx
  8004209e83:	88 50 04             	mov    %dl,0x4(%rax)
  8004209e86:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209e8d:	00 00 00 
  8004209e90:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209e93:	48 63 d2             	movslq %edx,%rdx
  8004209e96:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209e9a:	48 01 d0             	add    %rdx,%rax
  8004209e9d:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ea1:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ea4:	83 ca 0e             	or     $0xe,%edx
  8004209ea7:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eaa:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209eb1:	00 00 00 
  8004209eb4:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209eb7:	48 63 d2             	movslq %edx,%rdx
  8004209eba:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209ebe:	48 01 d0             	add    %rdx,%rax
  8004209ec1:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ec5:	83 e2 ef             	and    $0xffffffef,%edx
  8004209ec8:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ecb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209ed2:	00 00 00 
  8004209ed5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ed8:	48 63 d2             	movslq %edx,%rdx
  8004209edb:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209edf:	48 01 d0             	add    %rdx,%rax
  8004209ee2:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209ee6:	83 e2 9f             	and    $0xffffff9f,%edx
  8004209ee9:	88 50 05             	mov    %dl,0x5(%rax)
  8004209eec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209ef3:	00 00 00 
  8004209ef6:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209ef9:	48 63 d2             	movslq %edx,%rdx
  8004209efc:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f00:	48 01 d0             	add    %rdx,%rax
  8004209f03:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209f07:	83 ca 80             	or     $0xffffff80,%edx
  8004209f0a:	88 50 05             	mov    %dl,0x5(%rax)
  8004209f0d:	48 b8 06 d9 20 04 80 	movabs $0x800420d906,%rax
  8004209f14:	00 00 00 
  8004209f17:	48 c1 e8 10          	shr    $0x10,%rax
  8004209f1b:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  8004209f22:	00 00 00 
  8004209f25:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f28:	48 63 c9             	movslq %ecx,%rcx
  8004209f2b:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f2f:	48 01 ca             	add    %rcx,%rdx
  8004209f32:	66 89 42 06          	mov    %ax,0x6(%rdx)
  8004209f36:	48 b8 06 d9 20 04 80 	movabs $0x800420d906,%rax
  8004209f3d:	00 00 00 
  8004209f40:	48 c1 e8 20          	shr    $0x20,%rax
  8004209f44:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  8004209f4b:	00 00 00 
  8004209f4e:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004209f51:	48 63 c9             	movslq %ecx,%rcx
  8004209f54:	48 c1 e1 04          	shl    $0x4,%rcx
  8004209f58:	48 01 ca             	add    %rcx,%rdx
  8004209f5b:	89 42 08             	mov    %eax,0x8(%rdx)
  8004209f5e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209f65:	00 00 00 
  8004209f68:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004209f6b:	48 63 d2             	movslq %edx,%rdx
  8004209f6e:	48 c1 e2 04          	shl    $0x4,%rdx
  8004209f72:	48 01 d0             	add    %rdx,%rax
  8004209f75:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  8004209f7c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004209f80:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004209f83:	3d ff 00 00 00       	cmp    $0xff,%eax
  8004209f88:	0f 86 75 fe ff ff    	jbe    8004209e03 <trap_init+0x14>
  8004209f8e:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  8004209f95:	00 00 00 
  8004209f98:	89 c2                	mov    %eax,%edx
  8004209f9a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fa1:	00 00 00 
  8004209fa4:	66 89 10             	mov    %dx,(%rax)
  8004209fa7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fae:	00 00 00 
  8004209fb1:	66 c7 40 02 08 00    	movw   $0x8,0x2(%rax)
  8004209fb7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fbe:	00 00 00 
  8004209fc1:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fc5:	83 e2 f8             	and    $0xfffffff8,%edx
  8004209fc8:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fcb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fd2:	00 00 00 
  8004209fd5:	0f b6 50 04          	movzbl 0x4(%rax),%edx
  8004209fd9:	83 e2 07             	and    $0x7,%edx
  8004209fdc:	88 50 04             	mov    %dl,0x4(%rax)
  8004209fdf:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209fe6:	00 00 00 
  8004209fe9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  8004209fed:	83 e2 f0             	and    $0xfffffff0,%edx
  8004209ff0:	83 ca 0e             	or     $0xe,%edx
  8004209ff3:	88 50 05             	mov    %dl,0x5(%rax)
  8004209ff6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  8004209ffd:	00 00 00 
  800420a000:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a004:	83 e2 ef             	and    $0xffffffef,%edx
  800420a007:	88 50 05             	mov    %dl,0x5(%rax)
  800420a00a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a011:	00 00 00 
  800420a014:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a018:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a01b:	88 50 05             	mov    %dl,0x5(%rax)
  800420a01e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a025:	00 00 00 
  800420a028:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420a02c:	83 ca 80             	or     $0xffffff80,%edx
  800420a02f:	88 50 05             	mov    %dl,0x5(%rax)
  800420a032:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a039:	00 00 00 
  800420a03c:	48 c1 e8 10          	shr    $0x10,%rax
  800420a040:	89 c2                	mov    %eax,%edx
  800420a042:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a049:	00 00 00 
  800420a04c:	66 89 50 06          	mov    %dx,0x6(%rax)
  800420a050:	48 b8 c0 d7 20 04 80 	movabs $0x800420d7c0,%rax
  800420a057:	00 00 00 
  800420a05a:	48 c1 e8 20          	shr    $0x20,%rax
  800420a05e:	89 c2                	mov    %eax,%edx
  800420a060:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a067:	00 00 00 
  800420a06a:	89 50 08             	mov    %edx,0x8(%rax)
  800420a06d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a074:	00 00 00 
  800420a077:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%rax)
  800420a07e:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a085:	00 00 00 
  800420a088:	89 c2                	mov    %eax,%edx
  800420a08a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a091:	00 00 00 
  800420a094:	66 89 50 10          	mov    %dx,0x10(%rax)
  800420a098:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a09f:	00 00 00 
  800420a0a2:	66 c7 40 12 08 00    	movw   $0x8,0x12(%rax)
  800420a0a8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0af:	00 00 00 
  800420a0b2:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a0b9:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0bc:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0c3:	00 00 00 
  800420a0c6:	0f b6 50 14          	movzbl 0x14(%rax),%edx
  800420a0ca:	83 e2 07             	and    $0x7,%edx
  800420a0cd:	88 50 14             	mov    %dl,0x14(%rax)
  800420a0d0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0d7:	00 00 00 
  800420a0da:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0de:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a0e1:	83 ca 0e             	or     $0xe,%edx
  800420a0e4:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0e7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a0ee:	00 00 00 
  800420a0f1:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a0f5:	83 e2 ef             	and    $0xffffffef,%edx
  800420a0f8:	88 50 15             	mov    %dl,0x15(%rax)
  800420a0fb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a102:	00 00 00 
  800420a105:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a109:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a10c:	88 50 15             	mov    %dl,0x15(%rax)
  800420a10f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a116:	00 00 00 
  800420a119:	0f b6 50 15          	movzbl 0x15(%rax),%edx
  800420a11d:	83 ca 80             	or     $0xffffff80,%edx
  800420a120:	88 50 15             	mov    %dl,0x15(%rax)
  800420a123:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a12a:	00 00 00 
  800420a12d:	48 c1 e8 10          	shr    $0x10,%rax
  800420a131:	89 c2                	mov    %eax,%edx
  800420a133:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a13a:	00 00 00 
  800420a13d:	66 89 50 16          	mov    %dx,0x16(%rax)
  800420a141:	48 b8 ca d7 20 04 80 	movabs $0x800420d7ca,%rax
  800420a148:	00 00 00 
  800420a14b:	48 c1 e8 20          	shr    $0x20,%rax
  800420a14f:	89 c2                	mov    %eax,%edx
  800420a151:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a158:	00 00 00 
  800420a15b:	89 50 18             	mov    %edx,0x18(%rax)
  800420a15e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a165:	00 00 00 
  800420a168:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%rax)
  800420a16f:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a176:	00 00 00 
  800420a179:	89 c2                	mov    %eax,%edx
  800420a17b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a182:	00 00 00 
  800420a185:	66 89 50 20          	mov    %dx,0x20(%rax)
  800420a189:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a190:	00 00 00 
  800420a193:	66 c7 40 22 08 00    	movw   $0x8,0x22(%rax)
  800420a199:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1a0:	00 00 00 
  800420a1a3:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1a7:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a1aa:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1ad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1b4:	00 00 00 
  800420a1b7:	0f b6 50 24          	movzbl 0x24(%rax),%edx
  800420a1bb:	83 e2 07             	and    $0x7,%edx
  800420a1be:	88 50 24             	mov    %dl,0x24(%rax)
  800420a1c1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1c8:	00 00 00 
  800420a1cb:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1cf:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a1d2:	83 ca 0e             	or     $0xe,%edx
  800420a1d5:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1d8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1df:	00 00 00 
  800420a1e2:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1e6:	83 e2 ef             	and    $0xffffffef,%edx
  800420a1e9:	88 50 25             	mov    %dl,0x25(%rax)
  800420a1ec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a1f3:	00 00 00 
  800420a1f6:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a1fa:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a1fd:	88 50 25             	mov    %dl,0x25(%rax)
  800420a200:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a207:	00 00 00 
  800420a20a:	0f b6 50 25          	movzbl 0x25(%rax),%edx
  800420a20e:	83 ca 80             	or     $0xffffff80,%edx
  800420a211:	88 50 25             	mov    %dl,0x25(%rax)
  800420a214:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a21b:	00 00 00 
  800420a21e:	48 c1 e8 10          	shr    $0x10,%rax
  800420a222:	89 c2                	mov    %eax,%edx
  800420a224:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a22b:	00 00 00 
  800420a22e:	66 89 50 26          	mov    %dx,0x26(%rax)
  800420a232:	48 b8 d4 d7 20 04 80 	movabs $0x800420d7d4,%rax
  800420a239:	00 00 00 
  800420a23c:	48 c1 e8 20          	shr    $0x20,%rax
  800420a240:	89 c2                	mov    %eax,%edx
  800420a242:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a249:	00 00 00 
  800420a24c:	89 50 28             	mov    %edx,0x28(%rax)
  800420a24f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a256:	00 00 00 
  800420a259:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%rax)
  800420a260:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a267:	00 00 00 
  800420a26a:	89 c2                	mov    %eax,%edx
  800420a26c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a273:	00 00 00 
  800420a276:	66 89 50 30          	mov    %dx,0x30(%rax)
  800420a27a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a281:	00 00 00 
  800420a284:	66 c7 40 32 08 00    	movw   $0x8,0x32(%rax)
  800420a28a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a291:	00 00 00 
  800420a294:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a298:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a29b:	88 50 34             	mov    %dl,0x34(%rax)
  800420a29e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2a5:	00 00 00 
  800420a2a8:	0f b6 50 34          	movzbl 0x34(%rax),%edx
  800420a2ac:	83 e2 07             	and    $0x7,%edx
  800420a2af:	88 50 34             	mov    %dl,0x34(%rax)
  800420a2b2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2b9:	00 00 00 
  800420a2bc:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2c0:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a2c3:	83 ca 0e             	or     $0xe,%edx
  800420a2c6:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2c9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2d0:	00 00 00 
  800420a2d3:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2d7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a2da:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2dd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2e4:	00 00 00 
  800420a2e7:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2eb:	83 ca 60             	or     $0x60,%edx
  800420a2ee:	88 50 35             	mov    %dl,0x35(%rax)
  800420a2f1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a2f8:	00 00 00 
  800420a2fb:	0f b6 50 35          	movzbl 0x35(%rax),%edx
  800420a2ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a302:	88 50 35             	mov    %dl,0x35(%rax)
  800420a305:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a30c:	00 00 00 
  800420a30f:	48 c1 e8 10          	shr    $0x10,%rax
  800420a313:	89 c2                	mov    %eax,%edx
  800420a315:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a31c:	00 00 00 
  800420a31f:	66 89 50 36          	mov    %dx,0x36(%rax)
  800420a323:	48 b8 de d7 20 04 80 	movabs $0x800420d7de,%rax
  800420a32a:	00 00 00 
  800420a32d:	48 c1 e8 20          	shr    $0x20,%rax
  800420a331:	89 c2                	mov    %eax,%edx
  800420a333:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a33a:	00 00 00 
  800420a33d:	89 50 38             	mov    %edx,0x38(%rax)
  800420a340:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a347:	00 00 00 
  800420a34a:	c7 40 3c 00 00 00 00 	movl   $0x0,0x3c(%rax)
  800420a351:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a358:	00 00 00 
  800420a35b:	89 c2                	mov    %eax,%edx
  800420a35d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a364:	00 00 00 
  800420a367:	66 89 50 40          	mov    %dx,0x40(%rax)
  800420a36b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a372:	00 00 00 
  800420a375:	66 c7 40 42 08 00    	movw   $0x8,0x42(%rax)
  800420a37b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a382:	00 00 00 
  800420a385:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a389:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a38c:	88 50 44             	mov    %dl,0x44(%rax)
  800420a38f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a396:	00 00 00 
  800420a399:	0f b6 50 44          	movzbl 0x44(%rax),%edx
  800420a39d:	83 e2 07             	and    $0x7,%edx
  800420a3a0:	88 50 44             	mov    %dl,0x44(%rax)
  800420a3a3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3aa:	00 00 00 
  800420a3ad:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3b1:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a3b4:	83 ca 0e             	or     $0xe,%edx
  800420a3b7:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ba:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3c1:	00 00 00 
  800420a3c4:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3c8:	83 e2 ef             	and    $0xffffffef,%edx
  800420a3cb:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3ce:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3d5:	00 00 00 
  800420a3d8:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3dc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a3df:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3e2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a3e9:	00 00 00 
  800420a3ec:	0f b6 50 45          	movzbl 0x45(%rax),%edx
  800420a3f0:	83 ca 80             	or     $0xffffff80,%edx
  800420a3f3:	88 50 45             	mov    %dl,0x45(%rax)
  800420a3f6:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a3fd:	00 00 00 
  800420a400:	48 c1 e8 10          	shr    $0x10,%rax
  800420a404:	89 c2                	mov    %eax,%edx
  800420a406:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a40d:	00 00 00 
  800420a410:	66 89 50 46          	mov    %dx,0x46(%rax)
  800420a414:	48 b8 e8 d7 20 04 80 	movabs $0x800420d7e8,%rax
  800420a41b:	00 00 00 
  800420a41e:	48 c1 e8 20          	shr    $0x20,%rax
  800420a422:	89 c2                	mov    %eax,%edx
  800420a424:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a42b:	00 00 00 
  800420a42e:	89 50 48             	mov    %edx,0x48(%rax)
  800420a431:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a438:	00 00 00 
  800420a43b:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%rax)
  800420a442:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a449:	00 00 00 
  800420a44c:	89 c2                	mov    %eax,%edx
  800420a44e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a455:	00 00 00 
  800420a458:	66 89 50 50          	mov    %dx,0x50(%rax)
  800420a45c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a463:	00 00 00 
  800420a466:	66 c7 40 52 08 00    	movw   $0x8,0x52(%rax)
  800420a46c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a473:	00 00 00 
  800420a476:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a47a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a47d:	88 50 54             	mov    %dl,0x54(%rax)
  800420a480:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a487:	00 00 00 
  800420a48a:	0f b6 50 54          	movzbl 0x54(%rax),%edx
  800420a48e:	83 e2 07             	and    $0x7,%edx
  800420a491:	88 50 54             	mov    %dl,0x54(%rax)
  800420a494:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a49b:	00 00 00 
  800420a49e:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a4a5:	83 ca 0e             	or     $0xe,%edx
  800420a4a8:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4ab:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4b2:	00 00 00 
  800420a4b5:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4b9:	83 e2 ef             	and    $0xffffffef,%edx
  800420a4bc:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4bf:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4c6:	00 00 00 
  800420a4c9:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4cd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a4d0:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4d3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4da:	00 00 00 
  800420a4dd:	0f b6 50 55          	movzbl 0x55(%rax),%edx
  800420a4e1:	83 ca 80             	or     $0xffffff80,%edx
  800420a4e4:	88 50 55             	mov    %dl,0x55(%rax)
  800420a4e7:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a4ee:	00 00 00 
  800420a4f1:	48 c1 e8 10          	shr    $0x10,%rax
  800420a4f5:	89 c2                	mov    %eax,%edx
  800420a4f7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a4fe:	00 00 00 
  800420a501:	66 89 50 56          	mov    %dx,0x56(%rax)
  800420a505:	48 b8 f2 d7 20 04 80 	movabs $0x800420d7f2,%rax
  800420a50c:	00 00 00 
  800420a50f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a513:	89 c2                	mov    %eax,%edx
  800420a515:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a51c:	00 00 00 
  800420a51f:	89 50 58             	mov    %edx,0x58(%rax)
  800420a522:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a529:	00 00 00 
  800420a52c:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%rax)
  800420a533:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a53a:	00 00 00 
  800420a53d:	89 c2                	mov    %eax,%edx
  800420a53f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a546:	00 00 00 
  800420a549:	66 89 50 60          	mov    %dx,0x60(%rax)
  800420a54d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a554:	00 00 00 
  800420a557:	66 c7 40 62 08 00    	movw   $0x8,0x62(%rax)
  800420a55d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a564:	00 00 00 
  800420a567:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a56b:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a56e:	88 50 64             	mov    %dl,0x64(%rax)
  800420a571:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a578:	00 00 00 
  800420a57b:	0f b6 50 64          	movzbl 0x64(%rax),%edx
  800420a57f:	83 e2 07             	and    $0x7,%edx
  800420a582:	88 50 64             	mov    %dl,0x64(%rax)
  800420a585:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a58c:	00 00 00 
  800420a58f:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a593:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a596:	83 ca 0e             	or     $0xe,%edx
  800420a599:	88 50 65             	mov    %dl,0x65(%rax)
  800420a59c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5a3:	00 00 00 
  800420a5a6:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5aa:	83 e2 ef             	and    $0xffffffef,%edx
  800420a5ad:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5b0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5b7:	00 00 00 
  800420a5ba:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5be:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a5c1:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5c4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5cb:	00 00 00 
  800420a5ce:	0f b6 50 65          	movzbl 0x65(%rax),%edx
  800420a5d2:	83 ca 80             	or     $0xffffff80,%edx
  800420a5d5:	88 50 65             	mov    %dl,0x65(%rax)
  800420a5d8:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5df:	00 00 00 
  800420a5e2:	48 c1 e8 10          	shr    $0x10,%rax
  800420a5e6:	89 c2                	mov    %eax,%edx
  800420a5e8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a5ef:	00 00 00 
  800420a5f2:	66 89 50 66          	mov    %dx,0x66(%rax)
  800420a5f6:	48 b8 fc d7 20 04 80 	movabs $0x800420d7fc,%rax
  800420a5fd:	00 00 00 
  800420a600:	48 c1 e8 20          	shr    $0x20,%rax
  800420a604:	89 c2                	mov    %eax,%edx
  800420a606:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a60d:	00 00 00 
  800420a610:	89 50 68             	mov    %edx,0x68(%rax)
  800420a613:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a61a:	00 00 00 
  800420a61d:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%rax)
  800420a624:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a62b:	00 00 00 
  800420a62e:	89 c2                	mov    %eax,%edx
  800420a630:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a637:	00 00 00 
  800420a63a:	66 89 50 70          	mov    %dx,0x70(%rax)
  800420a63e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a645:	00 00 00 
  800420a648:	66 c7 40 72 08 00    	movw   $0x8,0x72(%rax)
  800420a64e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a655:	00 00 00 
  800420a658:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a65c:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a65f:	88 50 74             	mov    %dl,0x74(%rax)
  800420a662:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a669:	00 00 00 
  800420a66c:	0f b6 50 74          	movzbl 0x74(%rax),%edx
  800420a670:	83 e2 07             	and    $0x7,%edx
  800420a673:	88 50 74             	mov    %dl,0x74(%rax)
  800420a676:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a67d:	00 00 00 
  800420a680:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a684:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a687:	83 ca 0e             	or     $0xe,%edx
  800420a68a:	88 50 75             	mov    %dl,0x75(%rax)
  800420a68d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a694:	00 00 00 
  800420a697:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a69b:	83 e2 ef             	and    $0xffffffef,%edx
  800420a69e:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6a1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6a8:	00 00 00 
  800420a6ab:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6af:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a6b2:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6b5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6bc:	00 00 00 
  800420a6bf:	0f b6 50 75          	movzbl 0x75(%rax),%edx
  800420a6c3:	83 ca 80             	or     $0xffffff80,%edx
  800420a6c6:	88 50 75             	mov    %dl,0x75(%rax)
  800420a6c9:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6d0:	00 00 00 
  800420a6d3:	48 c1 e8 10          	shr    $0x10,%rax
  800420a6d7:	89 c2                	mov    %eax,%edx
  800420a6d9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6e0:	00 00 00 
  800420a6e3:	66 89 50 76          	mov    %dx,0x76(%rax)
  800420a6e7:	48 b8 06 d8 20 04 80 	movabs $0x800420d806,%rax
  800420a6ee:	00 00 00 
  800420a6f1:	48 c1 e8 20          	shr    $0x20,%rax
  800420a6f5:	89 c2                	mov    %eax,%edx
  800420a6f7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a6fe:	00 00 00 
  800420a701:	89 50 78             	mov    %edx,0x78(%rax)
  800420a704:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a70b:	00 00 00 
  800420a70e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%rax)
  800420a715:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a71c:	00 00 00 
  800420a71f:	89 c2                	mov    %eax,%edx
  800420a721:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a728:	00 00 00 
  800420a72b:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800420a732:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a739:	00 00 00 
  800420a73c:	66 c7 80 82 00 00 00 	movw   $0x8,0x82(%rax)
  800420a743:	08 00 
  800420a745:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a74c:	00 00 00 
  800420a74f:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a756:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a759:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a75f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a766:	00 00 00 
  800420a769:	0f b6 90 84 00 00 00 	movzbl 0x84(%rax),%edx
  800420a770:	83 e2 07             	and    $0x7,%edx
  800420a773:	88 90 84 00 00 00    	mov    %dl,0x84(%rax)
  800420a779:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a780:	00 00 00 
  800420a783:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a78a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a78d:	83 ca 0e             	or     $0xe,%edx
  800420a790:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a796:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a79d:	00 00 00 
  800420a7a0:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7a7:	83 e2 ef             	and    $0xffffffef,%edx
  800420a7aa:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7b0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a7b7:	00 00 00 
  800420a7ba:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7c1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a7c4:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7ca:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a7d1:	00 00 00 
  800420a7d4:	0f b6 90 85 00 00 00 	movzbl 0x85(%rax),%edx
  800420a7db:	83 ca 80             	or     $0xffffff80,%edx
  800420a7de:	88 90 85 00 00 00    	mov    %dl,0x85(%rax)
  800420a7e4:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a7eb:	00 00 00 
  800420a7ee:	48 c1 e8 10          	shr    $0x10,%rax
  800420a7f2:	89 c2                	mov    %eax,%edx
  800420a7f4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a7fb:	00 00 00 
  800420a7fe:	66 89 90 86 00 00 00 	mov    %dx,0x86(%rax)
  800420a805:	48 b8 10 d8 20 04 80 	movabs $0x800420d810,%rax
  800420a80c:	00 00 00 
  800420a80f:	48 c1 e8 20          	shr    $0x20,%rax
  800420a813:	89 c2                	mov    %eax,%edx
  800420a815:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a81c:	00 00 00 
  800420a81f:	89 90 88 00 00 00    	mov    %edx,0x88(%rax)
  800420a825:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a82c:	00 00 00 
  800420a82f:	c7 80 8c 00 00 00 00 	movl   $0x0,0x8c(%rax)
  800420a836:	00 00 00 
  800420a839:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a840:	00 00 00 
  800420a843:	89 c2                	mov    %eax,%edx
  800420a845:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a84c:	00 00 00 
  800420a84f:	66 89 90 a0 00 00 00 	mov    %dx,0xa0(%rax)
  800420a856:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a85d:	00 00 00 
  800420a860:	66 c7 80 a2 00 00 00 	movw   $0x8,0xa2(%rax)
  800420a867:	08 00 
  800420a869:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a870:	00 00 00 
  800420a873:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a87a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a87d:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a883:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a88a:	00 00 00 
  800420a88d:	0f b6 90 a4 00 00 00 	movzbl 0xa4(%rax),%edx
  800420a894:	83 e2 07             	and    $0x7,%edx
  800420a897:	88 90 a4 00 00 00    	mov    %dl,0xa4(%rax)
  800420a89d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8a4:	00 00 00 
  800420a8a7:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ae:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a8b1:	83 ca 0e             	or     $0xe,%edx
  800420a8b4:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ba:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8c1:	00 00 00 
  800420a8c4:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8cb:	83 e2 ef             	and    $0xffffffef,%edx
  800420a8ce:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8d4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8db:	00 00 00 
  800420a8de:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8e5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420a8e8:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a8ee:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a8f5:	00 00 00 
  800420a8f8:	0f b6 90 a5 00 00 00 	movzbl 0xa5(%rax),%edx
  800420a8ff:	83 ca 80             	or     $0xffffff80,%edx
  800420a902:	88 90 a5 00 00 00    	mov    %dl,0xa5(%rax)
  800420a908:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a90f:	00 00 00 
  800420a912:	48 c1 e8 10          	shr    $0x10,%rax
  800420a916:	89 c2                	mov    %eax,%edx
  800420a918:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a91f:	00 00 00 
  800420a922:	66 89 90 a6 00 00 00 	mov    %dx,0xa6(%rax)
  800420a929:	48 b8 18 d8 20 04 80 	movabs $0x800420d818,%rax
  800420a930:	00 00 00 
  800420a933:	48 c1 e8 20          	shr    $0x20,%rax
  800420a937:	89 c2                	mov    %eax,%edx
  800420a939:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a940:	00 00 00 
  800420a943:	89 90 a8 00 00 00    	mov    %edx,0xa8(%rax)
  800420a949:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a950:	00 00 00 
  800420a953:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%rax)
  800420a95a:	00 00 00 
  800420a95d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420a964:	00 00 00 
  800420a967:	89 c2                	mov    %eax,%edx
  800420a969:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a970:	00 00 00 
  800420a973:	66 89 90 b0 00 00 00 	mov    %dx,0xb0(%rax)
  800420a97a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a981:	00 00 00 
  800420a984:	66 c7 80 b2 00 00 00 	movw   $0x8,0xb2(%rax)
  800420a98b:	08 00 
  800420a98d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a994:	00 00 00 
  800420a997:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a99e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420a9a1:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9a7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9ae:	00 00 00 
  800420a9b1:	0f b6 90 b4 00 00 00 	movzbl 0xb4(%rax),%edx
  800420a9b8:	83 e2 07             	and    $0x7,%edx
  800420a9bb:	88 90 b4 00 00 00    	mov    %dl,0xb4(%rax)
  800420a9c1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9c8:	00 00 00 
  800420a9cb:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9d2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420a9d5:	83 ca 0e             	or     $0xe,%edx
  800420a9d8:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9de:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9e5:	00 00 00 
  800420a9e8:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420a9ef:	83 e2 ef             	and    $0xffffffef,%edx
  800420a9f2:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420a9f8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420a9ff:	00 00 00 
  800420aa02:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa09:	83 e2 9f             	and    $0xffffff9f,%edx
  800420aa0c:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa12:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa19:	00 00 00 
  800420aa1c:	0f b6 90 b5 00 00 00 	movzbl 0xb5(%rax),%edx
  800420aa23:	83 ca 80             	or     $0xffffff80,%edx
  800420aa26:	88 90 b5 00 00 00    	mov    %dl,0xb5(%rax)
  800420aa2c:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa33:	00 00 00 
  800420aa36:	48 c1 e8 10          	shr    $0x10,%rax
  800420aa3a:	89 c2                	mov    %eax,%edx
  800420aa3c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa43:	00 00 00 
  800420aa46:	66 89 90 b6 00 00 00 	mov    %dx,0xb6(%rax)
  800420aa4d:	48 b8 20 d8 20 04 80 	movabs $0x800420d820,%rax
  800420aa54:	00 00 00 
  800420aa57:	48 c1 e8 20          	shr    $0x20,%rax
  800420aa5b:	89 c2                	mov    %eax,%edx
  800420aa5d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa64:	00 00 00 
  800420aa67:	89 90 b8 00 00 00    	mov    %edx,0xb8(%rax)
  800420aa6d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa74:	00 00 00 
  800420aa77:	c7 80 bc 00 00 00 00 	movl   $0x0,0xbc(%rax)
  800420aa7e:	00 00 00 
  800420aa81:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420aa88:	00 00 00 
  800420aa8b:	89 c2                	mov    %eax,%edx
  800420aa8d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aa94:	00 00 00 
  800420aa97:	66 89 90 c0 00 00 00 	mov    %dx,0xc0(%rax)
  800420aa9e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aaa5:	00 00 00 
  800420aaa8:	66 c7 80 c2 00 00 00 	movw   $0x8,0xc2(%rax)
  800420aaaf:	08 00 
  800420aab1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aab8:	00 00 00 
  800420aabb:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aac2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420aac5:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aacb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aad2:	00 00 00 
  800420aad5:	0f b6 90 c4 00 00 00 	movzbl 0xc4(%rax),%edx
  800420aadc:	83 e2 07             	and    $0x7,%edx
  800420aadf:	88 90 c4 00 00 00    	mov    %dl,0xc4(%rax)
  800420aae5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aaec:	00 00 00 
  800420aaef:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420aaf6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420aaf9:	83 ca 0e             	or     $0xe,%edx
  800420aafc:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab02:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab09:	00 00 00 
  800420ab0c:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab13:	83 e2 ef             	and    $0xffffffef,%edx
  800420ab16:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab1c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab23:	00 00 00 
  800420ab26:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab2d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ab30:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab36:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab3d:	00 00 00 
  800420ab40:	0f b6 90 c5 00 00 00 	movzbl 0xc5(%rax),%edx
  800420ab47:	83 ca 80             	or     $0xffffff80,%edx
  800420ab4a:	88 90 c5 00 00 00    	mov    %dl,0xc5(%rax)
  800420ab50:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab57:	00 00 00 
  800420ab5a:	48 c1 e8 10          	shr    $0x10,%rax
  800420ab5e:	89 c2                	mov    %eax,%edx
  800420ab60:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab67:	00 00 00 
  800420ab6a:	66 89 90 c6 00 00 00 	mov    %dx,0xc6(%rax)
  800420ab71:	48 b8 28 d8 20 04 80 	movabs $0x800420d828,%rax
  800420ab78:	00 00 00 
  800420ab7b:	48 c1 e8 20          	shr    $0x20,%rax
  800420ab7f:	89 c2                	mov    %eax,%edx
  800420ab81:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab88:	00 00 00 
  800420ab8b:	89 90 c8 00 00 00    	mov    %edx,0xc8(%rax)
  800420ab91:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ab98:	00 00 00 
  800420ab9b:	c7 80 cc 00 00 00 00 	movl   $0x0,0xcc(%rax)
  800420aba2:	00 00 00 
  800420aba5:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420abac:	00 00 00 
  800420abaf:	89 c2                	mov    %eax,%edx
  800420abb1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abb8:	00 00 00 
  800420abbb:	66 89 90 d0 00 00 00 	mov    %dx,0xd0(%rax)
  800420abc2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abc9:	00 00 00 
  800420abcc:	66 c7 80 d2 00 00 00 	movw   $0x8,0xd2(%rax)
  800420abd3:	08 00 
  800420abd5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abdc:	00 00 00 
  800420abdf:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420abe6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420abe9:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420abef:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420abf6:	00 00 00 
  800420abf9:	0f b6 90 d4 00 00 00 	movzbl 0xd4(%rax),%edx
  800420ac00:	83 e2 07             	and    $0x7,%edx
  800420ac03:	88 90 d4 00 00 00    	mov    %dl,0xd4(%rax)
  800420ac09:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac10:	00 00 00 
  800420ac13:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac1a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ac1d:	83 ca 0e             	or     $0xe,%edx
  800420ac20:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac26:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac2d:	00 00 00 
  800420ac30:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac37:	83 e2 ef             	and    $0xffffffef,%edx
  800420ac3a:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac40:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac47:	00 00 00 
  800420ac4a:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac51:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ac54:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac5a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac61:	00 00 00 
  800420ac64:	0f b6 90 d5 00 00 00 	movzbl 0xd5(%rax),%edx
  800420ac6b:	83 ca 80             	or     $0xffffff80,%edx
  800420ac6e:	88 90 d5 00 00 00    	mov    %dl,0xd5(%rax)
  800420ac74:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac7b:	00 00 00 
  800420ac7e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ac82:	89 c2                	mov    %eax,%edx
  800420ac84:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ac8b:	00 00 00 
  800420ac8e:	66 89 90 d6 00 00 00 	mov    %dx,0xd6(%rax)
  800420ac95:	48 b8 30 d8 20 04 80 	movabs $0x800420d830,%rax
  800420ac9c:	00 00 00 
  800420ac9f:	48 c1 e8 20          	shr    $0x20,%rax
  800420aca3:	89 c2                	mov    %eax,%edx
  800420aca5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420acac:	00 00 00 
  800420acaf:	89 90 d8 00 00 00    	mov    %edx,0xd8(%rax)
  800420acb5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420acbc:	00 00 00 
  800420acbf:	c7 80 dc 00 00 00 00 	movl   $0x0,0xdc(%rax)
  800420acc6:	00 00 00 
  800420acc9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420acd0:	00 00 00 
  800420acd3:	89 c2                	mov    %eax,%edx
  800420acd5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420acdc:	00 00 00 
  800420acdf:	66 89 90 e0 00 00 00 	mov    %dx,0xe0(%rax)
  800420ace6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aced:	00 00 00 
  800420acf0:	66 c7 80 e2 00 00 00 	movw   $0x8,0xe2(%rax)
  800420acf7:	08 00 
  800420acf9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad00:	00 00 00 
  800420ad03:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad0a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ad0d:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad13:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad1a:	00 00 00 
  800420ad1d:	0f b6 90 e4 00 00 00 	movzbl 0xe4(%rax),%edx
  800420ad24:	83 e2 07             	and    $0x7,%edx
  800420ad27:	88 90 e4 00 00 00    	mov    %dl,0xe4(%rax)
  800420ad2d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad34:	00 00 00 
  800420ad37:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad3e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ad41:	83 ca 0e             	or     $0xe,%edx
  800420ad44:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad4a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad51:	00 00 00 
  800420ad54:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad5b:	83 e2 ef             	and    $0xffffffef,%edx
  800420ad5e:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad64:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad6b:	00 00 00 
  800420ad6e:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad75:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ad78:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad7e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ad85:	00 00 00 
  800420ad88:	0f b6 90 e5 00 00 00 	movzbl 0xe5(%rax),%edx
  800420ad8f:	83 ca 80             	or     $0xffffff80,%edx
  800420ad92:	88 90 e5 00 00 00    	mov    %dl,0xe5(%rax)
  800420ad98:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420ad9f:	00 00 00 
  800420ada2:	48 c1 e8 10          	shr    $0x10,%rax
  800420ada6:	89 c2                	mov    %eax,%edx
  800420ada8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420adaf:	00 00 00 
  800420adb2:	66 89 90 e6 00 00 00 	mov    %dx,0xe6(%rax)
  800420adb9:	48 b8 38 d8 20 04 80 	movabs $0x800420d838,%rax
  800420adc0:	00 00 00 
  800420adc3:	48 c1 e8 20          	shr    $0x20,%rax
  800420adc7:	89 c2                	mov    %eax,%edx
  800420adc9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420add0:	00 00 00 
  800420add3:	89 90 e8 00 00 00    	mov    %edx,0xe8(%rax)
  800420add9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ade0:	00 00 00 
  800420ade3:	c7 80 ec 00 00 00 00 	movl   $0x0,0xec(%rax)
  800420adea:	00 00 00 
  800420aded:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420adf4:	00 00 00 
  800420adf7:	89 c2                	mov    %eax,%edx
  800420adf9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae00:	00 00 00 
  800420ae03:	66 89 90 00 01 00 00 	mov    %dx,0x100(%rax)
  800420ae0a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae11:	00 00 00 
  800420ae14:	66 c7 80 02 01 00 00 	movw   $0x8,0x102(%rax)
  800420ae1b:	08 00 
  800420ae1d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae24:	00 00 00 
  800420ae27:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae2e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420ae31:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae37:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae3e:	00 00 00 
  800420ae41:	0f b6 90 04 01 00 00 	movzbl 0x104(%rax),%edx
  800420ae48:	83 e2 07             	and    $0x7,%edx
  800420ae4b:	88 90 04 01 00 00    	mov    %dl,0x104(%rax)
  800420ae51:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae58:	00 00 00 
  800420ae5b:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae62:	83 e2 f0             	and    $0xfffffff0,%edx
  800420ae65:	83 ca 0e             	or     $0xe,%edx
  800420ae68:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae6e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae75:	00 00 00 
  800420ae78:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae7f:	83 e2 ef             	and    $0xffffffef,%edx
  800420ae82:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420ae88:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ae8f:	00 00 00 
  800420ae92:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420ae99:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ae9c:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aea2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aea9:	00 00 00 
  800420aeac:	0f b6 90 05 01 00 00 	movzbl 0x105(%rax),%edx
  800420aeb3:	83 ca 80             	or     $0xffffff80,%edx
  800420aeb6:	88 90 05 01 00 00    	mov    %dl,0x105(%rax)
  800420aebc:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aec3:	00 00 00 
  800420aec6:	48 c1 e8 10          	shr    $0x10,%rax
  800420aeca:	89 c2                	mov    %eax,%edx
  800420aecc:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aed3:	00 00 00 
  800420aed6:	66 89 90 06 01 00 00 	mov    %dx,0x106(%rax)
  800420aedd:	48 b8 40 d8 20 04 80 	movabs $0x800420d840,%rax
  800420aee4:	00 00 00 
  800420aee7:	48 c1 e8 20          	shr    $0x20,%rax
  800420aeeb:	89 c2                	mov    %eax,%edx
  800420aeed:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aef4:	00 00 00 
  800420aef7:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
  800420aefd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af04:	00 00 00 
  800420af07:	c7 80 0c 01 00 00 00 	movl   $0x0,0x10c(%rax)
  800420af0e:	00 00 00 
  800420af11:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420af18:	00 00 00 
  800420af1b:	89 c2                	mov    %eax,%edx
  800420af1d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af24:	00 00 00 
  800420af27:	66 89 90 10 01 00 00 	mov    %dx,0x110(%rax)
  800420af2e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af35:	00 00 00 
  800420af38:	66 c7 80 12 01 00 00 	movw   $0x8,0x112(%rax)
  800420af3f:	08 00 
  800420af41:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af48:	00 00 00 
  800420af4b:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af52:	83 e2 f8             	and    $0xfffffff8,%edx
  800420af55:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af5b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af62:	00 00 00 
  800420af65:	0f b6 90 14 01 00 00 	movzbl 0x114(%rax),%edx
  800420af6c:	83 e2 07             	and    $0x7,%edx
  800420af6f:	88 90 14 01 00 00    	mov    %dl,0x114(%rax)
  800420af75:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af7c:	00 00 00 
  800420af7f:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420af86:	83 e2 f0             	and    $0xfffffff0,%edx
  800420af89:	83 ca 0e             	or     $0xe,%edx
  800420af8c:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420af92:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420af99:	00 00 00 
  800420af9c:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afa3:	83 e2 ef             	and    $0xffffffef,%edx
  800420afa6:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afac:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420afb3:	00 00 00 
  800420afb6:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afbd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420afc0:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afc6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420afcd:	00 00 00 
  800420afd0:	0f b6 90 15 01 00 00 	movzbl 0x115(%rax),%edx
  800420afd7:	83 ca 80             	or     $0xffffff80,%edx
  800420afda:	88 90 15 01 00 00    	mov    %dl,0x115(%rax)
  800420afe0:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420afe7:	00 00 00 
  800420afea:	48 c1 e8 10          	shr    $0x10,%rax
  800420afee:	89 c2                	mov    %eax,%edx
  800420aff0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420aff7:	00 00 00 
  800420affa:	66 89 90 16 01 00 00 	mov    %dx,0x116(%rax)
  800420b001:	48 b8 4a d8 20 04 80 	movabs $0x800420d84a,%rax
  800420b008:	00 00 00 
  800420b00b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b00f:	89 c2                	mov    %eax,%edx
  800420b011:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b018:	00 00 00 
  800420b01b:	89 90 18 01 00 00    	mov    %edx,0x118(%rax)
  800420b021:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b028:	00 00 00 
  800420b02b:	c7 80 1c 01 00 00 00 	movl   $0x0,0x11c(%rax)
  800420b032:	00 00 00 
  800420b035:	48 b8 52 d8 20 04 80 	movabs $0x800420d852,%rax
  800420b03c:	00 00 00 
  800420b03f:	89 c2                	mov    %eax,%edx
  800420b041:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b048:	00 00 00 
  800420b04b:	66 89 90 20 01 00 00 	mov    %dx,0x120(%rax)
  800420b052:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b059:	00 00 00 
  800420b05c:	66 c7 80 22 01 00 00 	movw   $0x8,0x122(%rax)
  800420b063:	08 00 
  800420b065:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b06c:	00 00 00 
  800420b06f:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b076:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b079:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b07f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b086:	00 00 00 
  800420b089:	0f b6 90 24 01 00 00 	movzbl 0x124(%rax),%edx
  800420b090:	83 e2 07             	and    $0x7,%edx
  800420b093:	88 90 24 01 00 00    	mov    %dl,0x124(%rax)
  800420b099:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0a0:	00 00 00 
  800420b0a3:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0aa:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b0ad:	83 ca 0e             	or     $0xe,%edx
  800420b0b0:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0b6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0bd:	00 00 00 
  800420b0c0:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0c7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b0ca:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0d0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0d7:	00 00 00 
  800420b0da:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0e1:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b0e4:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b0ea:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b0f1:	00 00 00 
  800420b0f4:	0f b6 90 25 01 00 00 	movzbl 0x125(%rax),%edx
  800420b0fb:	83 ca 80             	or     $0xffffff80,%edx
  800420b0fe:	88 90 25 01 00 00    	mov    %dl,0x125(%rax)
  800420b104:	48 b8 52 d8 20 04 80 	movabs $0x800420d852,%rax
  800420b10b:	00 00 00 
  800420b10e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b112:	89 c2                	mov    %eax,%edx
  800420b114:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b11b:	00 00 00 
  800420b11e:	66 89 90 26 01 00 00 	mov    %dx,0x126(%rax)
  800420b125:	48 b8 52 d8 20 04 80 	movabs $0x800420d852,%rax
  800420b12c:	00 00 00 
  800420b12f:	48 c1 e8 20          	shr    $0x20,%rax
  800420b133:	89 c2                	mov    %eax,%edx
  800420b135:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b13c:	00 00 00 
  800420b13f:	89 90 28 01 00 00    	mov    %edx,0x128(%rax)
  800420b145:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b14c:	00 00 00 
  800420b14f:	c7 80 2c 01 00 00 00 	movl   $0x0,0x12c(%rax)
  800420b156:	00 00 00 
  800420b159:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b160:	00 00 00 
  800420b163:	89 c2                	mov    %eax,%edx
  800420b165:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b16c:	00 00 00 
  800420b16f:	66 89 90 00 02 00 00 	mov    %dx,0x200(%rax)
  800420b176:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b17d:	00 00 00 
  800420b180:	66 c7 80 02 02 00 00 	movw   $0x8,0x202(%rax)
  800420b187:	08 00 
  800420b189:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b190:	00 00 00 
  800420b193:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b19a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b19d:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1a3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1aa:	00 00 00 
  800420b1ad:	0f b6 90 04 02 00 00 	movzbl 0x204(%rax),%edx
  800420b1b4:	83 e2 07             	and    $0x7,%edx
  800420b1b7:	88 90 04 02 00 00    	mov    %dl,0x204(%rax)
  800420b1bd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1c4:	00 00 00 
  800420b1c7:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1ce:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b1d1:	83 ca 0e             	or     $0xe,%edx
  800420b1d4:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1da:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1e1:	00 00 00 
  800420b1e4:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b1eb:	83 e2 ef             	and    $0xffffffef,%edx
  800420b1ee:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b1f4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b1fb:	00 00 00 
  800420b1fe:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b205:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b208:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b20e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b215:	00 00 00 
  800420b218:	0f b6 90 05 02 00 00 	movzbl 0x205(%rax),%edx
  800420b21f:	83 ca 80             	or     $0xffffff80,%edx
  800420b222:	88 90 05 02 00 00    	mov    %dl,0x205(%rax)
  800420b228:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b22f:	00 00 00 
  800420b232:	48 c1 e8 10          	shr    $0x10,%rax
  800420b236:	89 c2                	mov    %eax,%edx
  800420b238:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b23f:	00 00 00 
  800420b242:	66 89 90 06 02 00 00 	mov    %dx,0x206(%rax)
  800420b249:	48 b8 5c d8 20 04 80 	movabs $0x800420d85c,%rax
  800420b250:	00 00 00 
  800420b253:	48 c1 e8 20          	shr    $0x20,%rax
  800420b257:	89 c2                	mov    %eax,%edx
  800420b259:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b260:	00 00 00 
  800420b263:	89 90 08 02 00 00    	mov    %edx,0x208(%rax)
  800420b269:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b270:	00 00 00 
  800420b273:	c7 80 0c 02 00 00 00 	movl   $0x0,0x20c(%rax)
  800420b27a:	00 00 00 
  800420b27d:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b284:	00 00 00 
  800420b287:	89 c2                	mov    %eax,%edx
  800420b289:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b290:	00 00 00 
  800420b293:	66 89 90 10 02 00 00 	mov    %dx,0x210(%rax)
  800420b29a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2a1:	00 00 00 
  800420b2a4:	66 c7 80 12 02 00 00 	movw   $0x8,0x212(%rax)
  800420b2ab:	08 00 
  800420b2ad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2b4:	00 00 00 
  800420b2b7:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2be:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b2c1:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2c7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2ce:	00 00 00 
  800420b2d1:	0f b6 90 14 02 00 00 	movzbl 0x214(%rax),%edx
  800420b2d8:	83 e2 07             	and    $0x7,%edx
  800420b2db:	88 90 14 02 00 00    	mov    %dl,0x214(%rax)
  800420b2e1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b2e8:	00 00 00 
  800420b2eb:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b2f2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b2f5:	83 ca 0e             	or     $0xe,%edx
  800420b2f8:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b2fe:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b305:	00 00 00 
  800420b308:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b30f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b312:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b318:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b31f:	00 00 00 
  800420b322:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b329:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b32c:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b332:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b339:	00 00 00 
  800420b33c:	0f b6 90 15 02 00 00 	movzbl 0x215(%rax),%edx
  800420b343:	83 ca 80             	or     $0xffffff80,%edx
  800420b346:	88 90 15 02 00 00    	mov    %dl,0x215(%rax)
  800420b34c:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b353:	00 00 00 
  800420b356:	48 c1 e8 10          	shr    $0x10,%rax
  800420b35a:	89 c2                	mov    %eax,%edx
  800420b35c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b363:	00 00 00 
  800420b366:	66 89 90 16 02 00 00 	mov    %dx,0x216(%rax)
  800420b36d:	48 b8 66 d8 20 04 80 	movabs $0x800420d866,%rax
  800420b374:	00 00 00 
  800420b377:	48 c1 e8 20          	shr    $0x20,%rax
  800420b37b:	89 c2                	mov    %eax,%edx
  800420b37d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b384:	00 00 00 
  800420b387:	89 90 18 02 00 00    	mov    %edx,0x218(%rax)
  800420b38d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b394:	00 00 00 
  800420b397:	c7 80 1c 02 00 00 00 	movl   $0x0,0x21c(%rax)
  800420b39e:	00 00 00 
  800420b3a1:	48 b8 70 d8 20 04 80 	movabs $0x800420d870,%rax
  800420b3a8:	00 00 00 
  800420b3ab:	89 c2                	mov    %eax,%edx
  800420b3ad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3b4:	00 00 00 
  800420b3b7:	66 89 90 20 02 00 00 	mov    %dx,0x220(%rax)
  800420b3be:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3c5:	00 00 00 
  800420b3c8:	66 c7 80 22 02 00 00 	movw   $0x8,0x222(%rax)
  800420b3cf:	08 00 
  800420b3d1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3d8:	00 00 00 
  800420b3db:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3e2:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b3e5:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b3eb:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b3f2:	00 00 00 
  800420b3f5:	0f b6 90 24 02 00 00 	movzbl 0x224(%rax),%edx
  800420b3fc:	83 e2 07             	and    $0x7,%edx
  800420b3ff:	88 90 24 02 00 00    	mov    %dl,0x224(%rax)
  800420b405:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b40c:	00 00 00 
  800420b40f:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b416:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b419:	83 ca 0e             	or     $0xe,%edx
  800420b41c:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b422:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b429:	00 00 00 
  800420b42c:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b433:	83 e2 ef             	and    $0xffffffef,%edx
  800420b436:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b43c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b443:	00 00 00 
  800420b446:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b44d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b450:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b456:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b45d:	00 00 00 
  800420b460:	0f b6 90 25 02 00 00 	movzbl 0x225(%rax),%edx
  800420b467:	83 ca 80             	or     $0xffffff80,%edx
  800420b46a:	88 90 25 02 00 00    	mov    %dl,0x225(%rax)
  800420b470:	48 b8 70 d8 20 04 80 	movabs $0x800420d870,%rax
  800420b477:	00 00 00 
  800420b47a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b47e:	89 c2                	mov    %eax,%edx
  800420b480:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b487:	00 00 00 
  800420b48a:	66 89 90 26 02 00 00 	mov    %dx,0x226(%rax)
  800420b491:	48 b8 70 d8 20 04 80 	movabs $0x800420d870,%rax
  800420b498:	00 00 00 
  800420b49b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b49f:	89 c2                	mov    %eax,%edx
  800420b4a1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4a8:	00 00 00 
  800420b4ab:	89 90 28 02 00 00    	mov    %edx,0x228(%rax)
  800420b4b1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4b8:	00 00 00 
  800420b4bb:	c7 80 2c 02 00 00 00 	movl   $0x0,0x22c(%rax)
  800420b4c2:	00 00 00 
  800420b4c5:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420b4cc:	00 00 00 
  800420b4cf:	89 c2                	mov    %eax,%edx
  800420b4d1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4d8:	00 00 00 
  800420b4db:	66 89 90 30 02 00 00 	mov    %dx,0x230(%rax)
  800420b4e2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4e9:	00 00 00 
  800420b4ec:	66 c7 80 32 02 00 00 	movw   $0x8,0x232(%rax)
  800420b4f3:	08 00 
  800420b4f5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b4fc:	00 00 00 
  800420b4ff:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b506:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b509:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b50f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b516:	00 00 00 
  800420b519:	0f b6 90 34 02 00 00 	movzbl 0x234(%rax),%edx
  800420b520:	83 e2 07             	and    $0x7,%edx
  800420b523:	88 90 34 02 00 00    	mov    %dl,0x234(%rax)
  800420b529:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b530:	00 00 00 
  800420b533:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b53a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b53d:	83 ca 0e             	or     $0xe,%edx
  800420b540:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b546:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b54d:	00 00 00 
  800420b550:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b557:	83 e2 ef             	and    $0xffffffef,%edx
  800420b55a:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b560:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b567:	00 00 00 
  800420b56a:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b571:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b574:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b57a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b581:	00 00 00 
  800420b584:	0f b6 90 35 02 00 00 	movzbl 0x235(%rax),%edx
  800420b58b:	83 ca 80             	or     $0xffffff80,%edx
  800420b58e:	88 90 35 02 00 00    	mov    %dl,0x235(%rax)
  800420b594:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420b59b:	00 00 00 
  800420b59e:	48 c1 e8 10          	shr    $0x10,%rax
  800420b5a2:	89 c2                	mov    %eax,%edx
  800420b5a4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5ab:	00 00 00 
  800420b5ae:	66 89 90 36 02 00 00 	mov    %dx,0x236(%rax)
  800420b5b5:	48 b8 7a d8 20 04 80 	movabs $0x800420d87a,%rax
  800420b5bc:	00 00 00 
  800420b5bf:	48 c1 e8 20          	shr    $0x20,%rax
  800420b5c3:	89 c2                	mov    %eax,%edx
  800420b5c5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5cc:	00 00 00 
  800420b5cf:	89 90 38 02 00 00    	mov    %edx,0x238(%rax)
  800420b5d5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5dc:	00 00 00 
  800420b5df:	c7 80 3c 02 00 00 00 	movl   $0x0,0x23c(%rax)
  800420b5e6:	00 00 00 
  800420b5e9:	48 b8 84 d8 20 04 80 	movabs $0x800420d884,%rax
  800420b5f0:	00 00 00 
  800420b5f3:	89 c2                	mov    %eax,%edx
  800420b5f5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b5fc:	00 00 00 
  800420b5ff:	66 89 90 40 02 00 00 	mov    %dx,0x240(%rax)
  800420b606:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b60d:	00 00 00 
  800420b610:	66 c7 80 42 02 00 00 	movw   $0x8,0x242(%rax)
  800420b617:	08 00 
  800420b619:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b620:	00 00 00 
  800420b623:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b62a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b62d:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b633:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b63a:	00 00 00 
  800420b63d:	0f b6 90 44 02 00 00 	movzbl 0x244(%rax),%edx
  800420b644:	83 e2 07             	and    $0x7,%edx
  800420b647:	88 90 44 02 00 00    	mov    %dl,0x244(%rax)
  800420b64d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b654:	00 00 00 
  800420b657:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b65e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b661:	83 ca 0e             	or     $0xe,%edx
  800420b664:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b66a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b671:	00 00 00 
  800420b674:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b67b:	83 e2 ef             	and    $0xffffffef,%edx
  800420b67e:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b684:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b68b:	00 00 00 
  800420b68e:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b695:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b698:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b69e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b6a5:	00 00 00 
  800420b6a8:	0f b6 90 45 02 00 00 	movzbl 0x245(%rax),%edx
  800420b6af:	83 ca 80             	or     $0xffffff80,%edx
  800420b6b2:	88 90 45 02 00 00    	mov    %dl,0x245(%rax)
  800420b6b8:	48 b8 84 d8 20 04 80 	movabs $0x800420d884,%rax
  800420b6bf:	00 00 00 
  800420b6c2:	48 c1 e8 10          	shr    $0x10,%rax
  800420b6c6:	89 c2                	mov    %eax,%edx
  800420b6c8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b6cf:	00 00 00 
  800420b6d2:	66 89 90 46 02 00 00 	mov    %dx,0x246(%rax)
  800420b6d9:	48 b8 84 d8 20 04 80 	movabs $0x800420d884,%rax
  800420b6e0:	00 00 00 
  800420b6e3:	48 c1 e8 20          	shr    $0x20,%rax
  800420b6e7:	89 c2                	mov    %eax,%edx
  800420b6e9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b6f0:	00 00 00 
  800420b6f3:	89 90 48 02 00 00    	mov    %edx,0x248(%rax)
  800420b6f9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b700:	00 00 00 
  800420b703:	c7 80 4c 02 00 00 00 	movl   $0x0,0x24c(%rax)
  800420b70a:	00 00 00 
  800420b70d:	48 b8 8e d8 20 04 80 	movabs $0x800420d88e,%rax
  800420b714:	00 00 00 
  800420b717:	89 c2                	mov    %eax,%edx
  800420b719:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b720:	00 00 00 
  800420b723:	66 89 90 50 02 00 00 	mov    %dx,0x250(%rax)
  800420b72a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b731:	00 00 00 
  800420b734:	66 c7 80 52 02 00 00 	movw   $0x8,0x252(%rax)
  800420b73b:	08 00 
  800420b73d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b744:	00 00 00 
  800420b747:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b74e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b751:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b757:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b75e:	00 00 00 
  800420b761:	0f b6 90 54 02 00 00 	movzbl 0x254(%rax),%edx
  800420b768:	83 e2 07             	and    $0x7,%edx
  800420b76b:	88 90 54 02 00 00    	mov    %dl,0x254(%rax)
  800420b771:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b778:	00 00 00 
  800420b77b:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b782:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b785:	83 ca 0e             	or     $0xe,%edx
  800420b788:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b78e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b795:	00 00 00 
  800420b798:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b79f:	83 e2 ef             	and    $0xffffffef,%edx
  800420b7a2:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7a8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b7af:	00 00 00 
  800420b7b2:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7b9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b7bc:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7c2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b7c9:	00 00 00 
  800420b7cc:	0f b6 90 55 02 00 00 	movzbl 0x255(%rax),%edx
  800420b7d3:	83 ca 80             	or     $0xffffff80,%edx
  800420b7d6:	88 90 55 02 00 00    	mov    %dl,0x255(%rax)
  800420b7dc:	48 b8 8e d8 20 04 80 	movabs $0x800420d88e,%rax
  800420b7e3:	00 00 00 
  800420b7e6:	48 c1 e8 10          	shr    $0x10,%rax
  800420b7ea:	89 c2                	mov    %eax,%edx
  800420b7ec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b7f3:	00 00 00 
  800420b7f6:	66 89 90 56 02 00 00 	mov    %dx,0x256(%rax)
  800420b7fd:	48 b8 8e d8 20 04 80 	movabs $0x800420d88e,%rax
  800420b804:	00 00 00 
  800420b807:	48 c1 e8 20          	shr    $0x20,%rax
  800420b80b:	89 c2                	mov    %eax,%edx
  800420b80d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b814:	00 00 00 
  800420b817:	89 90 58 02 00 00    	mov    %edx,0x258(%rax)
  800420b81d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b824:	00 00 00 
  800420b827:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%rax)
  800420b82e:	00 00 00 
  800420b831:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420b838:	00 00 00 
  800420b83b:	89 c2                	mov    %eax,%edx
  800420b83d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b844:	00 00 00 
  800420b847:	66 89 90 60 02 00 00 	mov    %dx,0x260(%rax)
  800420b84e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b855:	00 00 00 
  800420b858:	66 c7 80 62 02 00 00 	movw   $0x8,0x262(%rax)
  800420b85f:	08 00 
  800420b861:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b868:	00 00 00 
  800420b86b:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b872:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b875:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b87b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b882:	00 00 00 
  800420b885:	0f b6 90 64 02 00 00 	movzbl 0x264(%rax),%edx
  800420b88c:	83 e2 07             	and    $0x7,%edx
  800420b88f:	88 90 64 02 00 00    	mov    %dl,0x264(%rax)
  800420b895:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b89c:	00 00 00 
  800420b89f:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8a6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b8a9:	83 ca 0e             	or     $0xe,%edx
  800420b8ac:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8b2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b8b9:	00 00 00 
  800420b8bc:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8c3:	83 e2 ef             	and    $0xffffffef,%edx
  800420b8c6:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8cc:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b8d3:	00 00 00 
  800420b8d6:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8dd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420b8e0:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b8e6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b8ed:	00 00 00 
  800420b8f0:	0f b6 90 65 02 00 00 	movzbl 0x265(%rax),%edx
  800420b8f7:	83 ca 80             	or     $0xffffff80,%edx
  800420b8fa:	88 90 65 02 00 00    	mov    %dl,0x265(%rax)
  800420b900:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420b907:	00 00 00 
  800420b90a:	48 c1 e8 10          	shr    $0x10,%rax
  800420b90e:	89 c2                	mov    %eax,%edx
  800420b910:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b917:	00 00 00 
  800420b91a:	66 89 90 66 02 00 00 	mov    %dx,0x266(%rax)
  800420b921:	48 b8 98 d8 20 04 80 	movabs $0x800420d898,%rax
  800420b928:	00 00 00 
  800420b92b:	48 c1 e8 20          	shr    $0x20,%rax
  800420b92f:	89 c2                	mov    %eax,%edx
  800420b931:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b938:	00 00 00 
  800420b93b:	89 90 68 02 00 00    	mov    %edx,0x268(%rax)
  800420b941:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b948:	00 00 00 
  800420b94b:	c7 80 6c 02 00 00 00 	movl   $0x0,0x26c(%rax)
  800420b952:	00 00 00 
  800420b955:	48 b8 a2 d8 20 04 80 	movabs $0x800420d8a2,%rax
  800420b95c:	00 00 00 
  800420b95f:	89 c2                	mov    %eax,%edx
  800420b961:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b968:	00 00 00 
  800420b96b:	66 89 90 70 02 00 00 	mov    %dx,0x270(%rax)
  800420b972:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b979:	00 00 00 
  800420b97c:	66 c7 80 72 02 00 00 	movw   $0x8,0x272(%rax)
  800420b983:	08 00 
  800420b985:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b98c:	00 00 00 
  800420b98f:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b996:	83 e2 f8             	and    $0xfffffff8,%edx
  800420b999:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b99f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9a6:	00 00 00 
  800420b9a9:	0f b6 90 74 02 00 00 	movzbl 0x274(%rax),%edx
  800420b9b0:	83 e2 07             	and    $0x7,%edx
  800420b9b3:	88 90 74 02 00 00    	mov    %dl,0x274(%rax)
  800420b9b9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9c0:	00 00 00 
  800420b9c3:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9ca:	83 e2 f0             	and    $0xfffffff0,%edx
  800420b9cd:	83 ca 0e             	or     $0xe,%edx
  800420b9d0:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9d6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9dd:	00 00 00 
  800420b9e0:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420b9e7:	83 e2 ef             	and    $0xffffffef,%edx
  800420b9ea:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420b9f0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420b9f7:	00 00 00 
  800420b9fa:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba01:	83 e2 9f             	and    $0xffffff9f,%edx
  800420ba04:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba0a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba11:	00 00 00 
  800420ba14:	0f b6 90 75 02 00 00 	movzbl 0x275(%rax),%edx
  800420ba1b:	83 ca 80             	or     $0xffffff80,%edx
  800420ba1e:	88 90 75 02 00 00    	mov    %dl,0x275(%rax)
  800420ba24:	48 b8 a2 d8 20 04 80 	movabs $0x800420d8a2,%rax
  800420ba2b:	00 00 00 
  800420ba2e:	48 c1 e8 10          	shr    $0x10,%rax
  800420ba32:	89 c2                	mov    %eax,%edx
  800420ba34:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba3b:	00 00 00 
  800420ba3e:	66 89 90 76 02 00 00 	mov    %dx,0x276(%rax)
  800420ba45:	48 b8 a2 d8 20 04 80 	movabs $0x800420d8a2,%rax
  800420ba4c:	00 00 00 
  800420ba4f:	48 c1 e8 20          	shr    $0x20,%rax
  800420ba53:	89 c2                	mov    %eax,%edx
  800420ba55:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba5c:	00 00 00 
  800420ba5f:	89 90 78 02 00 00    	mov    %edx,0x278(%rax)
  800420ba65:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba6c:	00 00 00 
  800420ba6f:	c7 80 7c 02 00 00 00 	movl   $0x0,0x27c(%rax)
  800420ba76:	00 00 00 
  800420ba79:	48 b8 ac d8 20 04 80 	movabs $0x800420d8ac,%rax
  800420ba80:	00 00 00 
  800420ba83:	89 c2                	mov    %eax,%edx
  800420ba85:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba8c:	00 00 00 
  800420ba8f:	66 89 90 80 02 00 00 	mov    %dx,0x280(%rax)
  800420ba96:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420ba9d:	00 00 00 
  800420baa0:	66 c7 80 82 02 00 00 	movw   $0x8,0x282(%rax)
  800420baa7:	08 00 
  800420baa9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bab0:	00 00 00 
  800420bab3:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420baba:	83 e2 f8             	and    $0xfffffff8,%edx
  800420babd:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420bac3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420baca:	00 00 00 
  800420bacd:	0f b6 90 84 02 00 00 	movzbl 0x284(%rax),%edx
  800420bad4:	83 e2 07             	and    $0x7,%edx
  800420bad7:	88 90 84 02 00 00    	mov    %dl,0x284(%rax)
  800420badd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bae4:	00 00 00 
  800420bae7:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420baee:	83 e2 f0             	and    $0xfffffff0,%edx
  800420baf1:	83 ca 0e             	or     $0xe,%edx
  800420baf4:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bafa:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb01:	00 00 00 
  800420bb04:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb0b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bb0e:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb14:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb1b:	00 00 00 
  800420bb1e:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb25:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bb28:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb2e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb35:	00 00 00 
  800420bb38:	0f b6 90 85 02 00 00 	movzbl 0x285(%rax),%edx
  800420bb3f:	83 ca 80             	or     $0xffffff80,%edx
  800420bb42:	88 90 85 02 00 00    	mov    %dl,0x285(%rax)
  800420bb48:	48 b8 ac d8 20 04 80 	movabs $0x800420d8ac,%rax
  800420bb4f:	00 00 00 
  800420bb52:	48 c1 e8 10          	shr    $0x10,%rax
  800420bb56:	89 c2                	mov    %eax,%edx
  800420bb58:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb5f:	00 00 00 
  800420bb62:	66 89 90 86 02 00 00 	mov    %dx,0x286(%rax)
  800420bb69:	48 b8 ac d8 20 04 80 	movabs $0x800420d8ac,%rax
  800420bb70:	00 00 00 
  800420bb73:	48 c1 e8 20          	shr    $0x20,%rax
  800420bb77:	89 c2                	mov    %eax,%edx
  800420bb79:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb80:	00 00 00 
  800420bb83:	89 90 88 02 00 00    	mov    %edx,0x288(%rax)
  800420bb89:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bb90:	00 00 00 
  800420bb93:	c7 80 8c 02 00 00 00 	movl   $0x0,0x28c(%rax)
  800420bb9a:	00 00 00 
  800420bb9d:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  800420bba4:	00 00 00 
  800420bba7:	89 c2                	mov    %eax,%edx
  800420bba9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbb0:	00 00 00 
  800420bbb3:	66 89 90 90 02 00 00 	mov    %dx,0x290(%rax)
  800420bbba:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbc1:	00 00 00 
  800420bbc4:	66 c7 80 92 02 00 00 	movw   $0x8,0x292(%rax)
  800420bbcb:	08 00 
  800420bbcd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbd4:	00 00 00 
  800420bbd7:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbde:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bbe1:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bbe7:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bbee:	00 00 00 
  800420bbf1:	0f b6 90 94 02 00 00 	movzbl 0x294(%rax),%edx
  800420bbf8:	83 e2 07             	and    $0x7,%edx
  800420bbfb:	88 90 94 02 00 00    	mov    %dl,0x294(%rax)
  800420bc01:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc08:	00 00 00 
  800420bc0b:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc12:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bc15:	83 ca 0e             	or     $0xe,%edx
  800420bc18:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc1e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc25:	00 00 00 
  800420bc28:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc2f:	83 e2 ef             	and    $0xffffffef,%edx
  800420bc32:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc38:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc3f:	00 00 00 
  800420bc42:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc49:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bc4c:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc52:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc59:	00 00 00 
  800420bc5c:	0f b6 90 95 02 00 00 	movzbl 0x295(%rax),%edx
  800420bc63:	83 ca 80             	or     $0xffffff80,%edx
  800420bc66:	88 90 95 02 00 00    	mov    %dl,0x295(%rax)
  800420bc6c:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  800420bc73:	00 00 00 
  800420bc76:	48 c1 e8 10          	shr    $0x10,%rax
  800420bc7a:	89 c2                	mov    %eax,%edx
  800420bc7c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bc83:	00 00 00 
  800420bc86:	66 89 90 96 02 00 00 	mov    %dx,0x296(%rax)
  800420bc8d:	48 b8 b6 d8 20 04 80 	movabs $0x800420d8b6,%rax
  800420bc94:	00 00 00 
  800420bc97:	48 c1 e8 20          	shr    $0x20,%rax
  800420bc9b:	89 c2                	mov    %eax,%edx
  800420bc9d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bca4:	00 00 00 
  800420bca7:	89 90 98 02 00 00    	mov    %edx,0x298(%rax)
  800420bcad:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bcb4:	00 00 00 
  800420bcb7:	c7 80 9c 02 00 00 00 	movl   $0x0,0x29c(%rax)
  800420bcbe:	00 00 00 
  800420bcc1:	48 b8 c0 d8 20 04 80 	movabs $0x800420d8c0,%rax
  800420bcc8:	00 00 00 
  800420bccb:	89 c2                	mov    %eax,%edx
  800420bccd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bcd4:	00 00 00 
  800420bcd7:	66 89 90 a0 02 00 00 	mov    %dx,0x2a0(%rax)
  800420bcde:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bce5:	00 00 00 
  800420bce8:	66 c7 80 a2 02 00 00 	movw   $0x8,0x2a2(%rax)
  800420bcef:	08 00 
  800420bcf1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bcf8:	00 00 00 
  800420bcfb:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd02:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bd05:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd0b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd12:	00 00 00 
  800420bd15:	0f b6 90 a4 02 00 00 	movzbl 0x2a4(%rax),%edx
  800420bd1c:	83 e2 07             	and    $0x7,%edx
  800420bd1f:	88 90 a4 02 00 00    	mov    %dl,0x2a4(%rax)
  800420bd25:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd2c:	00 00 00 
  800420bd2f:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd36:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bd39:	83 ca 0e             	or     $0xe,%edx
  800420bd3c:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd42:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd49:	00 00 00 
  800420bd4c:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd53:	83 e2 ef             	and    $0xffffffef,%edx
  800420bd56:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd5c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd63:	00 00 00 
  800420bd66:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd6d:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bd70:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd76:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bd7d:	00 00 00 
  800420bd80:	0f b6 90 a5 02 00 00 	movzbl 0x2a5(%rax),%edx
  800420bd87:	83 ca 80             	or     $0xffffff80,%edx
  800420bd8a:	88 90 a5 02 00 00    	mov    %dl,0x2a5(%rax)
  800420bd90:	48 b8 c0 d8 20 04 80 	movabs $0x800420d8c0,%rax
  800420bd97:	00 00 00 
  800420bd9a:	48 c1 e8 10          	shr    $0x10,%rax
  800420bd9e:	89 c2                	mov    %eax,%edx
  800420bda0:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bda7:	00 00 00 
  800420bdaa:	66 89 90 a6 02 00 00 	mov    %dx,0x2a6(%rax)
  800420bdb1:	48 b8 c0 d8 20 04 80 	movabs $0x800420d8c0,%rax
  800420bdb8:	00 00 00 
  800420bdbb:	48 c1 e8 20          	shr    $0x20,%rax
  800420bdbf:	89 c2                	mov    %eax,%edx
  800420bdc1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bdc8:	00 00 00 
  800420bdcb:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%rax)
  800420bdd1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bdd8:	00 00 00 
  800420bddb:	c7 80 ac 02 00 00 00 	movl   $0x0,0x2ac(%rax)
  800420bde2:	00 00 00 
  800420bde5:	48 b8 ca d8 20 04 80 	movabs $0x800420d8ca,%rax
  800420bdec:	00 00 00 
  800420bdef:	89 c2                	mov    %eax,%edx
  800420bdf1:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bdf8:	00 00 00 
  800420bdfb:	66 89 90 b0 02 00 00 	mov    %dx,0x2b0(%rax)
  800420be02:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be09:	00 00 00 
  800420be0c:	66 c7 80 b2 02 00 00 	movw   $0x8,0x2b2(%rax)
  800420be13:	08 00 
  800420be15:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be1c:	00 00 00 
  800420be1f:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be26:	83 e2 f8             	and    $0xfffffff8,%edx
  800420be29:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be2f:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be36:	00 00 00 
  800420be39:	0f b6 90 b4 02 00 00 	movzbl 0x2b4(%rax),%edx
  800420be40:	83 e2 07             	and    $0x7,%edx
  800420be43:	88 90 b4 02 00 00    	mov    %dl,0x2b4(%rax)
  800420be49:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be50:	00 00 00 
  800420be53:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be5a:	83 e2 f0             	and    $0xfffffff0,%edx
  800420be5d:	83 ca 0e             	or     $0xe,%edx
  800420be60:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be66:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be6d:	00 00 00 
  800420be70:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be77:	83 e2 ef             	and    $0xffffffef,%edx
  800420be7a:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be80:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420be87:	00 00 00 
  800420be8a:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420be91:	83 e2 9f             	and    $0xffffff9f,%edx
  800420be94:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420be9a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bea1:	00 00 00 
  800420bea4:	0f b6 90 b5 02 00 00 	movzbl 0x2b5(%rax),%edx
  800420beab:	83 ca 80             	or     $0xffffff80,%edx
  800420beae:	88 90 b5 02 00 00    	mov    %dl,0x2b5(%rax)
  800420beb4:	48 b8 ca d8 20 04 80 	movabs $0x800420d8ca,%rax
  800420bebb:	00 00 00 
  800420bebe:	48 c1 e8 10          	shr    $0x10,%rax
  800420bec2:	89 c2                	mov    %eax,%edx
  800420bec4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420becb:	00 00 00 
  800420bece:	66 89 90 b6 02 00 00 	mov    %dx,0x2b6(%rax)
  800420bed5:	48 b8 ca d8 20 04 80 	movabs $0x800420d8ca,%rax
  800420bedc:	00 00 00 
  800420bedf:	48 c1 e8 20          	shr    $0x20,%rax
  800420bee3:	89 c2                	mov    %eax,%edx
  800420bee5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420beec:	00 00 00 
  800420beef:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%rax)
  800420bef5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420befc:	00 00 00 
  800420beff:	c7 80 bc 02 00 00 00 	movl   $0x0,0x2bc(%rax)
  800420bf06:	00 00 00 
  800420bf09:	48 b8 d4 d8 20 04 80 	movabs $0x800420d8d4,%rax
  800420bf10:	00 00 00 
  800420bf13:	89 c2                	mov    %eax,%edx
  800420bf15:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf1c:	00 00 00 
  800420bf1f:	66 89 90 c0 02 00 00 	mov    %dx,0x2c0(%rax)
  800420bf26:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf2d:	00 00 00 
  800420bf30:	66 c7 80 c2 02 00 00 	movw   $0x8,0x2c2(%rax)
  800420bf37:	08 00 
  800420bf39:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf40:	00 00 00 
  800420bf43:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf4a:	83 e2 f8             	and    $0xfffffff8,%edx
  800420bf4d:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf53:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf5a:	00 00 00 
  800420bf5d:	0f b6 90 c4 02 00 00 	movzbl 0x2c4(%rax),%edx
  800420bf64:	83 e2 07             	and    $0x7,%edx
  800420bf67:	88 90 c4 02 00 00    	mov    %dl,0x2c4(%rax)
  800420bf6d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf74:	00 00 00 
  800420bf77:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf7e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420bf81:	83 ca 0e             	or     $0xe,%edx
  800420bf84:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bf8a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bf91:	00 00 00 
  800420bf94:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bf9b:	83 e2 ef             	and    $0xffffffef,%edx
  800420bf9e:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfa4:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bfab:	00 00 00 
  800420bfae:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfb5:	83 e2 9f             	and    $0xffffff9f,%edx
  800420bfb8:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfbe:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bfc5:	00 00 00 
  800420bfc8:	0f b6 90 c5 02 00 00 	movzbl 0x2c5(%rax),%edx
  800420bfcf:	83 ca 80             	or     $0xffffff80,%edx
  800420bfd2:	88 90 c5 02 00 00    	mov    %dl,0x2c5(%rax)
  800420bfd8:	48 b8 d4 d8 20 04 80 	movabs $0x800420d8d4,%rax
  800420bfdf:	00 00 00 
  800420bfe2:	48 c1 e8 10          	shr    $0x10,%rax
  800420bfe6:	89 c2                	mov    %eax,%edx
  800420bfe8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420bfef:	00 00 00 
  800420bff2:	66 89 90 c6 02 00 00 	mov    %dx,0x2c6(%rax)
  800420bff9:	48 b8 d4 d8 20 04 80 	movabs $0x800420d8d4,%rax
  800420c000:	00 00 00 
  800420c003:	48 c1 e8 20          	shr    $0x20,%rax
  800420c007:	89 c2                	mov    %eax,%edx
  800420c009:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c010:	00 00 00 
  800420c013:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%rax)
  800420c019:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c020:	00 00 00 
  800420c023:	c7 80 cc 02 00 00 00 	movl   $0x0,0x2cc(%rax)
  800420c02a:	00 00 00 
  800420c02d:	48 b8 de d8 20 04 80 	movabs $0x800420d8de,%rax
  800420c034:	00 00 00 
  800420c037:	89 c2                	mov    %eax,%edx
  800420c039:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c040:	00 00 00 
  800420c043:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%rax)
  800420c04a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c051:	00 00 00 
  800420c054:	66 c7 80 d2 02 00 00 	movw   $0x8,0x2d2(%rax)
  800420c05b:	08 00 
  800420c05d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c064:	00 00 00 
  800420c067:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c06e:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c071:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c077:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c07e:	00 00 00 
  800420c081:	0f b6 90 d4 02 00 00 	movzbl 0x2d4(%rax),%edx
  800420c088:	83 e2 07             	and    $0x7,%edx
  800420c08b:	88 90 d4 02 00 00    	mov    %dl,0x2d4(%rax)
  800420c091:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c098:	00 00 00 
  800420c09b:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0a2:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c0a5:	83 ca 0e             	or     $0xe,%edx
  800420c0a8:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0ae:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c0b5:	00 00 00 
  800420c0b8:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0bf:	83 e2 ef             	and    $0xffffffef,%edx
  800420c0c2:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0c8:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c0cf:	00 00 00 
  800420c0d2:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0d9:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c0dc:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0e2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c0e9:	00 00 00 
  800420c0ec:	0f b6 90 d5 02 00 00 	movzbl 0x2d5(%rax),%edx
  800420c0f3:	83 ca 80             	or     $0xffffff80,%edx
  800420c0f6:	88 90 d5 02 00 00    	mov    %dl,0x2d5(%rax)
  800420c0fc:	48 b8 de d8 20 04 80 	movabs $0x800420d8de,%rax
  800420c103:	00 00 00 
  800420c106:	48 c1 e8 10          	shr    $0x10,%rax
  800420c10a:	89 c2                	mov    %eax,%edx
  800420c10c:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c113:	00 00 00 
  800420c116:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%rax)
  800420c11d:	48 b8 de d8 20 04 80 	movabs $0x800420d8de,%rax
  800420c124:	00 00 00 
  800420c127:	48 c1 e8 20          	shr    $0x20,%rax
  800420c12b:	89 c2                	mov    %eax,%edx
  800420c12d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c134:	00 00 00 
  800420c137:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%rax)
  800420c13d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c144:	00 00 00 
  800420c147:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%rax)
  800420c14e:	00 00 00 
  800420c151:	48 b8 e8 d8 20 04 80 	movabs $0x800420d8e8,%rax
  800420c158:	00 00 00 
  800420c15b:	89 c2                	mov    %eax,%edx
  800420c15d:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c164:	00 00 00 
  800420c167:	66 89 90 e0 02 00 00 	mov    %dx,0x2e0(%rax)
  800420c16e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c175:	00 00 00 
  800420c178:	66 c7 80 e2 02 00 00 	movw   $0x8,0x2e2(%rax)
  800420c17f:	08 00 
  800420c181:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c188:	00 00 00 
  800420c18b:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c192:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c195:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c19b:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1a2:	00 00 00 
  800420c1a5:	0f b6 90 e4 02 00 00 	movzbl 0x2e4(%rax),%edx
  800420c1ac:	83 e2 07             	and    $0x7,%edx
  800420c1af:	88 90 e4 02 00 00    	mov    %dl,0x2e4(%rax)
  800420c1b5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1bc:	00 00 00 
  800420c1bf:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1c6:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c1c9:	83 ca 0e             	or     $0xe,%edx
  800420c1cc:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1d2:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1d9:	00 00 00 
  800420c1dc:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1e3:	83 e2 ef             	and    $0xffffffef,%edx
  800420c1e6:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c1ec:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c1f3:	00 00 00 
  800420c1f6:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c1fd:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c200:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c206:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c20d:	00 00 00 
  800420c210:	0f b6 90 e5 02 00 00 	movzbl 0x2e5(%rax),%edx
  800420c217:	83 ca 80             	or     $0xffffff80,%edx
  800420c21a:	88 90 e5 02 00 00    	mov    %dl,0x2e5(%rax)
  800420c220:	48 b8 e8 d8 20 04 80 	movabs $0x800420d8e8,%rax
  800420c227:	00 00 00 
  800420c22a:	48 c1 e8 10          	shr    $0x10,%rax
  800420c22e:	89 c2                	mov    %eax,%edx
  800420c230:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c237:	00 00 00 
  800420c23a:	66 89 90 e6 02 00 00 	mov    %dx,0x2e6(%rax)
  800420c241:	48 b8 e8 d8 20 04 80 	movabs $0x800420d8e8,%rax
  800420c248:	00 00 00 
  800420c24b:	48 c1 e8 20          	shr    $0x20,%rax
  800420c24f:	89 c2                	mov    %eax,%edx
  800420c251:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c258:	00 00 00 
  800420c25b:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%rax)
  800420c261:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c268:	00 00 00 
  800420c26b:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%rax)
  800420c272:	00 00 00 
  800420c275:	48 b8 f2 d8 20 04 80 	movabs $0x800420d8f2,%rax
  800420c27c:	00 00 00 
  800420c27f:	89 c2                	mov    %eax,%edx
  800420c281:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c288:	00 00 00 
  800420c28b:	66 89 90 f0 02 00 00 	mov    %dx,0x2f0(%rax)
  800420c292:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c299:	00 00 00 
  800420c29c:	66 c7 80 f2 02 00 00 	movw   $0x8,0x2f2(%rax)
  800420c2a3:	08 00 
  800420c2a5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2ac:	00 00 00 
  800420c2af:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2b6:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c2b9:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2bf:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2c6:	00 00 00 
  800420c2c9:	0f b6 90 f4 02 00 00 	movzbl 0x2f4(%rax),%edx
  800420c2d0:	83 e2 07             	and    $0x7,%edx
  800420c2d3:	88 90 f4 02 00 00    	mov    %dl,0x2f4(%rax)
  800420c2d9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2e0:	00 00 00 
  800420c2e3:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c2ea:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c2ed:	83 ca 0e             	or     $0xe,%edx
  800420c2f0:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c2f6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c2fd:	00 00 00 
  800420c300:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c307:	83 e2 ef             	and    $0xffffffef,%edx
  800420c30a:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c310:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c317:	00 00 00 
  800420c31a:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c321:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c324:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c32a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c331:	00 00 00 
  800420c334:	0f b6 90 f5 02 00 00 	movzbl 0x2f5(%rax),%edx
  800420c33b:	83 ca 80             	or     $0xffffff80,%edx
  800420c33e:	88 90 f5 02 00 00    	mov    %dl,0x2f5(%rax)
  800420c344:	48 b8 f2 d8 20 04 80 	movabs $0x800420d8f2,%rax
  800420c34b:	00 00 00 
  800420c34e:	48 c1 e8 10          	shr    $0x10,%rax
  800420c352:	89 c2                	mov    %eax,%edx
  800420c354:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c35b:	00 00 00 
  800420c35e:	66 89 90 f6 02 00 00 	mov    %dx,0x2f6(%rax)
  800420c365:	48 b8 f2 d8 20 04 80 	movabs $0x800420d8f2,%rax
  800420c36c:	00 00 00 
  800420c36f:	48 c1 e8 20          	shr    $0x20,%rax
  800420c373:	89 c2                	mov    %eax,%edx
  800420c375:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c37c:	00 00 00 
  800420c37f:	89 90 f8 02 00 00    	mov    %edx,0x2f8(%rax)
  800420c385:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c38c:	00 00 00 
  800420c38f:	c7 80 fc 02 00 00 00 	movl   $0x0,0x2fc(%rax)
  800420c396:	00 00 00 
  800420c399:	48 b8 fc d8 20 04 80 	movabs $0x800420d8fc,%rax
  800420c3a0:	00 00 00 
  800420c3a3:	89 c2                	mov    %eax,%edx
  800420c3a5:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3ac:	00 00 00 
  800420c3af:	66 89 90 00 03 00 00 	mov    %dx,0x300(%rax)
  800420c3b6:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3bd:	00 00 00 
  800420c3c0:	66 c7 80 02 03 00 00 	movw   $0x8,0x302(%rax)
  800420c3c7:	08 00 
  800420c3c9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3d0:	00 00 00 
  800420c3d3:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3da:	83 e2 f8             	and    $0xfffffff8,%edx
  800420c3dd:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3e3:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c3ea:	00 00 00 
  800420c3ed:	0f b6 90 04 03 00 00 	movzbl 0x304(%rax),%edx
  800420c3f4:	83 e2 07             	and    $0x7,%edx
  800420c3f7:	88 90 04 03 00 00    	mov    %dl,0x304(%rax)
  800420c3fd:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c404:	00 00 00 
  800420c407:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c40e:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c411:	83 ca 0e             	or     $0xe,%edx
  800420c414:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c41a:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c421:	00 00 00 
  800420c424:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c42b:	83 e2 ef             	and    $0xffffffef,%edx
  800420c42e:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c434:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c43b:	00 00 00 
  800420c43e:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c445:	83 ca 60             	or     $0x60,%edx
  800420c448:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c44e:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c455:	00 00 00 
  800420c458:	0f b6 90 05 03 00 00 	movzbl 0x305(%rax),%edx
  800420c45f:	83 ca 80             	or     $0xffffff80,%edx
  800420c462:	88 90 05 03 00 00    	mov    %dl,0x305(%rax)
  800420c468:	48 b8 fc d8 20 04 80 	movabs $0x800420d8fc,%rax
  800420c46f:	00 00 00 
  800420c472:	48 c1 e8 10          	shr    $0x10,%rax
  800420c476:	89 c2                	mov    %eax,%edx
  800420c478:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c47f:	00 00 00 
  800420c482:	66 89 90 06 03 00 00 	mov    %dx,0x306(%rax)
  800420c489:	48 b8 fc d8 20 04 80 	movabs $0x800420d8fc,%rax
  800420c490:	00 00 00 
  800420c493:	48 c1 e8 20          	shr    $0x20,%rax
  800420c497:	89 c2                	mov    %eax,%edx
  800420c499:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c4a0:	00 00 00 
  800420c4a3:	89 90 08 03 00 00    	mov    %edx,0x308(%rax)
  800420c4a9:	48 b8 80 e2 4d 04 80 	movabs $0x80044de280,%rax
  800420c4b0:	00 00 00 
  800420c4b3:	c7 80 0c 03 00 00 00 	movl   $0x0,0x30c(%rax)
  800420c4ba:	00 00 00 
  800420c4bd:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c4c4:	00 00 00 
  800420c4c7:	66 c7 00 ff 0f       	movw   $0xfff,(%rax)
  800420c4cc:	48 ba 80 e2 4d 04 80 	movabs $0x80044de280,%rdx
  800420c4d3:	00 00 00 
  800420c4d6:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c4dd:	00 00 00 
  800420c4e0:	48 89 50 02          	mov    %rdx,0x2(%rax)
  800420c4e4:	48 b8 f2 c4 20 04 80 	movabs $0x800420c4f2,%rax
  800420c4eb:	00 00 00 
  800420c4ee:	ff d0                	callq  *%rax
  800420c4f0:	c9                   	leaveq 
  800420c4f1:	c3                   	retq   

000000800420c4f2 <trap_init_percpu>:
  800420c4f2:	55                   	push   %rbp
  800420c4f3:	48 89 e5             	mov    %rsp,%rbp
  800420c4f6:	53                   	push   %rbx
  800420c4f7:	48 83 ec 18          	sub    $0x18,%rsp
  800420c4fb:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c502:	00 00 00 
  800420c505:	ff d0                	callq  *%rax
  800420c507:	01 c0                	add    %eax,%eax
  800420c509:	83 c0 05             	add    $0x5,%eax
  800420c50c:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420c50f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c516:	00 00 00 
  800420c519:	ff d0                	callq  *%rax
  800420c51b:	89 c3                	mov    %eax,%ebx
  800420c51d:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c524:	00 00 00 
  800420c527:	ff d0                	callq  *%rax
  800420c529:	89 c2                	mov    %eax,%edx
  800420c52b:	89 d0                	mov    %edx,%eax
  800420c52d:	01 c0                	add    %eax,%eax
  800420c52f:	01 d0                	add    %edx,%eax
  800420c531:	c1 e0 0f             	shl    $0xf,%eax
  800420c534:	48 98                	cltq   
  800420c536:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800420c53d:	00 00 00 
  800420c540:	48 29 c2             	sub    %rax,%rdx
  800420c543:	48 89 d0             	mov    %rdx,%rax
  800420c546:	48 89 c2             	mov    %rax,%rdx
  800420c549:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  800420c550:	00 00 00 
  800420c553:	48 63 c3             	movslq %ebx,%rax
  800420c556:	48 c1 e0 03          	shl    $0x3,%rax
  800420c55a:	48 89 c6             	mov    %rax,%rsi
  800420c55d:	48 c1 e6 04          	shl    $0x4,%rsi
  800420c561:	48 01 f0             	add    %rsi,%rax
  800420c564:	48 01 c8             	add    %rcx,%rax
  800420c567:	48 83 c0 10          	add    $0x10,%rax
  800420c56b:	48 89 50 04          	mov    %rdx,0x4(%rax)
  800420c56f:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c576:	00 00 00 
  800420c579:	48 8b 00             	mov    (%rax),%rax
  800420c57c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c580:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c584:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c58b:	00 00 00 
  800420c58e:	ff d0                	callq  *%rax
  800420c590:	c1 e0 04             	shl    $0x4,%eax
  800420c593:	48 98                	cltq   
  800420c595:	48 01 d8             	add    %rbx,%rax
  800420c598:	66 c7 00 68 00       	movw   $0x68,(%rax)
  800420c59d:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c5a4:	00 00 00 
  800420c5a7:	48 8b 00             	mov    (%rax),%rax
  800420c5aa:	48 c1 f8 10          	sar    $0x10,%rax
  800420c5ae:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c5b2:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c5b9:	00 00 00 
  800420c5bc:	ff d0                	callq  *%rax
  800420c5be:	c1 e0 04             	shl    $0x4,%eax
  800420c5c1:	48 98                	cltq   
  800420c5c3:	48 01 d8             	add    %rbx,%rax
  800420c5c6:	48 89 c3             	mov    %rax,%rbx
  800420c5c9:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c5d0:	00 00 00 
  800420c5d3:	ff d0                	callq  *%rax
  800420c5d5:	48 98                	cltq   
  800420c5d7:	48 c1 e0 03          	shl    $0x3,%rax
  800420c5db:	48 89 c2             	mov    %rax,%rdx
  800420c5de:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c5e2:	48 01 d0             	add    %rdx,%rax
  800420c5e5:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c5e9:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c5f0:	00 00 00 
  800420c5f3:	48 01 d0             	add    %rdx,%rax
  800420c5f6:	66 89 43 02          	mov    %ax,0x2(%rbx)
  800420c5fa:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c601:	00 00 00 
  800420c604:	48 8b 00             	mov    (%rax),%rax
  800420c607:	48 c1 f8 10          	sar    $0x10,%rax
  800420c60b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c60f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c616:	00 00 00 
  800420c619:	ff d0                	callq  *%rax
  800420c61b:	c1 e0 04             	shl    $0x4,%eax
  800420c61e:	48 98                	cltq   
  800420c620:	48 01 d8             	add    %rbx,%rax
  800420c623:	48 89 c3             	mov    %rax,%rbx
  800420c626:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c62d:	00 00 00 
  800420c630:	ff d0                	callq  *%rax
  800420c632:	48 98                	cltq   
  800420c634:	48 c1 e0 03          	shl    $0x3,%rax
  800420c638:	48 89 c2             	mov    %rax,%rdx
  800420c63b:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c63f:	48 01 d0             	add    %rdx,%rax
  800420c642:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c646:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c64d:	00 00 00 
  800420c650:	48 01 d0             	add    %rdx,%rax
  800420c653:	48 c1 e8 10          	shr    $0x10,%rax
  800420c657:	88 43 04             	mov    %al,0x4(%rbx)
  800420c65a:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c661:	00 00 00 
  800420c664:	48 8b 00             	mov    (%rax),%rax
  800420c667:	48 c1 f8 10          	sar    $0x10,%rax
  800420c66b:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c66f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c676:	00 00 00 
  800420c679:	ff d0                	callq  *%rax
  800420c67b:	c1 e0 04             	shl    $0x4,%eax
  800420c67e:	48 98                	cltq   
  800420c680:	48 01 d8             	add    %rbx,%rax
  800420c683:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c687:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c68a:	83 ca 09             	or     $0x9,%edx
  800420c68d:	88 50 05             	mov    %dl,0x5(%rax)
  800420c690:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c697:	00 00 00 
  800420c69a:	48 8b 00             	mov    (%rax),%rax
  800420c69d:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6a1:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6a5:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c6ac:	00 00 00 
  800420c6af:	ff d0                	callq  *%rax
  800420c6b1:	c1 e0 04             	shl    $0x4,%eax
  800420c6b4:	48 98                	cltq   
  800420c6b6:	48 01 d8             	add    %rbx,%rax
  800420c6b9:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6bd:	83 e2 ef             	and    $0xffffffef,%edx
  800420c6c0:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6c3:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6ca:	00 00 00 
  800420c6cd:	48 8b 00             	mov    (%rax),%rax
  800420c6d0:	48 c1 f8 10          	sar    $0x10,%rax
  800420c6d4:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c6d8:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c6df:	00 00 00 
  800420c6e2:	ff d0                	callq  *%rax
  800420c6e4:	c1 e0 04             	shl    $0x4,%eax
  800420c6e7:	48 98                	cltq   
  800420c6e9:	48 01 d8             	add    %rbx,%rax
  800420c6ec:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c6f0:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c6f3:	88 50 05             	mov    %dl,0x5(%rax)
  800420c6f6:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c6fd:	00 00 00 
  800420c700:	48 8b 00             	mov    (%rax),%rax
  800420c703:	48 c1 f8 10          	sar    $0x10,%rax
  800420c707:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c70b:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c712:	00 00 00 
  800420c715:	ff d0                	callq  *%rax
  800420c717:	c1 e0 04             	shl    $0x4,%eax
  800420c71a:	48 98                	cltq   
  800420c71c:	48 01 d8             	add    %rbx,%rax
  800420c71f:	0f b6 50 05          	movzbl 0x5(%rax),%edx
  800420c723:	83 ca 80             	or     $0xffffff80,%edx
  800420c726:	88 50 05             	mov    %dl,0x5(%rax)
  800420c729:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c730:	00 00 00 
  800420c733:	48 8b 00             	mov    (%rax),%rax
  800420c736:	48 c1 f8 10          	sar    $0x10,%rax
  800420c73a:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c73e:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c745:	00 00 00 
  800420c748:	ff d0                	callq  *%rax
  800420c74a:	c1 e0 04             	shl    $0x4,%eax
  800420c74d:	48 98                	cltq   
  800420c74f:	48 01 d8             	add    %rbx,%rax
  800420c752:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c756:	83 e2 f0             	and    $0xfffffff0,%edx
  800420c759:	88 50 06             	mov    %dl,0x6(%rax)
  800420c75c:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c763:	00 00 00 
  800420c766:	48 8b 00             	mov    (%rax),%rax
  800420c769:	48 c1 f8 10          	sar    $0x10,%rax
  800420c76d:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c771:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c778:	00 00 00 
  800420c77b:	ff d0                	callq  *%rax
  800420c77d:	c1 e0 04             	shl    $0x4,%eax
  800420c780:	48 98                	cltq   
  800420c782:	48 01 d8             	add    %rbx,%rax
  800420c785:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c789:	83 e2 ef             	and    $0xffffffef,%edx
  800420c78c:	88 50 06             	mov    %dl,0x6(%rax)
  800420c78f:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c796:	00 00 00 
  800420c799:	48 8b 00             	mov    (%rax),%rax
  800420c79c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7a0:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7a4:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c7ab:	00 00 00 
  800420c7ae:	ff d0                	callq  *%rax
  800420c7b0:	c1 e0 04             	shl    $0x4,%eax
  800420c7b3:	48 98                	cltq   
  800420c7b5:	48 01 d8             	add    %rbx,%rax
  800420c7b8:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7bc:	83 e2 9f             	and    $0xffffff9f,%edx
  800420c7bf:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7c2:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7c9:	00 00 00 
  800420c7cc:	48 8b 00             	mov    (%rax),%rax
  800420c7cf:	48 c1 f8 10          	sar    $0x10,%rax
  800420c7d3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c7d7:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c7de:	00 00 00 
  800420c7e1:	ff d0                	callq  *%rax
  800420c7e3:	c1 e0 04             	shl    $0x4,%eax
  800420c7e6:	48 98                	cltq   
  800420c7e8:	48 01 d8             	add    %rbx,%rax
  800420c7eb:	0f b6 50 06          	movzbl 0x6(%rax),%edx
  800420c7ef:	83 e2 7f             	and    $0x7f,%edx
  800420c7f2:	88 50 06             	mov    %dl,0x6(%rax)
  800420c7f5:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c7fc:	00 00 00 
  800420c7ff:	48 8b 00             	mov    (%rax),%rax
  800420c802:	48 c1 f8 10          	sar    $0x10,%rax
  800420c806:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c80a:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c811:	00 00 00 
  800420c814:	ff d0                	callq  *%rax
  800420c816:	c1 e0 04             	shl    $0x4,%eax
  800420c819:	48 98                	cltq   
  800420c81b:	48 01 d8             	add    %rbx,%rax
  800420c81e:	48 89 c3             	mov    %rax,%rbx
  800420c821:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c828:	00 00 00 
  800420c82b:	ff d0                	callq  *%rax
  800420c82d:	48 98                	cltq   
  800420c82f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c833:	48 89 c2             	mov    %rax,%rdx
  800420c836:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c83a:	48 01 d0             	add    %rdx,%rax
  800420c83d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c841:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c848:	00 00 00 
  800420c84b:	48 01 d0             	add    %rdx,%rax
  800420c84e:	48 c1 e8 18          	shr    $0x18,%rax
  800420c852:	88 43 07             	mov    %al,0x7(%rbx)
  800420c855:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c85c:	00 00 00 
  800420c85f:	48 8b 00             	mov    (%rax),%rax
  800420c862:	48 c1 f8 10          	sar    $0x10,%rax
  800420c866:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c86a:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c871:	00 00 00 
  800420c874:	ff d0                	callq  *%rax
  800420c876:	c1 e0 04             	shl    $0x4,%eax
  800420c879:	48 98                	cltq   
  800420c87b:	48 01 d8             	add    %rbx,%rax
  800420c87e:	48 89 c3             	mov    %rax,%rbx
  800420c881:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c888:	00 00 00 
  800420c88b:	ff d0                	callq  *%rax
  800420c88d:	48 98                	cltq   
  800420c88f:	48 c1 e0 03          	shl    $0x3,%rax
  800420c893:	48 89 c2             	mov    %rax,%rdx
  800420c896:	48 c1 e2 04          	shl    $0x4,%rdx
  800420c89a:	48 01 d0             	add    %rdx,%rax
  800420c89d:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800420c8a1:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800420c8a8:	00 00 00 
  800420c8ab:	48 01 d0             	add    %rdx,%rax
  800420c8ae:	48 c1 e8 20          	shr    $0x20,%rax
  800420c8b2:	89 43 08             	mov    %eax,0x8(%rbx)
  800420c8b5:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8bc:	00 00 00 
  800420c8bf:	48 8b 00             	mov    (%rax),%rax
  800420c8c2:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8c6:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8ca:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c8d1:	00 00 00 
  800420c8d4:	ff d0                	callq  *%rax
  800420c8d6:	c1 e0 04             	shl    $0x4,%eax
  800420c8d9:	48 98                	cltq   
  800420c8db:	48 01 d8             	add    %rbx,%rax
  800420c8de:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  800420c8e2:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c8e9:	00 00 00 
  800420c8ec:	48 8b 00             	mov    (%rax),%rax
  800420c8ef:	48 c1 f8 10          	sar    $0x10,%rax
  800420c8f3:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c8f7:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c8fe:	00 00 00 
  800420c901:	ff d0                	callq  *%rax
  800420c903:	c1 e0 04             	shl    $0x4,%eax
  800420c906:	48 98                	cltq   
  800420c908:	48 01 d8             	add    %rbx,%rax
  800420c90b:	c6 40 0d 00          	movb   $0x0,0xd(%rax)
  800420c90f:	48 b8 68 56 23 04 80 	movabs $0x8004235668,%rax
  800420c916:	00 00 00 
  800420c919:	48 8b 00             	mov    (%rax),%rax
  800420c91c:	48 c1 f8 10          	sar    $0x10,%rax
  800420c920:	48 8d 58 28          	lea    0x28(%rax),%rbx
  800420c924:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c92b:	00 00 00 
  800420c92e:	ff d0                	callq  *%rax
  800420c930:	c1 e0 04             	shl    $0x4,%eax
  800420c933:	48 98                	cltq   
  800420c935:	48 01 d8             	add    %rbx,%rax
  800420c938:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%rax)
  800420c93e:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420c941:	c1 e0 03             	shl    $0x3,%eax
  800420c944:	0f b7 c0             	movzwl %ax,%eax
  800420c947:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
	__asm __volatile("lgdt (%0)" : : "r" (p));
}
static __inline void
ltr(uint16_t sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
  800420c94b:	0f b7 45 ea          	movzwl -0x16(%rbp),%eax
  800420c94f:	0f 00 d8             	ltr    %ax
  800420c952:	48 b8 80 f2 4d 04 80 	movabs $0x80044df280,%rax
  800420c959:	00 00 00 
  800420c95c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
}  

static __inline void
lidt(void *p)
{
	__asm __volatile("lidt (%0)" : : "r" (p));
  800420c960:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420c964:	0f 01 18             	lidt   (%rax)
  800420c967:	48 83 c4 18          	add    $0x18,%rsp
  800420c96b:	5b                   	pop    %rbx
  800420c96c:	5d                   	pop    %rbp
  800420c96d:	c3                   	retq   

000000800420c96e <print_trapframe>:
  800420c96e:	55                   	push   %rbp
  800420c96f:	48 89 e5             	mov    %rsp,%rbp
  800420c972:	48 83 ec 20          	sub    $0x20,%rsp
  800420c976:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420c97a:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420c981:	00 00 00 
  800420c984:	ff d0                	callq  *%rax
  800420c986:	89 c2                	mov    %eax,%edx
  800420c988:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c98c:	48 89 c6             	mov    %rax,%rsi
  800420c98f:	48 bf ae f2 21 04 80 	movabs $0x800421f2ae,%rdi
  800420c996:	00 00 00 
  800420c999:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c99e:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420c9a5:	00 00 00 
  800420c9a8:	ff d1                	callq  *%rcx
  800420c9aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9ae:	48 89 c7             	mov    %rax,%rdi
  800420c9b1:	48 b8 7f cc 20 04 80 	movabs $0x800420cc7f,%rax
  800420c9b8:	00 00 00 
  800420c9bb:	ff d0                	callq  *%rax
  800420c9bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9c1:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800420c9c5:	0f b7 c0             	movzwl %ax,%eax
  800420c9c8:	89 c6                	mov    %eax,%esi
  800420c9ca:	48 bf cc f2 21 04 80 	movabs $0x800421f2cc,%rdi
  800420c9d1:	00 00 00 
  800420c9d4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420c9d9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420c9e0:	00 00 00 
  800420c9e3:	ff d2                	callq  *%rdx
  800420c9e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420c9e9:	0f b7 80 80 00 00 00 	movzwl 0x80(%rax),%eax
  800420c9f0:	0f b7 c0             	movzwl %ax,%eax
  800420c9f3:	89 c6                	mov    %eax,%esi
  800420c9f5:	48 bf df f2 21 04 80 	movabs $0x800421f2df,%rdi
  800420c9fc:	00 00 00 
  800420c9ff:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca04:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca0b:	00 00 00 
  800420ca0e:	ff d2                	callq  *%rdx
  800420ca10:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca14:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca1b:	89 c7                	mov    %eax,%edi
  800420ca1d:	48 b8 90 9d 20 04 80 	movabs $0x8004209d90,%rax
  800420ca24:	00 00 00 
  800420ca27:	ff d0                	callq  *%rax
  800420ca29:	48 89 c2             	mov    %rax,%rdx
  800420ca2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca30:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca37:	48 89 c6             	mov    %rax,%rsi
  800420ca3a:	48 bf f2 f2 21 04 80 	movabs $0x800421f2f2,%rdi
  800420ca41:	00 00 00 
  800420ca44:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca49:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420ca50:	00 00 00 
  800420ca53:	ff d1                	callq  *%rcx
  800420ca55:	48 b8 90 f2 4d 04 80 	movabs $0x80044df290,%rax
  800420ca5c:	00 00 00 
  800420ca5f:	48 8b 00             	mov    (%rax),%rax
  800420ca62:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800420ca66:	75 3a                	jne    800420caa2 <print_trapframe+0x134>
  800420ca68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ca6c:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420ca73:	48 83 f8 0e          	cmp    $0xe,%rax
  800420ca77:	75 29                	jne    800420caa2 <print_trapframe+0x134>

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420ca79:	0f 20 d0             	mov    %cr2,%rax
  800420ca7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return val;
  800420ca80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ca84:	48 89 c6             	mov    %rax,%rsi
  800420ca87:	48 bf 04 f3 21 04 80 	movabs $0x800421f304,%rdi
  800420ca8e:	00 00 00 
  800420ca91:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ca96:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ca9d:	00 00 00 
  800420caa0:	ff d2                	callq  *%rdx
  800420caa2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420caa6:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caad:	48 89 c6             	mov    %rax,%rsi
  800420cab0:	48 bf 13 f3 21 04 80 	movabs $0x800421f313,%rdi
  800420cab7:	00 00 00 
  800420caba:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cabf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cac6:	00 00 00 
  800420cac9:	ff d2                	callq  *%rdx
  800420cacb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cacf:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cad6:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cada:	0f 85 9c 00 00 00    	jne    800420cb7c <print_trapframe+0x20e>
  800420cae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cae4:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420caeb:	83 e0 01             	and    $0x1,%eax
  800420caee:	48 85 c0             	test   %rax,%rax
  800420caf1:	74 0c                	je     800420caff <print_trapframe+0x191>
  800420caf3:	48 b9 21 f3 21 04 80 	movabs $0x800421f321,%rcx
  800420cafa:	00 00 00 
  800420cafd:	eb 0a                	jmp    800420cb09 <print_trapframe+0x19b>
  800420caff:	48 b9 2c f3 21 04 80 	movabs $0x800421f32c,%rcx
  800420cb06:	00 00 00 
  800420cb09:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb0d:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb14:	83 e0 02             	and    $0x2,%eax
  800420cb17:	48 85 c0             	test   %rax,%rax
  800420cb1a:	74 0c                	je     800420cb28 <print_trapframe+0x1ba>
  800420cb1c:	48 ba 38 f3 21 04 80 	movabs $0x800421f338,%rdx
  800420cb23:	00 00 00 
  800420cb26:	eb 0a                	jmp    800420cb32 <print_trapframe+0x1c4>
  800420cb28:	48 ba 3e f3 21 04 80 	movabs $0x800421f33e,%rdx
  800420cb2f:	00 00 00 
  800420cb32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb36:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
  800420cb3d:	83 e0 04             	and    $0x4,%eax
  800420cb40:	48 85 c0             	test   %rax,%rax
  800420cb43:	74 0c                	je     800420cb51 <print_trapframe+0x1e3>
  800420cb45:	48 b8 43 f3 21 04 80 	movabs $0x800421f343,%rax
  800420cb4c:	00 00 00 
  800420cb4f:	eb 0a                	jmp    800420cb5b <print_trapframe+0x1ed>
  800420cb51:	48 b8 48 f3 21 04 80 	movabs $0x800421f348,%rax
  800420cb58:	00 00 00 
  800420cb5b:	48 89 c6             	mov    %rax,%rsi
  800420cb5e:	48 bf 4f f3 21 04 80 	movabs $0x800421f34f,%rdi
  800420cb65:	00 00 00 
  800420cb68:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb6d:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420cb74:	00 00 00 
  800420cb77:	41 ff d0             	callq  *%r8
  800420cb7a:	eb 1b                	jmp    800420cb97 <print_trapframe+0x229>
  800420cb7c:	48 bf 5e f3 21 04 80 	movabs $0x800421f35e,%rdi
  800420cb83:	00 00 00 
  800420cb86:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cb8b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cb92:	00 00 00 
  800420cb95:	ff d2                	callq  *%rdx
  800420cb97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cb9b:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800420cba2:	48 89 c6             	mov    %rax,%rsi
  800420cba5:	48 bf 60 f3 21 04 80 	movabs $0x800421f360,%rdi
  800420cbac:	00 00 00 
  800420cbaf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbb4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbbb:	00 00 00 
  800420cbbe:	ff d2                	callq  *%rdx
  800420cbc0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbc4:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cbcb:	0f b7 c0             	movzwl %ax,%eax
  800420cbce:	89 c6                	mov    %eax,%esi
  800420cbd0:	48 bf 6f f3 21 04 80 	movabs $0x800421f36f,%rdi
  800420cbd7:	00 00 00 
  800420cbda:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cbdf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cbe6:	00 00 00 
  800420cbe9:	ff d2                	callq  *%rdx
  800420cbeb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cbef:	48 8b 80 a8 00 00 00 	mov    0xa8(%rax),%rax
  800420cbf6:	48 89 c6             	mov    %rax,%rsi
  800420cbf9:	48 bf 82 f3 21 04 80 	movabs $0x800421f382,%rdi
  800420cc00:	00 00 00 
  800420cc03:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc08:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc0f:	00 00 00 
  800420cc12:	ff d2                	callq  *%rdx
  800420cc14:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc18:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420cc1f:	0f b7 c0             	movzwl %ax,%eax
  800420cc22:	83 e0 03             	and    $0x3,%eax
  800420cc25:	85 c0                	test   %eax,%eax
  800420cc27:	74 54                	je     800420cc7d <print_trapframe+0x30f>
  800420cc29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc2d:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420cc34:	48 89 c6             	mov    %rax,%rsi
  800420cc37:	48 bf 91 f3 21 04 80 	movabs $0x800421f391,%rdi
  800420cc3e:	00 00 00 
  800420cc41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc4d:	00 00 00 
  800420cc50:	ff d2                	callq  *%rdx
  800420cc52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420cc56:	0f b7 80 b8 00 00 00 	movzwl 0xb8(%rax),%eax
  800420cc5d:	0f b7 c0             	movzwl %ax,%eax
  800420cc60:	89 c6                	mov    %eax,%esi
  800420cc62:	48 bf a0 f3 21 04 80 	movabs $0x800421f3a0,%rdi
  800420cc69:	00 00 00 
  800420cc6c:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cc71:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cc78:	00 00 00 
  800420cc7b:	ff d2                	callq  *%rdx
  800420cc7d:	c9                   	leaveq 
  800420cc7e:	c3                   	retq   

000000800420cc7f <print_regs>:
  800420cc7f:	55                   	push   %rbp
  800420cc80:	48 89 e5             	mov    %rsp,%rbp
  800420cc83:	48 83 ec 10          	sub    $0x10,%rsp
  800420cc87:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420cc8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cc8f:	48 8b 00             	mov    (%rax),%rax
  800420cc92:	48 89 c6             	mov    %rax,%rsi
  800420cc95:	48 bf b3 f3 21 04 80 	movabs $0x800421f3b3,%rdi
  800420cc9c:	00 00 00 
  800420cc9f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cca4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccab:	00 00 00 
  800420ccae:	ff d2                	callq  *%rdx
  800420ccb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccb4:	48 8b 40 08          	mov    0x8(%rax),%rax
  800420ccb8:	48 89 c6             	mov    %rax,%rsi
  800420ccbb:	48 bf c2 f3 21 04 80 	movabs $0x800421f3c2,%rdi
  800420ccc2:	00 00 00 
  800420ccc5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccca:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccd1:	00 00 00 
  800420ccd4:	ff d2                	callq  *%rdx
  800420ccd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ccda:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420ccde:	48 89 c6             	mov    %rax,%rsi
  800420cce1:	48 bf d1 f3 21 04 80 	movabs $0x800421f3d1,%rdi
  800420cce8:	00 00 00 
  800420cceb:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ccf0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ccf7:	00 00 00 
  800420ccfa:	ff d2                	callq  *%rdx
  800420ccfc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd00:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420cd04:	48 89 c6             	mov    %rax,%rsi
  800420cd07:	48 bf e0 f3 21 04 80 	movabs $0x800421f3e0,%rdi
  800420cd0e:	00 00 00 
  800420cd11:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd16:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd1d:	00 00 00 
  800420cd20:	ff d2                	callq  *%rdx
  800420cd22:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd26:	48 8b 40 20          	mov    0x20(%rax),%rax
  800420cd2a:	48 89 c6             	mov    %rax,%rsi
  800420cd2d:	48 bf ef f3 21 04 80 	movabs $0x800421f3ef,%rdi
  800420cd34:	00 00 00 
  800420cd37:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd3c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd43:	00 00 00 
  800420cd46:	ff d2                	callq  *%rdx
  800420cd48:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd4c:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420cd50:	48 89 c6             	mov    %rax,%rsi
  800420cd53:	48 bf fe f3 21 04 80 	movabs $0x800421f3fe,%rdi
  800420cd5a:	00 00 00 
  800420cd5d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd62:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd69:	00 00 00 
  800420cd6c:	ff d2                	callq  *%rdx
  800420cd6e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd72:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420cd76:	48 89 c6             	mov    %rax,%rsi
  800420cd79:	48 bf 0d f4 21 04 80 	movabs $0x800421f40d,%rdi
  800420cd80:	00 00 00 
  800420cd83:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cd88:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cd8f:	00 00 00 
  800420cd92:	ff d2                	callq  *%rdx
  800420cd94:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cd98:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420cd9c:	48 89 c6             	mov    %rax,%rsi
  800420cd9f:	48 bf 1b f4 21 04 80 	movabs $0x800421f41b,%rdi
  800420cda6:	00 00 00 
  800420cda9:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdae:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cdb5:	00 00 00 
  800420cdb8:	ff d2                	callq  *%rdx
  800420cdba:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cdbe:	48 8b 40 48          	mov    0x48(%rax),%rax
  800420cdc2:	48 89 c6             	mov    %rax,%rsi
  800420cdc5:	48 bf 29 f4 21 04 80 	movabs $0x800421f429,%rdi
  800420cdcc:	00 00 00 
  800420cdcf:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdd4:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cddb:	00 00 00 
  800420cdde:	ff d2                	callq  *%rdx
  800420cde0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cde4:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420cde8:	48 89 c6             	mov    %rax,%rsi
  800420cdeb:	48 bf 38 f4 21 04 80 	movabs $0x800421f438,%rdi
  800420cdf2:	00 00 00 
  800420cdf5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cdfa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce01:	00 00 00 
  800420ce04:	ff d2                	callq  *%rdx
  800420ce06:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce0a:	48 8b 40 50          	mov    0x50(%rax),%rax
  800420ce0e:	48 89 c6             	mov    %rax,%rsi
  800420ce11:	48 bf 47 f4 21 04 80 	movabs $0x800421f447,%rdi
  800420ce18:	00 00 00 
  800420ce1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce20:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce27:	00 00 00 
  800420ce2a:	ff d2                	callq  *%rdx
  800420ce2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce30:	48 8b 40 68          	mov    0x68(%rax),%rax
  800420ce34:	48 89 c6             	mov    %rax,%rsi
  800420ce37:	48 bf 56 f4 21 04 80 	movabs $0x800421f456,%rdi
  800420ce3e:	00 00 00 
  800420ce41:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce4d:	00 00 00 
  800420ce50:	ff d2                	callq  *%rdx
  800420ce52:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce56:	48 8b 40 58          	mov    0x58(%rax),%rax
  800420ce5a:	48 89 c6             	mov    %rax,%rsi
  800420ce5d:	48 bf 65 f4 21 04 80 	movabs $0x800421f465,%rdi
  800420ce64:	00 00 00 
  800420ce67:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce6c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce73:	00 00 00 
  800420ce76:	ff d2                	callq  *%rdx
  800420ce78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ce7c:	48 8b 40 60          	mov    0x60(%rax),%rax
  800420ce80:	48 89 c6             	mov    %rax,%rsi
  800420ce83:	48 bf 74 f4 21 04 80 	movabs $0x800421f474,%rdi
  800420ce8a:	00 00 00 
  800420ce8d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ce92:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420ce99:	00 00 00 
  800420ce9c:	ff d2                	callq  *%rdx
  800420ce9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cea2:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cea6:	48 89 c6             	mov    %rax,%rsi
  800420cea9:	48 bf 83 f4 21 04 80 	movabs $0x800421f483,%rdi
  800420ceb0:	00 00 00 
  800420ceb3:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ceb8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cebf:	00 00 00 
  800420cec2:	ff d2                	callq  *%rdx
  800420cec4:	c9                   	leaveq 
  800420cec5:	c3                   	retq   

000000800420cec6 <trap_dispatch>:
  800420cec6:	55                   	push   %rbp
  800420cec7:	48 89 e5             	mov    %rsp,%rbp
  800420ceca:	48 83 ec 10          	sub    $0x10,%rsp
  800420cece:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ced2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ced6:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cedd:	48 83 f8 0e          	cmp    $0xe,%rax
  800420cee1:	75 18                	jne    800420cefb <trap_dispatch+0x35>
  800420cee3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cee7:	48 89 c7             	mov    %rax,%rdi
  800420ceea:	48 b8 44 d4 20 04 80 	movabs $0x800420d444,%rax
  800420cef1:	00 00 00 
  800420cef4:	ff d0                	callq  *%rax
  800420cef6:	e9 ea 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cefb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ceff:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf06:	48 83 f8 30          	cmp    $0x30,%rax
  800420cf0a:	75 55                	jne    800420cf61 <trap_dispatch+0x9b>
  800420cf0c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf10:	4c 8b 40 40          	mov    0x40(%rax),%r8
  800420cf14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf18:	48 8b 78 48          	mov    0x48(%rax),%rdi
  800420cf1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf20:	48 8b 48 68          	mov    0x68(%rax),%rcx
  800420cf24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf28:	48 8b 50 60          	mov    0x60(%rax),%rdx
  800420cf2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf30:	48 8b 70 58          	mov    0x58(%rax),%rsi
  800420cf34:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf38:	48 8b 40 70          	mov    0x70(%rax),%rax
  800420cf3c:	4d 89 c1             	mov    %r8,%r9
  800420cf3f:	49 89 f8             	mov    %rdi,%r8
  800420cf42:	48 89 c7             	mov    %rax,%rdi
  800420cf45:	48 b8 79 ed 20 04 80 	movabs $0x800420ed79,%rax
  800420cf4c:	00 00 00 
  800420cf4f:	ff d0                	callq  *%rax
  800420cf51:	48 89 c2             	mov    %rax,%rdx
  800420cf54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf58:	48 89 50 70          	mov    %rdx,0x70(%rax)
  800420cf5c:	e9 84 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf65:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf6c:	48 83 f8 03          	cmp    $0x3,%rax
  800420cf70:	75 18                	jne    800420cf8a <trap_dispatch+0xc4>
  800420cf72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf76:	48 89 c7             	mov    %rax,%rdi
  800420cf79:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420cf80:	00 00 00 
  800420cf83:	ff d0                	callq  *%rax
  800420cf85:	e9 5b 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cf8a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cf8e:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cf95:	48 83 f8 27          	cmp    $0x27,%rax
  800420cf99:	75 33                	jne    800420cfce <trap_dispatch+0x108>
  800420cf9b:	48 bf 92 f4 21 04 80 	movabs $0x800421f492,%rdi
  800420cfa2:	00 00 00 
  800420cfa5:	b8 00 00 00 00       	mov    $0x0,%eax
  800420cfaa:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420cfb1:	00 00 00 
  800420cfb4:	ff d2                	callq  *%rdx
  800420cfb6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfba:	48 89 c7             	mov    %rax,%rdi
  800420cfbd:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420cfc4:	00 00 00 
  800420cfc7:	ff d0                	callq  *%rax
  800420cfc9:	e9 17 01 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420cfce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420cfd2:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420cfd9:	48 83 f8 20          	cmp    $0x20,%rax
  800420cfdd:	75 34                	jne    800420d013 <trap_dispatch+0x14d>
  800420cfdf:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420cfe6:	00 00 00 
  800420cfe9:	ff d0                	callq  *%rax
  800420cfeb:	85 c0                	test   %eax,%eax
  800420cfed:	75 0c                	jne    800420cffb <trap_dispatch+0x135>
  800420cfef:	48 b8 e6 93 21 04 80 	movabs $0x80042193e6,%rax
  800420cff6:	00 00 00 
  800420cff9:	ff d0                	callq  *%rax
  800420cffb:	48 b8 df 7b 21 04 80 	movabs $0x8004217bdf,%rax
  800420d002:	00 00 00 
  800420d005:	ff d0                	callq  *%rax
  800420d007:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  800420d00e:	00 00 00 
  800420d011:	ff d0                	callq  *%rax
  800420d013:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d017:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d01e:	48 83 f8 21          	cmp    $0x21,%rax
  800420d022:	75 11                	jne    800420d035 <trap_dispatch+0x16f>
  800420d024:	48 b8 cc 0f 20 04 80 	movabs $0x8004200fcc,%rax
  800420d02b:	00 00 00 
  800420d02e:	ff d0                	callq  *%rax
  800420d030:	e9 b0 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d035:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d039:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  800420d040:	48 83 f8 24          	cmp    $0x24,%rax
  800420d044:	75 11                	jne    800420d057 <trap_dispatch+0x191>
  800420d046:	48 b8 7d 07 20 04 80 	movabs $0x800420077d,%rax
  800420d04d:	00 00 00 
  800420d050:	ff d0                	callq  *%rax
  800420d052:	e9 8e 00 00 00       	jmpq   800420d0e5 <trap_dispatch+0x21f>
  800420d057:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d05b:	48 89 c7             	mov    %rax,%rdi
  800420d05e:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d065:	00 00 00 
  800420d068:	ff d0                	callq  *%rax
  800420d06a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d06e:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d075:	66 83 f8 08          	cmp    $0x8,%ax
  800420d079:	75 2a                	jne    800420d0a5 <trap_dispatch+0x1df>
  800420d07b:	48 ba af f4 21 04 80 	movabs $0x800421f4af,%rdx
  800420d082:	00 00 00 
  800420d085:	be 77 01 00 00       	mov    $0x177,%esi
  800420d08a:	48 bf c8 f4 21 04 80 	movabs $0x800421f4c8,%rdi
  800420d091:	00 00 00 
  800420d094:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d099:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d0a0:	00 00 00 
  800420d0a3:	ff d1                	callq  *%rcx
  800420d0a5:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d0ac:	00 00 00 
  800420d0af:	ff d0                	callq  *%rax
  800420d0b1:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d0b8:	00 00 00 
  800420d0bb:	48 98                	cltq   
  800420d0bd:	48 c1 e0 03          	shl    $0x3,%rax
  800420d0c1:	48 89 c1             	mov    %rax,%rcx
  800420d0c4:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d0c8:	48 01 c8             	add    %rcx,%rax
  800420d0cb:	48 01 d0             	add    %rdx,%rax
  800420d0ce:	48 83 c0 08          	add    $0x8,%rax
  800420d0d2:	48 8b 00             	mov    (%rax),%rax
  800420d0d5:	48 89 c7             	mov    %rax,%rdi
  800420d0d8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d0df:	00 00 00 
  800420d0e2:	ff d0                	callq  *%rax
  800420d0e4:	90                   	nop
  800420d0e5:	c9                   	leaveq 
  800420d0e6:	c3                   	retq   

000000800420d0e7 <trap>:
  800420d0e7:	55                   	push   %rbp
  800420d0e8:	48 89 e5             	mov    %rsp,%rbp
  800420d0eb:	48 83 ec 20          	sub    $0x20,%rsp
  800420d0ef:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d0f3:	fc                   	cld    
  800420d0f4:	48 b8 d8 d5 6d 04 80 	movabs $0x80046dd5d8,%rax
  800420d0fb:	00 00 00 
  800420d0fe:	48 8b 00             	mov    (%rax),%rax
  800420d101:	48 85 c0             	test   %rax,%rax
  800420d104:	74 01                	je     800420d107 <trap+0x20>
  800420d106:	f4                   	hlt    
  800420d107:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d10e:	00 00 00 
  800420d111:	ff d0                	callq  *%rax
  800420d113:	48 98                	cltq   
  800420d115:	48 c1 e0 03          	shl    $0x3,%rax
  800420d119:	48 89 c2             	mov    %rax,%rdx
  800420d11c:	48 c1 e2 04          	shl    $0x4,%rdx
  800420d120:	48 01 d0             	add    %rdx,%rax
  800420d123:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d12a:	00 00 00 
  800420d12d:	48 01 d0             	add    %rdx,%rax
  800420d130:	48 83 c0 04          	add    $0x4,%rax
  800420d134:	be 01 00 00 00       	mov    $0x1,%esi
  800420d139:	48 89 c7             	mov    %rax,%rdi
  800420d13c:	48 b8 4f 9d 20 04 80 	movabs $0x8004209d4f,%rax
  800420d143:	00 00 00 
  800420d146:	ff d0                	callq  *%rax
  800420d148:	83 f8 02             	cmp    $0x2,%eax
  800420d14b:	75 0c                	jne    800420d159 <trap+0x72>
  800420d14d:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d154:	00 00 00 
  800420d157:	ff d0                	callq  *%rax

static __inline uint64_t
read_eflags(void)
{
	uint64_t rflags;
	__asm __volatile("pushfq; popq %0" : "=r" (rflags));
  800420d159:	9c                   	pushfq 
  800420d15a:	58                   	pop    %rax
  800420d15b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	return rflags;
  800420d15f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420d163:	25 00 02 00 00       	and    $0x200,%eax
  800420d168:	48 85 c0             	test   %rax,%rax
  800420d16b:	74 35                	je     800420d1a2 <trap+0xbb>
  800420d16d:	48 b9 d7 f4 21 04 80 	movabs $0x800421f4d7,%rcx
  800420d174:	00 00 00 
  800420d177:	48 ba f0 f4 21 04 80 	movabs $0x800421f4f0,%rdx
  800420d17e:	00 00 00 
  800420d181:	be 94 01 00 00       	mov    $0x194,%esi
  800420d186:	48 bf c8 f4 21 04 80 	movabs $0x800421f4c8,%rdi
  800420d18d:	00 00 00 
  800420d190:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d195:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d19c:	00 00 00 
  800420d19f:	41 ff d0             	callq  *%r8
  800420d1a2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d1a6:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d1ad:	0f b7 c0             	movzwl %ax,%eax
  800420d1b0:	83 e0 03             	and    $0x3,%eax
  800420d1b3:	83 f8 03             	cmp    $0x3,%eax
  800420d1b6:	0f 85 a9 01 00 00    	jne    800420d365 <trap+0x27e>
  800420d1bc:	48 b8 74 9d 20 04 80 	movabs $0x8004209d74,%rax
  800420d1c3:	00 00 00 
  800420d1c6:	ff d0                	callq  *%rax
  800420d1c8:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d1cf:	00 00 00 
  800420d1d2:	ff d0                	callq  *%rax
  800420d1d4:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d1db:	00 00 00 
  800420d1de:	48 98                	cltq   
  800420d1e0:	48 c1 e0 03          	shl    $0x3,%rax
  800420d1e4:	48 89 c1             	mov    %rax,%rcx
  800420d1e7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d1eb:	48 01 c8             	add    %rcx,%rax
  800420d1ee:	48 01 d0             	add    %rdx,%rax
  800420d1f1:	48 83 c0 08          	add    $0x8,%rax
  800420d1f5:	48 8b 00             	mov    (%rax),%rax
  800420d1f8:	48 85 c0             	test   %rax,%rax
  800420d1fb:	75 35                	jne    800420d232 <trap+0x14b>
  800420d1fd:	48 b9 05 f5 21 04 80 	movabs $0x800421f505,%rcx
  800420d204:	00 00 00 
  800420d207:	48 ba f0 f4 21 04 80 	movabs $0x800421f4f0,%rdx
  800420d20e:	00 00 00 
  800420d211:	be a5 01 00 00       	mov    $0x1a5,%esi
  800420d216:	48 bf c8 f4 21 04 80 	movabs $0x800421f4c8,%rdi
  800420d21d:	00 00 00 
  800420d220:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d225:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420d22c:	00 00 00 
  800420d22f:	41 ff d0             	callq  *%r8
  800420d232:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d239:	00 00 00 
  800420d23c:	ff d0                	callq  *%rax
  800420d23e:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d245:	00 00 00 
  800420d248:	48 98                	cltq   
  800420d24a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d24e:	48 89 c1             	mov    %rax,%rcx
  800420d251:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d255:	48 01 c8             	add    %rcx,%rax
  800420d258:	48 01 d0             	add    %rdx,%rax
  800420d25b:	48 83 c0 08          	add    $0x8,%rax
  800420d25f:	48 8b 00             	mov    (%rax),%rax
  800420d262:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d268:	83 f8 01             	cmp    $0x1,%eax
  800420d26b:	75 7f                	jne    800420d2ec <trap+0x205>
  800420d26d:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d274:	00 00 00 
  800420d277:	ff d0                	callq  *%rax
  800420d279:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d280:	00 00 00 
  800420d283:	48 98                	cltq   
  800420d285:	48 c1 e0 03          	shl    $0x3,%rax
  800420d289:	48 89 c1             	mov    %rax,%rcx
  800420d28c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d290:	48 01 c8             	add    %rcx,%rax
  800420d293:	48 01 d0             	add    %rdx,%rax
  800420d296:	48 83 c0 08          	add    $0x8,%rax
  800420d29a:	48 8b 00             	mov    (%rax),%rax
  800420d29d:	48 89 c7             	mov    %rax,%rdi
  800420d2a0:	48 b8 5a 90 20 04 80 	movabs $0x800420905a,%rax
  800420d2a7:	00 00 00 
  800420d2aa:	ff d0                	callq  *%rax
  800420d2ac:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d2b3:	00 00 00 
  800420d2b6:	ff d0                	callq  *%rax
  800420d2b8:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d2bf:	00 00 00 
  800420d2c2:	48 98                	cltq   
  800420d2c4:	48 c1 e0 03          	shl    $0x3,%rax
  800420d2c8:	48 89 c1             	mov    %rax,%rcx
  800420d2cb:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d2cf:	48 01 c8             	add    %rcx,%rax
  800420d2d2:	48 01 d0             	add    %rdx,%rax
  800420d2d5:	48 83 c0 08          	add    $0x8,%rax
  800420d2d9:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420d2e0:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  800420d2e7:	00 00 00 
  800420d2ea:	ff d0                	callq  *%rax
  800420d2ec:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d2f3:	00 00 00 
  800420d2f6:	ff d0                	callq  *%rax
  800420d2f8:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d2ff:	00 00 00 
  800420d302:	48 98                	cltq   
  800420d304:	48 c1 e0 03          	shl    $0x3,%rax
  800420d308:	48 89 c1             	mov    %rax,%rcx
  800420d30b:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d30f:	48 01 c8             	add    %rcx,%rax
  800420d312:	48 01 d0             	add    %rdx,%rax
  800420d315:	48 83 c0 08          	add    $0x8,%rax
  800420d319:	48 8b 10             	mov    (%rax),%rdx
  800420d31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d320:	48 89 c6             	mov    %rax,%rsi
  800420d323:	b8 18 00 00 00       	mov    $0x18,%eax
  800420d328:	48 89 d7             	mov    %rdx,%rdi
  800420d32b:	48 89 c1             	mov    %rax,%rcx
  800420d32e:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
  800420d331:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d338:	00 00 00 
  800420d33b:	ff d0                	callq  *%rax
  800420d33d:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d344:	00 00 00 
  800420d347:	48 98                	cltq   
  800420d349:	48 c1 e0 03          	shl    $0x3,%rax
  800420d34d:	48 89 c1             	mov    %rax,%rcx
  800420d350:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d354:	48 01 c8             	add    %rcx,%rax
  800420d357:	48 01 d0             	add    %rdx,%rax
  800420d35a:	48 83 c0 08          	add    $0x8,%rax
  800420d35e:	48 8b 00             	mov    (%rax),%rax
  800420d361:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d365:	48 b8 90 f2 4d 04 80 	movabs $0x80044df290,%rax
  800420d36c:	00 00 00 
  800420d36f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d373:	48 89 10             	mov    %rdx,(%rax)
  800420d376:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d37a:	48 89 c7             	mov    %rax,%rdi
  800420d37d:	48 b8 c6 ce 20 04 80 	movabs $0x800420cec6,%rax
  800420d384:	00 00 00 
  800420d387:	ff d0                	callq  *%rax
  800420d389:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d390:	00 00 00 
  800420d393:	ff d0                	callq  *%rax
  800420d395:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d39c:	00 00 00 
  800420d39f:	48 98                	cltq   
  800420d3a1:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3a5:	48 89 c1             	mov    %rax,%rcx
  800420d3a8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3ac:	48 01 c8             	add    %rcx,%rax
  800420d3af:	48 01 d0             	add    %rdx,%rax
  800420d3b2:	48 83 c0 08          	add    $0x8,%rax
  800420d3b6:	48 8b 00             	mov    (%rax),%rax
  800420d3b9:	48 85 c0             	test   %rax,%rax
  800420d3bc:	74 7a                	je     800420d438 <trap+0x351>
  800420d3be:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d3c5:	00 00 00 
  800420d3c8:	ff d0                	callq  *%rax
  800420d3ca:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d3d1:	00 00 00 
  800420d3d4:	48 98                	cltq   
  800420d3d6:	48 c1 e0 03          	shl    $0x3,%rax
  800420d3da:	48 89 c1             	mov    %rax,%rcx
  800420d3dd:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d3e1:	48 01 c8             	add    %rcx,%rax
  800420d3e4:	48 01 d0             	add    %rdx,%rax
  800420d3e7:	48 83 c0 08          	add    $0x8,%rax
  800420d3eb:	48 8b 00             	mov    (%rax),%rax
  800420d3ee:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420d3f4:	83 f8 03             	cmp    $0x3,%eax
  800420d3f7:	75 3f                	jne    800420d438 <trap+0x351>
  800420d3f9:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d400:	00 00 00 
  800420d403:	ff d0                	callq  *%rax
  800420d405:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d40c:	00 00 00 
  800420d40f:	48 98                	cltq   
  800420d411:	48 c1 e0 03          	shl    $0x3,%rax
  800420d415:	48 89 c1             	mov    %rax,%rcx
  800420d418:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d41c:	48 01 c8             	add    %rcx,%rax
  800420d41f:	48 01 d0             	add    %rdx,%rax
  800420d422:	48 83 c0 08          	add    $0x8,%rax
  800420d426:	48 8b 00             	mov    (%rax),%rax
  800420d429:	48 89 c7             	mov    %rax,%rdi
  800420d42c:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d433:	00 00 00 
  800420d436:	ff d0                	callq  *%rax
  800420d438:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  800420d43f:	00 00 00 
  800420d442:	ff d0                	callq  *%rax

000000800420d444 <page_fault_handler>:
  800420d444:	55                   	push   %rbp
  800420d445:	48 89 e5             	mov    %rsp,%rbp
  800420d448:	53                   	push   %rbx
  800420d449:	48 83 ec 38          	sub    $0x38,%rsp
  800420d44d:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

static __inline uint64_t
rcr2(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr2,%0" : "=r" (val));
  800420d451:	0f 20 d0             	mov    %cr2,%rax
  800420d454:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	return val;
  800420d458:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420d45c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420d460:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d464:	0f b7 80 a0 00 00 00 	movzwl 0xa0(%rax),%eax
  800420d46b:	0f b7 c0             	movzwl %ax,%eax
  800420d46e:	83 e0 03             	and    $0x3,%eax
  800420d471:	85 c0                	test   %eax,%eax
  800420d473:	75 3d                	jne    800420d4b2 <page_fault_handler+0x6e>
  800420d475:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d479:	48 89 c7             	mov    %rax,%rdi
  800420d47c:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d483:	00 00 00 
  800420d486:	ff d0                	callq  *%rax
  800420d488:	48 ba 0c f5 21 04 80 	movabs $0x800421f50c,%rdx
  800420d48f:	00 00 00 
  800420d492:	be de 01 00 00       	mov    $0x1de,%esi
  800420d497:	48 bf c8 f4 21 04 80 	movabs $0x800421f4c8,%rdi
  800420d49e:	00 00 00 
  800420d4a1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d4a6:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420d4ad:	00 00 00 
  800420d4b0:	ff d1                	callq  *%rcx
  800420d4b2:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d4b9:	00 00 00 
  800420d4bc:	ff d0                	callq  *%rax
  800420d4be:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d4c5:	00 00 00 
  800420d4c8:	48 98                	cltq   
  800420d4ca:	48 c1 e0 03          	shl    $0x3,%rax
  800420d4ce:	48 89 c1             	mov    %rax,%rcx
  800420d4d1:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d4d5:	48 01 c8             	add    %rcx,%rax
  800420d4d8:	48 01 d0             	add    %rdx,%rax
  800420d4db:	48 83 c0 08          	add    $0x8,%rax
  800420d4df:	48 8b 00             	mov    (%rax),%rax
  800420d4e2:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d4e9:	48 85 c0             	test   %rax,%rax
  800420d4ec:	0f 85 b8 00 00 00    	jne    800420d5aa <page_fault_handler+0x166>
  800420d4f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d4f6:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800420d4fd:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d504:	00 00 00 
  800420d507:	ff d0                	callq  *%rax
  800420d509:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d510:	00 00 00 
  800420d513:	48 98                	cltq   
  800420d515:	48 c1 e0 03          	shl    $0x3,%rax
  800420d519:	48 89 c1             	mov    %rax,%rcx
  800420d51c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d520:	48 01 c8             	add    %rcx,%rax
  800420d523:	48 01 d0             	add    %rdx,%rax
  800420d526:	48 83 c0 08          	add    $0x8,%rax
  800420d52a:	48 8b 00             	mov    (%rax),%rax
  800420d52d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420d533:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d537:	48 89 d9             	mov    %rbx,%rcx
  800420d53a:	89 c6                	mov    %eax,%esi
  800420d53c:	48 bf 18 f5 21 04 80 	movabs $0x800421f518,%rdi
  800420d543:	00 00 00 
  800420d546:	b8 00 00 00 00       	mov    $0x0,%eax
  800420d54b:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420d552:	00 00 00 
  800420d555:	41 ff d0             	callq  *%r8
  800420d558:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d55c:	48 89 c7             	mov    %rax,%rdi
  800420d55f:	48 b8 6e c9 20 04 80 	movabs $0x800420c96e,%rax
  800420d566:	00 00 00 
  800420d569:	ff d0                	callq  *%rax
  800420d56b:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d572:	00 00 00 
  800420d575:	ff d0                	callq  *%rax
  800420d577:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d57e:	00 00 00 
  800420d581:	48 98                	cltq   
  800420d583:	48 c1 e0 03          	shl    $0x3,%rax
  800420d587:	48 89 c1             	mov    %rax,%rcx
  800420d58a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d58e:	48 01 c8             	add    %rcx,%rax
  800420d591:	48 01 d0             	add    %rdx,%rax
  800420d594:	48 83 c0 08          	add    $0x8,%rax
  800420d598:	48 8b 00             	mov    (%rax),%rax
  800420d59b:	48 89 c7             	mov    %rax,%rdi
  800420d59e:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420d5a5:	00 00 00 
  800420d5a8:	ff d0                	callq  *%rax
  800420d5aa:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5ae:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5b5:	b8 ff ef 7f ef       	mov    $0xef7fefff,%eax
  800420d5ba:	48 39 c2             	cmp    %rax,%rdx
  800420d5bd:	76 2c                	jbe    800420d5eb <page_fault_handler+0x1a7>
  800420d5bf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5c3:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d5ca:	b8 ff ff 7f ef       	mov    $0xef7fffff,%eax
  800420d5cf:	48 39 c2             	cmp    %rax,%rdx
  800420d5d2:	77 17                	ja     800420d5eb <page_fault_handler+0x1a7>
  800420d5d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d5d8:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800420d5df:	48 2d a8 00 00 00    	sub    $0xa8,%rax
  800420d5e5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5e9:	eb 09                	jmp    800420d5f4 <page_fault_handler+0x1b0>
  800420d5eb:	b8 60 ff 7f ef       	mov    $0xef7fff60,%eax
  800420d5f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420d5f4:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d5fb:	00 00 00 
  800420d5fe:	ff d0                	callq  *%rax
  800420d600:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d607:	00 00 00 
  800420d60a:	48 98                	cltq   
  800420d60c:	48 c1 e0 03          	shl    $0x3,%rax
  800420d610:	48 89 c1             	mov    %rax,%rcx
  800420d613:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d617:	48 01 c8             	add    %rcx,%rax
  800420d61a:	48 01 d0             	add    %rdx,%rax
  800420d61d:	48 83 c0 08          	add    $0x8,%rax
  800420d621:	48 8b 00             	mov    (%rax),%rax
  800420d624:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420d628:	b9 06 00 00 00       	mov    $0x6,%ecx
  800420d62d:	ba a0 00 00 00       	mov    $0xa0,%edx
  800420d632:	48 89 c7             	mov    %rax,%rdi
  800420d635:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420d63c:	00 00 00 
  800420d63f:	ff d0                	callq  *%rax
  800420d641:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d645:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420d649:	48 89 10             	mov    %rdx,(%rax)
  800420d64c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d650:	48 8b 90 90 00 00 00 	mov    0x90(%rax),%rdx
  800420d657:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d65b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420d65f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d663:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800420d667:	48 8b 0a             	mov    (%rdx),%rcx
  800420d66a:	48 89 48 10          	mov    %rcx,0x10(%rax)
  800420d66e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420d672:	48 89 48 18          	mov    %rcx,0x18(%rax)
  800420d676:	48 8b 4a 10          	mov    0x10(%rdx),%rcx
  800420d67a:	48 89 48 20          	mov    %rcx,0x20(%rax)
  800420d67e:	48 8b 4a 18          	mov    0x18(%rdx),%rcx
  800420d682:	48 89 48 28          	mov    %rcx,0x28(%rax)
  800420d686:	48 8b 4a 20          	mov    0x20(%rdx),%rcx
  800420d68a:	48 89 48 30          	mov    %rcx,0x30(%rax)
  800420d68e:	48 8b 4a 28          	mov    0x28(%rdx),%rcx
  800420d692:	48 89 48 38          	mov    %rcx,0x38(%rax)
  800420d696:	48 8b 4a 30          	mov    0x30(%rdx),%rcx
  800420d69a:	48 89 48 40          	mov    %rcx,0x40(%rax)
  800420d69e:	48 8b 4a 38          	mov    0x38(%rdx),%rcx
  800420d6a2:	48 89 48 48          	mov    %rcx,0x48(%rax)
  800420d6a6:	48 8b 4a 40          	mov    0x40(%rdx),%rcx
  800420d6aa:	48 89 48 50          	mov    %rcx,0x50(%rax)
  800420d6ae:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
  800420d6b2:	48 89 48 58          	mov    %rcx,0x58(%rax)
  800420d6b6:	48 8b 4a 50          	mov    0x50(%rdx),%rcx
  800420d6ba:	48 89 48 60          	mov    %rcx,0x60(%rax)
  800420d6be:	48 8b 4a 58          	mov    0x58(%rdx),%rcx
  800420d6c2:	48 89 48 68          	mov    %rcx,0x68(%rax)
  800420d6c6:	48 8b 4a 60          	mov    0x60(%rdx),%rcx
  800420d6ca:	48 89 48 70          	mov    %rcx,0x70(%rax)
  800420d6ce:	48 8b 4a 68          	mov    0x68(%rdx),%rcx
  800420d6d2:	48 89 48 78          	mov    %rcx,0x78(%rax)
  800420d6d6:	48 8b 52 70          	mov    0x70(%rdx),%rdx
  800420d6da:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
  800420d6e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6e5:	48 8b 90 98 00 00 00 	mov    0x98(%rax),%rdx
  800420d6ec:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d6f0:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800420d6f7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d6fb:	48 8b 90 a8 00 00 00 	mov    0xa8(%rax),%rdx
  800420d702:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d706:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  800420d70d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d711:	48 8b 90 b0 00 00 00 	mov    0xb0(%rax),%rdx
  800420d718:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420d71c:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d723:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d72b:	48 89 90 b0 00 00 00 	mov    %rdx,0xb0(%rax)
  800420d732:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d739:	00 00 00 
  800420d73c:	ff d0                	callq  *%rax
  800420d73e:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d745:	00 00 00 
  800420d748:	48 98                	cltq   
  800420d74a:	48 c1 e0 03          	shl    $0x3,%rax
  800420d74e:	48 89 c1             	mov    %rax,%rcx
  800420d751:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d755:	48 01 c8             	add    %rcx,%rax
  800420d758:	48 01 d0             	add    %rdx,%rax
  800420d75b:	48 83 c0 08          	add    $0x8,%rax
  800420d75f:	48 8b 00             	mov    (%rax),%rax
  800420d762:	48 8b 80 f0 00 00 00 	mov    0xf0(%rax),%rax
  800420d769:	48 89 c2             	mov    %rax,%rdx
  800420d76c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420d770:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  800420d777:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d77e:	00 00 00 
  800420d781:	ff d0                	callq  *%rax
  800420d783:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d78a:	00 00 00 
  800420d78d:	48 98                	cltq   
  800420d78f:	48 c1 e0 03          	shl    $0x3,%rax
  800420d793:	48 89 c1             	mov    %rax,%rcx
  800420d796:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d79a:	48 01 c8             	add    %rcx,%rax
  800420d79d:	48 01 d0             	add    %rdx,%rax
  800420d7a0:	48 83 c0 08          	add    $0x8,%rax
  800420d7a4:	48 8b 00             	mov    (%rax),%rax
  800420d7a7:	48 89 c7             	mov    %rax,%rdi
  800420d7aa:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420d7b1:	00 00 00 
  800420d7b4:	ff d0                	callq  *%rax
  800420d7b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  800420d7bd:	00 00 00 

000000800420d7c0 <Xdivide>:

.text


/* CPU traps */
TRAPHANDLER_NOEC(Xdivide, T_DIVIDE)
  800420d7c0:	6a 00                	pushq  $0x0
  800420d7c2:	6a 00                	pushq  $0x0
  800420d7c4:	e9 47 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d7c9:	90                   	nop

000000800420d7ca <Xdebug>:
TRAPHANDLER_NOEC(Xdebug,  T_DEBUG)
  800420d7ca:	6a 00                	pushq  $0x0
  800420d7cc:	6a 01                	pushq  $0x1
  800420d7ce:	e9 3d 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d7d3:	90                   	nop

000000800420d7d4 <Xnmi>:
TRAPHANDLER_NOEC(Xnmi,    T_NMI)
  800420d7d4:	6a 00                	pushq  $0x0
  800420d7d6:	6a 02                	pushq  $0x2
  800420d7d8:	e9 33 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d7dd:	90                   	nop

000000800420d7de <Xbrkpt>:
TRAPHANDLER_NOEC(Xbrkpt,  T_BRKPT)
  800420d7de:	6a 00                	pushq  $0x0
  800420d7e0:	6a 03                	pushq  $0x3
  800420d7e2:	e9 29 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d7e7:	90                   	nop

000000800420d7e8 <Xoflow>:
TRAPHANDLER_NOEC(Xoflow,  T_OFLOW)
  800420d7e8:	6a 00                	pushq  $0x0
  800420d7ea:	6a 04                	pushq  $0x4
  800420d7ec:	e9 1f 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d7f1:	90                   	nop

000000800420d7f2 <Xbound>:
TRAPHANDLER_NOEC(Xbound,  T_BOUND)
  800420d7f2:	6a 00                	pushq  $0x0
  800420d7f4:	6a 05                	pushq  $0x5
  800420d7f6:	e9 15 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d7fb:	90                   	nop

000000800420d7fc <Xillop>:
TRAPHANDLER_NOEC(Xillop,  T_ILLOP)
  800420d7fc:	6a 00                	pushq  $0x0
  800420d7fe:	6a 06                	pushq  $0x6
  800420d800:	e9 0b 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d805:	90                   	nop

000000800420d806 <Xdevice>:
TRAPHANDLER_NOEC(Xdevice, T_DEVICE)
  800420d806:	6a 00                	pushq  $0x0
  800420d808:	6a 07                	pushq  $0x7
  800420d80a:	e9 01 01 00 00       	jmpq   800420d910 <_alltraps>
  800420d80f:	90                   	nop

000000800420d810 <Xdblflt>:
TRAPHANDLER     (Xdblflt, T_DBLFLT)
  800420d810:	6a 08                	pushq  $0x8
  800420d812:	e9 f9 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d817:	90                   	nop

000000800420d818 <Xtss>:
TRAPHANDLER     (Xtss,    T_TSS)
  800420d818:	6a 0a                	pushq  $0xa
  800420d81a:	e9 f1 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d81f:	90                   	nop

000000800420d820 <Xsegnp>:
TRAPHANDLER     (Xsegnp,  T_SEGNP)
  800420d820:	6a 0b                	pushq  $0xb
  800420d822:	e9 e9 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d827:	90                   	nop

000000800420d828 <Xstack>:
TRAPHANDLER     (Xstack,  T_STACK)
  800420d828:	6a 0c                	pushq  $0xc
  800420d82a:	e9 e1 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d82f:	90                   	nop

000000800420d830 <Xgpflt>:
TRAPHANDLER     (Xgpflt,  T_GPFLT)
  800420d830:	6a 0d                	pushq  $0xd
  800420d832:	e9 d9 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d837:	90                   	nop

000000800420d838 <Xpgflt>:
TRAPHANDLER     (Xpgflt,  T_PGFLT)
  800420d838:	6a 0e                	pushq  $0xe
  800420d83a:	e9 d1 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d83f:	90                   	nop

000000800420d840 <Xfperr>:
TRAPHANDLER_NOEC(Xfperr,  T_FPERR)
  800420d840:	6a 00                	pushq  $0x0
  800420d842:	6a 10                	pushq  $0x10
  800420d844:	e9 c7 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d849:	90                   	nop

000000800420d84a <Xalign>:
TRAPHANDLER     (Xalign,  T_ALIGN)
  800420d84a:	6a 11                	pushq  $0x11
  800420d84c:	e9 bf 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d851:	90                   	nop

000000800420d852 <Xmchk>:
TRAPHANDLER_NOEC(Xmchk,   T_MCHK)
  800420d852:	6a 00                	pushq  $0x0
  800420d854:	6a 12                	pushq  $0x12
  800420d856:	e9 b5 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d85b:	90                   	nop

000000800420d85c <Xirq0>:

/* the external device interrupts */
TRAPHANDLER_NOEC(Xirq0,   IRQ_OFFSET+0)
  800420d85c:	6a 00                	pushq  $0x0
  800420d85e:	6a 20                	pushq  $0x20
  800420d860:	e9 ab 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d865:	90                   	nop

000000800420d866 <Xirq1>:
TRAPHANDLER_NOEC(Xirq1,   IRQ_OFFSET+1)
  800420d866:	6a 00                	pushq  $0x0
  800420d868:	6a 21                	pushq  $0x21
  800420d86a:	e9 a1 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d86f:	90                   	nop

000000800420d870 <Xirq2>:
TRAPHANDLER_NOEC(Xirq2,   IRQ_OFFSET+2)
  800420d870:	6a 00                	pushq  $0x0
  800420d872:	6a 22                	pushq  $0x22
  800420d874:	e9 97 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d879:	90                   	nop

000000800420d87a <Xirq3>:
TRAPHANDLER_NOEC(Xirq3,   IRQ_OFFSET+3)
  800420d87a:	6a 00                	pushq  $0x0
  800420d87c:	6a 23                	pushq  $0x23
  800420d87e:	e9 8d 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d883:	90                   	nop

000000800420d884 <Xirq4>:
TRAPHANDLER_NOEC(Xirq4,   IRQ_OFFSET+4)
  800420d884:	6a 00                	pushq  $0x0
  800420d886:	6a 24                	pushq  $0x24
  800420d888:	e9 83 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d88d:	90                   	nop

000000800420d88e <Xirq5>:
TRAPHANDLER_NOEC(Xirq5,   IRQ_OFFSET+5)
  800420d88e:	6a 00                	pushq  $0x0
  800420d890:	6a 25                	pushq  $0x25
  800420d892:	e9 79 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d897:	90                   	nop

000000800420d898 <Xirq6>:
TRAPHANDLER_NOEC(Xirq6,   IRQ_OFFSET+6)
  800420d898:	6a 00                	pushq  $0x0
  800420d89a:	6a 26                	pushq  $0x26
  800420d89c:	e9 6f 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8a1:	90                   	nop

000000800420d8a2 <Xirq7>:
TRAPHANDLER_NOEC(Xirq7,   IRQ_OFFSET+7)
  800420d8a2:	6a 00                	pushq  $0x0
  800420d8a4:	6a 27                	pushq  $0x27
  800420d8a6:	e9 65 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8ab:	90                   	nop

000000800420d8ac <Xirq8>:
TRAPHANDLER_NOEC(Xirq8,   IRQ_OFFSET+8)
  800420d8ac:	6a 00                	pushq  $0x0
  800420d8ae:	6a 28                	pushq  $0x28
  800420d8b0:	e9 5b 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8b5:	90                   	nop

000000800420d8b6 <Xirq9>:
TRAPHANDLER_NOEC(Xirq9,   IRQ_OFFSET+9)
  800420d8b6:	6a 00                	pushq  $0x0
  800420d8b8:	6a 29                	pushq  $0x29
  800420d8ba:	e9 51 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8bf:	90                   	nop

000000800420d8c0 <Xirq10>:
TRAPHANDLER_NOEC(Xirq10,  IRQ_OFFSET+10)
  800420d8c0:	6a 00                	pushq  $0x0
  800420d8c2:	6a 2a                	pushq  $0x2a
  800420d8c4:	e9 47 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8c9:	90                   	nop

000000800420d8ca <Xirq11>:
TRAPHANDLER_NOEC(Xirq11,  IRQ_OFFSET+11)
  800420d8ca:	6a 00                	pushq  $0x0
  800420d8cc:	6a 2b                	pushq  $0x2b
  800420d8ce:	e9 3d 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8d3:	90                   	nop

000000800420d8d4 <Xirq12>:
TRAPHANDLER_NOEC(Xirq12,  IRQ_OFFSET+12)
  800420d8d4:	6a 00                	pushq  $0x0
  800420d8d6:	6a 2c                	pushq  $0x2c
  800420d8d8:	e9 33 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8dd:	90                   	nop

000000800420d8de <Xirq13>:
TRAPHANDLER_NOEC(Xirq13,  IRQ_OFFSET+13)
  800420d8de:	6a 00                	pushq  $0x0
  800420d8e0:	6a 2d                	pushq  $0x2d
  800420d8e2:	e9 29 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8e7:	90                   	nop

000000800420d8e8 <Xirq14>:
TRAPHANDLER_NOEC(Xirq14,  IRQ_OFFSET+14)
  800420d8e8:	6a 00                	pushq  $0x0
  800420d8ea:	6a 2e                	pushq  $0x2e
  800420d8ec:	e9 1f 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8f1:	90                   	nop

000000800420d8f2 <Xirq15>:
TRAPHANDLER_NOEC(Xirq15,  IRQ_OFFSET+15)
  800420d8f2:	6a 00                	pushq  $0x0
  800420d8f4:	6a 2f                	pushq  $0x2f
  800420d8f6:	e9 15 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d8fb:	90                   	nop

000000800420d8fc <Xsyscall>:

/* system call entry point */
TRAPHANDLER_NOEC(Xsyscall, T_SYSCALL)
  800420d8fc:	6a 00                	pushq  $0x0
  800420d8fe:	6a 30                	pushq  $0x30
  800420d900:	e9 0b 00 00 00       	jmpq   800420d910 <_alltraps>
  800420d905:	90                   	nop

000000800420d906 <Xdefault>:

/* default handler -- not for any specific trap */
TRAPHANDLER     (Xdefault, T_DEFAULT)
  800420d906:	68 f4 01 00 00       	pushq  $0x1f4
  800420d90b:	e9 00 00 00 00       	jmpq   800420d910 <_alltraps>

000000800420d910 <_alltraps>:

.globl	_alltraps
.type	_alltraps,@function
.p2align 4, 0x90		/* 16-byte alignment, nop filled */
_alltraps:
    subq $16,%rsp
  800420d910:	48 83 ec 10          	sub    $0x10,%rsp
    movw %ds,8(%rsp)
  800420d914:	8c 5c 24 08          	mov    %ds,0x8(%rsp)
    movw %es,0(%rsp)
  800420d918:	8c 04 24             	mov    %es,(%rsp)
    PUSHA
  800420d91b:	48 83 ec 78          	sub    $0x78,%rsp
  800420d91f:	48 89 44 24 70       	mov    %rax,0x70(%rsp)
  800420d924:	48 89 5c 24 68       	mov    %rbx,0x68(%rsp)
  800420d929:	48 89 4c 24 60       	mov    %rcx,0x60(%rsp)
  800420d92e:	48 89 54 24 58       	mov    %rdx,0x58(%rsp)
  800420d933:	48 89 6c 24 50       	mov    %rbp,0x50(%rsp)
  800420d938:	48 89 7c 24 48       	mov    %rdi,0x48(%rsp)
  800420d93d:	48 89 74 24 40       	mov    %rsi,0x40(%rsp)
  800420d942:	4c 89 44 24 38       	mov    %r8,0x38(%rsp)
  800420d947:	4c 89 4c 24 30       	mov    %r9,0x30(%rsp)
  800420d94c:	4c 89 54 24 28       	mov    %r10,0x28(%rsp)
  800420d951:	4c 89 5c 24 20       	mov    %r11,0x20(%rsp)
  800420d956:	4c 89 64 24 18       	mov    %r12,0x18(%rsp)
  800420d95b:	4c 89 6c 24 10       	mov    %r13,0x10(%rsp)
  800420d960:	4c 89 74 24 08       	mov    %r14,0x8(%rsp)
  800420d965:	4c 89 3c 24          	mov    %r15,(%rsp)
    movl $GD_KD, %eax
  800420d969:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
  800420d96e:	8e d8                	mov    %eax,%ds
    movw %ax, %es
  800420d970:	8e c0                	mov    %eax,%es
    movw %ax, %ss
  800420d972:	8e d0                	mov    %eax,%ss
    movw %ax, %fs
  800420d974:	8e e0                	mov    %eax,%fs
    movw %ax, %gs
  800420d976:	8e e8                	mov    %eax,%gs
    movq %rsp,%rdi
  800420d978:	48 89 e7             	mov    %rsp,%rdi
    call trap   # never returns 
  800420d97b:	e8 67 f7 ff ff       	callq  800420d0e7 <trap>

000000800420d980 <spin>:
spin:	jmp spin
  800420d980:	eb fe                	jmp    800420d980 <spin>

000000800420d982 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  800420d982:	55                   	push   %rbp
  800420d983:	48 89 e5             	mov    %rsp,%rbp
  800420d986:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420d98a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420d98e:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  800420d991:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420d995:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420d998:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420d99c:	f0 87 02             	lock xchg %eax,(%rdx)
  800420d99f:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  800420d9a2:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  800420d9a5:	c9                   	leaveq 
  800420d9a6:	c3                   	retq   

000000800420d9a7 <unlock_kernel>:
  800420d9a7:	55                   	push   %rbp
  800420d9a8:	48 89 e5             	mov    %rsp,%rbp
  800420d9ab:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800420d9b2:	00 00 00 
  800420d9b5:	48 b8 0c 80 21 04 80 	movabs $0x800421800c,%rax
  800420d9bc:	00 00 00 
  800420d9bf:	ff d0                	callq  *%rax
  800420d9c1:	f3 90                	pause  
  800420d9c3:	5d                   	pop    %rbp
  800420d9c4:	c3                   	retq   

000000800420d9c5 <vmxon>:
  800420d9c5:	55                   	push   %rbp
  800420d9c6:	48 89 e5             	mov    %rsp,%rbp
  800420d9c9:	48 83 ec 10          	sub    $0x10,%rsp
  800420d9cd:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420d9d4:	00 00 00 
  800420d9d7:	ff d0                	callq  *%rax
  800420d9d9:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420d9e0:	00 00 00 
  800420d9e3:	48 98                	cltq   
  800420d9e5:	48 c1 e0 03          	shl    $0x3,%rax
  800420d9e9:	48 89 c1             	mov    %rax,%rcx
  800420d9ec:	48 c1 e1 04          	shl    $0x4,%rcx
  800420d9f0:	48 01 c8             	add    %rcx,%rax
  800420d9f3:	48 01 d0             	add    %rdx,%rax
  800420d9f6:	48 83 c0 70          	add    $0x70,%rax
  800420d9fa:	0f b6 40 08          	movzbl 0x8(%rax),%eax
  800420d9fe:	83 f0 01             	xor    $0x1,%eax
  800420da01:	84 c0                	test   %al,%al
  800420da03:	74 5a                	je     800420da5f <vmxon+0x9a>
  800420da05:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da0a:	48 ba e8 ad 21 04 80 	movabs $0x800421ade8,%rdx
  800420da11:	00 00 00 
  800420da14:	ff d2                	callq  *%rdx
  800420da16:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420da19:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420da1d:	79 25                	jns    800420da44 <vmxon+0x7f>
  800420da1f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da22:	89 c6                	mov    %eax,%esi
  800420da24:	48 bf 20 f7 21 04 80 	movabs $0x800421f720,%rdi
  800420da2b:	00 00 00 
  800420da2e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da33:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420da3a:	00 00 00 
  800420da3d:	ff d2                	callq  *%rdx
  800420da3f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420da42:	eb 20                	jmp    800420da64 <vmxon+0x9f>
  800420da44:	48 bf 3b f7 21 04 80 	movabs $0x800421f73b,%rdi
  800420da4b:	00 00 00 
  800420da4e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da53:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420da5a:	00 00 00 
  800420da5d:	ff d2                	callq  *%rdx
  800420da5f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420da64:	c9                   	leaveq 
  800420da65:	c3                   	retq   

000000800420da66 <sched_yield>:
  800420da66:	55                   	push   %rbp
  800420da67:	48 89 e5             	mov    %rsp,%rbp
  800420da6a:	53                   	push   %rbx
  800420da6b:	48 83 ec 18          	sub    $0x18,%rsp
  800420da6f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420da76:	00 00 00 
  800420da79:	ff d0                	callq  *%rax
  800420da7b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420da82:	00 00 00 
  800420da85:	48 98                	cltq   
  800420da87:	48 c1 e0 03          	shl    $0x3,%rax
  800420da8b:	48 89 c1             	mov    %rax,%rcx
  800420da8e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420da92:	48 01 c8             	add    %rcx,%rax
  800420da95:	48 01 d0             	add    %rdx,%rax
  800420da98:	48 83 c0 08          	add    $0x8,%rax
  800420da9c:	48 8b 00             	mov    (%rax),%rax
  800420da9f:	48 85 c0             	test   %rax,%rax
  800420daa2:	74 60                	je     800420db04 <sched_yield+0x9e>
  800420daa4:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420daab:	00 00 00 
  800420daae:	ff d0                	callq  *%rax
  800420dab0:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dab7:	00 00 00 
  800420daba:	48 98                	cltq   
  800420dabc:	48 c1 e0 03          	shl    $0x3,%rax
  800420dac0:	48 89 c1             	mov    %rax,%rcx
  800420dac3:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dac7:	48 01 c8             	add    %rcx,%rax
  800420daca:	48 01 d0             	add    %rdx,%rax
  800420dacd:	48 83 c0 08          	add    $0x8,%rax
  800420dad1:	48 8b 00             	mov    (%rax),%rax
  800420dad4:	48 89 c2             	mov    %rax,%rdx
  800420dad7:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dade:	00 00 00 
  800420dae1:	48 8b 00             	mov    (%rax),%rax
  800420dae4:	48 29 c2             	sub    %rax,%rdx
  800420dae7:	48 89 d0             	mov    %rdx,%rax
  800420daea:	48 c1 f8 03          	sar    $0x3,%rax
  800420daee:	48 89 c2             	mov    %rax,%rdx
  800420daf1:	48 b8 a5 4f fa a4 4f 	movabs $0x4fa4fa4fa4fa4fa5,%rax
  800420daf8:	fa a4 4f 
  800420dafb:	48 0f af c2          	imul   %rdx,%rax
  800420daff:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420db02:	eb 07                	jmp    800420db0b <sched_yield+0xa5>
  800420db04:	c7 45 ec ff 03 00 00 	movl   $0x3ff,-0x14(%rbp)
  800420db0b:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%rbp)
  800420db12:	e9 1b 01 00 00       	jmpq   800420dc32 <sched_yield+0x1cc>
  800420db17:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420db1a:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420db1d:	01 c2                	add    %eax,%edx
  800420db1f:	89 d0                	mov    %edx,%eax
  800420db21:	c1 f8 1f             	sar    $0x1f,%eax
  800420db24:	c1 e8 16             	shr    $0x16,%eax
  800420db27:	01 c2                	add    %eax,%edx
  800420db29:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
  800420db2f:	29 c2                	sub    %eax,%edx
  800420db31:	89 d0                	mov    %edx,%eax
  800420db33:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800420db36:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420db3d:	00 00 00 
  800420db40:	48 8b 10             	mov    (%rax),%rdx
  800420db43:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db46:	48 98                	cltq   
  800420db48:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db4f:	48 01 d0             	add    %rdx,%rax
  800420db52:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420db58:	83 f8 02             	cmp    $0x2,%eax
  800420db5b:	0f 85 cd 00 00 00    	jne    800420dc2e <sched_yield+0x1c8>
  800420db61:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420db68:	00 00 00 
  800420db6b:	48 8b 10             	mov    (%rax),%rdx
  800420db6e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db71:	48 98                	cltq   
  800420db73:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420db7a:	48 01 d0             	add    %rdx,%rax
  800420db7d:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420db83:	83 f8 03             	cmp    $0x3,%eax
  800420db86:	75 7b                	jne    800420dc03 <sched_yield+0x19d>
  800420db88:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420db8f:	00 00 00 
  800420db92:	48 8b 10             	mov    (%rax),%rdx
  800420db95:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420db98:	48 98                	cltq   
  800420db9a:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dba1:	48 01 d0             	add    %rdx,%rax
  800420dba4:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dbaa:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dbb1:	00 00 00 
  800420dbb4:	ff d0                	callq  *%rax
  800420dbb6:	39 c3                	cmp    %eax,%ebx
  800420dbb8:	74 02                	je     800420dbbc <sched_yield+0x156>
  800420dbba:	eb 72                	jmp    800420dc2e <sched_yield+0x1c8>
  800420dbbc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dbc1:	48 ba c5 d9 20 04 80 	movabs $0x800420d9c5,%rdx
  800420dbc8:	00 00 00 
  800420dbcb:	ff d2                	callq  *%rdx
  800420dbcd:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dbd0:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dbd4:	79 2d                	jns    800420dc03 <sched_yield+0x19d>
  800420dbd6:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dbdd:	00 00 00 
  800420dbe0:	48 8b 10             	mov    (%rax),%rdx
  800420dbe3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dbe6:	48 98                	cltq   
  800420dbe8:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dbef:	48 01 d0             	add    %rdx,%rax
  800420dbf2:	48 89 c7             	mov    %rax,%rdi
  800420dbf5:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420dbfc:	00 00 00 
  800420dbff:	ff d0                	callq  *%rax
  800420dc01:	eb 2b                	jmp    800420dc2e <sched_yield+0x1c8>
  800420dc03:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dc0a:	00 00 00 
  800420dc0d:	48 8b 10             	mov    (%rax),%rdx
  800420dc10:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dc13:	48 98                	cltq   
  800420dc15:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dc1c:	48 01 d0             	add    %rdx,%rax
  800420dc1f:	48 89 c7             	mov    %rax,%rdi
  800420dc22:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420dc29:	00 00 00 
  800420dc2c:	ff d0                	callq  *%rax
  800420dc2e:	83 45 e8 01          	addl   $0x1,-0x18(%rbp)
  800420dc32:	81 7d e8 00 04 00 00 	cmpl   $0x400,-0x18(%rbp)
  800420dc39:	0f 8e d8 fe ff ff    	jle    800420db17 <sched_yield+0xb1>
  800420dc3f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dc46:	00 00 00 
  800420dc49:	ff d0                	callq  *%rax
  800420dc4b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dc52:	00 00 00 
  800420dc55:	48 98                	cltq   
  800420dc57:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc5b:	48 89 c1             	mov    %rax,%rcx
  800420dc5e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc62:	48 01 c8             	add    %rcx,%rax
  800420dc65:	48 01 d0             	add    %rdx,%rax
  800420dc68:	48 83 c0 08          	add    $0x8,%rax
  800420dc6c:	48 8b 00             	mov    (%rax),%rax
  800420dc6f:	48 85 c0             	test   %rax,%rax
  800420dc72:	0f 84 4d 01 00 00    	je     800420ddc5 <sched_yield+0x35f>
  800420dc78:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dc7f:	00 00 00 
  800420dc82:	ff d0                	callq  *%rax
  800420dc84:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dc8b:	00 00 00 
  800420dc8e:	48 98                	cltq   
  800420dc90:	48 c1 e0 03          	shl    $0x3,%rax
  800420dc94:	48 89 c1             	mov    %rax,%rcx
  800420dc97:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dc9b:	48 01 c8             	add    %rcx,%rax
  800420dc9e:	48 01 d0             	add    %rdx,%rax
  800420dca1:	48 83 c0 08          	add    $0x8,%rax
  800420dca5:	48 8b 00             	mov    (%rax),%rax
  800420dca8:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420dcae:	83 f8 03             	cmp    $0x3,%eax
  800420dcb1:	0f 85 0e 01 00 00    	jne    800420ddc5 <sched_yield+0x35f>
  800420dcb7:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420dcbe:	00 00 00 
  800420dcc1:	48 8b 10             	mov    (%rax),%rdx
  800420dcc4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800420dcc7:	48 98                	cltq   
  800420dcc9:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420dcd0:	48 01 d0             	add    %rdx,%rax
  800420dcd3:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800420dcd9:	83 f8 03             	cmp    $0x3,%eax
  800420dcdc:	0f 85 a4 00 00 00    	jne    800420dd86 <sched_yield+0x320>
  800420dce2:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dce9:	00 00 00 
  800420dcec:	ff d0                	callq  *%rax
  800420dcee:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dcf5:	00 00 00 
  800420dcf8:	48 98                	cltq   
  800420dcfa:	48 c1 e0 03          	shl    $0x3,%rax
  800420dcfe:	48 89 c1             	mov    %rax,%rcx
  800420dd01:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd05:	48 01 c8             	add    %rcx,%rax
  800420dd08:	48 01 d0             	add    %rdx,%rax
  800420dd0b:	48 83 c0 08          	add    $0x8,%rax
  800420dd0f:	48 8b 00             	mov    (%rax),%rax
  800420dd12:	8b 98 60 01 00 00    	mov    0x160(%rax),%ebx
  800420dd18:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dd1f:	00 00 00 
  800420dd22:	ff d0                	callq  *%rax
  800420dd24:	39 c3                	cmp    %eax,%ebx
  800420dd26:	74 05                	je     800420dd2d <sched_yield+0x2c7>
  800420dd28:	e9 a4 00 00 00       	jmpq   800420ddd1 <sched_yield+0x36b>
  800420dd2d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420dd32:	48 ba c5 d9 20 04 80 	movabs $0x800420d9c5,%rdx
  800420dd39:	00 00 00 
  800420dd3c:	ff d2                	callq  *%rdx
  800420dd3e:	89 45 e0             	mov    %eax,-0x20(%rbp)
  800420dd41:	83 7d e0 00          	cmpl   $0x0,-0x20(%rbp)
  800420dd45:	79 3f                	jns    800420dd86 <sched_yield+0x320>
  800420dd47:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dd4e:	00 00 00 
  800420dd51:	ff d0                	callq  *%rax
  800420dd53:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dd5a:	00 00 00 
  800420dd5d:	48 98                	cltq   
  800420dd5f:	48 c1 e0 03          	shl    $0x3,%rax
  800420dd63:	48 89 c1             	mov    %rax,%rcx
  800420dd66:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dd6a:	48 01 c8             	add    %rcx,%rax
  800420dd6d:	48 01 d0             	add    %rdx,%rax
  800420dd70:	48 83 c0 08          	add    $0x8,%rax
  800420dd74:	48 8b 00             	mov    (%rax),%rax
  800420dd77:	48 89 c7             	mov    %rax,%rdi
  800420dd7a:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420dd81:	00 00 00 
  800420dd84:	ff d0                	callq  *%rax
  800420dd86:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dd8d:	00 00 00 
  800420dd90:	ff d0                	callq  *%rax
  800420dd92:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dd99:	00 00 00 
  800420dd9c:	48 98                	cltq   
  800420dd9e:	48 c1 e0 03          	shl    $0x3,%rax
  800420dda2:	48 89 c1             	mov    %rax,%rcx
  800420dda5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dda9:	48 01 c8             	add    %rcx,%rax
  800420ddac:	48 01 d0             	add    %rdx,%rax
  800420ddaf:	48 83 c0 08          	add    $0x8,%rax
  800420ddb3:	48 8b 00             	mov    (%rax),%rax
  800420ddb6:	48 89 c7             	mov    %rax,%rdi
  800420ddb9:	48 b8 de 96 20 04 80 	movabs $0x80042096de,%rax
  800420ddc0:	00 00 00 
  800420ddc3:	ff d0                	callq  *%rax
  800420ddc5:	48 b8 d8 dd 20 04 80 	movabs $0x800420ddd8,%rax
  800420ddcc:	00 00 00 
  800420ddcf:	ff d0                	callq  *%rax
  800420ddd1:	48 83 c4 18          	add    $0x18,%rsp
  800420ddd5:	5b                   	pop    %rbx
  800420ddd6:	5d                   	pop    %rbp
  800420ddd7:	c3                   	retq   

000000800420ddd8 <sched_halt>:
  800420ddd8:	55                   	push   %rbp
  800420ddd9:	48 89 e5             	mov    %rsp,%rbp
  800420dddc:	48 83 ec 20          	sub    $0x20,%rsp
  800420dde0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800420dde7:	eb 79                	jmp    800420de62 <sched_halt+0x8a>
  800420dde9:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420ddf0:	00 00 00 
  800420ddf3:	48 8b 10             	mov    (%rax),%rdx
  800420ddf6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ddf9:	48 98                	cltq   
  800420ddfb:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de02:	48 01 d0             	add    %rdx,%rax
  800420de05:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de0b:	83 f8 02             	cmp    $0x2,%eax
  800420de0e:	74 5f                	je     800420de6f <sched_halt+0x97>
  800420de10:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420de17:	00 00 00 
  800420de1a:	48 8b 10             	mov    (%rax),%rdx
  800420de1d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de20:	48 98                	cltq   
  800420de22:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de29:	48 01 d0             	add    %rdx,%rax
  800420de2c:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de32:	83 f8 03             	cmp    $0x3,%eax
  800420de35:	74 38                	je     800420de6f <sched_halt+0x97>
  800420de37:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800420de3e:	00 00 00 
  800420de41:	48 8b 10             	mov    (%rax),%rdx
  800420de44:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420de47:	48 98                	cltq   
  800420de49:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800420de50:	48 01 d0             	add    %rdx,%rax
  800420de53:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
  800420de59:	83 f8 01             	cmp    $0x1,%eax
  800420de5c:	74 11                	je     800420de6f <sched_halt+0x97>
  800420de5e:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800420de62:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800420de69:	0f 8e 7a ff ff ff    	jle    800420dde9 <sched_halt+0x11>
  800420de6f:	81 7d fc 00 04 00 00 	cmpl   $0x400,-0x4(%rbp)
  800420de76:	75 2e                	jne    800420dea6 <sched_halt+0xce>
  800420de78:	48 bf 48 f7 21 04 80 	movabs $0x800421f748,%rdi
  800420de7f:	00 00 00 
  800420de82:	b8 00 00 00 00       	mov    $0x0,%eax
  800420de87:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420de8e:	00 00 00 
  800420de91:	ff d2                	callq  *%rdx
  800420de93:	bf 00 00 00 00       	mov    $0x0,%edi
  800420de98:	48 b8 51 1a 20 04 80 	movabs $0x8004201a51,%rax
  800420de9f:	00 00 00 
  800420dea2:	ff d0                	callq  *%rax
  800420dea4:	eb ed                	jmp    800420de93 <sched_halt+0xbb>
  800420dea6:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dead:	00 00 00 
  800420deb0:	ff d0                	callq  *%rax
  800420deb2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420deb9:	00 00 00 
  800420debc:	48 98                	cltq   
  800420debe:	48 c1 e0 03          	shl    $0x3,%rax
  800420dec2:	48 89 c1             	mov    %rax,%rcx
  800420dec5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dec9:	48 01 c8             	add    %rcx,%rax
  800420decc:	48 01 d0             	add    %rdx,%rax
  800420decf:	48 83 c0 08          	add    $0x8,%rax
  800420ded3:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800420deda:	48 b8 f0 d5 6d 04 80 	movabs $0x80046dd5f0,%rax
  800420dee1:	00 00 00 
  800420dee4:	48 8b 00             	mov    (%rax),%rax
  800420dee7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420deeb:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800420def2:	00 00 00 
  800420def5:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800420def9:	77 32                	ja     800420df2d <sched_halt+0x155>
  800420defb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420deff:	48 89 c1             	mov    %rax,%rcx
  800420df02:	48 ba 78 f7 21 04 80 	movabs $0x800421f778,%rdx
  800420df09:	00 00 00 
  800420df0c:	be 76 00 00 00       	mov    $0x76,%esi
  800420df11:	48 bf 9c f7 21 04 80 	movabs $0x800421f79c,%rdi
  800420df18:	00 00 00 
  800420df1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420df20:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420df27:	00 00 00 
  800420df2a:	41 ff d0             	callq  *%r8
  800420df2d:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800420df34:	ff ff ff 
  800420df37:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420df3b:	48 01 d0             	add    %rdx,%rax
  800420df3e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
}

static __inline void
lcr3(uint64_t val)
{
	__asm __volatile("movq %0,%%cr3" : : "r" (val));
  800420df42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420df46:	0f 22 d8             	mov    %rax,%cr3
  800420df49:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420df50:	00 00 00 
  800420df53:	ff d0                	callq  *%rax
  800420df55:	48 98                	cltq   
  800420df57:	48 c1 e0 03          	shl    $0x3,%rax
  800420df5b:	48 89 c2             	mov    %rax,%rdx
  800420df5e:	48 c1 e2 04          	shl    $0x4,%rdx
  800420df62:	48 01 d0             	add    %rdx,%rax
  800420df65:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420df6c:	00 00 00 
  800420df6f:	48 01 d0             	add    %rdx,%rax
  800420df72:	48 83 c0 04          	add    $0x4,%rax
  800420df76:	be 02 00 00 00       	mov    $0x2,%esi
  800420df7b:	48 89 c7             	mov    %rax,%rdi
  800420df7e:	48 b8 82 d9 20 04 80 	movabs $0x800420d982,%rax
  800420df85:	00 00 00 
  800420df88:	ff d0                	callq  *%rax
  800420df8a:	48 b8 a7 d9 20 04 80 	movabs $0x800420d9a7,%rax
  800420df91:	00 00 00 
  800420df94:	ff d0                	callq  *%rax
  800420df96:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420df9d:	00 00 00 
  800420dfa0:	ff d0                	callq  *%rax
  800420dfa2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dfa9:	00 00 00 
  800420dfac:	48 98                	cltq   
  800420dfae:	48 c1 e0 03          	shl    $0x3,%rax
  800420dfb2:	48 89 c1             	mov    %rax,%rcx
  800420dfb5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420dfb9:	48 01 c8             	add    %rcx,%rax
  800420dfbc:	48 01 d0             	add    %rdx,%rax
  800420dfbf:	48 83 c0 10          	add    $0x10,%rax
  800420dfc3:	48 8b 40 04          	mov    0x4(%rax),%rax
  800420dfc7:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp
  800420dfce:	48 89 c4             	mov    %rax,%rsp
  800420dfd1:	6a 00                	pushq  $0x0
  800420dfd3:	6a 00                	pushq  $0x0
  800420dfd5:	fb                   	sti    
  800420dfd6:	f4                   	hlt    
  800420dfd7:	c9                   	leaveq 
  800420dfd8:	c3                   	retq   

000000800420dfd9 <sys_cputs>:
// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void
sys_cputs(const char *s, size_t len)
{
  800420dfd9:	55                   	push   %rbp
  800420dfda:	48 89 e5             	mov    %rsp,%rbp
  800420dfdd:	48 83 ec 10          	sub    $0x10,%rsp
  800420dfe1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420dfe5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	// Check that the user has permission to read memory [s, s+len).
	// Destroy the environment if not.

	// LAB 3: Your code here.
	user_mem_assert(curenv, s, len, PTE_U);
  800420dfe9:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420dff0:	00 00 00 
  800420dff3:	ff d0                	callq  *%rax
  800420dff5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420dffc:	00 00 00 
  800420dfff:	48 98                	cltq   
  800420e001:	48 c1 e0 03          	shl    $0x3,%rax
  800420e005:	48 89 c1             	mov    %rax,%rcx
  800420e008:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e00c:	48 01 c8             	add    %rcx,%rax
  800420e00f:	48 01 d0             	add    %rdx,%rax
  800420e012:	48 83 c0 08          	add    $0x8,%rax
  800420e016:	48 8b 00             	mov    (%rax),%rax
  800420e019:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420e01d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420e021:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e026:	48 89 c7             	mov    %rax,%rdi
  800420e029:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e030:	00 00 00 
  800420e033:	ff d0                	callq  *%rax

	// Print the string supplied by the user.
	cprintf("%.*s", len, s);
  800420e035:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420e039:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e03d:	48 89 c6             	mov    %rax,%rsi
  800420e040:	48 bf b0 f7 21 04 80 	movabs $0x800421f7b0,%rdi
  800420e047:	00 00 00 
  800420e04a:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e04f:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e056:	00 00 00 
  800420e059:	ff d1                	callq  *%rcx
}
  800420e05b:	c9                   	leaveq 
  800420e05c:	c3                   	retq   

000000800420e05d <sys_cgetc>:

// Read a character from the system console without blocking.
// Returns the character, or 0 if there is no input waiting.
static int
sys_cgetc(void)
{
  800420e05d:	55                   	push   %rbp
  800420e05e:	48 89 e5             	mov    %rsp,%rbp
	return cons_getc();
  800420e061:	48 b8 a6 10 20 04 80 	movabs $0x80042010a6,%rax
  800420e068:	00 00 00 
  800420e06b:	ff d0                	callq  *%rax
}
  800420e06d:	5d                   	pop    %rbp
  800420e06e:	c3                   	retq   

000000800420e06f <sys_getenvid>:

// Returns the current environment's envid.
static envid_t
sys_getenvid(void)
{
  800420e06f:	55                   	push   %rbp
  800420e070:	48 89 e5             	mov    %rsp,%rbp
	return curenv->env_id;
  800420e073:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e07a:	00 00 00 
  800420e07d:	ff d0                	callq  *%rax
  800420e07f:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e086:	00 00 00 
  800420e089:	48 98                	cltq   
  800420e08b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e08f:	48 89 c1             	mov    %rax,%rcx
  800420e092:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e096:	48 01 c8             	add    %rcx,%rax
  800420e099:	48 01 d0             	add    %rdx,%rax
  800420e09c:	48 83 c0 08          	add    $0x8,%rax
  800420e0a0:	48 8b 00             	mov    (%rax),%rax
  800420e0a3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e0a9:	5d                   	pop    %rbp
  800420e0aa:	c3                   	retq   

000000800420e0ab <sys_env_destroy>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_destroy(envid_t envid)
{
  800420e0ab:	55                   	push   %rbp
  800420e0ac:	48 89 e5             	mov    %rsp,%rbp
  800420e0af:	48 83 ec 20          	sub    $0x20,%rsp
  800420e0b3:	89 7d ec             	mov    %edi,-0x14(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e0b6:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e0ba:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e0bd:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e0c2:	48 89 ce             	mov    %rcx,%rsi
  800420e0c5:	89 c7                	mov    %eax,%edi
  800420e0c7:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e0ce:	00 00 00 
  800420e0d1:	ff d0                	callq  *%rax
  800420e0d3:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e0d6:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e0da:	79 05                	jns    800420e0e1 <sys_env_destroy+0x36>
		return r;
  800420e0dc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e0df:	eb 18                	jmp    800420e0f9 <sys_env_destroy+0x4e>
	env_destroy(e);
  800420e0e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e0e5:	48 89 c7             	mov    %rax,%rdi
  800420e0e8:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800420e0ef:	00 00 00 
  800420e0f2:	ff d0                	callq  *%rax
	return 0;
  800420e0f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e0f9:	c9                   	leaveq 
  800420e0fa:	c3                   	retq   

000000800420e0fb <sys_yield>:

// Deschedule current environment and pick a different one to run.
static void
sys_yield(void)
{
  800420e0fb:	55                   	push   %rbp
  800420e0fc:	48 89 e5             	mov    %rsp,%rbp
	sched_yield();
  800420e0ff:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  800420e106:	00 00 00 
  800420e109:	ff d0                	callq  *%rax

000000800420e10b <sys_exofork>:
// Returns envid of new environment, or < 0 on error.  Errors are:
//	-E_NO_FREE_ENV if no free environment is available.
//	-E_NO_MEM on memory exhaustion.
static envid_t
sys_exofork(void)
{
  800420e10b:	55                   	push   %rbp
  800420e10c:	48 89 e5             	mov    %rsp,%rbp
  800420e10f:	53                   	push   %rbx
  800420e110:	48 83 ec 18          	sub    $0x18,%rsp
	int r;
	struct Env *e;

	if ((r = env_alloc(&e, curenv->env_id)) < 0)
  800420e114:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e11b:	00 00 00 
  800420e11e:	ff d0                	callq  *%rax
  800420e120:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e127:	00 00 00 
  800420e12a:	48 98                	cltq   
  800420e12c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e130:	48 89 c1             	mov    %rax,%rcx
  800420e133:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e137:	48 01 c8             	add    %rcx,%rax
  800420e13a:	48 01 d0             	add    %rdx,%rax
  800420e13d:	48 83 c0 08          	add    $0x8,%rax
  800420e141:	48 8b 00             	mov    (%rax),%rax
  800420e144:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420e14a:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  800420e14e:	89 d6                	mov    %edx,%esi
  800420e150:	48 89 c7             	mov    %rax,%rdi
  800420e153:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  800420e15a:	00 00 00 
  800420e15d:	ff d0                	callq  *%rax
  800420e15f:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e162:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e166:	79 05                	jns    800420e16d <sys_exofork+0x62>
		return r;
  800420e168:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e16b:	eb 6c                	jmp    800420e1d9 <sys_exofork+0xce>
	e->env_status = ENV_NOT_RUNNABLE;
  800420e16d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e171:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420e178:	00 00 00 
	e->env_tf = curenv->env_tf;
  800420e17b:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  800420e17f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e186:	00 00 00 
  800420e189:	ff d0                	callq  *%rax
  800420e18b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e192:	00 00 00 
  800420e195:	48 98                	cltq   
  800420e197:	48 c1 e0 03          	shl    $0x3,%rax
  800420e19b:	48 89 c1             	mov    %rax,%rcx
  800420e19e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e1a2:	48 01 c8             	add    %rcx,%rax
  800420e1a5:	48 01 d0             	add    %rdx,%rax
  800420e1a8:	48 83 c0 08          	add    $0x8,%rax
  800420e1ac:	48 8b 00             	mov    (%rax),%rax
  800420e1af:	48 89 da             	mov    %rbx,%rdx
  800420e1b2:	48 89 c6             	mov    %rax,%rsi
  800420e1b5:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e1ba:	48 89 d7             	mov    %rdx,%rdi
  800420e1bd:	48 89 c1             	mov    %rax,%rcx
  800420e1c0:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	e->env_tf.tf_regs.reg_rax = 0;
  800420e1c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e1c7:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e1ce:	00 
	return e->env_id;
  800420e1cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e1d3:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420e1d9:	48 83 c4 18          	add    $0x18,%rsp
  800420e1dd:	5b                   	pop    %rbx
  800420e1de:	5d                   	pop    %rbp
  800420e1df:	c3                   	retq   

000000800420e1e0 <sys_env_set_status>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if status is not a valid status for an environment.
static int
sys_env_set_status(envid_t envid, int status)
{
  800420e1e0:	55                   	push   %rbp
  800420e1e1:	48 89 e5             	mov    %rsp,%rbp
  800420e1e4:	48 83 ec 20          	sub    $0x20,%rsp
  800420e1e8:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e1eb:	89 75 e8             	mov    %esi,-0x18(%rbp)
	struct Env *e;
	int r;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e1ee:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e1f2:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e1f5:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e1fa:	48 89 ce             	mov    %rcx,%rsi
  800420e1fd:	89 c7                	mov    %eax,%edi
  800420e1ff:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e206:	00 00 00 
  800420e209:	ff d0                	callq  *%rax
  800420e20b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e20e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e212:	79 05                	jns    800420e219 <sys_env_set_status+0x39>
		return r;
  800420e214:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e217:	eb 25                	jmp    800420e23e <sys_env_set_status+0x5e>
	if (status != ENV_RUNNABLE && status != ENV_NOT_RUNNABLE)
  800420e219:	83 7d e8 02          	cmpl   $0x2,-0x18(%rbp)
  800420e21d:	74 0d                	je     800420e22c <sys_env_set_status+0x4c>
  800420e21f:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
  800420e223:	74 07                	je     800420e22c <sys_env_set_status+0x4c>
		return -E_INVAL;
  800420e225:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e22a:	eb 12                	jmp    800420e23e <sys_env_set_status+0x5e>
	e->env_status = status;
  800420e22c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e230:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800420e233:	89 90 d4 00 00 00    	mov    %edx,0xd4(%rax)
	return 0;
  800420e239:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e23e:	c9                   	leaveq 
  800420e23f:	c3                   	retq   

000000800420e240 <sys_env_set_trapframe>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_trapframe(envid_t envid, struct Trapframe *tf)
{
  800420e240:	55                   	push   %rbp
  800420e241:	48 89 e5             	mov    %rsp,%rbp
  800420e244:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  800420e24b:	89 bd 2c ff ff ff    	mov    %edi,-0xd4(%rbp)
  800420e251:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
	int r;
	struct Env *e;
	struct Trapframe ltf;

	user_mem_assert(curenv, tf, sizeof(struct Trapframe), PTE_U);
  800420e258:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e25f:	00 00 00 
  800420e262:	ff d0                	callq  *%rax
  800420e264:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e26b:	00 00 00 
  800420e26e:	48 98                	cltq   
  800420e270:	48 c1 e0 03          	shl    $0x3,%rax
  800420e274:	48 89 c1             	mov    %rax,%rcx
  800420e277:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e27b:	48 01 c8             	add    %rcx,%rax
  800420e27e:	48 01 d0             	add    %rdx,%rax
  800420e281:	48 83 c0 08          	add    $0x8,%rax
  800420e285:	48 8b 00             	mov    (%rax),%rax
  800420e288:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800420e28f:	b9 04 00 00 00       	mov    $0x4,%ecx
  800420e294:	ba c0 00 00 00       	mov    $0xc0,%edx
  800420e299:	48 89 c7             	mov    %rax,%rdi
  800420e29c:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420e2a3:	00 00 00 
  800420e2a6:	ff d0                	callq  *%rax
	ltf = *tf;
  800420e2a8:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800420e2af:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  800420e2b6:	48 89 c6             	mov    %rax,%rsi
  800420e2b9:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e2be:	48 89 d7             	mov    %rdx,%rdi
  800420e2c1:	48 89 c1             	mov    %rax,%rcx
  800420e2c4:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	ltf.tf_eflags |= FL_IF;
  800420e2c7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e2cb:	80 cc 02             	or     $0x2,%ah
  800420e2ce:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ltf.tf_cs |= 3;
  800420e2d2:	0f b7 45 d0          	movzwl -0x30(%rbp),%eax
  800420e2d6:	83 c8 03             	or     $0x3,%eax
  800420e2d9:	66 89 45 d0          	mov    %ax,-0x30(%rbp)

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e2dd:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e2e1:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800420e2e7:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e2ec:	48 89 ce             	mov    %rcx,%rsi
  800420e2ef:	89 c7                	mov    %eax,%edi
  800420e2f1:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e2f8:	00 00 00 
  800420e2fb:	ff d0                	callq  *%rax
  800420e2fd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e300:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e304:	79 05                	jns    800420e30b <sys_env_set_trapframe+0xcb>
		return r;
  800420e306:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e309:	eb 21                	jmp    800420e32c <sys_env_set_trapframe+0xec>
	e->env_tf = ltf;
  800420e30b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e30f:	48 89 c2             	mov    %rax,%rdx
  800420e312:	48 8d b5 30 ff ff ff 	lea    -0xd0(%rbp),%rsi
  800420e319:	b8 18 00 00 00       	mov    $0x18,%eax
  800420e31e:	48 89 d7             	mov    %rdx,%rdi
  800420e321:	48 89 c1             	mov    %rax,%rcx
  800420e324:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
	return 0;
  800420e327:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e32c:	c9                   	leaveq 
  800420e32d:	c3                   	retq   

000000800420e32e <sys_env_set_pgfault_upcall>:
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int
sys_env_set_pgfault_upcall(envid_t envid, void *func)
{
  800420e32e:	55                   	push   %rbp
  800420e32f:	48 89 e5             	mov    %rsp,%rbp
  800420e332:	48 83 ec 20          	sub    $0x20,%rsp
  800420e336:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e339:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e33d:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e341:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e344:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e349:	48 89 ce             	mov    %rcx,%rsi
  800420e34c:	89 c7                	mov    %eax,%edi
  800420e34e:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e355:	00 00 00 
  800420e358:	ff d0                	callq  *%rax
  800420e35a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e35d:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e361:	79 05                	jns    800420e368 <sys_env_set_pgfault_upcall+0x3a>
		return r;
  800420e363:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e366:	eb 14                	jmp    800420e37c <sys_env_set_pgfault_upcall+0x4e>
	e->env_pgfault_upcall = func;
  800420e368:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e36c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e370:	48 89 90 f0 00 00 00 	mov    %rdx,0xf0(%rax)
	return 0;
  800420e377:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e37c:	c9                   	leaveq 
  800420e37d:	c3                   	retq   

000000800420e37e <sys_page_alloc>:
//	-E_INVAL if perm is inappropriate (see above).
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int
sys_page_alloc(envid_t envid, void *va, int perm)
{
  800420e37e:	55                   	push   %rbp
  800420e37f:	48 89 e5             	mov    %rsp,%rbp
  800420e382:	48 83 ec 30          	sub    $0x30,%rsp
  800420e386:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800420e389:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800420e38d:	89 55 d8             	mov    %edx,-0x28(%rbp)
	int r;
	struct Env *e;
	struct PageInfo *pp;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e390:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  800420e394:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800420e397:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e39c:	48 89 ce             	mov    %rcx,%rsi
  800420e39f:	89 c7                	mov    %eax,%edi
  800420e3a1:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e3a8:	00 00 00 
  800420e3ab:	ff d0                	callq  *%rax
  800420e3ad:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e3b0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e3b4:	79 08                	jns    800420e3be <sys_page_alloc+0x40>
		return r;
  800420e3b6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e3b9:	e9 a7 00 00 00       	jmpq   800420e465 <sys_page_alloc+0xe7>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e3be:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e3c1:	f7 d0                	not    %eax
  800420e3c3:	83 e0 05             	and    $0x5,%eax
  800420e3c6:	85 c0                	test   %eax,%eax
  800420e3c8:	75 0c                	jne    800420e3d6 <sys_page_alloc+0x58>
  800420e3ca:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800420e3cd:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e3d2:	85 c0                	test   %eax,%eax
  800420e3d4:	74 0a                	je     800420e3e0 <sys_page_alloc+0x62>
		return -E_INVAL;
  800420e3d6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e3db:	e9 85 00 00 00       	jmpq   800420e465 <sys_page_alloc+0xe7>
	if (va >= (void*) UTOP)
  800420e3e0:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e3e7:	00 00 00 
  800420e3ea:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800420e3ee:	76 07                	jbe    800420e3f7 <sys_page_alloc+0x79>
		return -E_INVAL;
  800420e3f0:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e3f5:	eb 6e                	jmp    800420e465 <sys_page_alloc+0xe7>
	if (!(pp = page_alloc(ALLOC_ZERO)))
  800420e3f7:	bf 01 00 00 00       	mov    $0x1,%edi
  800420e3fc:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800420e403:	00 00 00 
  800420e406:	ff d0                	callq  *%rax
  800420e408:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e40c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  800420e411:	75 07                	jne    800420e41a <sys_page_alloc+0x9c>
		return -E_NO_MEM;
  800420e413:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800420e418:	eb 4b                	jmp    800420e465 <sys_page_alloc+0xe7>
	if ((r = page_insert(e->env_pml4e, pp, va, perm)) < 0) {
  800420e41a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e41e:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e425:	8b 4d d8             	mov    -0x28(%rbp),%ecx
  800420e428:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420e42c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420e430:	48 89 c7             	mov    %rax,%rdi
  800420e433:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e43a:	00 00 00 
  800420e43d:	ff d0                	callq  *%rax
  800420e43f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e442:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e446:	79 18                	jns    800420e460 <sys_page_alloc+0xe2>
		page_free(pp);
  800420e448:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e44c:	48 89 c7             	mov    %rax,%rdi
  800420e44f:	48 b8 4d 2f 20 04 80 	movabs $0x8004202f4d,%rax
  800420e456:	00 00 00 
  800420e459:	ff d0                	callq  *%rax
		return r;
  800420e45b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e45e:	eb 05                	jmp    800420e465 <sys_page_alloc+0xe7>
	}
	return 0;
  800420e460:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e465:	c9                   	leaveq 
  800420e466:	c3                   	retq   

000000800420e467 <sys_page_map>:
//		address space.
//	-E_NO_MEM if there's no memory to allocate any necessary page tables.
static int
sys_page_map(envid_t srcenvid, void *srcva,
	     envid_t dstenvid, void *dstva, int perm)
{
  800420e467:	55                   	push   %rbp
  800420e468:	48 89 e5             	mov    %rsp,%rbp
  800420e46b:	48 83 ec 60          	sub    $0x60,%rsp
  800420e46f:	89 7d bc             	mov    %edi,-0x44(%rbp)
  800420e472:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800420e476:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800420e479:	48 89 4d a8          	mov    %rcx,-0x58(%rbp)
  800420e47d:	44 89 45 a4          	mov    %r8d,-0x5c(%rbp)
	int r;
	struct Env *es, *ed;
	struct PageInfo *pp;
	pte_t *ppte;

	if (srcva >= (void*) UTOP || dstva >= (void*) UTOP)
  800420e481:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e488:	00 00 00 
  800420e48b:	48 39 45 b0          	cmp    %rax,-0x50(%rbp)
  800420e48f:	77 10                	ja     800420e4a1 <sys_page_map+0x3a>
  800420e491:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e498:	00 00 00 
  800420e49b:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
  800420e49f:	76 0a                	jbe    800420e4ab <sys_page_map+0x44>
		return -E_INVAL;
  800420e4a1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e4a6:	e9 3f 01 00 00       	jmpq   800420e5ea <sys_page_map+0x183>
	if (srcva != ROUNDDOWN(srcva, PGSIZE) || dstva != ROUNDDOWN(dstva, PGSIZE))
  800420e4ab:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420e4af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420e4b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e4b7:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e4bd:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
  800420e4c1:	75 18                	jne    800420e4db <sys_page_map+0x74>
  800420e4c3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800420e4c7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420e4cb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420e4cf:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  800420e4d5:	48 3b 45 a8          	cmp    -0x58(%rbp),%rax
  800420e4d9:	74 0a                	je     800420e4e5 <sys_page_map+0x7e>
		return -E_INVAL;
  800420e4db:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e4e0:	e9 05 01 00 00       	jmpq   800420e5ea <sys_page_map+0x183>

	if ((r = envid2env(srcenvid, &es, 1)) < 0
  800420e4e5:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e4e9:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e4ec:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e4f1:	48 89 ce             	mov    %rcx,%rsi
  800420e4f4:	89 c7                	mov    %eax,%edi
  800420e4f6:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e4fd:	00 00 00 
  800420e500:	ff d0                	callq  *%rax
  800420e502:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e505:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e509:	78 26                	js     800420e531 <sys_page_map+0xca>
            || (r = envid2env(dstenvid, &ed, 1)) < 0)
  800420e50b:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800420e50f:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800420e512:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e517:	48 89 ce             	mov    %rcx,%rsi
  800420e51a:	89 c7                	mov    %eax,%edi
  800420e51c:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e523:	00 00 00 
  800420e526:	ff d0                	callq  *%rax
  800420e528:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e52b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e52f:	79 08                	jns    800420e539 <sys_page_map+0xd2>
		return r;
  800420e531:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e534:	e9 b1 00 00 00       	jmpq   800420e5ea <sys_page_map+0x183>
	if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL))
  800420e539:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e53c:	f7 d0                	not    %eax
  800420e53e:	83 e0 05             	and    $0x5,%eax
  800420e541:	85 c0                	test   %eax,%eax
  800420e543:	75 0c                	jne    800420e551 <sys_page_map+0xea>
  800420e545:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e548:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e54d:	85 c0                	test   %eax,%eax
  800420e54f:	74 0a                	je     800420e55b <sys_page_map+0xf4>
		return -E_INVAL;
  800420e551:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e556:	e9 8f 00 00 00       	jmpq   800420e5ea <sys_page_map+0x183>
	if ((pp = page_lookup(es->env_pml4e, srcva, &ppte)) == 0)
  800420e55b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e55f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e566:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
  800420e56a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800420e56e:	48 89 ce             	mov    %rcx,%rsi
  800420e571:	48 89 c7             	mov    %rax,%rdi
  800420e574:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e57b:	00 00 00 
  800420e57e:	ff d0                	callq  *%rax
  800420e580:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420e584:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e589:	75 07                	jne    800420e592 <sys_page_map+0x12b>
		return -E_INVAL;
  800420e58b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e590:	eb 58                	jmp    800420e5ea <sys_page_map+0x183>
	if ((perm & PTE_W) && !(*ppte & PTE_W))
  800420e592:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800420e595:	83 e0 02             	and    $0x2,%eax
  800420e598:	85 c0                	test   %eax,%eax
  800420e59a:	74 16                	je     800420e5b2 <sys_page_map+0x14b>
  800420e59c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420e5a0:	48 8b 00             	mov    (%rax),%rax
  800420e5a3:	83 e0 02             	and    $0x2,%eax
  800420e5a6:	48 85 c0             	test   %rax,%rax
  800420e5a9:	75 07                	jne    800420e5b2 <sys_page_map+0x14b>
		return -E_INVAL;
  800420e5ab:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e5b0:	eb 38                	jmp    800420e5ea <sys_page_map+0x183>
	if ((r = page_insert(ed->env_pml4e, pp, dstva, perm)) < 0)
  800420e5b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e5b6:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e5bd:	8b 4d a4             	mov    -0x5c(%rbp),%ecx
  800420e5c0:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800420e5c4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e5c8:	48 89 c7             	mov    %rax,%rdi
  800420e5cb:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e5d2:	00 00 00 
  800420e5d5:	ff d0                	callq  *%rax
  800420e5d7:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e5da:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e5de:	79 05                	jns    800420e5e5 <sys_page_map+0x17e>
		return r;
  800420e5e0:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e5e3:	eb 05                	jmp    800420e5ea <sys_page_map+0x183>
	return 0;
  800420e5e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e5ea:	c9                   	leaveq 
  800420e5eb:	c3                   	retq   

000000800420e5ec <sys_page_unmap>:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int
sys_page_unmap(envid_t envid, void *va)
{
  800420e5ec:	55                   	push   %rbp
  800420e5ed:	48 89 e5             	mov    %rsp,%rbp
  800420e5f0:	48 83 ec 20          	sub    $0x20,%rsp
  800420e5f4:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800420e5f7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	if ((r = envid2env(envid, &e, 1)) < 0)
  800420e5fb:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800420e5ff:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e602:	ba 01 00 00 00       	mov    $0x1,%edx
  800420e607:	48 89 ce             	mov    %rcx,%rsi
  800420e60a:	89 c7                	mov    %eax,%edi
  800420e60c:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e613:	00 00 00 
  800420e616:	ff d0                	callq  *%rax
  800420e618:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420e61b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420e61f:	79 05                	jns    800420e626 <sys_page_unmap+0x3a>
		return r;
  800420e621:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420e624:	eb 4b                	jmp    800420e671 <sys_page_unmap+0x85>
	if (va >= (void*) UTOP || PGOFF(va))
  800420e626:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e62d:	00 00 00 
  800420e630:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800420e634:	77 0e                	ja     800420e644 <sys_page_unmap+0x58>
  800420e636:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420e63a:	25 ff 0f 00 00       	and    $0xfff,%eax
  800420e63f:	48 85 c0             	test   %rax,%rax
  800420e642:	74 07                	je     800420e64b <sys_page_unmap+0x5f>
		return -E_INVAL;
  800420e644:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e649:	eb 26                	jmp    800420e671 <sys_page_unmap+0x85>
	page_remove(e->env_pml4e, va);
  800420e64b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420e64f:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e656:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420e65a:	48 89 d6             	mov    %rdx,%rsi
  800420e65d:	48 89 c7             	mov    %rax,%rdi
  800420e660:	48 b8 08 3e 20 04 80 	movabs $0x8004203e08,%rax
  800420e667:	00 00 00 
  800420e66a:	ff d0                	callq  *%rax
	return 0;
  800420e66c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e671:	c9                   	leaveq 
  800420e672:	c3                   	retq   

000000800420e673 <sys_ipc_try_send>:
//		current environment's address space.
//	-E_NO_MEM if there's not enough memory to map srcva in envid's
//		address space.
static int
sys_ipc_try_send(envid_t envid, uint32_t value, void *srcva, unsigned perm)
{
  800420e673:	55                   	push   %rbp
  800420e674:	48 89 e5             	mov    %rsp,%rbp
  800420e677:	53                   	push   %rbx
  800420e678:	48 83 ec 48          	sub    $0x48,%rsp
  800420e67c:	89 7d cc             	mov    %edi,-0x34(%rbp)
  800420e67f:	89 75 c8             	mov    %esi,-0x38(%rbp)
  800420e682:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800420e686:	89 4d bc             	mov    %ecx,-0x44(%rbp)
    int r;
    struct Env *e;
    struct PageInfo *pp;
    pte_t *ppte;
    if ((r = envid2env(envid, &e, 0)) < 0)
  800420e689:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  800420e68d:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800420e690:	ba 00 00 00 00       	mov    $0x0,%edx
  800420e695:	48 89 ce             	mov    %rcx,%rsi
  800420e698:	89 c7                	mov    %eax,%edi
  800420e69a:	48 b8 01 7e 20 04 80 	movabs $0x8004207e01,%rax
  800420e6a1:	00 00 00 
  800420e6a4:	ff d0                	callq  *%rax
  800420e6a6:	89 45 ec             	mov    %eax,-0x14(%rbp)
  800420e6a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e6ad:	79 08                	jns    800420e6b7 <sys_ipc_try_send+0x44>
        return r;
  800420e6af:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e6b2:	e9 25 03 00 00       	jmpq   800420e9dc <sys_ipc_try_send+0x369>
    if (!e->env_ipc_recving) {
  800420e6b7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e6bb:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420e6c2:	83 f0 01             	xor    $0x1,%eax
  800420e6c5:	84 c0                	test   %al,%al
  800420e6c7:	74 0a                	je     800420e6d3 <sys_ipc_try_send+0x60>
        /* cprintf("[%08x] not recieving!\n", e->env_id); */
        return -E_IPC_NOT_RECV;
  800420e6c9:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
  800420e6ce:	e9 09 03 00 00       	jmpq   800420e9dc <sys_ipc_try_send+0x369>

    /*  Hint: check if environment is ENV_TYPE_GUEST or not, and if the source or destination 
     *  is using normal page, use page_insert. Use ept_page_insert() wherever possible. */
    /* Your code here */

    if (srcva < (void*) UTOP && e->env_ipc_dstva < (void*) UTOP) {
  800420e6d3:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e6da:	00 00 00 
  800420e6dd:	48 39 45 c0          	cmp    %rax,-0x40(%rbp)
  800420e6e1:	0f 87 70 02 00 00    	ja     800420e957 <sys_ipc_try_send+0x2e4>
  800420e6e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e6eb:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e6f2:	48 b8 ff ff 7f 00 80 	movabs $0x80007fffff,%rax
  800420e6f9:	00 00 00 
  800420e6fc:	48 39 c2             	cmp    %rax,%rdx
  800420e6ff:	0f 87 52 02 00 00    	ja     800420e957 <sys_ipc_try_send+0x2e4>
        if ((~perm & (PTE_U|PTE_P)) || (perm & ~PTE_SYSCALL)) {
  800420e705:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e708:	f7 d0                	not    %eax
  800420e70a:	83 e0 05             	and    $0x5,%eax
  800420e70d:	85 c0                	test   %eax,%eax
  800420e70f:	75 0c                	jne    800420e71d <sys_ipc_try_send+0xaa>
  800420e711:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e714:	25 f8 f1 ff ff       	and    $0xfffff1f8,%eax
  800420e719:	85 c0                	test   %eax,%eax
  800420e71b:	74 60                	je     800420e77d <sys_ipc_try_send+0x10a>
            cprintf("[%08x] bad perm %x in sys_ipc_try_send\n", curenv->env_id, perm);
  800420e71d:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e724:	00 00 00 
  800420e727:	ff d0                	callq  *%rax
  800420e729:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e730:	00 00 00 
  800420e733:	48 98                	cltq   
  800420e735:	48 c1 e0 03          	shl    $0x3,%rax
  800420e739:	48 89 c1             	mov    %rax,%rcx
  800420e73c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e740:	48 01 c8             	add    %rcx,%rax
  800420e743:	48 01 d0             	add    %rdx,%rax
  800420e746:	48 83 c0 08          	add    $0x8,%rax
  800420e74a:	48 8b 00             	mov    (%rax),%rax
  800420e74d:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e753:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e756:	89 c6                	mov    %eax,%esi
  800420e758:	48 bf b8 f7 21 04 80 	movabs $0x800421f7b8,%rdi
  800420e75f:	00 00 00 
  800420e762:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e767:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e76e:	00 00 00 
  800420e771:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e773:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e778:	e9 5f 02 00 00       	jmpq   800420e9dc <sys_ipc_try_send+0x369>
        }

        pp = page_lookup(curenv->env_pml4e, srcva, &ppte);
  800420e77d:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e784:	00 00 00 
  800420e787:	ff d0                	callq  *%rax
  800420e789:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e790:	00 00 00 
  800420e793:	48 98                	cltq   
  800420e795:	48 c1 e0 03          	shl    $0x3,%rax
  800420e799:	48 89 c1             	mov    %rax,%rcx
  800420e79c:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7a0:	48 01 c8             	add    %rcx,%rax
  800420e7a3:	48 01 d0             	add    %rdx,%rax
  800420e7a6:	48 83 c0 08          	add    $0x8,%rax
  800420e7aa:	48 8b 00             	mov    (%rax),%rax
  800420e7ad:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e7b4:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800420e7b8:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800420e7bc:	48 89 ce             	mov    %rcx,%rsi
  800420e7bf:	48 89 c7             	mov    %rax,%rdi
  800420e7c2:	48 b8 7d 3d 20 04 80 	movabs $0x8004203d7d,%rax
  800420e7c9:	00 00 00 
  800420e7cc:	ff d0                	callq  *%rax
  800420e7ce:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
        if (pp == 0) {
  800420e7d2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800420e7d7:	75 61                	jne    800420e83a <sys_ipc_try_send+0x1c7>
            cprintf("[%08x] page_lookup %08x failed in sys_ipc_try_send\n", curenv->env_id, srcva);
  800420e7d9:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e7e0:	00 00 00 
  800420e7e3:	ff d0                	callq  *%rax
  800420e7e5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e7ec:	00 00 00 
  800420e7ef:	48 98                	cltq   
  800420e7f1:	48 c1 e0 03          	shl    $0x3,%rax
  800420e7f5:	48 89 c1             	mov    %rax,%rcx
  800420e7f8:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e7fc:	48 01 c8             	add    %rcx,%rax
  800420e7ff:	48 01 d0             	add    %rdx,%rax
  800420e802:	48 83 c0 08          	add    $0x8,%rax
  800420e806:	48 8b 00             	mov    (%rax),%rax
  800420e809:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e80f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e813:	89 c6                	mov    %eax,%esi
  800420e815:	48 bf e0 f7 21 04 80 	movabs $0x800421f7e0,%rdi
  800420e81c:	00 00 00 
  800420e81f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e824:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800420e82b:	00 00 00 
  800420e82e:	ff d1                	callq  *%rcx
            return -E_INVAL;
  800420e830:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e835:	e9 a2 01 00 00       	jmpq   800420e9dc <sys_ipc_try_send+0x369>
        }

        if ((perm & PTE_W) && !(*ppte & PTE_W)) {
  800420e83a:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800420e83d:	83 e0 02             	and    $0x2,%eax
  800420e840:	85 c0                	test   %eax,%eax
  800420e842:	74 6c                	je     800420e8b0 <sys_ipc_try_send+0x23d>
  800420e844:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420e848:	48 8b 00             	mov    (%rax),%rax
  800420e84b:	83 e0 02             	and    $0x2,%eax
  800420e84e:	48 85 c0             	test   %rax,%rax
  800420e851:	75 5d                	jne    800420e8b0 <sys_ipc_try_send+0x23d>
            cprintf("[%08x] attempt to send read-only page read-write in sys_ipc_try_send\n", curenv->env_id);
  800420e853:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e85a:	00 00 00 
  800420e85d:	ff d0                	callq  *%rax
  800420e85f:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e866:	00 00 00 
  800420e869:	48 98                	cltq   
  800420e86b:	48 c1 e0 03          	shl    $0x3,%rax
  800420e86f:	48 89 c1             	mov    %rax,%rcx
  800420e872:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e876:	48 01 c8             	add    %rcx,%rax
  800420e879:	48 01 d0             	add    %rdx,%rax
  800420e87c:	48 83 c0 08          	add    $0x8,%rax
  800420e880:	48 8b 00             	mov    (%rax),%rax
  800420e883:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e889:	89 c6                	mov    %eax,%esi
  800420e88b:	48 bf 18 f8 21 04 80 	movabs $0x800421f818,%rdi
  800420e892:	00 00 00 
  800420e895:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e89a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800420e8a1:	00 00 00 
  800420e8a4:	ff d2                	callq  *%rdx
            return -E_INVAL;
  800420e8a6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800420e8ab:	e9 2c 01 00 00       	jmpq   800420e9dc <sys_ipc_try_send+0x369>
        }

        r = page_insert(e->env_pml4e, pp, e->env_ipc_dstva, perm);
  800420e8b0:	8b 4d bc             	mov    -0x44(%rbp),%ecx
  800420e8b3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e8b7:	48 8b 90 00 01 00 00 	mov    0x100(%rax),%rdx
  800420e8be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e8c2:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800420e8c9:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420e8cd:	48 89 c7             	mov    %rax,%rdi
  800420e8d0:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  800420e8d7:	00 00 00 
  800420e8da:	ff d0                	callq  *%rax
  800420e8dc:	89 45 ec             	mov    %eax,-0x14(%rbp)
        if (r < 0) {
  800420e8df:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800420e8e3:	79 63                	jns    800420e948 <sys_ipc_try_send+0x2d5>
            cprintf("[%08x] page_insert %08x failed in sys_ipc_try_send (%e)\n", curenv->env_id, srcva, r);
  800420e8e5:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e8ec:	00 00 00 
  800420e8ef:	ff d0                	callq  *%rax
  800420e8f1:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e8f8:	00 00 00 
  800420e8fb:	48 98                	cltq   
  800420e8fd:	48 c1 e0 03          	shl    $0x3,%rax
  800420e901:	48 89 c1             	mov    %rax,%rcx
  800420e904:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e908:	48 01 c8             	add    %rcx,%rax
  800420e90b:	48 01 d0             	add    %rdx,%rax
  800420e90e:	48 83 c0 08          	add    $0x8,%rax
  800420e912:	48 8b 00             	mov    (%rax),%rax
  800420e915:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e91b:	8b 4d ec             	mov    -0x14(%rbp),%ecx
  800420e91e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800420e922:	89 c6                	mov    %eax,%esi
  800420e924:	48 bf 60 f8 21 04 80 	movabs $0x800421f860,%rdi
  800420e92b:	00 00 00 
  800420e92e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420e933:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800420e93a:	00 00 00 
  800420e93d:	41 ff d0             	callq  *%r8
            return r;
  800420e940:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800420e943:	e9 94 00 00 00       	jmpq   800420e9dc <sys_ipc_try_send+0x369>
        }

        e->env_ipc_perm = perm;
  800420e948:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e94c:	8b 55 bc             	mov    -0x44(%rbp),%edx
  800420e94f:	89 90 10 01 00 00    	mov    %edx,0x110(%rax)
  800420e955:	eb 0e                	jmp    800420e965 <sys_ipc_try_send+0x2f2>
    } else {
        e->env_ipc_perm = 0;
  800420e957:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e95b:	c7 80 10 01 00 00 00 	movl   $0x0,0x110(%rax)
  800420e962:	00 00 00 
    }

    e->env_ipc_recving = 0;
  800420e965:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e969:	c6 80 f8 00 00 00 00 	movb   $0x0,0xf8(%rax)
    e->env_ipc_from = curenv->env_id;
  800420e970:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
  800420e974:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e97b:	00 00 00 
  800420e97e:	ff d0                	callq  *%rax
  800420e980:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420e987:	00 00 00 
  800420e98a:	48 98                	cltq   
  800420e98c:	48 c1 e0 03          	shl    $0x3,%rax
  800420e990:	48 89 c1             	mov    %rax,%rcx
  800420e993:	48 c1 e1 04          	shl    $0x4,%rcx
  800420e997:	48 01 c8             	add    %rcx,%rax
  800420e99a:	48 01 d0             	add    %rdx,%rax
  800420e99d:	48 83 c0 08          	add    $0x8,%rax
  800420e9a1:	48 8b 00             	mov    (%rax),%rax
  800420e9a4:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800420e9aa:	89 83 0c 01 00 00    	mov    %eax,0x10c(%rbx)
    e->env_ipc_value = value;
  800420e9b0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9b4:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800420e9b7:	89 90 08 01 00 00    	mov    %edx,0x108(%rax)
    e->env_tf.tf_regs.reg_rax = 0;
  800420e9bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9c1:	48 c7 40 70 00 00 00 	movq   $0x0,0x70(%rax)
  800420e9c8:	00 
    e->env_status = ENV_RUNNABLE;
  800420e9c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420e9cd:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800420e9d4:	00 00 00 
    return 0;
  800420e9d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420e9dc:	48 83 c4 48          	add    $0x48,%rsp
  800420e9e0:	5b                   	pop    %rbx
  800420e9e1:	5d                   	pop    %rbp
  800420e9e2:	c3                   	retq   

000000800420e9e3 <sys_ipc_recv>:
// return 0 on success.
// Return < 0 on error.  Errors are:
//	-E_INVAL if dstva < UTOP but dstva is not page-aligned.
static int
sys_ipc_recv(void *dstva)
{
  800420e9e3:	55                   	push   %rbp
  800420e9e4:	48 89 e5             	mov    %rsp,%rbp
  800420e9e7:	48 83 ec 10          	sub    $0x10,%rsp
  800420e9eb:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	if (curenv->env_ipc_recving)
  800420e9ef:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420e9f6:	00 00 00 
  800420e9f9:	ff d0                	callq  *%rax
  800420e9fb:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ea02:	00 00 00 
  800420ea05:	48 98                	cltq   
  800420ea07:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea0b:	48 89 c1             	mov    %rax,%rcx
  800420ea0e:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea12:	48 01 c8             	add    %rcx,%rax
  800420ea15:	48 01 d0             	add    %rdx,%rax
  800420ea18:	48 83 c0 08          	add    $0x8,%rax
  800420ea1c:	48 8b 00             	mov    (%rax),%rax
  800420ea1f:	0f b6 80 f8 00 00 00 	movzbl 0xf8(%rax),%eax
  800420ea26:	84 c0                	test   %al,%al
  800420ea28:	74 2a                	je     800420ea54 <sys_ipc_recv+0x71>
		panic("already recving!");
  800420ea2a:	48 ba 99 f8 21 04 80 	movabs $0x800421f899,%rdx
  800420ea31:	00 00 00 
  800420ea34:	be 7b 01 00 00       	mov    $0x17b,%esi
  800420ea39:	48 bf aa f8 21 04 80 	movabs $0x800421f8aa,%rdi
  800420ea40:	00 00 00 
  800420ea43:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ea48:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800420ea4f:	00 00 00 
  800420ea52:	ff d1                	callq  *%rcx

	curenv->env_ipc_recving = 1;
  800420ea54:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420ea5b:	00 00 00 
  800420ea5e:	ff d0                	callq  *%rax
  800420ea60:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ea67:	00 00 00 
  800420ea6a:	48 98                	cltq   
  800420ea6c:	48 c1 e0 03          	shl    $0x3,%rax
  800420ea70:	48 89 c1             	mov    %rax,%rcx
  800420ea73:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ea77:	48 01 c8             	add    %rcx,%rax
  800420ea7a:	48 01 d0             	add    %rdx,%rax
  800420ea7d:	48 83 c0 08          	add    $0x8,%rax
  800420ea81:	48 8b 00             	mov    (%rax),%rax
  800420ea84:	c6 80 f8 00 00 00 01 	movb   $0x1,0xf8(%rax)
	curenv->env_ipc_dstva = dstva;
  800420ea8b:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420ea92:	00 00 00 
  800420ea95:	ff d0                	callq  *%rax
  800420ea97:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ea9e:	00 00 00 
  800420eaa1:	48 98                	cltq   
  800420eaa3:	48 c1 e0 03          	shl    $0x3,%rax
  800420eaa7:	48 89 c1             	mov    %rax,%rcx
  800420eaaa:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eaae:	48 01 c8             	add    %rcx,%rax
  800420eab1:	48 01 d0             	add    %rdx,%rax
  800420eab4:	48 83 c0 08          	add    $0x8,%rax
  800420eab8:	48 8b 00             	mov    (%rax),%rax
  800420eabb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800420eabf:	48 89 90 00 01 00 00 	mov    %rdx,0x100(%rax)
	curenv->env_status = ENV_NOT_RUNNABLE;
  800420eac6:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420eacd:	00 00 00 
  800420ead0:	ff d0                	callq  *%rax
  800420ead2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ead9:	00 00 00 
  800420eadc:	48 98                	cltq   
  800420eade:	48 c1 e0 03          	shl    $0x3,%rax
  800420eae2:	48 89 c1             	mov    %rax,%rcx
  800420eae5:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eae9:	48 01 c8             	add    %rcx,%rax
  800420eaec:	48 01 d0             	add    %rdx,%rax
  800420eaef:	48 83 c0 08          	add    $0x8,%rax
  800420eaf3:	48 8b 00             	mov    (%rax),%rax
  800420eaf6:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420eafd:	00 00 00 
	sched_yield();
  800420eb00:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  800420eb07:	00 00 00 
  800420eb0a:	ff d0                	callq  *%rax

000000800420eb0c <sys_time_msec>:


// Return the current time.
static int
sys_time_msec(void)
{
  800420eb0c:	55                   	push   %rbp
  800420eb0d:	48 89 e5             	mov    %rsp,%rbp
	return (int) time_msec();
  800420eb10:	48 b8 58 94 21 04 80 	movabs $0x8004219458,%rax
  800420eb17:	00 00 00 
  800420eb1a:	ff d0                	callq  *%rax
}
  800420eb1c:	5d                   	pop    %rbp
  800420eb1d:	c3                   	retq   

000000800420eb1e <sys_net_transmit>:

static int
sys_net_transmit(const void *data, size_t len)
{
  800420eb1e:	55                   	push   %rbp
  800420eb1f:	48 89 e5             	mov    %rsp,%rbp
  800420eb22:	48 83 ec 10          	sub    $0x10,%rsp
  800420eb26:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420eb2a:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, data, len, 0);
  800420eb2e:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420eb35:	00 00 00 
  800420eb38:	ff d0                	callq  *%rax
  800420eb3a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420eb41:	00 00 00 
  800420eb44:	48 98                	cltq   
  800420eb46:	48 c1 e0 03          	shl    $0x3,%rax
  800420eb4a:	48 89 c1             	mov    %rax,%rcx
  800420eb4d:	48 c1 e1 04          	shl    $0x4,%rcx
  800420eb51:	48 01 c8             	add    %rcx,%rax
  800420eb54:	48 01 d0             	add    %rdx,%rax
  800420eb57:	48 83 c0 08          	add    $0x8,%rax
  800420eb5b:	48 8b 00             	mov    (%rax),%rax
  800420eb5e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420eb62:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420eb66:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420eb6b:	48 89 c7             	mov    %rax,%rdi
  800420eb6e:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420eb75:	00 00 00 
  800420eb78:	ff d0                	callq  *%rax
	return e1000_transmit(data, len);
  800420eb7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eb7e:	89 c2                	mov    %eax,%edx
  800420eb80:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eb84:	89 d6                	mov    %edx,%esi
  800420eb86:	48 89 c7             	mov    %rax,%rdi
  800420eb89:	48 b8 e1 85 21 04 80 	movabs $0x80042185e1,%rax
  800420eb90:	00 00 00 
  800420eb93:	ff d0                	callq  *%rax
}
  800420eb95:	c9                   	leaveq 
  800420eb96:	c3                   	retq   

000000800420eb97 <sys_net_receive>:

static int
sys_net_receive(void *buf, size_t len)
{
  800420eb97:	55                   	push   %rbp
  800420eb98:	48 89 e5             	mov    %rsp,%rbp
  800420eb9b:	48 83 ec 10          	sub    $0x10,%rsp
  800420eb9f:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420eba3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	user_mem_assert(curenv, buf, len, PTE_W);
  800420eba7:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420ebae:	00 00 00 
  800420ebb1:	ff d0                	callq  *%rax
  800420ebb3:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ebba:	00 00 00 
  800420ebbd:	48 98                	cltq   
  800420ebbf:	48 c1 e0 03          	shl    $0x3,%rax
  800420ebc3:	48 89 c1             	mov    %rax,%rcx
  800420ebc6:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ebca:	48 01 c8             	add    %rcx,%rax
  800420ebcd:	48 01 d0             	add    %rdx,%rax
  800420ebd0:	48 83 c0 08          	add    $0x8,%rax
  800420ebd4:	48 8b 00             	mov    (%rax),%rax
  800420ebd7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420ebdb:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  800420ebdf:	b9 02 00 00 00       	mov    $0x2,%ecx
  800420ebe4:	48 89 c7             	mov    %rax,%rdi
  800420ebe7:	48 b8 5f 41 20 04 80 	movabs $0x800420415f,%rax
  800420ebee:	00 00 00 
  800420ebf1:	ff d0                	callq  *%rax
	return e1000_receive(buf, len);
  800420ebf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ebf7:	89 c2                	mov    %eax,%edx
  800420ebf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ebfd:	89 d6                	mov    %edx,%esi
  800420ebff:	48 89 c7             	mov    %rax,%rdi
  800420ec02:	48 b8 50 87 21 04 80 	movabs $0x8004218750,%rax
  800420ec09:	00 00 00 
  800420ec0c:	ff d0                	callq  *%rax
}
  800420ec0e:	c9                   	leaveq 
  800420ec0f:	c3                   	retq   

000000800420ec10 <sys_vmx_list_vms>:

#ifndef VMM_GUEST
static void
sys_vmx_list_vms() {
  800420ec10:	55                   	push   %rbp
  800420ec11:	48 89 e5             	mov    %rsp,%rbp
	vmx_list_vms();
  800420ec14:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec19:	48 ba 35 a9 21 04 80 	movabs $0x800421a935,%rdx
  800420ec20:	00 00 00 
  800420ec23:	ff d2                	callq  *%rdx
}
  800420ec25:	5d                   	pop    %rbp
  800420ec26:	c3                   	retq   

000000800420ec27 <sys_vmx_sel_resume>:

static bool
sys_vmx_sel_resume(int i) {
  800420ec27:	55                   	push   %rbp
  800420ec28:	48 89 e5             	mov    %rsp,%rbp
  800420ec2b:	48 83 ec 10          	sub    $0x10,%rsp
  800420ec2f:	89 7d fc             	mov    %edi,-0x4(%rbp)
	return vmx_sel_resume(i);
  800420ec32:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ec35:	89 c7                	mov    %eax,%edi
  800420ec37:	48 b8 f5 a9 21 04 80 	movabs $0x800421a9f5,%rax
  800420ec3e:	00 00 00 
  800420ec41:	ff d0                	callq  *%rax
}
  800420ec43:	c9                   	leaveq 
  800420ec44:	c3                   	retq   

000000800420ec45 <sys_vmx_get_vmdisk_number>:

static int
sys_vmx_get_vmdisk_number() {
  800420ec45:	55                   	push   %rbp
  800420ec46:	48 89 e5             	mov    %rsp,%rbp
	return vmx_get_vmdisk_number();
  800420ec49:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec4e:	48 ba 30 d4 21 04 80 	movabs $0x800421d430,%rdx
  800420ec55:	00 00 00 
  800420ec58:	ff d2                	callq  *%rdx
}
  800420ec5a:	5d                   	pop    %rbp
  800420ec5b:	c3                   	retq   

000000800420ec5c <sys_vmx_incr_vmdisk_number>:

static void
sys_vmx_incr_vmdisk_number() {
  800420ec5c:	55                   	push   %rbp
  800420ec5d:	48 89 e5             	mov    %rsp,%rbp
	vmx_incr_vmdisk_number();
  800420ec60:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ec65:	48 ba 42 d4 21 04 80 	movabs $0x800421d442,%rdx
  800420ec6c:	00 00 00 
  800420ec6f:	ff d2                	callq  *%rdx
}
  800420ec71:	5d                   	pop    %rbp
  800420ec72:	c3                   	retq   

000000800420ec73 <sys_ept_map>:
//       instead of the normal page table. 
// 
static int
sys_ept_map(envid_t srcenvid, void *srcva,
	    envid_t guest, void* guest_pa, int perm)
{
  800420ec73:	55                   	push   %rbp
  800420ec74:	48 89 e5             	mov    %rsp,%rbp
  800420ec77:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420ec7b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420ec7e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ec82:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420ec85:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420ec89:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
    /* Your code here */
    return 0;
  800420ec8d:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800420ec92:	c9                   	leaveq 
  800420ec93:	c3                   	retq   

000000800420ec94 <sys_env_mkguest>:

static envid_t
	sys_env_mkguest(uint64_t gphysz, uint64_t gRIP) {
  800420ec94:	55                   	push   %rbp
  800420ec95:	48 89 e5             	mov    %rsp,%rbp
  800420ec98:	48 83 ec 20          	sub    $0x20,%rsp
  800420ec9c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420eca0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	int r;
	struct Env *e;

	// Check if the processor has VMX support.
	if ( !vmx_check_support() ) {
  800420eca4:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eca9:	48 ba cb aa 21 04 80 	movabs $0x800421aacb,%rdx
  800420ecb0:	00 00 00 
  800420ecb3:	ff d2                	callq  *%rdx
  800420ecb5:	83 f0 01             	xor    $0x1,%eax
  800420ecb8:	84 c0                	test   %al,%al
  800420ecba:	74 0a                	je     800420ecc6 <sys_env_mkguest+0x32>
		return -E_NO_VMX;
  800420ecbc:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800420ecc1:	e9 b1 00 00 00       	jmpq   800420ed77 <sys_env_mkguest+0xe3>
	} else if ( !vmx_check_ept() ) {
  800420ecc6:	b8 00 00 00 00       	mov    $0x0,%eax
  800420eccb:	48 ba 4c ab 21 04 80 	movabs $0x800421ab4c,%rdx
  800420ecd2:	00 00 00 
  800420ecd5:	ff d2                	callq  *%rdx
  800420ecd7:	83 f0 01             	xor    $0x1,%eax
  800420ecda:	84 c0                	test   %al,%al
  800420ecdc:	74 0a                	je     800420ece8 <sys_env_mkguest+0x54>
		return -E_NO_EPT;
  800420ecde:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
  800420ece3:	e9 8f 00 00 00       	jmpq   800420ed77 <sys_env_mkguest+0xe3>
	} 
	if ((r = env_guest_alloc(&e, curenv->env_id)) < 0)
  800420ece8:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420ecef:	00 00 00 
  800420ecf2:	ff d0                	callq  *%rax
  800420ecf4:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420ecfb:	00 00 00 
  800420ecfe:	48 98                	cltq   
  800420ed00:	48 c1 e0 03          	shl    $0x3,%rax
  800420ed04:	48 89 c1             	mov    %rax,%rcx
  800420ed07:	48 c1 e1 04          	shl    $0x4,%rcx
  800420ed0b:	48 01 c8             	add    %rcx,%rax
  800420ed0e:	48 01 d0             	add    %rdx,%rax
  800420ed11:	48 83 c0 08          	add    $0x8,%rax
  800420ed15:	48 8b 00             	mov    (%rax),%rax
  800420ed18:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800420ed1e:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
  800420ed22:	89 d6                	mov    %edx,%esi
  800420ed24:	48 89 c7             	mov    %rax,%rdi
  800420ed27:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  800420ed2e:	00 00 00 
  800420ed31:	ff d0                	callq  *%rax
  800420ed33:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800420ed36:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800420ed3a:	79 05                	jns    800420ed41 <sys_env_mkguest+0xad>
		return r;
  800420ed3c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420ed3f:	eb 36                	jmp    800420ed77 <sys_env_mkguest+0xe3>
	e->env_status = ENV_NOT_RUNNABLE;
  800420ed41:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed45:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800420ed4c:	00 00 00 
	e->env_vmxinfo.phys_sz = gphysz;
  800420ed4f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed53:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ed57:	48 89 90 20 01 00 00 	mov    %rdx,0x120(%rax)
	e->env_tf.tf_rip = gRIP;
  800420ed5e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed62:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ed66:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
	return e->env_id;
  800420ed6d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ed71:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
}
  800420ed77:	c9                   	leaveq 
  800420ed78:	c3                   	retq   

000000800420ed79 <syscall>:
#endif //!VMM_GUEST

// Dispatches to the correct kernel function, passing the arguments.
int64_t
syscall(uint64_t syscallno, uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  800420ed79:	55                   	push   %rbp
  800420ed7a:	48 89 e5             	mov    %rsp,%rbp
  800420ed7d:	48 83 ec 30          	sub    $0x30,%rsp
  800420ed81:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800420ed85:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420ed89:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800420ed8d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800420ed91:	4c 89 45 d8          	mov    %r8,-0x28(%rbp)
  800420ed95:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
	switch (syscallno) {
  800420ed99:	48 83 7d f8 16       	cmpq   $0x16,-0x8(%rbp)
  800420ed9e:	0f 87 c6 02 00 00    	ja     800420f06a <syscall+0x2f1>
  800420eda4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420eda8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800420edaf:	00 
  800420edb0:	48 b8 c0 f8 21 04 80 	movabs $0x800421f8c0,%rax
  800420edb7:	00 00 00 
  800420edba:	48 01 d0             	add    %rdx,%rax
  800420edbd:	48 8b 00             	mov    (%rax),%rax
  800420edc0:	ff e0                	jmpq   *%rax
	case SYS_cputs:
		sys_cputs((const char*) a1, a2);
  800420edc2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420edc6:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420edca:	48 89 d6             	mov    %rdx,%rsi
  800420edcd:	48 89 c7             	mov    %rax,%rdi
  800420edd0:	48 b8 d9 df 20 04 80 	movabs $0x800420dfd9,%rax
  800420edd7:	00 00 00 
  800420edda:	ff d0                	callq  *%rax
		return 0;
  800420eddc:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ede1:	e9 8b 02 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_cgetc:
		return sys_cgetc();
  800420ede6:	48 b8 5d e0 20 04 80 	movabs $0x800420e05d,%rax
  800420eded:	00 00 00 
  800420edf0:	ff d0                	callq  *%rax
  800420edf2:	48 98                	cltq   
  800420edf4:	e9 78 02 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_getenvid:
		return sys_getenvid();
  800420edf9:	48 b8 6f e0 20 04 80 	movabs $0x800420e06f,%rax
  800420ee00:	00 00 00 
  800420ee03:	ff d0                	callq  *%rax
  800420ee05:	48 98                	cltq   
  800420ee07:	e9 65 02 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_env_destroy:
		return sys_env_destroy(a1);
  800420ee0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee10:	89 c7                	mov    %eax,%edi
  800420ee12:	48 b8 ab e0 20 04 80 	movabs $0x800420e0ab,%rax
  800420ee19:	00 00 00 
  800420ee1c:	ff d0                	callq  *%rax
  800420ee1e:	48 98                	cltq   
  800420ee20:	e9 4c 02 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_page_alloc:
		return sys_page_alloc(a1, (void*) a2, a3);
  800420ee25:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ee29:	89 c2                	mov    %eax,%edx
  800420ee2b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420ee2f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee33:	48 89 ce             	mov    %rcx,%rsi
  800420ee36:	89 c7                	mov    %eax,%edi
  800420ee38:	48 b8 7e e3 20 04 80 	movabs $0x800420e37e,%rax
  800420ee3f:	00 00 00 
  800420ee42:	ff d0                	callq  *%rax
  800420ee44:	48 98                	cltq   
  800420ee46:	e9 26 02 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_page_map:
		return sys_page_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420ee4b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420ee4f:	89 c7                	mov    %eax,%edi
  800420ee51:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420ee55:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420ee59:	89 c2                	mov    %eax,%edx
  800420ee5b:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420ee5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee63:	41 89 f8             	mov    %edi,%r8d
  800420ee66:	89 c7                	mov    %eax,%edi
  800420ee68:	48 b8 67 e4 20 04 80 	movabs $0x800420e467,%rax
  800420ee6f:	00 00 00 
  800420ee72:	ff d0                	callq  *%rax
  800420ee74:	48 98                	cltq   
  800420ee76:	e9 f6 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_page_unmap:
		return sys_page_unmap(a1, (void*) a2);
  800420ee7b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ee7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ee83:	48 89 d6             	mov    %rdx,%rsi
  800420ee86:	89 c7                	mov    %eax,%edi
  800420ee88:	48 b8 ec e5 20 04 80 	movabs $0x800420e5ec,%rax
  800420ee8f:	00 00 00 
  800420ee92:	ff d0                	callq  *%rax
  800420ee94:	48 98                	cltq   
  800420ee96:	e9 d6 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_exofork:
		return sys_exofork();
  800420ee9b:	48 b8 0b e1 20 04 80 	movabs $0x800420e10b,%rax
  800420eea2:	00 00 00 
  800420eea5:	ff d0                	callq  *%rax
  800420eea7:	48 98                	cltq   
  800420eea9:	e9 c3 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_env_set_status:
		return sys_env_set_status(a1, a2);
  800420eeae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420eeb2:	89 c2                	mov    %eax,%edx
  800420eeb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eeb8:	89 d6                	mov    %edx,%esi
  800420eeba:	89 c7                	mov    %eax,%edi
  800420eebc:	48 b8 e0 e1 20 04 80 	movabs $0x800420e1e0,%rax
  800420eec3:	00 00 00 
  800420eec6:	ff d0                	callq  *%rax
  800420eec8:	48 98                	cltq   
  800420eeca:	e9 a2 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_env_set_trapframe:
		return sys_env_set_trapframe(a1, (struct Trapframe*) a2);
  800420eecf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eed3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eed7:	48 89 d6             	mov    %rdx,%rsi
  800420eeda:	89 c7                	mov    %eax,%edi
  800420eedc:	48 b8 40 e2 20 04 80 	movabs $0x800420e240,%rax
  800420eee3:	00 00 00 
  800420eee6:	ff d0                	callq  *%rax
  800420eee8:	48 98                	cltq   
  800420eeea:	e9 82 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_env_set_pgfault_upcall:
		return sys_env_set_pgfault_upcall(a1, (void*) a2);
  800420eeef:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eef3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eef7:	48 89 d6             	mov    %rdx,%rsi
  800420eefa:	89 c7                	mov    %eax,%edi
  800420eefc:	48 b8 2e e3 20 04 80 	movabs $0x800420e32e,%rax
  800420ef03:	00 00 00 
  800420ef06:	ff d0                	callq  *%rax
  800420ef08:	48 98                	cltq   
  800420ef0a:	e9 62 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_yield:
		sys_yield();
  800420ef0f:	48 b8 fb e0 20 04 80 	movabs $0x800420e0fb,%rax
  800420ef16:	00 00 00 
  800420ef19:	ff d0                	callq  *%rax
		return 0;
  800420ef1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef20:	e9 4c 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_ipc_try_send:
		return sys_ipc_try_send(a1, a2, (void*) a3, a4);
  800420ef25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420ef29:	89 c1                	mov    %eax,%ecx
  800420ef2b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800420ef2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ef33:	89 c6                	mov    %eax,%esi
  800420ef35:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef39:	89 c7                	mov    %eax,%edi
  800420ef3b:	48 b8 73 e6 20 04 80 	movabs $0x800420e673,%rax
  800420ef42:	00 00 00 
  800420ef45:	ff d0                	callq  *%rax
  800420ef47:	48 98                	cltq   
  800420ef49:	e9 23 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_ipc_recv:
		sys_ipc_recv((void*) a1);
  800420ef4e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef52:	48 89 c7             	mov    %rax,%rdi
  800420ef55:	48 b8 e3 e9 20 04 80 	movabs $0x800420e9e3,%rax
  800420ef5c:	00 00 00 
  800420ef5f:	ff d0                	callq  *%rax
		return 0;
  800420ef61:	b8 00 00 00 00       	mov    $0x0,%eax
  800420ef66:	e9 06 01 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_time_msec:
		return sys_time_msec();
  800420ef6b:	48 b8 0c eb 20 04 80 	movabs $0x800420eb0c,%rax
  800420ef72:	00 00 00 
  800420ef75:	ff d0                	callq  *%rax
  800420ef77:	48 98                	cltq   
  800420ef79:	e9 f3 00 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_net_transmit:
		return sys_net_transmit((const void*)a1, a2);
  800420ef7e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420ef82:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ef86:	48 89 d6             	mov    %rdx,%rsi
  800420ef89:	48 89 c7             	mov    %rax,%rdi
  800420ef8c:	48 b8 1e eb 20 04 80 	movabs $0x800420eb1e,%rax
  800420ef93:	00 00 00 
  800420ef96:	ff d0                	callq  *%rax
  800420ef98:	48 98                	cltq   
  800420ef9a:	e9 d2 00 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_net_receive:
		return sys_net_receive((void*)a1, a2);
  800420ef9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efa3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420efa7:	48 89 d6             	mov    %rdx,%rsi
  800420efaa:	48 89 c7             	mov    %rax,%rdi
  800420efad:	48 b8 97 eb 20 04 80 	movabs $0x800420eb97,%rax
  800420efb4:	00 00 00 
  800420efb7:	ff d0                	callq  *%rax
  800420efb9:	48 98                	cltq   
  800420efbb:	e9 b1 00 00 00       	jmpq   800420f071 <syscall+0x2f8>
#ifndef VMM_GUEST
	case SYS_ept_map:
		return sys_ept_map(a1, (void*) a2, a3, (void*) a4, a5);
  800420efc0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420efc4:	89 c7                	mov    %eax,%edi
  800420efc6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800420efca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420efce:	89 c2                	mov    %eax,%edx
  800420efd0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  800420efd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420efd8:	41 89 f8             	mov    %edi,%r8d
  800420efdb:	89 c7                	mov    %eax,%edi
  800420efdd:	48 b8 73 ec 20 04 80 	movabs $0x800420ec73,%rax
  800420efe4:	00 00 00 
  800420efe7:	ff d0                	callq  *%rax
  800420efe9:	48 98                	cltq   
  800420efeb:	e9 81 00 00 00       	jmpq   800420f071 <syscall+0x2f8>
	case SYS_env_mkguest:
		return sys_env_mkguest(a1, a2);
  800420eff0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420eff4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420eff8:	48 89 d6             	mov    %rdx,%rsi
  800420effb:	48 89 c7             	mov    %rax,%rdi
  800420effe:	48 b8 94 ec 20 04 80 	movabs $0x800420ec94,%rax
  800420f005:	00 00 00 
  800420f008:	ff d0                	callq  *%rax
  800420f00a:	48 98                	cltq   
  800420f00c:	eb 63                	jmp    800420f071 <syscall+0x2f8>
	case SYS_vmx_list_vms:
		sys_vmx_list_vms();
  800420f00e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f013:	48 ba 10 ec 20 04 80 	movabs $0x800420ec10,%rdx
  800420f01a:	00 00 00 
  800420f01d:	ff d2                	callq  *%rdx
		return 0;
  800420f01f:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f024:	eb 4b                	jmp    800420f071 <syscall+0x2f8>
	case SYS_vmx_sel_resume:
		return sys_vmx_sel_resume(a1);
  800420f026:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800420f02a:	89 c7                	mov    %eax,%edi
  800420f02c:	48 b8 27 ec 20 04 80 	movabs $0x800420ec27,%rax
  800420f033:	00 00 00 
  800420f036:	ff d0                	callq  *%rax
  800420f038:	0f b6 c0             	movzbl %al,%eax
  800420f03b:	eb 34                	jmp    800420f071 <syscall+0x2f8>
	case SYS_vmx_get_vmdisk_number:
		return sys_vmx_get_vmdisk_number();
  800420f03d:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f042:	48 ba 45 ec 20 04 80 	movabs $0x800420ec45,%rdx
  800420f049:	00 00 00 
  800420f04c:	ff d2                	callq  *%rdx
  800420f04e:	48 98                	cltq   
  800420f050:	eb 1f                	jmp    800420f071 <syscall+0x2f8>
	case SYS_vmx_incr_vmdisk_number:
		sys_vmx_incr_vmdisk_number();
  800420f052:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f057:	48 ba 5c ec 20 04 80 	movabs $0x800420ec5c,%rdx
  800420f05e:	00 00 00 
  800420f061:	ff d2                	callq  *%rdx
		return 0;
  800420f063:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f068:	eb 07                	jmp    800420f071 <syscall+0x2f8>
#endif

	default:
		return -E_NO_SYS;
  800420f06a:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
	}
}
  800420f071:	c9                   	leaveq 
  800420f072:	c3                   	retq   

000000800420f073 <_export_sys_ept_map>:

#ifdef TEST_EPT_MAP
int
_export_sys_ept_map(envid_t srcenvid, void *srcva,
		    envid_t guest, void* guest_pa, int perm)
{
  800420f073:	55                   	push   %rbp
  800420f074:	48 89 e5             	mov    %rsp,%rbp
  800420f077:	48 83 ec 20          	sub    $0x20,%rsp
  800420f07b:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800420f07e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  800420f082:	89 55 f8             	mov    %edx,-0x8(%rbp)
  800420f085:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
  800420f089:	44 89 45 e4          	mov    %r8d,-0x1c(%rbp)
	return sys_ept_map(srcenvid, srcva, guest, guest_pa, perm);
  800420f08d:	8b 7d e4             	mov    -0x1c(%rbp),%edi
  800420f090:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800420f094:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800420f097:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  800420f09b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800420f09e:	41 89 f8             	mov    %edi,%r8d
  800420f0a1:	89 c7                	mov    %eax,%edi
  800420f0a3:	48 b8 73 ec 20 04 80 	movabs $0x800420ec73,%rax
  800420f0aa:	00 00 00 
  800420f0ad:	ff d0                	callq  *%rax
}
  800420f0af:	c9                   	leaveq 
  800420f0b0:	c3                   	retq   

000000800420f0b1 <list_func_die>:
  800420f0b1:	55                   	push   %rbp
  800420f0b2:	48 89 e5             	mov    %rsp,%rbp
  800420f0b5:	48 81 ec f0 61 00 00 	sub    $0x61f0,%rsp
  800420f0bc:	48 89 bd 58 9e ff ff 	mov    %rdi,-0x61a8(%rbp)
  800420f0c3:	48 89 b5 50 9e ff ff 	mov    %rsi,-0x61b0(%rbp)
  800420f0ca:	48 89 95 48 9e ff ff 	mov    %rdx,-0x61b8(%rbp)
  800420f0d1:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f0d8:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  800420f0df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800420f0e3:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f0ea:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f0f1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f0f5:	48 8b 95 50 9e ff ff 	mov    -0x61b0(%rbp),%rdx
  800420f0fc:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f103:	48 89 d1             	mov    %rdx,%rcx
  800420f106:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f10b:	48 89 ce             	mov    %rcx,%rsi
  800420f10e:	48 89 c7             	mov    %rax,%rdi
  800420f111:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  800420f118:	00 00 00 
  800420f11b:	ff d0                	callq  *%rax
  800420f11d:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
  800420f124:	00 
  800420f125:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f12c:	00 
  800420f12d:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f134:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f138:	48 83 f8 2e          	cmp    $0x2e,%rax
  800420f13c:	74 0a                	je     800420f148 <list_func_die+0x97>
  800420f13e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f143:	e9 cd 06 00 00       	jmpq   800420f815 <list_func_die+0x764>
  800420f148:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  800420f14f:	ba 38 00 00 00       	mov    $0x38,%edx
  800420f154:	be 00 00 00 00       	mov    $0x0,%esi
  800420f159:	48 89 c7             	mov    %rax,%rdi
  800420f15c:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  800420f163:	00 00 00 
  800420f166:	ff d0                	callq  *%rax
  800420f168:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f16f:	be 11 00 00 00       	mov    $0x11,%esi
  800420f174:	48 89 c7             	mov    %rax,%rdi
  800420f177:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f17e:	00 00 00 
  800420f181:	ff d0                	callq  *%rax
  800420f183:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420f187:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f18e:	be 12 00 00 00       	mov    $0x12,%esi
  800420f193:	48 89 c7             	mov    %rax,%rdi
  800420f196:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f19d:	00 00 00 
  800420f1a0:	ff d0                	callq  *%rax
  800420f1a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800420f1a6:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800420f1ab:	0f 84 5f 06 00 00    	je     800420f810 <list_func_die+0x75f>
  800420f1b1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f1b5:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f1b9:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f1c0:	0f 83 4a 06 00 00    	jae    800420f810 <list_func_die+0x75f>
  800420f1c6:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800420f1cb:	0f 84 3f 06 00 00    	je     800420f810 <list_func_die+0x75f>
  800420f1d1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800420f1d5:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f1d9:	48 3b 85 48 9e ff ff 	cmp    -0x61b8(%rbp),%rax
  800420f1e0:	0f 86 2a 06 00 00    	jbe    800420f810 <list_func_die+0x75f>
  800420f1e6:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f1ed:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f1f4:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f1fb:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f202:	48 89 10             	mov    %rdx,(%rax)
  800420f205:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f20c:	48 8b 90 50 03 00 00 	mov    0x350(%rax),%rdx
  800420f213:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f21a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420f21e:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f225:	48 8b 80 50 03 00 00 	mov    0x350(%rax),%rax
  800420f22c:	48 89 c7             	mov    %rax,%rdi
  800420f22f:	48 b8 a6 08 21 04 80 	movabs $0x80042108a6,%rax
  800420f236:	00 00 00 
  800420f239:	ff d0                	callq  *%rax
  800420f23b:	48 8b 95 58 9e ff ff 	mov    -0x61a8(%rbp),%rdx
  800420f242:	89 42 18             	mov    %eax,0x18(%rdx)
  800420f245:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800420f249:	48 8b 50 28          	mov    0x28(%rax),%rdx
  800420f24d:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f254:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f258:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f25f:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f266:	48 85 c0             	test   %rax,%rax
  800420f269:	75 35                	jne    800420f2a0 <list_func_die+0x1ef>
  800420f26b:	48 b9 a0 fc 21 04 80 	movabs $0x800421fca0,%rcx
  800420f272:	00 00 00 
  800420f275:	48 ba ac fc 21 04 80 	movabs $0x800421fcac,%rdx
  800420f27c:	00 00 00 
  800420f27f:	be 95 00 00 00       	mov    $0x95,%esi
  800420f284:	48 bf c1 fc 21 04 80 	movabs $0x800421fcc1,%rdi
  800420f28b:	00 00 00 
  800420f28e:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f293:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420f29a:	00 00 00 
  800420f29d:	41 ff d0             	callq  *%r8
  800420f2a0:	48 8b 85 50 9e ff ff 	mov    -0x61b0(%rbp),%rax
  800420f2a7:	48 8b 80 68 03 00 00 	mov    0x368(%rax),%rax
  800420f2ae:	48 8b 95 48 9e ff ff 	mov    -0x61b8(%rbp),%rdx
  800420f2b5:	48 8d b5 50 ff ff ff 	lea    -0xb0(%rbp),%rsi
  800420f2bc:	b9 00 00 00 00       	mov    $0x0,%ecx
  800420f2c1:	48 89 c7             	mov    %rax,%rdi
  800420f2c4:	48 b8 07 61 21 04 80 	movabs $0x8004216107,%rax
  800420f2cb:	00 00 00 
  800420f2ce:	ff d0                	callq  *%rax
  800420f2d0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800420f2d7:	89 c2                	mov    %eax,%edx
  800420f2d9:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2e0:	89 50 08             	mov    %edx,0x8(%rax)
  800420f2e3:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f2ea:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f2f1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f2f8:	00 00 00 
  800420f2fb:	48 8b 00             	mov    (%rax),%rax
  800420f2fe:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f305:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f30c:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420f310:	48 89 c7             	mov    %rax,%rdi
  800420f313:	48 b8 b7 2d 21 04 80 	movabs $0x8004212db7,%rax
  800420f31a:	00 00 00 
  800420f31d:	ff d0                	callq  *%rax
  800420f31f:	83 f8 04             	cmp    $0x4,%eax
  800420f322:	0f 84 e1 04 00 00    	je     800420f809 <list_func_die+0x758>
  800420f328:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f32f:	48 83 f8 05          	cmp    $0x5,%rax
  800420f333:	74 05                	je     800420f33a <list_func_die+0x289>
  800420f335:	e9 cf 04 00 00       	jmpq   800420f809 <list_func_die+0x758>
  800420f33a:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f341:	be 49 00 00 00       	mov    $0x49,%esi
  800420f346:	48 89 c7             	mov    %rax,%rdi
  800420f349:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f350:	00 00 00 
  800420f353:	ff d0                	callq  *%rax
  800420f355:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f359:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f35e:	0f 84 d7 00 00 00    	je     800420f43b <list_func_die+0x38a>
  800420f364:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f368:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f36c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f370:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f374:	48 01 d0             	add    %rdx,%rax
  800420f377:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f37b:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f382:	00 00 00 
  800420f385:	48 8b 08             	mov    (%rax),%rcx
  800420f388:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f38f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f393:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f397:	48 8b 38             	mov    (%rax),%rdi
  800420f39a:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f39e:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f3a2:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f3a7:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f3ab:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f3b0:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f3b4:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f3b9:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f3bd:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f3c2:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f3c6:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f3cb:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f3cf:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f3d4:	48 89 cf             	mov    %rcx,%rdi
  800420f3d7:	48 b8 dd 29 21 04 80 	movabs $0x80042129dd,%rax
  800420f3de:	00 00 00 
  800420f3e1:	ff d0                	callq  *%rax
  800420f3e3:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f3ea:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f3ef:	48 89 c7             	mov    %rax,%rdi
  800420f3f2:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f3f9:	00 00 00 
  800420f3fc:	ff d0                	callq  *%rax
  800420f3fe:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f402:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f407:	74 0e                	je     800420f417 <list_func_die+0x366>
  800420f409:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f40d:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f411:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f415:	eb 24                	jmp    800420f43b <list_func_die+0x38a>
  800420f417:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f41e:	be 49 00 00 00       	mov    $0x49,%esi
  800420f423:	48 89 c7             	mov    %rax,%rdi
  800420f426:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f42d:	00 00 00 
  800420f430:	ff d0                	callq  *%rax
  800420f432:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f436:	e9 1e ff ff ff       	jmpq   800420f359 <list_func_die+0x2a8>
  800420f43b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f442:	00 
  800420f443:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f44a:	be 02 00 00 00       	mov    $0x2,%esi
  800420f44f:	48 89 c7             	mov    %rax,%rdi
  800420f452:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f459:	00 00 00 
  800420f45c:	ff d0                	callq  *%rax
  800420f45e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f462:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f467:	0f 84 a2 00 00 00    	je     800420f50f <list_func_die+0x45e>
  800420f46d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f471:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f475:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800420f479:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f47d:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f481:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f485:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f489:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f48d:	48 83 f8 03          	cmp    $0x3,%rax
  800420f491:	72 7c                	jb     800420f50f <list_func_die+0x45e>
  800420f493:	48 83 f8 04          	cmp    $0x4,%rax
  800420f497:	76 06                	jbe    800420f49f <list_func_die+0x3ee>
  800420f499:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f49d:	75 70                	jne    800420f50f <list_func_die+0x45e>
  800420f49f:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f4a6:	00 
  800420f4a7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f4ab:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f4af:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
  800420f4b3:	0f b6 00             	movzbl (%rax),%eax
  800420f4b6:	88 45 af             	mov    %al,-0x51(%rbp)
  800420f4b9:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f4be:	80 7d af 91          	cmpb   $0x91,-0x51(%rbp)
  800420f4c2:	75 4a                	jne    800420f50e <list_func_die+0x45d>
  800420f4c4:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f4c8:	48 89 85 68 9e ff ff 	mov    %rax,-0x6198(%rbp)
  800420f4cf:	48 8d 85 68 9e ff ff 	lea    -0x6198(%rbp),%rax
  800420f4d6:	48 89 c7             	mov    %rax,%rdi
  800420f4d9:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  800420f4e0:	00 00 00 
  800420f4e3:	ff d0                	callq  *%rax
  800420f4e5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f4e9:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f4f0:	48 89 c2             	mov    %rax,%rdx
  800420f4f3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800420f4f7:	48 29 c2             	sub    %rax,%rdx
  800420f4fa:	48 89 d0             	mov    %rdx,%rax
  800420f4fd:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f501:	48 8b 85 68 9e ff ff 	mov    -0x6198(%rbp),%rax
  800420f508:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800420f50c:	eb 00                	jmp    800420f50e <list_func_die+0x45d>
  800420f50e:	90                   	nop
  800420f50f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f516:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f519:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f51d:	89 c2                	mov    %eax,%edx
  800420f51f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f526:	48 63 c9             	movslq %ecx,%rcx
  800420f529:	48 83 c1 08          	add    $0x8,%rcx
  800420f52d:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f531:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f538:	8b 50 28             	mov    0x28(%rax),%edx
  800420f53b:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f542:	48 63 d2             	movslq %edx,%rdx
  800420f545:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f549:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f54d:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f552:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f559:	8b 40 28             	mov    0x28(%rax),%eax
  800420f55c:	8d 50 01             	lea    0x1(%rax),%edx
  800420f55f:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f566:	89 50 28             	mov    %edx,0x28(%rax)
  800420f569:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f570:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f577:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f57c:	48 89 ce             	mov    %rcx,%rsi
  800420f57f:	48 89 c7             	mov    %rax,%rdi
  800420f582:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  800420f589:	00 00 00 
  800420f58c:	ff d0                	callq  *%rax
  800420f58e:	e9 40 02 00 00       	jmpq   800420f7d3 <list_func_die+0x722>
  800420f593:	48 8b 85 f8 ce ff ff 	mov    -0x3108(%rbp),%rax
  800420f59a:	48 83 f8 05          	cmp    $0x5,%rax
  800420f59e:	74 05                	je     800420f5a5 <list_func_die+0x4f4>
  800420f5a0:	e9 64 02 00 00       	jmpq   800420f809 <list_func_die+0x758>
  800420f5a5:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f5ac:	be 49 00 00 00       	mov    $0x49,%esi
  800420f5b1:	48 89 c7             	mov    %rax,%rdi
  800420f5b4:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f5bb:	00 00 00 
  800420f5be:	ff d0                	callq  *%rax
  800420f5c0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f5c4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f5c9:	0f 84 b1 00 00 00    	je     800420f680 <list_func_die+0x5cf>
  800420f5cf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f5d3:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800420f5d7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f5db:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f5df:	48 01 d0             	add    %rdx,%rax
  800420f5e2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800420f5e6:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f5ed:	00 00 00 
  800420f5f0:	48 8b 08             	mov    (%rax),%rcx
  800420f5f3:	48 8d 95 70 9e ff ff 	lea    -0x6190(%rbp),%rdx
  800420f5fa:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  800420f5fe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800420f602:	48 8b 38             	mov    (%rax),%rdi
  800420f605:	48 89 3c 24          	mov    %rdi,(%rsp)
  800420f609:	48 8b 78 08          	mov    0x8(%rax),%rdi
  800420f60d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  800420f612:	48 8b 78 10          	mov    0x10(%rax),%rdi
  800420f616:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  800420f61b:	48 8b 78 18          	mov    0x18(%rax),%rdi
  800420f61f:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  800420f624:	48 8b 78 20          	mov    0x20(%rax),%rdi
  800420f628:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  800420f62d:	48 8b 78 28          	mov    0x28(%rax),%rdi
  800420f631:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  800420f636:	48 8b 40 30          	mov    0x30(%rax),%rax
  800420f63a:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  800420f63f:	48 89 cf             	mov    %rcx,%rdi
  800420f642:	48 b8 dd 29 21 04 80 	movabs $0x80042129dd,%rax
  800420f649:	00 00 00 
  800420f64c:	ff d0                	callq  *%rax
  800420f64e:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f655:	be 0b 00 00 00       	mov    $0xb,%esi
  800420f65a:	48 89 c7             	mov    %rax,%rdi
  800420f65d:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f664:	00 00 00 
  800420f667:	ff d0                	callq  *%rax
  800420f669:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f66d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f672:	74 0c                	je     800420f680 <list_func_die+0x5cf>
  800420f674:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f678:	48 8b 40 28          	mov    0x28(%rax),%rax
  800420f67c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420f680:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  800420f687:	00 
  800420f688:	48 8d 85 e0 ce ff ff 	lea    -0x3120(%rbp),%rax
  800420f68f:	be 02 00 00 00       	mov    $0x2,%esi
  800420f694:	48 89 c7             	mov    %rax,%rdi
  800420f697:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  800420f69e:	00 00 00 
  800420f6a1:	ff d0                	callq  *%rax
  800420f6a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f6a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800420f6ac:	0f 84 a2 00 00 00    	je     800420f754 <list_func_die+0x6a3>
  800420f6b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6b6:	48 8b 40 38          	mov    0x38(%rax),%rax
  800420f6ba:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800420f6be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6c2:	48 8b 40 40          	mov    0x40(%rax),%rax
  800420f6c6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f6ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420f6ce:	48 8b 40 18          	mov    0x18(%rax),%rax
  800420f6d2:	48 83 f8 03          	cmp    $0x3,%rax
  800420f6d6:	72 7c                	jb     800420f754 <list_func_die+0x6a3>
  800420f6d8:	48 83 f8 04          	cmp    $0x4,%rax
  800420f6dc:	76 06                	jbe    800420f6e4 <list_func_die+0x633>
  800420f6de:	48 83 f8 0a          	cmp    $0xa,%rax
  800420f6e2:	75 70                	jne    800420f754 <list_func_die+0x6a3>
  800420f6e4:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
  800420f6eb:	00 
  800420f6ec:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f6f0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800420f6f4:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420f6f8:	0f b6 00             	movzbl (%rax),%eax
  800420f6fb:	88 45 97             	mov    %al,-0x69(%rbp)
  800420f6fe:	48 83 45 c0 01       	addq   $0x1,-0x40(%rbp)
  800420f703:	80 7d 97 91          	cmpb   $0x91,-0x69(%rbp)
  800420f707:	75 4a                	jne    800420f753 <list_func_die+0x6a2>
  800420f709:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f70d:	48 89 85 60 9e ff ff 	mov    %rax,-0x61a0(%rbp)
  800420f714:	48 8d 85 60 9e ff ff 	lea    -0x61a0(%rbp),%rax
  800420f71b:	48 89 c7             	mov    %rax,%rdi
  800420f71e:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  800420f725:	00 00 00 
  800420f728:	ff d0                	callq  *%rax
  800420f72a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800420f72e:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f735:	48 89 c2             	mov    %rax,%rdx
  800420f738:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800420f73c:	48 29 c2             	sub    %rax,%rdx
  800420f73f:	48 89 d0             	mov    %rdx,%rax
  800420f742:	48 01 45 c0          	add    %rax,-0x40(%rbp)
  800420f746:	48 8b 85 60 9e ff ff 	mov    -0x61a0(%rbp),%rax
  800420f74d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  800420f751:	eb 00                	jmp    800420f753 <list_func_die+0x6a2>
  800420f753:	90                   	nop
  800420f754:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f75b:	8b 48 28             	mov    0x28(%rax),%ecx
  800420f75e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420f762:	89 c2                	mov    %eax,%edx
  800420f764:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f76b:	48 63 c9             	movslq %ecx,%rcx
  800420f76e:	48 83 c1 08          	add    $0x8,%rcx
  800420f772:	89 54 88 0c          	mov    %edx,0xc(%rax,%rcx,4)
  800420f776:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f77d:	8b 50 28             	mov    0x28(%rax),%edx
  800420f780:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f787:	48 63 d2             	movslq %edx,%rdx
  800420f78a:	48 8d 4a 0a          	lea    0xa(%rdx),%rcx
  800420f78e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800420f792:	48 89 54 c8 08       	mov    %rdx,0x8(%rax,%rcx,8)
  800420f797:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f79e:	8b 40 28             	mov    0x28(%rax),%eax
  800420f7a1:	8d 50 01             	lea    0x1(%rax),%edx
  800420f7a4:	48 8b 85 58 9e ff ff 	mov    -0x61a8(%rbp),%rax
  800420f7ab:	89 50 28             	mov    %edx,0x28(%rax)
  800420f7ae:	48 8d 85 70 9e ff ff 	lea    -0x6190(%rbp),%rax
  800420f7b5:	48 8d 8d e0 ce ff ff 	lea    -0x3120(%rbp),%rcx
  800420f7bc:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420f7c1:	48 89 ce             	mov    %rcx,%rsi
  800420f7c4:	48 89 c7             	mov    %rax,%rdi
  800420f7c7:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  800420f7ce:	00 00 00 
  800420f7d1:	ff d0                	callq  *%rax
  800420f7d3:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f7da:	00 00 00 
  800420f7dd:	48 8b 00             	mov    (%rax),%rax
  800420f7e0:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420f7e4:	48 8d 95 e0 ce ff ff 	lea    -0x3120(%rbp),%rdx
  800420f7eb:	48 8d b5 70 9e ff ff 	lea    -0x6190(%rbp),%rsi
  800420f7f2:	48 89 c7             	mov    %rax,%rdi
  800420f7f5:	48 b8 73 2b 21 04 80 	movabs $0x8004212b73,%rax
  800420f7fc:	00 00 00 
  800420f7ff:	ff d0                	callq  *%rax
  800420f801:	85 c0                	test   %eax,%eax
  800420f803:	0f 84 8a fd ff ff    	je     800420f593 <list_func_die+0x4e2>
  800420f809:	b8 01 00 00 00       	mov    $0x1,%eax
  800420f80e:	eb 05                	jmp    800420f815 <list_func_die+0x764>
  800420f810:	b8 00 00 00 00       	mov    $0x0,%eax
  800420f815:	c9                   	leaveq 
  800420f816:	c3                   	retq   

000000800420f817 <debuginfo_rip>:
  800420f817:	55                   	push   %rbp
  800420f818:	48 89 e5             	mov    %rsp,%rbp
  800420f81b:	53                   	push   %rbx
  800420f81c:	48 81 ec c8 91 00 00 	sub    $0x91c8,%rsp
  800420f823:	48 89 bd 38 6e ff ff 	mov    %rdi,-0x91c8(%rbp)
  800420f82a:	48 89 b5 30 6e ff ff 	mov    %rsi,-0x91d0(%rbp)
  800420f831:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800420f838:	00 
  800420f839:	48 8b 85 38 6e ff ff 	mov    -0x91c8(%rbp),%rax
  800420f840:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800420f844:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f84b:	48 bb d2 fc 21 04 80 	movabs $0x800421fcd2,%rbx
  800420f852:	00 00 00 
  800420f855:	48 89 18             	mov    %rbx,(%rax)
  800420f858:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f85f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%rax)
  800420f866:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f86d:	48 bb d2 fc 21 04 80 	movabs $0x800421fcd2,%rbx
  800420f874:	00 00 00 
  800420f877:	48 89 58 10          	mov    %rbx,0x10(%rax)
  800420f87b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f882:	c7 40 18 09 00 00 00 	movl   $0x9,0x18(%rax)
  800420f889:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f890:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420f897:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800420f89b:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420f8a2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%rax)
  800420f8a9:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  800420f8b0:	00 00 00 
  800420f8b3:	48 39 85 38 6e ff ff 	cmp    %rax,-0x91c8(%rbp)
  800420f8ba:	76 13                	jbe    800420f8cf <debuginfo_rip+0xb8>
  800420f8bc:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800420f8c3:	00 00 00 
  800420f8c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f8ca:	e9 04 01 00 00       	jmpq   800420f9d3 <debuginfo_rip+0x1bc>
  800420f8cf:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420f8d6:	00 00 00 
  800420f8d9:	ff d0                	callq  *%rax
  800420f8db:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420f8e2:	00 00 00 
  800420f8e5:	48 98                	cltq   
  800420f8e7:	48 c1 e0 03          	shl    $0x3,%rax
  800420f8eb:	48 89 c1             	mov    %rax,%rcx
  800420f8ee:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f8f2:	48 01 c8             	add    %rcx,%rax
  800420f8f5:	48 01 d0             	add    %rdx,%rax
  800420f8f8:	48 83 c0 08          	add    $0x8,%rax
  800420f8fc:	48 8b 10             	mov    (%rax),%rdx
  800420f8ff:	48 b8 98 f2 4d 04 80 	movabs $0x80044df298,%rax
  800420f906:	00 00 00 
  800420f909:	48 8b 00             	mov    (%rax),%rax
  800420f90c:	48 39 c2             	cmp    %rax,%rdx
  800420f90f:	0f 84 83 00 00 00    	je     800420f998 <debuginfo_rip+0x181>
  800420f915:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420f91c:	00 00 00 
  800420f91f:	ff d0                	callq  *%rax
  800420f921:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420f928:	00 00 00 
  800420f92b:	48 98                	cltq   
  800420f92d:	48 c1 e0 03          	shl    $0x3,%rax
  800420f931:	48 89 c1             	mov    %rax,%rcx
  800420f934:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f938:	48 01 c8             	add    %rcx,%rax
  800420f93b:	48 01 d0             	add    %rdx,%rax
  800420f93e:	48 83 c0 08          	add    $0x8,%rax
  800420f942:	48 8b 00             	mov    (%rax),%rax
  800420f945:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f94c:	48 89 c7             	mov    %rax,%rdi
  800420f94f:	48 b8 02 63 21 04 80 	movabs $0x8004216302,%rax
  800420f956:	00 00 00 
  800420f959:	ff d0                	callq  *%rax
  800420f95b:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420f962:	00 00 00 
  800420f965:	ff d0                	callq  *%rax
  800420f967:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420f96e:	00 00 00 
  800420f971:	48 98                	cltq   
  800420f973:	48 c1 e0 03          	shl    $0x3,%rax
  800420f977:	48 89 c1             	mov    %rax,%rcx
  800420f97a:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f97e:	48 01 c8             	add    %rcx,%rax
  800420f981:	48 01 d0             	add    %rdx,%rax
  800420f984:	48 83 c0 08          	add    $0x8,%rax
  800420f988:	48 8b 10             	mov    (%rax),%rdx
  800420f98b:	48 b8 98 f2 4d 04 80 	movabs $0x80044df298,%rax
  800420f992:	00 00 00 
  800420f995:	48 89 10             	mov    %rdx,(%rax)
  800420f998:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800420f99f:	00 00 00 
  800420f9a2:	ff d0                	callq  *%rax
  800420f9a4:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800420f9ab:	00 00 00 
  800420f9ae:	48 98                	cltq   
  800420f9b0:	48 c1 e0 03          	shl    $0x3,%rax
  800420f9b4:	48 89 c1             	mov    %rax,%rcx
  800420f9b7:	48 c1 e1 04          	shl    $0x4,%rcx
  800420f9bb:	48 01 c8             	add    %rcx,%rax
  800420f9be:	48 01 d0             	add    %rdx,%rax
  800420f9c1:	48 83 c0 08          	add    $0x8,%rax
  800420f9c5:	48 8b 00             	mov    (%rax),%rax
  800420f9c8:	48 8b 80 18 01 00 00 	mov    0x118(%rax),%rax
  800420f9cf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800420f9d3:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420f9da:	00 00 00 
  800420f9dd:	48 8b 00             	mov    (%rax),%rax
  800420f9e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420f9e4:	48 89 d6             	mov    %rdx,%rsi
  800420f9e7:	48 89 c7             	mov    %rax,%rdi
  800420f9ea:	48 b8 eb 19 21 04 80 	movabs $0x80042119eb,%rax
  800420f9f1:	00 00 00 
  800420f9f4:	ff d0                	callq  *%rax
  800420f9f6:	48 bf dc fc 21 04 80 	movabs $0x800421fcdc,%rdi
  800420f9fd:	00 00 00 
  800420fa00:	48 b8 82 62 21 04 80 	movabs $0x8004216282,%rax
  800420fa07:	00 00 00 
  800420fa0a:	ff d0                	callq  *%rax
  800420fa0c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800420fa10:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa17:	00 00 00 
  800420fa1a:	48 8b 00             	mov    (%rax),%rax
  800420fa1d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fa21:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  800420fa25:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800420fa29:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa30:	00 00 00 
  800420fa33:	48 8b 00             	mov    (%rax),%rax
  800420fa36:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800420fa3a:	48 8b 52 18          	mov    0x18(%rdx),%rdx
  800420fa3e:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fa42:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa49:	00 00 00 
  800420fa4c:	48 8b 00             	mov    (%rax),%rax
  800420fa4f:	48 8b 40 10          	mov    0x10(%rax),%rax
  800420fa53:	48 85 c0             	test   %rax,%rax
  800420fa56:	75 35                	jne    800420fa8d <debuginfo_rip+0x276>
  800420fa58:	48 b9 e8 fc 21 04 80 	movabs $0x800421fce8,%rcx
  800420fa5f:	00 00 00 
  800420fa62:	48 ba ac fc 21 04 80 	movabs $0x800421fcac,%rdx
  800420fa69:	00 00 00 
  800420fa6c:	be 40 01 00 00       	mov    $0x140,%esi
  800420fa71:	48 bf c1 fc 21 04 80 	movabs $0x800421fcc1,%rdi
  800420fa78:	00 00 00 
  800420fa7b:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fa80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800420fa87:	00 00 00 
  800420fa8a:	41 ff d0             	callq  *%r8
  800420fa8d:	e9 6f 01 00 00       	jmpq   800420fc01 <debuginfo_rip+0x3ea>
  800420fa92:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fa99:	00 00 00 
  800420fa9c:	48 8b 00             	mov    (%rax),%rax
  800420fa9f:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420faa3:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420faaa:	be 00 00 00 00       	mov    $0x0,%esi
  800420faaf:	48 89 c7             	mov    %rax,%rdi
  800420fab2:	48 b8 73 2b 21 04 80 	movabs $0x8004212b73,%rax
  800420fab9:	00 00 00 
  800420fabc:	ff d0                	callq  *%rax
  800420fabe:	83 f8 04             	cmp    $0x4,%eax
  800420fac1:	75 05                	jne    800420fac8 <debuginfo_rip+0x2b1>
  800420fac3:	e9 39 01 00 00       	jmpq   800420fc01 <debuginfo_rip+0x3ea>
  800420fac8:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420facc:	48 89 85 10 a2 ff ff 	mov    %rax,-0x5df0(%rbp)
  800420fad3:	48 c7 85 18 a2 ff ff 	movq   $0x0,-0x5de8(%rbp)
  800420fada:	00 00 00 00 
  800420fade:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fae5:	00 00 00 
  800420fae8:	48 8b 00             	mov    (%rax),%rax
  800420faeb:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420faf2:	48 8d 95 b0 9e ff ff 	lea    -0x6150(%rbp),%rdx
  800420faf9:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  800420fafd:	48 89 c7             	mov    %rax,%rdi
  800420fb00:	48 b8 b7 2d 21 04 80 	movabs $0x8004212db7,%rax
  800420fb07:	00 00 00 
  800420fb0a:	ff d0                	callq  *%rax
  800420fb0c:	83 f8 04             	cmp    $0x4,%eax
  800420fb0f:	75 05                	jne    800420fb16 <debuginfo_rip+0x2ff>
  800420fb11:	e9 eb 00 00 00       	jmpq   800420fc01 <debuginfo_rip+0x3ea>
  800420fb16:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fb1a:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fb21:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fb28:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fb2f:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fb36:	48 8d 8d 20 cf ff ff 	lea    -0x30e0(%rbp),%rcx
  800420fb3d:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fb44:	48 89 ce             	mov    %rcx,%rsi
  800420fb47:	48 89 c7             	mov    %rax,%rdi
  800420fb4a:	48 b8 b1 f0 20 04 80 	movabs $0x800420f0b1,%rax
  800420fb51:	00 00 00 
  800420fb54:	ff d0                	callq  *%rax
  800420fb56:	85 c0                	test   %eax,%eax
  800420fb58:	74 30                	je     800420fb8a <debuginfo_rip+0x373>
  800420fb5a:	90                   	nop
  800420fb5b:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fb62:	00 00 00 
  800420fb65:	48 8b 00             	mov    (%rax),%rax
  800420fb68:	be 00 00 00 00       	mov    $0x0,%esi
  800420fb6d:	48 89 c7             	mov    %rax,%rdi
  800420fb70:	48 b8 8f 54 21 04 80 	movabs $0x800421548f,%rax
  800420fb77:	00 00 00 
  800420fb7a:	ff d0                	callq  *%rax
  800420fb7c:	83 f8 01             	cmp    $0x1,%eax
  800420fb7f:	0f 85 bb 00 00 00    	jne    800420fc40 <debuginfo_rip+0x429>
  800420fb85:	e9 ac 00 00 00       	jmpq   800420fc36 <debuginfo_rip+0x41f>
  800420fb8a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fb91:	00 00 00 
  800420fb94:	48 8b 00             	mov    (%rax),%rax
  800420fb97:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
  800420fb9b:	48 8d 95 40 6e ff ff 	lea    -0x91c0(%rbp),%rdx
  800420fba2:	48 8d b5 20 cf ff ff 	lea    -0x30e0(%rbp),%rsi
  800420fba9:	48 89 c7             	mov    %rax,%rdi
  800420fbac:	48 b8 73 2b 21 04 80 	movabs $0x8004212b73,%rax
  800420fbb3:	00 00 00 
  800420fbb6:	ff d0                	callq  *%rax
  800420fbb8:	85 c0                	test   %eax,%eax
  800420fbba:	79 02                	jns    800420fbbe <debuginfo_rip+0x3a7>
  800420fbbc:	eb 43                	jmp    800420fc01 <debuginfo_rip+0x3ea>
  800420fbbe:	48 8d 85 20 cf ff ff 	lea    -0x30e0(%rbp),%rax
  800420fbc5:	48 8d 8d 40 6e ff ff 	lea    -0x91c0(%rbp),%rcx
  800420fbcc:	ba 70 30 00 00       	mov    $0x3070,%edx
  800420fbd1:	48 89 ce             	mov    %rcx,%rsi
  800420fbd4:	48 89 c7             	mov    %rax,%rdi
  800420fbd7:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  800420fbde:	00 00 00 
  800420fbe1:	ff d0                	callq  *%rax
  800420fbe3:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  800420fbe7:	48 89 85 80 d2 ff ff 	mov    %rax,-0x2d80(%rbp)
  800420fbee:	48 8d 85 b0 9e ff ff 	lea    -0x6150(%rbp),%rax
  800420fbf5:	48 89 85 88 d2 ff ff 	mov    %rax,-0x2d78(%rbp)
  800420fbfc:	e9 2e ff ff ff       	jmpq   800420fb2f <debuginfo_rip+0x318>
  800420fc01:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc08:	00 00 00 
  800420fc0b:	48 8b 00             	mov    (%rax),%rax
  800420fc0e:	48 8d 55 90          	lea    -0x70(%rbp),%rdx
  800420fc12:	48 89 d6             	mov    %rdx,%rsi
  800420fc15:	48 89 c7             	mov    %rax,%rdi
  800420fc18:	48 b8 cd 1a 21 04 80 	movabs $0x8004211acd,%rax
  800420fc1f:	00 00 00 
  800420fc22:	ff d0                	callq  *%rax
  800420fc24:	85 c0                	test   %eax,%eax
  800420fc26:	0f 84 66 fe ff ff    	je     800420fa92 <debuginfo_rip+0x27b>
  800420fc2c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fc31:	e9 a0 00 00 00       	jmpq   800420fcd6 <debuginfo_rip+0x4bf>
  800420fc36:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800420fc3b:	e9 96 00 00 00       	jmpq   800420fcd6 <debuginfo_rip+0x4bf>
  800420fc40:	48 b8 80 56 23 04 80 	movabs $0x8004235680,%rax
  800420fc47:	00 00 00 
  800420fc4a:	48 8b 08             	mov    (%rax),%rcx
  800420fc4d:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420fc54:	00 00 00 
  800420fc57:	48 8b 10             	mov    (%rax),%rdx
  800420fc5a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fc61:	00 00 00 
  800420fc64:	48 8b 00             	mov    (%rax),%rax
  800420fc67:	48 8b b5 38 6e ff ff 	mov    -0x91c8(%rbp),%rsi
  800420fc6e:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fc74:	48 89 c7             	mov    %rax,%rdi
  800420fc77:	48 b8 f8 2f 21 04 80 	movabs $0x8004212ff8,%rax
  800420fc7e:	00 00 00 
  800420fc81:	ff d0                	callq  *%rax
  800420fc83:	85 c0                	test   %eax,%eax
  800420fc85:	75 4a                	jne    800420fcd1 <debuginfo_rip+0x4ba>
  800420fc87:	48 8b 85 30 6e ff ff 	mov    -0x91d0(%rbp),%rax
  800420fc8e:	48 8d 88 a8 00 00 00 	lea    0xa8(%rax),%rcx
  800420fc95:	48 b8 78 56 23 04 80 	movabs $0x8004235678,%rax
  800420fc9c:	00 00 00 
  800420fc9f:	48 8b 30             	mov    (%rax),%rsi
  800420fca2:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800420fca9:	00 00 00 
  800420fcac:	48 8b 00             	mov    (%rax),%rax
  800420fcaf:	48 8b 95 38 6e ff ff 	mov    -0x91c8(%rbp),%rdx
  800420fcb6:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800420fcbc:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800420fcc2:	48 89 c7             	mov    %rax,%rdi
  800420fcc5:	48 b8 04 43 21 04 80 	movabs $0x8004214304,%rax
  800420fccc:	00 00 00 
  800420fccf:	ff d0                	callq  *%rax
  800420fcd1:	b8 00 00 00 00       	mov    $0x0,%eax
  800420fcd6:	48 81 c4 c8 91 00 00 	add    $0x91c8,%rsp
  800420fcdd:	5b                   	pop    %rbx
  800420fcde:	5d                   	pop    %rbp
  800420fcdf:	c3                   	retq   

000000800420fce0 <printnum>:
  800420fce0:	55                   	push   %rbp
  800420fce1:	48 89 e5             	mov    %rsp,%rbp
  800420fce4:	53                   	push   %rbx
  800420fce5:	48 83 ec 38          	sub    $0x38,%rsp
  800420fce9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fced:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800420fcf1:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800420fcf5:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
  800420fcf8:	44 89 45 d0          	mov    %r8d,-0x30(%rbp)
  800420fcfc:	44 89 4d cc          	mov    %r9d,-0x34(%rbp)
  800420fd00:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800420fd03:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  800420fd07:	77 3b                	ja     800420fd44 <printnum+0x64>
  800420fd09:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800420fd0c:	44 8d 40 ff          	lea    -0x1(%rax),%r8d
  800420fd10:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
  800420fd13:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fd17:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fd1c:	48 f7 f3             	div    %rbx
  800420fd1f:	48 89 c2             	mov    %rax,%rdx
  800420fd22:	8b 7d cc             	mov    -0x34(%rbp),%edi
  800420fd25:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fd28:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  800420fd2c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd30:	41 89 f9             	mov    %edi,%r9d
  800420fd33:	48 89 c7             	mov    %rax,%rdi
  800420fd36:	48 b8 e0 fc 20 04 80 	movabs $0x800420fce0,%rax
  800420fd3d:	00 00 00 
  800420fd40:	ff d0                	callq  *%rax
  800420fd42:	eb 1e                	jmp    800420fd62 <printnum+0x82>
  800420fd44:	eb 12                	jmp    800420fd58 <printnum+0x78>
  800420fd46:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fd4a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800420fd4d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd51:	48 89 ce             	mov    %rcx,%rsi
  800420fd54:	89 d7                	mov    %edx,%edi
  800420fd56:	ff d0                	callq  *%rax
  800420fd58:	83 6d d0 01          	subl   $0x1,-0x30(%rbp)
  800420fd5c:	83 7d d0 00          	cmpl   $0x0,-0x30(%rbp)
  800420fd60:	7f e4                	jg     800420fd46 <printnum+0x66>
  800420fd62:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
  800420fd65:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800420fd69:	ba 00 00 00 00       	mov    $0x0,%edx
  800420fd6e:	48 f7 f1             	div    %rcx
  800420fd71:	48 89 d0             	mov    %rdx,%rax
  800420fd74:	48 ba f0 fe 21 04 80 	movabs $0x800421fef0,%rdx
  800420fd7b:	00 00 00 
  800420fd7e:	0f b6 04 02          	movzbl (%rdx,%rax,1),%eax
  800420fd82:	0f be d0             	movsbl %al,%edx
  800420fd85:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  800420fd89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fd8d:	48 89 ce             	mov    %rcx,%rsi
  800420fd90:	89 d7                	mov    %edx,%edi
  800420fd92:	ff d0                	callq  *%rax
  800420fd94:	48 83 c4 38          	add    $0x38,%rsp
  800420fd98:	5b                   	pop    %rbx
  800420fd99:	5d                   	pop    %rbp
  800420fd9a:	c3                   	retq   

000000800420fd9b <getuint>:
  800420fd9b:	55                   	push   %rbp
  800420fd9c:	48 89 e5             	mov    %rsp,%rbp
  800420fd9f:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420fda3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420fda7:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420fdaa:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420fdae:	7e 52                	jle    800420fe02 <getuint+0x67>
  800420fdb0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdb4:	8b 00                	mov    (%rax),%eax
  800420fdb6:	83 f8 30             	cmp    $0x30,%eax
  800420fdb9:	73 24                	jae    800420fddf <getuint+0x44>
  800420fdbb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdbf:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fdc3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fdc7:	8b 00                	mov    (%rax),%eax
  800420fdc9:	89 c0                	mov    %eax,%eax
  800420fdcb:	48 01 d0             	add    %rdx,%rax
  800420fdce:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fdd2:	8b 12                	mov    (%rdx),%edx
  800420fdd4:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fdd7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fddb:	89 0a                	mov    %ecx,(%rdx)
  800420fddd:	eb 17                	jmp    800420fdf6 <getuint+0x5b>
  800420fddf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fde3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fde7:	48 89 d0             	mov    %rdx,%rax
  800420fdea:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fdee:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fdf2:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fdf6:	48 8b 00             	mov    (%rax),%rax
  800420fdf9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fdfd:	e9 a3 00 00 00       	jmpq   800420fea5 <getuint+0x10a>
  800420fe02:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420fe06:	74 4f                	je     800420fe57 <getuint+0xbc>
  800420fe08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe0c:	8b 00                	mov    (%rax),%eax
  800420fe0e:	83 f8 30             	cmp    $0x30,%eax
  800420fe11:	73 24                	jae    800420fe37 <getuint+0x9c>
  800420fe13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe17:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fe1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe1f:	8b 00                	mov    (%rax),%eax
  800420fe21:	89 c0                	mov    %eax,%eax
  800420fe23:	48 01 d0             	add    %rdx,%rax
  800420fe26:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe2a:	8b 12                	mov    (%rdx),%edx
  800420fe2c:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fe2f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe33:	89 0a                	mov    %ecx,(%rdx)
  800420fe35:	eb 17                	jmp    800420fe4e <getuint+0xb3>
  800420fe37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe3b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fe3f:	48 89 d0             	mov    %rdx,%rax
  800420fe42:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fe46:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe4a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fe4e:	48 8b 00             	mov    (%rax),%rax
  800420fe51:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fe55:	eb 4e                	jmp    800420fea5 <getuint+0x10a>
  800420fe57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe5b:	8b 00                	mov    (%rax),%eax
  800420fe5d:	83 f8 30             	cmp    $0x30,%eax
  800420fe60:	73 24                	jae    800420fe86 <getuint+0xeb>
  800420fe62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe66:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fe6a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe6e:	8b 00                	mov    (%rax),%eax
  800420fe70:	89 c0                	mov    %eax,%eax
  800420fe72:	48 01 d0             	add    %rdx,%rax
  800420fe75:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe79:	8b 12                	mov    (%rdx),%edx
  800420fe7b:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fe7e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe82:	89 0a                	mov    %ecx,(%rdx)
  800420fe84:	eb 17                	jmp    800420fe9d <getuint+0x102>
  800420fe86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fe8a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fe8e:	48 89 d0             	mov    %rdx,%rax
  800420fe91:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fe95:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fe99:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420fe9d:	8b 00                	mov    (%rax),%eax
  800420fe9f:	89 c0                	mov    %eax,%eax
  800420fea1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420fea5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420fea9:	c9                   	leaveq 
  800420feaa:	c3                   	retq   

000000800420feab <getint>:
  800420feab:	55                   	push   %rbp
  800420feac:	48 89 e5             	mov    %rsp,%rbp
  800420feaf:	48 83 ec 1c          	sub    $0x1c,%rsp
  800420feb3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800420feb7:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800420feba:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
  800420febe:	7e 52                	jle    800420ff12 <getint+0x67>
  800420fec0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fec4:	8b 00                	mov    (%rax),%eax
  800420fec6:	83 f8 30             	cmp    $0x30,%eax
  800420fec9:	73 24                	jae    800420feef <getint+0x44>
  800420fecb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fecf:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420fed3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fed7:	8b 00                	mov    (%rax),%eax
  800420fed9:	89 c0                	mov    %eax,%eax
  800420fedb:	48 01 d0             	add    %rdx,%rax
  800420fede:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420fee2:	8b 12                	mov    (%rdx),%edx
  800420fee4:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420fee7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420feeb:	89 0a                	mov    %ecx,(%rdx)
  800420feed:	eb 17                	jmp    800420ff06 <getint+0x5b>
  800420feef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420fef3:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420fef7:	48 89 d0             	mov    %rdx,%rax
  800420fefa:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420fefe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff02:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420ff06:	48 8b 00             	mov    (%rax),%rax
  800420ff09:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ff0d:	e9 a3 00 00 00       	jmpq   800420ffb5 <getint+0x10a>
  800420ff12:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800420ff16:	74 4f                	je     800420ff67 <getint+0xbc>
  800420ff18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff1c:	8b 00                	mov    (%rax),%eax
  800420ff1e:	83 f8 30             	cmp    $0x30,%eax
  800420ff21:	73 24                	jae    800420ff47 <getint+0x9c>
  800420ff23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff27:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420ff2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff2f:	8b 00                	mov    (%rax),%eax
  800420ff31:	89 c0                	mov    %eax,%eax
  800420ff33:	48 01 d0             	add    %rdx,%rax
  800420ff36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff3a:	8b 12                	mov    (%rdx),%edx
  800420ff3c:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420ff3f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff43:	89 0a                	mov    %ecx,(%rdx)
  800420ff45:	eb 17                	jmp    800420ff5e <getint+0xb3>
  800420ff47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff4b:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420ff4f:	48 89 d0             	mov    %rdx,%rax
  800420ff52:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420ff56:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff5a:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420ff5e:	48 8b 00             	mov    (%rax),%rax
  800420ff61:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ff65:	eb 4e                	jmp    800420ffb5 <getint+0x10a>
  800420ff67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff6b:	8b 00                	mov    (%rax),%eax
  800420ff6d:	83 f8 30             	cmp    $0x30,%eax
  800420ff70:	73 24                	jae    800420ff96 <getint+0xeb>
  800420ff72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff76:	48 8b 50 10          	mov    0x10(%rax),%rdx
  800420ff7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff7e:	8b 00                	mov    (%rax),%eax
  800420ff80:	89 c0                	mov    %eax,%eax
  800420ff82:	48 01 d0             	add    %rdx,%rax
  800420ff85:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff89:	8b 12                	mov    (%rdx),%edx
  800420ff8b:	8d 4a 08             	lea    0x8(%rdx),%ecx
  800420ff8e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ff92:	89 0a                	mov    %ecx,(%rdx)
  800420ff94:	eb 17                	jmp    800420ffad <getint+0x102>
  800420ff96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800420ff9a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  800420ff9e:	48 89 d0             	mov    %rdx,%rax
  800420ffa1:	48 8d 4a 08          	lea    0x8(%rdx),%rcx
  800420ffa5:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800420ffa9:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
  800420ffad:	8b 00                	mov    (%rax),%eax
  800420ffaf:	48 98                	cltq   
  800420ffb1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800420ffb5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800420ffb9:	c9                   	leaveq 
  800420ffba:	c3                   	retq   

000000800420ffbb <vprintfmt>:
  800420ffbb:	55                   	push   %rbp
  800420ffbc:	48 89 e5             	mov    %rsp,%rbp
  800420ffbf:	41 54                	push   %r12
  800420ffc1:	53                   	push   %rbx
  800420ffc2:	48 83 ec 60          	sub    $0x60,%rsp
  800420ffc6:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800420ffca:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800420ffce:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  800420ffd2:	48 89 4d 90          	mov    %rcx,-0x70(%rbp)
  800420ffd6:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  800420ffda:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800420ffde:	48 8b 0a             	mov    (%rdx),%rcx
  800420ffe1:	48 89 08             	mov    %rcx,(%rax)
  800420ffe4:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800420ffe8:	48 89 48 08          	mov    %rcx,0x8(%rax)
  800420ffec:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  800420fff0:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800420fff4:	eb 17                	jmp    800421000d <vprintfmt+0x52>
  800420fff6:	85 db                	test   %ebx,%ebx
  800420fff8:	0f 84 cc 04 00 00    	je     80042104ca <vprintfmt+0x50f>
  800420fffe:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210002:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210006:	48 89 d6             	mov    %rdx,%rsi
  8004210009:	89 df                	mov    %ebx,%edi
  800421000b:	ff d0                	callq  *%rax
  800421000d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210011:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210015:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210019:	0f b6 00             	movzbl (%rax),%eax
  800421001c:	0f b6 d8             	movzbl %al,%ebx
  800421001f:	83 fb 25             	cmp    $0x25,%ebx
  8004210022:	75 d2                	jne    800420fff6 <vprintfmt+0x3b>
  8004210024:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004210028:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%rbp)
  800421002f:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  8004210036:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800421003d:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
  8004210044:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004210048:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421004c:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  8004210050:	0f b6 00             	movzbl (%rax),%eax
  8004210053:	0f b6 d8             	movzbl %al,%ebx
  8004210056:	8d 43 dd             	lea    -0x23(%rbx),%eax
  8004210059:	83 f8 55             	cmp    $0x55,%eax
  800421005c:	0f 87 34 04 00 00    	ja     8004210496 <vprintfmt+0x4db>
  8004210062:	89 c0                	mov    %eax,%eax
  8004210064:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421006b:	00 
  800421006c:	48 b8 18 ff 21 04 80 	movabs $0x800421ff18,%rax
  8004210073:	00 00 00 
  8004210076:	48 01 d0             	add    %rdx,%rax
  8004210079:	48 8b 00             	mov    (%rax),%rax
  800421007c:	ff e0                	jmpq   *%rax
  800421007e:	c6 45 d3 2d          	movb   $0x2d,-0x2d(%rbp)
  8004210082:	eb c0                	jmp    8004210044 <vprintfmt+0x89>
  8004210084:	c6 45 d3 30          	movb   $0x30,-0x2d(%rbp)
  8004210088:	eb ba                	jmp    8004210044 <vprintfmt+0x89>
  800421008a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
  8004210091:	8b 55 d8             	mov    -0x28(%rbp),%edx
  8004210094:	89 d0                	mov    %edx,%eax
  8004210096:	c1 e0 02             	shl    $0x2,%eax
  8004210099:	01 d0                	add    %edx,%eax
  800421009b:	01 c0                	add    %eax,%eax
  800421009d:	01 d8                	add    %ebx,%eax
  800421009f:	83 e8 30             	sub    $0x30,%eax
  80042100a2:	89 45 d8             	mov    %eax,-0x28(%rbp)
  80042100a5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042100a9:	0f b6 00             	movzbl (%rax),%eax
  80042100ac:	0f be d8             	movsbl %al,%ebx
  80042100af:	83 fb 2f             	cmp    $0x2f,%ebx
  80042100b2:	7e 0c                	jle    80042100c0 <vprintfmt+0x105>
  80042100b4:	83 fb 39             	cmp    $0x39,%ebx
  80042100b7:	7f 07                	jg     80042100c0 <vprintfmt+0x105>
  80042100b9:	48 83 45 98 01       	addq   $0x1,-0x68(%rbp)
  80042100be:	eb d1                	jmp    8004210091 <vprintfmt+0xd6>
  80042100c0:	eb 58                	jmp    800421011a <vprintfmt+0x15f>
  80042100c2:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042100c5:	83 f8 30             	cmp    $0x30,%eax
  80042100c8:	73 17                	jae    80042100e1 <vprintfmt+0x126>
  80042100ca:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042100ce:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042100d1:	89 c0                	mov    %eax,%eax
  80042100d3:	48 01 d0             	add    %rdx,%rax
  80042100d6:	8b 55 b8             	mov    -0x48(%rbp),%edx
  80042100d9:	83 c2 08             	add    $0x8,%edx
  80042100dc:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042100df:	eb 0f                	jmp    80042100f0 <vprintfmt+0x135>
  80042100e1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042100e5:	48 89 d0             	mov    %rdx,%rax
  80042100e8:	48 83 c2 08          	add    $0x8,%rdx
  80042100ec:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042100f0:	8b 00                	mov    (%rax),%eax
  80042100f2:	89 45 d8             	mov    %eax,-0x28(%rbp)
  80042100f5:	eb 23                	jmp    800421011a <vprintfmt+0x15f>
  80042100f7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042100fb:	79 0c                	jns    8004210109 <vprintfmt+0x14e>
  80042100fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  8004210104:	e9 3b ff ff ff       	jmpq   8004210044 <vprintfmt+0x89>
  8004210109:	e9 36 ff ff ff       	jmpq   8004210044 <vprintfmt+0x89>
  800421010e:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%rbp)
  8004210115:	e9 2a ff ff ff       	jmpq   8004210044 <vprintfmt+0x89>
  800421011a:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421011e:	79 12                	jns    8004210132 <vprintfmt+0x177>
  8004210120:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210123:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004210126:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%rbp)
  800421012d:	e9 12 ff ff ff       	jmpq   8004210044 <vprintfmt+0x89>
  8004210132:	e9 0d ff ff ff       	jmpq   8004210044 <vprintfmt+0x89>
  8004210137:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  800421013b:	e9 04 ff ff ff       	jmpq   8004210044 <vprintfmt+0x89>
  8004210140:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210143:	83 f8 30             	cmp    $0x30,%eax
  8004210146:	73 17                	jae    800421015f <vprintfmt+0x1a4>
  8004210148:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421014c:	8b 45 b8             	mov    -0x48(%rbp),%eax
  800421014f:	89 c0                	mov    %eax,%eax
  8004210151:	48 01 d0             	add    %rdx,%rax
  8004210154:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210157:	83 c2 08             	add    $0x8,%edx
  800421015a:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421015d:	eb 0f                	jmp    800421016e <vprintfmt+0x1b3>
  800421015f:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210163:	48 89 d0             	mov    %rdx,%rax
  8004210166:	48 83 c2 08          	add    $0x8,%rdx
  800421016a:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  800421016e:	8b 10                	mov    (%rax),%edx
  8004210170:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004210174:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210178:	48 89 ce             	mov    %rcx,%rsi
  800421017b:	89 d7                	mov    %edx,%edi
  800421017d:	ff d0                	callq  *%rax
  800421017f:	e9 40 03 00 00       	jmpq   80042104c4 <vprintfmt+0x509>
  8004210184:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210187:	83 f8 30             	cmp    $0x30,%eax
  800421018a:	73 17                	jae    80042101a3 <vprintfmt+0x1e8>
  800421018c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210190:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210193:	89 c0                	mov    %eax,%eax
  8004210195:	48 01 d0             	add    %rdx,%rax
  8004210198:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421019b:	83 c2 08             	add    $0x8,%edx
  800421019e:	89 55 b8             	mov    %edx,-0x48(%rbp)
  80042101a1:	eb 0f                	jmp    80042101b2 <vprintfmt+0x1f7>
  80042101a3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042101a7:	48 89 d0             	mov    %rdx,%rax
  80042101aa:	48 83 c2 08          	add    $0x8,%rdx
  80042101ae:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  80042101b2:	8b 18                	mov    (%rax),%ebx
  80042101b4:	85 db                	test   %ebx,%ebx
  80042101b6:	79 02                	jns    80042101ba <vprintfmt+0x1ff>
  80042101b8:	f7 db                	neg    %ebx
  80042101ba:	83 fb 15             	cmp    $0x15,%ebx
  80042101bd:	7f 16                	jg     80042101d5 <vprintfmt+0x21a>
  80042101bf:	48 b8 40 fe 21 04 80 	movabs $0x800421fe40,%rax
  80042101c6:	00 00 00 
  80042101c9:	48 63 d3             	movslq %ebx,%rdx
  80042101cc:	4c 8b 24 d0          	mov    (%rax,%rdx,8),%r12
  80042101d0:	4d 85 e4             	test   %r12,%r12
  80042101d3:	75 2e                	jne    8004210203 <vprintfmt+0x248>
  80042101d5:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  80042101d9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042101dd:	89 d9                	mov    %ebx,%ecx
  80042101df:	48 ba 01 ff 21 04 80 	movabs $0x800421ff01,%rdx
  80042101e6:	00 00 00 
  80042101e9:	48 89 c7             	mov    %rax,%rdi
  80042101ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042101f1:	49 b8 d3 04 21 04 80 	movabs $0x80042104d3,%r8
  80042101f8:	00 00 00 
  80042101fb:	41 ff d0             	callq  *%r8
  80042101fe:	e9 c1 02 00 00       	jmpq   80042104c4 <vprintfmt+0x509>
  8004210203:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  8004210207:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421020b:	4c 89 e1             	mov    %r12,%rcx
  800421020e:	48 ba 0a ff 21 04 80 	movabs $0x800421ff0a,%rdx
  8004210215:	00 00 00 
  8004210218:	48 89 c7             	mov    %rax,%rdi
  800421021b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210220:	49 b8 d3 04 21 04 80 	movabs $0x80042104d3,%r8
  8004210227:	00 00 00 
  800421022a:	41 ff d0             	callq  *%r8
  800421022d:	e9 92 02 00 00       	jmpq   80042104c4 <vprintfmt+0x509>
  8004210232:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210235:	83 f8 30             	cmp    $0x30,%eax
  8004210238:	73 17                	jae    8004210251 <vprintfmt+0x296>
  800421023a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421023e:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210241:	89 c0                	mov    %eax,%eax
  8004210243:	48 01 d0             	add    %rdx,%rax
  8004210246:	8b 55 b8             	mov    -0x48(%rbp),%edx
  8004210249:	83 c2 08             	add    $0x8,%edx
  800421024c:	89 55 b8             	mov    %edx,-0x48(%rbp)
  800421024f:	eb 0f                	jmp    8004210260 <vprintfmt+0x2a5>
  8004210251:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210255:	48 89 d0             	mov    %rdx,%rax
  8004210258:	48 83 c2 08          	add    $0x8,%rdx
  800421025c:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210260:	4c 8b 20             	mov    (%rax),%r12
  8004210263:	4d 85 e4             	test   %r12,%r12
  8004210266:	75 0a                	jne    8004210272 <vprintfmt+0x2b7>
  8004210268:	49 bc 0d ff 21 04 80 	movabs $0x800421ff0d,%r12
  800421026f:	00 00 00 
  8004210272:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004210276:	7e 3f                	jle    80042102b7 <vprintfmt+0x2fc>
  8004210278:	80 7d d3 2d          	cmpb   $0x2d,-0x2d(%rbp)
  800421027c:	74 39                	je     80042102b7 <vprintfmt+0x2fc>
  800421027e:	8b 45 d8             	mov    -0x28(%rbp),%eax
  8004210281:	48 98                	cltq   
  8004210283:	48 89 c6             	mov    %rax,%rsi
  8004210286:	4c 89 e7             	mov    %r12,%rdi
  8004210289:	48 b8 d4 08 21 04 80 	movabs $0x80042108d4,%rax
  8004210290:	00 00 00 
  8004210293:	ff d0                	callq  *%rax
  8004210295:	29 45 dc             	sub    %eax,-0x24(%rbp)
  8004210298:	eb 17                	jmp    80042102b1 <vprintfmt+0x2f6>
  800421029a:	0f be 55 d3          	movsbl -0x2d(%rbp),%edx
  800421029e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  80042102a2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042102a6:	48 89 ce             	mov    %rcx,%rsi
  80042102a9:	89 d7                	mov    %edx,%edi
  80042102ab:	ff d0                	callq  *%rax
  80042102ad:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042102b1:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042102b5:	7f e3                	jg     800421029a <vprintfmt+0x2df>
  80042102b7:	eb 37                	jmp    80042102f0 <vprintfmt+0x335>
  80042102b9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
  80042102bd:	74 1e                	je     80042102dd <vprintfmt+0x322>
  80042102bf:	83 fb 1f             	cmp    $0x1f,%ebx
  80042102c2:	7e 05                	jle    80042102c9 <vprintfmt+0x30e>
  80042102c4:	83 fb 7e             	cmp    $0x7e,%ebx
  80042102c7:	7e 14                	jle    80042102dd <vprintfmt+0x322>
  80042102c9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042102cd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042102d1:	48 89 d6             	mov    %rdx,%rsi
  80042102d4:	bf 3f 00 00 00       	mov    $0x3f,%edi
  80042102d9:	ff d0                	callq  *%rax
  80042102db:	eb 0f                	jmp    80042102ec <vprintfmt+0x331>
  80042102dd:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042102e1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042102e5:	48 89 d6             	mov    %rdx,%rsi
  80042102e8:	89 df                	mov    %ebx,%edi
  80042102ea:	ff d0                	callq  *%rax
  80042102ec:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  80042102f0:	4c 89 e0             	mov    %r12,%rax
  80042102f3:	4c 8d 60 01          	lea    0x1(%rax),%r12
  80042102f7:	0f b6 00             	movzbl (%rax),%eax
  80042102fa:	0f be d8             	movsbl %al,%ebx
  80042102fd:	85 db                	test   %ebx,%ebx
  80042102ff:	74 10                	je     8004210311 <vprintfmt+0x356>
  8004210301:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  8004210305:	78 b2                	js     80042102b9 <vprintfmt+0x2fe>
  8004210307:	83 6d d8 01          	subl   $0x1,-0x28(%rbp)
  800421030b:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
  800421030f:	79 a8                	jns    80042102b9 <vprintfmt+0x2fe>
  8004210311:	eb 16                	jmp    8004210329 <vprintfmt+0x36e>
  8004210313:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210317:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421031b:	48 89 d6             	mov    %rdx,%rsi
  800421031e:	bf 20 00 00 00       	mov    $0x20,%edi
  8004210323:	ff d0                	callq  *%rax
  8004210325:	83 6d dc 01          	subl   $0x1,-0x24(%rbp)
  8004210329:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421032d:	7f e4                	jg     8004210313 <vprintfmt+0x358>
  800421032f:	e9 90 01 00 00       	jmpq   80042104c4 <vprintfmt+0x509>
  8004210334:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210338:	be 03 00 00 00       	mov    $0x3,%esi
  800421033d:	48 89 c7             	mov    %rax,%rdi
  8004210340:	48 b8 ab fe 20 04 80 	movabs $0x800420feab,%rax
  8004210347:	00 00 00 
  800421034a:	ff d0                	callq  *%rax
  800421034c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210350:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210354:	48 85 c0             	test   %rax,%rax
  8004210357:	79 1d                	jns    8004210376 <vprintfmt+0x3bb>
  8004210359:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421035d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004210361:	48 89 d6             	mov    %rdx,%rsi
  8004210364:	bf 2d 00 00 00       	mov    $0x2d,%edi
  8004210369:	ff d0                	callq  *%rax
  800421036b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421036f:	48 f7 d8             	neg    %rax
  8004210372:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210376:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  800421037d:	e9 d5 00 00 00       	jmpq   8004210457 <vprintfmt+0x49c>
  8004210382:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210386:	be 03 00 00 00       	mov    $0x3,%esi
  800421038b:	48 89 c7             	mov    %rax,%rdi
  800421038e:	48 b8 9b fd 20 04 80 	movabs $0x800420fd9b,%rax
  8004210395:	00 00 00 
  8004210398:	ff d0                	callq  *%rax
  800421039a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421039e:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%rbp)
  80042103a5:	e9 ad 00 00 00       	jmpq   8004210457 <vprintfmt+0x49c>
  80042103aa:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  80042103ae:	be 03 00 00 00       	mov    $0x3,%esi
  80042103b3:	48 89 c7             	mov    %rax,%rdi
  80042103b6:	48 b8 9b fd 20 04 80 	movabs $0x800420fd9b,%rax
  80042103bd:	00 00 00 
  80042103c0:	ff d0                	callq  *%rax
  80042103c2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042103c6:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
  80042103cd:	e9 85 00 00 00       	jmpq   8004210457 <vprintfmt+0x49c>
  80042103d2:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042103d6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042103da:	48 89 d6             	mov    %rdx,%rsi
  80042103dd:	bf 30 00 00 00       	mov    $0x30,%edi
  80042103e2:	ff d0                	callq  *%rax
  80042103e4:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042103e8:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042103ec:	48 89 d6             	mov    %rdx,%rsi
  80042103ef:	bf 78 00 00 00       	mov    $0x78,%edi
  80042103f4:	ff d0                	callq  *%rax
  80042103f6:	8b 45 b8             	mov    -0x48(%rbp),%eax
  80042103f9:	83 f8 30             	cmp    $0x30,%eax
  80042103fc:	73 17                	jae    8004210415 <vprintfmt+0x45a>
  80042103fe:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004210402:	8b 45 b8             	mov    -0x48(%rbp),%eax
  8004210405:	89 c0                	mov    %eax,%eax
  8004210407:	48 01 d0             	add    %rdx,%rax
  800421040a:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421040d:	83 c2 08             	add    $0x8,%edx
  8004210410:	89 55 b8             	mov    %edx,-0x48(%rbp)
  8004210413:	eb 0f                	jmp    8004210424 <vprintfmt+0x469>
  8004210415:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004210419:	48 89 d0             	mov    %rdx,%rax
  800421041c:	48 83 c2 08          	add    $0x8,%rdx
  8004210420:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
  8004210424:	48 8b 00             	mov    (%rax),%rax
  8004210427:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421042b:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210432:	eb 23                	jmp    8004210457 <vprintfmt+0x49c>
  8004210434:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004210438:	be 03 00 00 00       	mov    $0x3,%esi
  800421043d:	48 89 c7             	mov    %rax,%rdi
  8004210440:	48 b8 9b fd 20 04 80 	movabs $0x800420fd9b,%rax
  8004210447:	00 00 00 
  800421044a:	ff d0                	callq  *%rax
  800421044c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004210450:	c7 45 e4 10 00 00 00 	movl   $0x10,-0x1c(%rbp)
  8004210457:	44 0f be 45 d3       	movsbl -0x2d(%rbp),%r8d
  800421045c:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  800421045f:	8b 7d dc             	mov    -0x24(%rbp),%edi
  8004210462:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210466:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  800421046a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421046e:	45 89 c1             	mov    %r8d,%r9d
  8004210471:	41 89 f8             	mov    %edi,%r8d
  8004210474:	48 89 c7             	mov    %rax,%rdi
  8004210477:	48 b8 e0 fc 20 04 80 	movabs $0x800420fce0,%rax
  800421047e:	00 00 00 
  8004210481:	ff d0                	callq  *%rax
  8004210483:	eb 3f                	jmp    80042104c4 <vprintfmt+0x509>
  8004210485:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004210489:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421048d:	48 89 d6             	mov    %rdx,%rsi
  8004210490:	89 df                	mov    %ebx,%edi
  8004210492:	ff d0                	callq  *%rax
  8004210494:	eb 2e                	jmp    80042104c4 <vprintfmt+0x509>
  8004210496:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421049a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421049e:	48 89 d6             	mov    %rdx,%rsi
  80042104a1:	bf 25 00 00 00       	mov    $0x25,%edi
  80042104a6:	ff d0                	callq  *%rax
  80042104a8:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  80042104ad:	eb 05                	jmp    80042104b4 <vprintfmt+0x4f9>
  80042104af:	48 83 6d 98 01       	subq   $0x1,-0x68(%rbp)
  80042104b4:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042104b8:	48 83 e8 01          	sub    $0x1,%rax
  80042104bc:	0f b6 00             	movzbl (%rax),%eax
  80042104bf:	3c 25                	cmp    $0x25,%al
  80042104c1:	75 ec                	jne    80042104af <vprintfmt+0x4f4>
  80042104c3:	90                   	nop
  80042104c4:	90                   	nop
  80042104c5:	e9 43 fb ff ff       	jmpq   800421000d <vprintfmt+0x52>
  80042104ca:	48 83 c4 60          	add    $0x60,%rsp
  80042104ce:	5b                   	pop    %rbx
  80042104cf:	41 5c                	pop    %r12
  80042104d1:	5d                   	pop    %rbp
  80042104d2:	c3                   	retq   

00000080042104d3 <printfmt>:
  80042104d3:	55                   	push   %rbp
  80042104d4:	48 89 e5             	mov    %rsp,%rbp
  80042104d7:	48 81 ec f0 00 00 00 	sub    $0xf0,%rsp
  80042104de:	48 89 bd 28 ff ff ff 	mov    %rdi,-0xd8(%rbp)
  80042104e5:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
  80042104ec:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  80042104f3:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  80042104fa:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  8004210501:	84 c0                	test   %al,%al
  8004210503:	74 20                	je     8004210525 <printfmt+0x52>
  8004210505:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  8004210509:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  800421050d:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  8004210511:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  8004210515:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  8004210519:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  800421051d:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  8004210521:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  8004210525:	48 89 95 18 ff ff ff 	mov    %rdx,-0xe8(%rbp)
  800421052c:	c7 85 38 ff ff ff 18 	movl   $0x18,-0xc8(%rbp)
  8004210533:	00 00 00 
  8004210536:	c7 85 3c ff ff ff 30 	movl   $0x30,-0xc4(%rbp)
  800421053d:	00 00 00 
  8004210540:	48 8d 45 10          	lea    0x10(%rbp),%rax
  8004210544:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  800421054b:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004210552:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004210559:	48 8d 8d 38 ff ff ff 	lea    -0xc8(%rbp),%rcx
  8004210560:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  8004210567:	48 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%rsi
  800421056e:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004210575:	48 89 c7             	mov    %rax,%rdi
  8004210578:	48 b8 bb ff 20 04 80 	movabs $0x800420ffbb,%rax
  800421057f:	00 00 00 
  8004210582:	ff d0                	callq  *%rax
  8004210584:	c9                   	leaveq 
  8004210585:	c3                   	retq   

0000008004210586 <sprintputch>:
  8004210586:	55                   	push   %rbp
  8004210587:	48 89 e5             	mov    %rsp,%rbp
  800421058a:	48 83 ec 10          	sub    $0x10,%rsp
  800421058e:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004210591:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210595:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210599:	8b 40 10             	mov    0x10(%rax),%eax
  800421059c:	8d 50 01             	lea    0x1(%rax),%edx
  800421059f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105a3:	89 50 10             	mov    %edx,0x10(%rax)
  80042105a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105aa:	48 8b 10             	mov    (%rax),%rdx
  80042105ad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105b1:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042105b5:	48 39 c2             	cmp    %rax,%rdx
  80042105b8:	73 17                	jae    80042105d1 <sprintputch+0x4b>
  80042105ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042105be:	48 8b 00             	mov    (%rax),%rax
  80042105c1:	48 8d 48 01          	lea    0x1(%rax),%rcx
  80042105c5:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042105c9:	48 89 0a             	mov    %rcx,(%rdx)
  80042105cc:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042105cf:	88 10                	mov    %dl,(%rax)
  80042105d1:	c9                   	leaveq 
  80042105d2:	c3                   	retq   

00000080042105d3 <vsnprintf>:
  80042105d3:	55                   	push   %rbp
  80042105d4:	48 89 e5             	mov    %rsp,%rbp
  80042105d7:	48 83 ec 50          	sub    $0x50,%rsp
  80042105db:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042105df:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042105e2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042105e6:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042105ea:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
  80042105ee:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042105f2:	48 8b 0a             	mov    (%rdx),%rcx
  80042105f5:	48 89 08             	mov    %rcx,(%rax)
  80042105f8:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  80042105fc:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210600:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210604:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210608:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421060c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004210610:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004210613:	48 98                	cltq   
  8004210615:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210619:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421061d:	48 01 d0             	add    %rdx,%rax
  8004210620:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004210624:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  800421062b:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004210630:	74 06                	je     8004210638 <vsnprintf+0x65>
  8004210632:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004210636:	7f 07                	jg     800421063f <vsnprintf+0x6c>
  8004210638:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421063d:	eb 2f                	jmp    800421066e <vsnprintf+0x9b>
  800421063f:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  8004210643:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004210647:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
  800421064b:	48 89 c6             	mov    %rax,%rsi
  800421064e:	48 bf 86 05 21 04 80 	movabs $0x8004210586,%rdi
  8004210655:	00 00 00 
  8004210658:	48 b8 bb ff 20 04 80 	movabs $0x800420ffbb,%rax
  800421065f:	00 00 00 
  8004210662:	ff d0                	callq  *%rax
  8004210664:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210668:	c6 00 00             	movb   $0x0,(%rax)
  800421066b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421066e:	c9                   	leaveq 
  800421066f:	c3                   	retq   

0000008004210670 <snprintf>:
  8004210670:	55                   	push   %rbp
  8004210671:	48 89 e5             	mov    %rsp,%rbp
  8004210674:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421067b:	48 89 bd 08 ff ff ff 	mov    %rdi,-0xf8(%rbp)
  8004210682:	89 b5 04 ff ff ff    	mov    %esi,-0xfc(%rbp)
  8004210688:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
  800421068f:	4c 89 85 70 ff ff ff 	mov    %r8,-0x90(%rbp)
  8004210696:	4c 89 8d 78 ff ff ff 	mov    %r9,-0x88(%rbp)
  800421069d:	84 c0                	test   %al,%al
  800421069f:	74 20                	je     80042106c1 <snprintf+0x51>
  80042106a1:	0f 29 45 80          	movaps %xmm0,-0x80(%rbp)
  80042106a5:	0f 29 4d 90          	movaps %xmm1,-0x70(%rbp)
  80042106a9:	0f 29 55 a0          	movaps %xmm2,-0x60(%rbp)
  80042106ad:	0f 29 5d b0          	movaps %xmm3,-0x50(%rbp)
  80042106b1:	0f 29 65 c0          	movaps %xmm4,-0x40(%rbp)
  80042106b5:	0f 29 6d d0          	movaps %xmm5,-0x30(%rbp)
  80042106b9:	0f 29 75 e0          	movaps %xmm6,-0x20(%rbp)
  80042106bd:	0f 29 7d f0          	movaps %xmm7,-0x10(%rbp)
  80042106c1:	48 89 95 f8 fe ff ff 	mov    %rdx,-0x108(%rbp)
  80042106c8:	c7 85 30 ff ff ff 18 	movl   $0x18,-0xd0(%rbp)
  80042106cf:	00 00 00 
  80042106d2:	c7 85 34 ff ff ff 30 	movl   $0x30,-0xcc(%rbp)
  80042106d9:	00 00 00 
  80042106dc:	48 8d 45 10          	lea    0x10(%rbp),%rax
  80042106e0:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  80042106e7:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  80042106ee:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  80042106f5:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  80042106fc:	48 8d 95 30 ff ff ff 	lea    -0xd0(%rbp),%rdx
  8004210703:	48 8b 0a             	mov    (%rdx),%rcx
  8004210706:	48 89 08             	mov    %rcx,(%rax)
  8004210709:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  800421070d:	48 89 48 08          	mov    %rcx,0x8(%rax)
  8004210711:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  8004210715:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004210719:	48 8d 8d 18 ff ff ff 	lea    -0xe8(%rbp),%rcx
  8004210720:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004210727:	8b b5 04 ff ff ff    	mov    -0xfc(%rbp),%esi
  800421072d:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004210734:	48 89 c7             	mov    %rax,%rdi
  8004210737:	48 b8 d3 05 21 04 80 	movabs $0x80042105d3,%rax
  800421073e:	00 00 00 
  8004210741:	ff d0                	callq  *%rax
  8004210743:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
  8004210749:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421074f:	c9                   	leaveq 
  8004210750:	c3                   	retq   

0000008004210751 <readline>:
  8004210751:	55                   	push   %rbp
  8004210752:	48 89 e5             	mov    %rsp,%rbp
  8004210755:	48 83 ec 20          	sub    $0x20,%rsp
  8004210759:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421075d:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210762:	74 22                	je     8004210786 <readline+0x35>
  8004210764:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210768:	48 89 c6             	mov    %rax,%rsi
  800421076b:	48 bf c8 01 22 04 80 	movabs $0x80042201c8,%rdi
  8004210772:	00 00 00 
  8004210775:	b8 00 00 00 00       	mov    $0x0,%eax
  800421077a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004210781:	00 00 00 
  8004210784:	ff d2                	callq  *%rdx
  8004210786:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421078d:	bf 00 00 00 00       	mov    $0x0,%edi
  8004210792:	48 b8 33 12 20 04 80 	movabs $0x8004201233,%rax
  8004210799:	00 00 00 
  800421079c:	ff d0                	callq  *%rax
  800421079e:	89 45 f8             	mov    %eax,-0x8(%rbp)
  80042107a1:	48 b8 11 12 20 04 80 	movabs $0x8004201211,%rax
  80042107a8:	00 00 00 
  80042107ab:	ff d0                	callq  *%rax
  80042107ad:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042107b0:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042107b4:	79 30                	jns    80042107e6 <readline+0x95>
  80042107b6:	83 7d f4 f7          	cmpl   $0xfffffff7,-0xc(%rbp)
  80042107ba:	74 20                	je     80042107dc <readline+0x8b>
  80042107bc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042107bf:	89 c6                	mov    %eax,%esi
  80042107c1:	48 bf cb 01 22 04 80 	movabs $0x80042201cb,%rdi
  80042107c8:	00 00 00 
  80042107cb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042107d0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042107d7:	00 00 00 
  80042107da:	ff d2                	callq  *%rdx
  80042107dc:	b8 00 00 00 00       	mov    $0x0,%eax
  80042107e1:	e9 be 00 00 00       	jmpq   80042108a4 <readline+0x153>
  80042107e6:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042107ea:	74 06                	je     80042107f2 <readline+0xa1>
  80042107ec:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%rbp)
  80042107f0:	75 26                	jne    8004210818 <readline+0xc7>
  80042107f2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042107f6:	7e 20                	jle    8004210818 <readline+0xc7>
  80042107f8:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042107fc:	74 11                	je     800421080f <readline+0xbe>
  80042107fe:	bf 08 00 00 00       	mov    $0x8,%edi
  8004210803:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  800421080a:	00 00 00 
  800421080d:	ff d0                	callq  *%rax
  800421080f:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
  8004210813:	e9 87 00 00 00       	jmpq   800421089f <readline+0x14e>
  8004210818:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800421081c:	7e 3f                	jle    800421085d <readline+0x10c>
  800421081e:	81 7d fc fe 03 00 00 	cmpl   $0x3fe,-0x4(%rbp)
  8004210825:	7f 36                	jg     800421085d <readline+0x10c>
  8004210827:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421082b:	74 11                	je     800421083e <readline+0xed>
  800421082d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210830:	89 c7                	mov    %eax,%edi
  8004210832:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  8004210839:	00 00 00 
  800421083c:	ff d0                	callq  *%rax
  800421083e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210841:	8d 50 01             	lea    0x1(%rax),%edx
  8004210844:	89 55 fc             	mov    %edx,-0x4(%rbp)
  8004210847:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421084a:	89 d1                	mov    %edx,%ecx
  800421084c:	48 ba a0 f2 4d 04 80 	movabs $0x80044df2a0,%rdx
  8004210853:	00 00 00 
  8004210856:	48 98                	cltq   
  8004210858:	88 0c 02             	mov    %cl,(%rdx,%rax,1)
  800421085b:	eb 42                	jmp    800421089f <readline+0x14e>
  800421085d:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
  8004210861:	74 06                	je     8004210869 <readline+0x118>
  8004210863:	83 7d f4 0d          	cmpl   $0xd,-0xc(%rbp)
  8004210867:	75 36                	jne    800421089f <readline+0x14e>
  8004210869:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421086d:	74 11                	je     8004210880 <readline+0x12f>
  800421086f:	bf 0a 00 00 00       	mov    $0xa,%edi
  8004210874:	48 b8 f3 11 20 04 80 	movabs $0x80042011f3,%rax
  800421087b:	00 00 00 
  800421087e:	ff d0                	callq  *%rax
  8004210880:	48 ba a0 f2 4d 04 80 	movabs $0x80044df2a0,%rdx
  8004210887:	00 00 00 
  800421088a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421088d:	48 98                	cltq   
  800421088f:	c6 04 02 00          	movb   $0x0,(%rdx,%rax,1)
  8004210893:	48 b8 a0 f2 4d 04 80 	movabs $0x80044df2a0,%rax
  800421089a:	00 00 00 
  800421089d:	eb 05                	jmp    80042108a4 <readline+0x153>
  800421089f:	e9 fd fe ff ff       	jmpq   80042107a1 <readline+0x50>
  80042108a4:	c9                   	leaveq 
  80042108a5:	c3                   	retq   

00000080042108a6 <strlen>:
  80042108a6:	55                   	push   %rbp
  80042108a7:	48 89 e5             	mov    %rsp,%rbp
  80042108aa:	48 83 ec 18          	sub    $0x18,%rsp
  80042108ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042108b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042108b9:	eb 09                	jmp    80042108c4 <strlen+0x1e>
  80042108bb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042108bf:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042108c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042108c8:	0f b6 00             	movzbl (%rax),%eax
  80042108cb:	84 c0                	test   %al,%al
  80042108cd:	75 ec                	jne    80042108bb <strlen+0x15>
  80042108cf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042108d2:	c9                   	leaveq 
  80042108d3:	c3                   	retq   

00000080042108d4 <strnlen>:
  80042108d4:	55                   	push   %rbp
  80042108d5:	48 89 e5             	mov    %rsp,%rbp
  80042108d8:	48 83 ec 20          	sub    $0x20,%rsp
  80042108dc:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042108e0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042108e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042108eb:	eb 0e                	jmp    80042108fb <strnlen+0x27>
  80042108ed:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042108f1:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  80042108f6:	48 83 6d e0 01       	subq   $0x1,-0x20(%rbp)
  80042108fb:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004210900:	74 0b                	je     800421090d <strnlen+0x39>
  8004210902:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210906:	0f b6 00             	movzbl (%rax),%eax
  8004210909:	84 c0                	test   %al,%al
  800421090b:	75 e0                	jne    80042108ed <strnlen+0x19>
  800421090d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004210910:	c9                   	leaveq 
  8004210911:	c3                   	retq   

0000008004210912 <strcpy>:
  8004210912:	55                   	push   %rbp
  8004210913:	48 89 e5             	mov    %rsp,%rbp
  8004210916:	48 83 ec 20          	sub    $0x20,%rsp
  800421091a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421091e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210922:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210926:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421092a:	90                   	nop
  800421092b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421092f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210933:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210937:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421093b:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  800421093f:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210943:	0f b6 12             	movzbl (%rdx),%edx
  8004210946:	88 10                	mov    %dl,(%rax)
  8004210948:	0f b6 00             	movzbl (%rax),%eax
  800421094b:	84 c0                	test   %al,%al
  800421094d:	75 dc                	jne    800421092b <strcpy+0x19>
  800421094f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210953:	c9                   	leaveq 
  8004210954:	c3                   	retq   

0000008004210955 <strcat>:
  8004210955:	55                   	push   %rbp
  8004210956:	48 89 e5             	mov    %rsp,%rbp
  8004210959:	48 83 ec 20          	sub    $0x20,%rsp
  800421095d:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210961:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210965:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210969:	48 89 c7             	mov    %rax,%rdi
  800421096c:	48 b8 a6 08 21 04 80 	movabs $0x80042108a6,%rax
  8004210973:	00 00 00 
  8004210976:	ff d0                	callq  *%rax
  8004210978:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421097b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421097e:	48 63 d0             	movslq %eax,%rdx
  8004210981:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210985:	48 01 c2             	add    %rax,%rdx
  8004210988:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421098c:	48 89 c6             	mov    %rax,%rsi
  800421098f:	48 89 d7             	mov    %rdx,%rdi
  8004210992:	48 b8 12 09 21 04 80 	movabs $0x8004210912,%rax
  8004210999:	00 00 00 
  800421099c:	ff d0                	callq  *%rax
  800421099e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109a2:	c9                   	leaveq 
  80042109a3:	c3                   	retq   

00000080042109a4 <strncpy>:
  80042109a4:	55                   	push   %rbp
  80042109a5:	48 89 e5             	mov    %rsp,%rbp
  80042109a8:	48 83 ec 28          	sub    $0x28,%rsp
  80042109ac:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042109b0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042109b4:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  80042109b8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109bc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042109c0:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042109c7:	00 
  80042109c8:	eb 2a                	jmp    80042109f4 <strncpy+0x50>
  80042109ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042109ce:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042109d2:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042109d6:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042109da:	0f b6 12             	movzbl (%rdx),%edx
  80042109dd:	88 10                	mov    %dl,(%rax)
  80042109df:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042109e3:	0f b6 00             	movzbl (%rax),%eax
  80042109e6:	84 c0                	test   %al,%al
  80042109e8:	74 05                	je     80042109ef <strncpy+0x4b>
  80042109ea:	48 83 45 e0 01       	addq   $0x1,-0x20(%rbp)
  80042109ef:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  80042109f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042109f8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042109fc:	72 cc                	jb     80042109ca <strncpy+0x26>
  80042109fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210a02:	c9                   	leaveq 
  8004210a03:	c3                   	retq   

0000008004210a04 <strlcpy>:
  8004210a04:	55                   	push   %rbp
  8004210a05:	48 89 e5             	mov    %rsp,%rbp
  8004210a08:	48 83 ec 28          	sub    $0x28,%rsp
  8004210a0c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210a10:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210a14:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210a18:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a1c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210a20:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210a25:	74 3d                	je     8004210a64 <strlcpy+0x60>
  8004210a27:	eb 1d                	jmp    8004210a46 <strlcpy+0x42>
  8004210a29:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a2d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210a31:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210a35:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004210a39:	48 8d 4a 01          	lea    0x1(%rdx),%rcx
  8004210a3d:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  8004210a41:	0f b6 12             	movzbl (%rdx),%edx
  8004210a44:	88 10                	mov    %dl,(%rax)
  8004210a46:	48 83 6d d8 01       	subq   $0x1,-0x28(%rbp)
  8004210a4b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004210a50:	74 0b                	je     8004210a5d <strlcpy+0x59>
  8004210a52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210a56:	0f b6 00             	movzbl (%rax),%eax
  8004210a59:	84 c0                	test   %al,%al
  8004210a5b:	75 cc                	jne    8004210a29 <strlcpy+0x25>
  8004210a5d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210a61:	c6 00 00             	movb   $0x0,(%rax)
  8004210a64:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210a68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a6c:	48 29 c2             	sub    %rax,%rdx
  8004210a6f:	48 89 d0             	mov    %rdx,%rax
  8004210a72:	c9                   	leaveq 
  8004210a73:	c3                   	retq   

0000008004210a74 <strcmp>:
  8004210a74:	55                   	push   %rbp
  8004210a75:	48 89 e5             	mov    %rsp,%rbp
  8004210a78:	48 83 ec 10          	sub    $0x10,%rsp
  8004210a7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210a80:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210a84:	eb 0a                	jmp    8004210a90 <strcmp+0x1c>
  8004210a86:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210a8b:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210a90:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a94:	0f b6 00             	movzbl (%rax),%eax
  8004210a97:	84 c0                	test   %al,%al
  8004210a99:	74 12                	je     8004210aad <strcmp+0x39>
  8004210a9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210a9f:	0f b6 10             	movzbl (%rax),%edx
  8004210aa2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210aa6:	0f b6 00             	movzbl (%rax),%eax
  8004210aa9:	38 c2                	cmp    %al,%dl
  8004210aab:	74 d9                	je     8004210a86 <strcmp+0x12>
  8004210aad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ab1:	0f b6 00             	movzbl (%rax),%eax
  8004210ab4:	0f b6 d0             	movzbl %al,%edx
  8004210ab7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210abb:	0f b6 00             	movzbl (%rax),%eax
  8004210abe:	0f b6 c0             	movzbl %al,%eax
  8004210ac1:	29 c2                	sub    %eax,%edx
  8004210ac3:	89 d0                	mov    %edx,%eax
  8004210ac5:	c9                   	leaveq 
  8004210ac6:	c3                   	retq   

0000008004210ac7 <strncmp>:
  8004210ac7:	55                   	push   %rbp
  8004210ac8:	48 89 e5             	mov    %rsp,%rbp
  8004210acb:	48 83 ec 18          	sub    $0x18,%rsp
  8004210acf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210ad3:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210ad7:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210adb:	eb 0f                	jmp    8004210aec <strncmp+0x25>
  8004210add:	48 83 6d e8 01       	subq   $0x1,-0x18(%rbp)
  8004210ae2:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210ae7:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210aec:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210af1:	74 1d                	je     8004210b10 <strncmp+0x49>
  8004210af3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210af7:	0f b6 00             	movzbl (%rax),%eax
  8004210afa:	84 c0                	test   %al,%al
  8004210afc:	74 12                	je     8004210b10 <strncmp+0x49>
  8004210afe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b02:	0f b6 10             	movzbl (%rax),%edx
  8004210b05:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b09:	0f b6 00             	movzbl (%rax),%eax
  8004210b0c:	38 c2                	cmp    %al,%dl
  8004210b0e:	74 cd                	je     8004210add <strncmp+0x16>
  8004210b10:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210b15:	75 07                	jne    8004210b1e <strncmp+0x57>
  8004210b17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210b1c:	eb 18                	jmp    8004210b36 <strncmp+0x6f>
  8004210b1e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b22:	0f b6 00             	movzbl (%rax),%eax
  8004210b25:	0f b6 d0             	movzbl %al,%edx
  8004210b28:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210b2c:	0f b6 00             	movzbl (%rax),%eax
  8004210b2f:	0f b6 c0             	movzbl %al,%eax
  8004210b32:	29 c2                	sub    %eax,%edx
  8004210b34:	89 d0                	mov    %edx,%eax
  8004210b36:	c9                   	leaveq 
  8004210b37:	c3                   	retq   

0000008004210b38 <strchr>:
  8004210b38:	55                   	push   %rbp
  8004210b39:	48 89 e5             	mov    %rsp,%rbp
  8004210b3c:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210b40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210b44:	89 f0                	mov    %esi,%eax
  8004210b46:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210b49:	eb 17                	jmp    8004210b62 <strchr+0x2a>
  8004210b4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b4f:	0f b6 00             	movzbl (%rax),%eax
  8004210b52:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210b55:	75 06                	jne    8004210b5d <strchr+0x25>
  8004210b57:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b5b:	eb 15                	jmp    8004210b72 <strchr+0x3a>
  8004210b5d:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210b62:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b66:	0f b6 00             	movzbl (%rax),%eax
  8004210b69:	84 c0                	test   %al,%al
  8004210b6b:	75 de                	jne    8004210b4b <strchr+0x13>
  8004210b6d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210b72:	c9                   	leaveq 
  8004210b73:	c3                   	retq   

0000008004210b74 <strfind>:
  8004210b74:	55                   	push   %rbp
  8004210b75:	48 89 e5             	mov    %rsp,%rbp
  8004210b78:	48 83 ec 0c          	sub    $0xc,%rsp
  8004210b7c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210b80:	89 f0                	mov    %esi,%eax
  8004210b82:	88 45 f4             	mov    %al,-0xc(%rbp)
  8004210b85:	eb 13                	jmp    8004210b9a <strfind+0x26>
  8004210b87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b8b:	0f b6 00             	movzbl (%rax),%eax
  8004210b8e:	3a 45 f4             	cmp    -0xc(%rbp),%al
  8004210b91:	75 02                	jne    8004210b95 <strfind+0x21>
  8004210b93:	eb 10                	jmp    8004210ba5 <strfind+0x31>
  8004210b95:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210b9a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210b9e:	0f b6 00             	movzbl (%rax),%eax
  8004210ba1:	84 c0                	test   %al,%al
  8004210ba3:	75 e2                	jne    8004210b87 <strfind+0x13>
  8004210ba5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210ba9:	c9                   	leaveq 
  8004210baa:	c3                   	retq   

0000008004210bab <memset>:
  8004210bab:	55                   	push   %rbp
  8004210bac:	48 89 e5             	mov    %rsp,%rbp
  8004210baf:	48 83 ec 18          	sub    $0x18,%rsp
  8004210bb3:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210bb7:	89 75 f4             	mov    %esi,-0xc(%rbp)
  8004210bba:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210bbe:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004210bc3:	75 06                	jne    8004210bcb <memset+0x20>
  8004210bc5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210bc9:	eb 69                	jmp    8004210c34 <memset+0x89>
  8004210bcb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210bcf:	83 e0 03             	and    $0x3,%eax
  8004210bd2:	48 85 c0             	test   %rax,%rax
  8004210bd5:	75 48                	jne    8004210c1f <memset+0x74>
  8004210bd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210bdb:	83 e0 03             	and    $0x3,%eax
  8004210bde:	48 85 c0             	test   %rax,%rax
  8004210be1:	75 3c                	jne    8004210c1f <memset+0x74>
  8004210be3:	81 65 f4 ff 00 00 00 	andl   $0xff,-0xc(%rbp)
  8004210bea:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bed:	c1 e0 18             	shl    $0x18,%eax
  8004210bf0:	89 c2                	mov    %eax,%edx
  8004210bf2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bf5:	c1 e0 10             	shl    $0x10,%eax
  8004210bf8:	09 c2                	or     %eax,%edx
  8004210bfa:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210bfd:	c1 e0 08             	shl    $0x8,%eax
  8004210c00:	09 d0                	or     %edx,%eax
  8004210c02:	09 45 f4             	or     %eax,-0xc(%rbp)
  8004210c05:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c09:	48 c1 e8 02          	shr    $0x2,%rax
  8004210c0d:	48 89 c1             	mov    %rax,%rcx
  8004210c10:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210c14:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c17:	48 89 d7             	mov    %rdx,%rdi
  8004210c1a:	fc                   	cld    
  8004210c1b:	f3 ab                	rep stos %eax,%es:(%rdi)
  8004210c1d:	eb 11                	jmp    8004210c30 <memset+0x85>
  8004210c1f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210c23:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004210c26:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004210c2a:	48 89 d7             	mov    %rdx,%rdi
  8004210c2d:	fc                   	cld    
  8004210c2e:	f3 aa                	rep stos %al,%es:(%rdi)
  8004210c30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c34:	c9                   	leaveq 
  8004210c35:	c3                   	retq   

0000008004210c36 <memmove>:
  8004210c36:	55                   	push   %rbp
  8004210c37:	48 89 e5             	mov    %rsp,%rbp
  8004210c3a:	48 83 ec 28          	sub    $0x28,%rsp
  8004210c3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210c42:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210c46:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210c4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210c4e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210c52:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210c56:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210c5a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c5e:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210c62:	0f 83 88 00 00 00    	jae    8004210cf0 <memmove+0xba>
  8004210c68:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c6c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210c70:	48 01 d0             	add    %rdx,%rax
  8004210c73:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004210c77:	76 77                	jbe    8004210cf0 <memmove+0xba>
  8004210c79:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c7d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004210c81:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210c85:	48 01 45 f0          	add    %rax,-0x10(%rbp)
  8004210c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210c8d:	83 e0 03             	and    $0x3,%eax
  8004210c90:	48 85 c0             	test   %rax,%rax
  8004210c93:	75 3b                	jne    8004210cd0 <memmove+0x9a>
  8004210c95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210c99:	83 e0 03             	and    $0x3,%eax
  8004210c9c:	48 85 c0             	test   %rax,%rax
  8004210c9f:	75 2f                	jne    8004210cd0 <memmove+0x9a>
  8004210ca1:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ca5:	83 e0 03             	and    $0x3,%eax
  8004210ca8:	48 85 c0             	test   %rax,%rax
  8004210cab:	75 23                	jne    8004210cd0 <memmove+0x9a>
  8004210cad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cb1:	48 83 e8 04          	sub    $0x4,%rax
  8004210cb5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210cb9:	48 83 ea 04          	sub    $0x4,%rdx
  8004210cbd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210cc1:	48 c1 e9 02          	shr    $0x2,%rcx
  8004210cc5:	48 89 c7             	mov    %rax,%rdi
  8004210cc8:	48 89 d6             	mov    %rdx,%rsi
  8004210ccb:	fd                   	std    
  8004210ccc:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210cce:	eb 1d                	jmp    8004210ced <memmove+0xb7>
  8004210cd0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210cd4:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210cd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cdc:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
  8004210ce0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ce4:	48 89 d7             	mov    %rdx,%rdi
  8004210ce7:	48 89 c1             	mov    %rax,%rcx
  8004210cea:	fd                   	std    
  8004210ceb:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210ced:	fc                   	cld    
  8004210cee:	eb 57                	jmp    8004210d47 <memmove+0x111>
  8004210cf0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210cf4:	83 e0 03             	and    $0x3,%eax
  8004210cf7:	48 85 c0             	test   %rax,%rax
  8004210cfa:	75 36                	jne    8004210d32 <memmove+0xfc>
  8004210cfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d00:	83 e0 03             	and    $0x3,%eax
  8004210d03:	48 85 c0             	test   %rax,%rax
  8004210d06:	75 2a                	jne    8004210d32 <memmove+0xfc>
  8004210d08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d0c:	83 e0 03             	and    $0x3,%eax
  8004210d0f:	48 85 c0             	test   %rax,%rax
  8004210d12:	75 1e                	jne    8004210d32 <memmove+0xfc>
  8004210d14:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210d18:	48 c1 e8 02          	shr    $0x2,%rax
  8004210d1c:	48 89 c1             	mov    %rax,%rcx
  8004210d1f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d23:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210d27:	48 89 c7             	mov    %rax,%rdi
  8004210d2a:	48 89 d6             	mov    %rdx,%rsi
  8004210d2d:	fc                   	cld    
  8004210d2e:	f3 a5                	rep movsl %ds:(%rsi),%es:(%rdi)
  8004210d30:	eb 15                	jmp    8004210d47 <memmove+0x111>
  8004210d32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210d36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004210d3a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004210d3e:	48 89 c7             	mov    %rax,%rdi
  8004210d41:	48 89 d6             	mov    %rdx,%rsi
  8004210d44:	fc                   	cld    
  8004210d45:	f3 a4                	rep movsb %ds:(%rsi),%es:(%rdi)
  8004210d47:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d4b:	c9                   	leaveq 
  8004210d4c:	c3                   	retq   

0000008004210d4d <memcpy>:
  8004210d4d:	55                   	push   %rbp
  8004210d4e:	48 89 e5             	mov    %rsp,%rbp
  8004210d51:	48 83 ec 18          	sub    $0x18,%rsp
  8004210d55:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004210d59:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004210d5d:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004210d61:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210d65:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004210d69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210d6d:	48 89 ce             	mov    %rcx,%rsi
  8004210d70:	48 89 c7             	mov    %rax,%rdi
  8004210d73:	48 b8 36 0c 21 04 80 	movabs $0x8004210c36,%rax
  8004210d7a:	00 00 00 
  8004210d7d:	ff d0                	callq  *%rax
  8004210d7f:	c9                   	leaveq 
  8004210d80:	c3                   	retq   

0000008004210d81 <memcmp>:
  8004210d81:	55                   	push   %rbp
  8004210d82:	48 89 e5             	mov    %rsp,%rbp
  8004210d85:	48 83 ec 28          	sub    $0x28,%rsp
  8004210d89:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210d8d:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004210d91:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210d95:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210d99:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210d9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004210da1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210da5:	eb 36                	jmp    8004210ddd <memcmp+0x5c>
  8004210da7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dab:	0f b6 10             	movzbl (%rax),%edx
  8004210dae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210db2:	0f b6 00             	movzbl (%rax),%eax
  8004210db5:	38 c2                	cmp    %al,%dl
  8004210db7:	74 1a                	je     8004210dd3 <memcmp+0x52>
  8004210db9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004210dbd:	0f b6 00             	movzbl (%rax),%eax
  8004210dc0:	0f b6 d0             	movzbl %al,%edx
  8004210dc3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210dc7:	0f b6 00             	movzbl (%rax),%eax
  8004210dca:	0f b6 c0             	movzbl %al,%eax
  8004210dcd:	29 c2                	sub    %eax,%edx
  8004210dcf:	89 d0                	mov    %edx,%eax
  8004210dd1:	eb 20                	jmp    8004210df3 <memcmp+0x72>
  8004210dd3:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
  8004210dd8:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  8004210ddd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210de1:	48 8d 50 ff          	lea    -0x1(%rax),%rdx
  8004210de5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210de9:	48 85 c0             	test   %rax,%rax
  8004210dec:	75 b9                	jne    8004210da7 <memcmp+0x26>
  8004210dee:	b8 00 00 00 00       	mov    $0x0,%eax
  8004210df3:	c9                   	leaveq 
  8004210df4:	c3                   	retq   

0000008004210df5 <memfind>:
  8004210df5:	55                   	push   %rbp
  8004210df6:	48 89 e5             	mov    %rsp,%rbp
  8004210df9:	48 83 ec 28          	sub    $0x28,%rsp
  8004210dfd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004210e01:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004210e04:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004210e08:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e0c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004210e10:	48 01 d0             	add    %rdx,%rax
  8004210e13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004210e17:	eb 15                	jmp    8004210e2e <memfind+0x39>
  8004210e19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e1d:	0f b6 10             	movzbl (%rax),%edx
  8004210e20:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004210e23:	38 c2                	cmp    %al,%dl
  8004210e25:	75 02                	jne    8004210e29 <memfind+0x34>
  8004210e27:	eb 0f                	jmp    8004210e38 <memfind+0x43>
  8004210e29:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
  8004210e2e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e32:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004210e36:	72 e1                	jb     8004210e19 <memfind+0x24>
  8004210e38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004210e3c:	c9                   	leaveq 
  8004210e3d:	c3                   	retq   

0000008004210e3e <strtol>:
  8004210e3e:	55                   	push   %rbp
  8004210e3f:	48 89 e5             	mov    %rsp,%rbp
  8004210e42:	48 83 ec 34          	sub    $0x34,%rsp
  8004210e46:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210e4a:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210e4e:	89 55 cc             	mov    %edx,-0x34(%rbp)
  8004210e51:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004210e58:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  8004210e5f:	00 
  8004210e60:	eb 05                	jmp    8004210e67 <strtol+0x29>
  8004210e62:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210e67:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e6b:	0f b6 00             	movzbl (%rax),%eax
  8004210e6e:	3c 20                	cmp    $0x20,%al
  8004210e70:	74 f0                	je     8004210e62 <strtol+0x24>
  8004210e72:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e76:	0f b6 00             	movzbl (%rax),%eax
  8004210e79:	3c 09                	cmp    $0x9,%al
  8004210e7b:	74 e5                	je     8004210e62 <strtol+0x24>
  8004210e7d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e81:	0f b6 00             	movzbl (%rax),%eax
  8004210e84:	3c 2b                	cmp    $0x2b,%al
  8004210e86:	75 07                	jne    8004210e8f <strtol+0x51>
  8004210e88:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210e8d:	eb 17                	jmp    8004210ea6 <strtol+0x68>
  8004210e8f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210e93:	0f b6 00             	movzbl (%rax),%eax
  8004210e96:	3c 2d                	cmp    $0x2d,%al
  8004210e98:	75 0c                	jne    8004210ea6 <strtol+0x68>
  8004210e9a:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210e9f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
  8004210ea6:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210eaa:	74 06                	je     8004210eb2 <strtol+0x74>
  8004210eac:	83 7d cc 10          	cmpl   $0x10,-0x34(%rbp)
  8004210eb0:	75 28                	jne    8004210eda <strtol+0x9c>
  8004210eb2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210eb6:	0f b6 00             	movzbl (%rax),%eax
  8004210eb9:	3c 30                	cmp    $0x30,%al
  8004210ebb:	75 1d                	jne    8004210eda <strtol+0x9c>
  8004210ebd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ec1:	48 83 c0 01          	add    $0x1,%rax
  8004210ec5:	0f b6 00             	movzbl (%rax),%eax
  8004210ec8:	3c 78                	cmp    $0x78,%al
  8004210eca:	75 0e                	jne    8004210eda <strtol+0x9c>
  8004210ecc:	48 83 45 d8 02       	addq   $0x2,-0x28(%rbp)
  8004210ed1:	c7 45 cc 10 00 00 00 	movl   $0x10,-0x34(%rbp)
  8004210ed8:	eb 2c                	jmp    8004210f06 <strtol+0xc8>
  8004210eda:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210ede:	75 19                	jne    8004210ef9 <strtol+0xbb>
  8004210ee0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ee4:	0f b6 00             	movzbl (%rax),%eax
  8004210ee7:	3c 30                	cmp    $0x30,%al
  8004210ee9:	75 0e                	jne    8004210ef9 <strtol+0xbb>
  8004210eeb:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210ef0:	c7 45 cc 08 00 00 00 	movl   $0x8,-0x34(%rbp)
  8004210ef7:	eb 0d                	jmp    8004210f06 <strtol+0xc8>
  8004210ef9:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  8004210efd:	75 07                	jne    8004210f06 <strtol+0xc8>
  8004210eff:	c7 45 cc 0a 00 00 00 	movl   $0xa,-0x34(%rbp)
  8004210f06:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f0a:	0f b6 00             	movzbl (%rax),%eax
  8004210f0d:	3c 2f                	cmp    $0x2f,%al
  8004210f0f:	7e 1d                	jle    8004210f2e <strtol+0xf0>
  8004210f11:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f15:	0f b6 00             	movzbl (%rax),%eax
  8004210f18:	3c 39                	cmp    $0x39,%al
  8004210f1a:	7f 12                	jg     8004210f2e <strtol+0xf0>
  8004210f1c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f20:	0f b6 00             	movzbl (%rax),%eax
  8004210f23:	0f be c0             	movsbl %al,%eax
  8004210f26:	83 e8 30             	sub    $0x30,%eax
  8004210f29:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210f2c:	eb 4e                	jmp    8004210f7c <strtol+0x13e>
  8004210f2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f32:	0f b6 00             	movzbl (%rax),%eax
  8004210f35:	3c 60                	cmp    $0x60,%al
  8004210f37:	7e 1d                	jle    8004210f56 <strtol+0x118>
  8004210f39:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f3d:	0f b6 00             	movzbl (%rax),%eax
  8004210f40:	3c 7a                	cmp    $0x7a,%al
  8004210f42:	7f 12                	jg     8004210f56 <strtol+0x118>
  8004210f44:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f48:	0f b6 00             	movzbl (%rax),%eax
  8004210f4b:	0f be c0             	movsbl %al,%eax
  8004210f4e:	83 e8 57             	sub    $0x57,%eax
  8004210f51:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210f54:	eb 26                	jmp    8004210f7c <strtol+0x13e>
  8004210f56:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f5a:	0f b6 00             	movzbl (%rax),%eax
  8004210f5d:	3c 40                	cmp    $0x40,%al
  8004210f5f:	7e 48                	jle    8004210fa9 <strtol+0x16b>
  8004210f61:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f65:	0f b6 00             	movzbl (%rax),%eax
  8004210f68:	3c 5a                	cmp    $0x5a,%al
  8004210f6a:	7f 3d                	jg     8004210fa9 <strtol+0x16b>
  8004210f6c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210f70:	0f b6 00             	movzbl (%rax),%eax
  8004210f73:	0f be c0             	movsbl %al,%eax
  8004210f76:	83 e8 37             	sub    $0x37,%eax
  8004210f79:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004210f7c:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210f7f:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  8004210f82:	7c 02                	jl     8004210f86 <strtol+0x148>
  8004210f84:	eb 23                	jmp    8004210fa9 <strtol+0x16b>
  8004210f86:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004210f8b:	8b 45 cc             	mov    -0x34(%rbp),%eax
  8004210f8e:	48 98                	cltq   
  8004210f90:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
  8004210f95:	48 89 c2             	mov    %rax,%rdx
  8004210f98:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004210f9b:	48 98                	cltq   
  8004210f9d:	48 01 d0             	add    %rdx,%rax
  8004210fa0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004210fa4:	e9 5d ff ff ff       	jmpq   8004210f06 <strtol+0xc8>
  8004210fa9:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004210fae:	74 0b                	je     8004210fbb <strtol+0x17d>
  8004210fb0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210fb4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004210fb8:	48 89 10             	mov    %rdx,(%rax)
  8004210fbb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004210fbf:	74 09                	je     8004210fca <strtol+0x18c>
  8004210fc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fc5:	48 f7 d8             	neg    %rax
  8004210fc8:	eb 04                	jmp    8004210fce <strtol+0x190>
  8004210fca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004210fce:	c9                   	leaveq 
  8004210fcf:	c3                   	retq   

0000008004210fd0 <strstr>:
  8004210fd0:	55                   	push   %rbp
  8004210fd1:	48 89 e5             	mov    %rsp,%rbp
  8004210fd4:	48 83 ec 30          	sub    $0x30,%rsp
  8004210fd8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004210fdc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004210fe0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004210fe4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004210fe8:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  8004210fec:	0f b6 00             	movzbl (%rax),%eax
  8004210fef:	88 45 ff             	mov    %al,-0x1(%rbp)
  8004210ff2:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  8004210ff6:	75 06                	jne    8004210ffe <strstr+0x2e>
  8004210ff8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004210ffc:	eb 6b                	jmp    8004211069 <strstr+0x99>
  8004210ffe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211002:	48 89 c7             	mov    %rax,%rdi
  8004211005:	48 b8 a6 08 21 04 80 	movabs $0x80042108a6,%rax
  800421100c:	00 00 00 
  800421100f:	ff d0                	callq  *%rax
  8004211011:	48 98                	cltq   
  8004211013:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004211017:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421101b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421101f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004211023:	0f b6 00             	movzbl (%rax),%eax
  8004211026:	88 45 ef             	mov    %al,-0x11(%rbp)
  8004211029:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421102d:	75 07                	jne    8004211036 <strstr+0x66>
  800421102f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211034:	eb 33                	jmp    8004211069 <strstr+0x99>
  8004211036:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421103a:	3a 45 ff             	cmp    -0x1(%rbp),%al
  800421103d:	75 d8                	jne    8004211017 <strstr+0x47>
  800421103f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211043:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
  8004211047:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421104b:	48 89 ce             	mov    %rcx,%rsi
  800421104e:	48 89 c7             	mov    %rax,%rdi
  8004211051:	48 b8 c7 0a 21 04 80 	movabs $0x8004210ac7,%rax
  8004211058:	00 00 00 
  800421105b:	ff d0                	callq  *%rax
  800421105d:	85 c0                	test   %eax,%eax
  800421105f:	75 b6                	jne    8004211017 <strstr+0x47>
  8004211061:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211065:	48 83 e8 01          	sub    $0x1,%rax
  8004211069:	c9                   	leaveq 
  800421106a:	c3                   	retq   

000000800421106b <_dwarf_read_lsb>:
Dwarf_Section *
_dwarf_find_section(const char *name);

uint64_t
_dwarf_read_lsb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  800421106b:	55                   	push   %rbp
  800421106c:	48 89 e5             	mov    %rsp,%rbp
  800421106f:	48 83 ec 24          	sub    $0x24,%rsp
  8004211073:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211077:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421107b:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  800421107e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211082:	48 8b 10             	mov    (%rax),%rdx
  8004211085:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211089:	48 01 d0             	add    %rdx,%rax
  800421108c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211090:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211097:	00 
	switch (bytes_to_read) {
  8004211098:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421109b:	83 f8 02             	cmp    $0x2,%eax
  800421109e:	0f 84 ab 00 00 00    	je     800421114f <_dwarf_read_lsb+0xe4>
  80042110a4:	83 f8 02             	cmp    $0x2,%eax
  80042110a7:	7f 0e                	jg     80042110b7 <_dwarf_read_lsb+0x4c>
  80042110a9:	83 f8 01             	cmp    $0x1,%eax
  80042110ac:	0f 84 b3 00 00 00    	je     8004211165 <_dwarf_read_lsb+0xfa>
  80042110b2:	e9 d9 00 00 00       	jmpq   8004211190 <_dwarf_read_lsb+0x125>
  80042110b7:	83 f8 04             	cmp    $0x4,%eax
  80042110ba:	74 65                	je     8004211121 <_dwarf_read_lsb+0xb6>
  80042110bc:	83 f8 08             	cmp    $0x8,%eax
  80042110bf:	0f 85 cb 00 00 00    	jne    8004211190 <_dwarf_read_lsb+0x125>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042110c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110c9:	48 83 c0 04          	add    $0x4,%rax
  80042110cd:	0f b6 00             	movzbl (%rax),%eax
  80042110d0:	0f b6 c0             	movzbl %al,%eax
  80042110d3:	48 c1 e0 20          	shl    $0x20,%rax
  80042110d7:	48 89 c2             	mov    %rax,%rdx
  80042110da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110de:	48 83 c0 05          	add    $0x5,%rax
  80042110e2:	0f b6 00             	movzbl (%rax),%eax
  80042110e5:	0f b6 c0             	movzbl %al,%eax
  80042110e8:	48 c1 e0 28          	shl    $0x28,%rax
  80042110ec:	48 09 d0             	or     %rdx,%rax
  80042110ef:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  80042110f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042110f7:	48 83 c0 06          	add    $0x6,%rax
  80042110fb:	0f b6 00             	movzbl (%rax),%eax
  80042110fe:	0f b6 c0             	movzbl %al,%eax
  8004211101:	48 c1 e0 30          	shl    $0x30,%rax
  8004211105:	48 89 c2             	mov    %rax,%rdx
  8004211108:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421110c:	48 83 c0 07          	add    $0x7,%rax
  8004211110:	0f b6 00             	movzbl (%rax),%eax
  8004211113:	0f b6 c0             	movzbl %al,%eax
  8004211116:	48 c1 e0 38          	shl    $0x38,%rax
  800421111a:	48 09 d0             	or     %rdx,%rax
  800421111d:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004211121:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211125:	48 83 c0 02          	add    $0x2,%rax
  8004211129:	0f b6 00             	movzbl (%rax),%eax
  800421112c:	0f b6 c0             	movzbl %al,%eax
  800421112f:	48 c1 e0 10          	shl    $0x10,%rax
  8004211133:	48 89 c2             	mov    %rax,%rdx
  8004211136:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421113a:	48 83 c0 03          	add    $0x3,%rax
  800421113e:	0f b6 00             	movzbl (%rax),%eax
  8004211141:	0f b6 c0             	movzbl %al,%eax
  8004211144:	48 c1 e0 18          	shl    $0x18,%rax
  8004211148:	48 09 d0             	or     %rdx,%rax
  800421114b:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  800421114f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211153:	48 83 c0 01          	add    $0x1,%rax
  8004211157:	0f b6 00             	movzbl (%rax),%eax
  800421115a:	0f b6 c0             	movzbl %al,%eax
  800421115d:	48 c1 e0 08          	shl    $0x8,%rax
  8004211161:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004211165:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211169:	0f b6 00             	movzbl (%rax),%eax
  800421116c:	0f b6 c0             	movzbl %al,%eax
  800421116f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211173:	90                   	nop
	default:
		return (0);
	}

	*offsetp += bytes_to_read;
  8004211174:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211178:	48 8b 10             	mov    (%rax),%rdx
  800421117b:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421117e:	48 98                	cltq   
  8004211180:	48 01 c2             	add    %rax,%rdx
  8004211183:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211187:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421118a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421118e:	eb 05                	jmp    8004211195 <_dwarf_read_lsb+0x12a>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  8004211190:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*offsetp += bytes_to_read;

	return (ret);
}
  8004211195:	c9                   	leaveq 
  8004211196:	c3                   	retq   

0000008004211197 <_dwarf_decode_lsb>:

uint64_t
_dwarf_decode_lsb(uint8_t **data, int bytes_to_read)
{
  8004211197:	55                   	push   %rbp
  8004211198:	48 89 e5             	mov    %rsp,%rbp
  800421119b:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421119f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042111a3:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  80042111a6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042111aa:	48 8b 00             	mov    (%rax),%rax
  80042111ad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  80042111b1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042111b8:	00 
	switch (bytes_to_read) {
  80042111b9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042111bc:	83 f8 02             	cmp    $0x2,%eax
  80042111bf:	0f 84 ab 00 00 00    	je     8004211270 <_dwarf_decode_lsb+0xd9>
  80042111c5:	83 f8 02             	cmp    $0x2,%eax
  80042111c8:	7f 0e                	jg     80042111d8 <_dwarf_decode_lsb+0x41>
  80042111ca:	83 f8 01             	cmp    $0x1,%eax
  80042111cd:	0f 84 b3 00 00 00    	je     8004211286 <_dwarf_decode_lsb+0xef>
  80042111d3:	e9 d9 00 00 00       	jmpq   80042112b1 <_dwarf_decode_lsb+0x11a>
  80042111d8:	83 f8 04             	cmp    $0x4,%eax
  80042111db:	74 65                	je     8004211242 <_dwarf_decode_lsb+0xab>
  80042111dd:	83 f8 08             	cmp    $0x8,%eax
  80042111e0:	0f 85 cb 00 00 00    	jne    80042112b1 <_dwarf_decode_lsb+0x11a>
	case 8:
		ret |= ((uint64_t) src[4]) << 32 | ((uint64_t) src[5]) << 40;
  80042111e6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111ea:	48 83 c0 04          	add    $0x4,%rax
  80042111ee:	0f b6 00             	movzbl (%rax),%eax
  80042111f1:	0f b6 c0             	movzbl %al,%eax
  80042111f4:	48 c1 e0 20          	shl    $0x20,%rax
  80042111f8:	48 89 c2             	mov    %rax,%rdx
  80042111fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042111ff:	48 83 c0 05          	add    $0x5,%rax
  8004211203:	0f b6 00             	movzbl (%rax),%eax
  8004211206:	0f b6 c0             	movzbl %al,%eax
  8004211209:	48 c1 e0 28          	shl    $0x28,%rax
  800421120d:	48 09 d0             	or     %rdx,%rax
  8004211210:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[6]) << 48 | ((uint64_t) src[7]) << 56;
  8004211214:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211218:	48 83 c0 06          	add    $0x6,%rax
  800421121c:	0f b6 00             	movzbl (%rax),%eax
  800421121f:	0f b6 c0             	movzbl %al,%eax
  8004211222:	48 c1 e0 30          	shl    $0x30,%rax
  8004211226:	48 89 c2             	mov    %rax,%rdx
  8004211229:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421122d:	48 83 c0 07          	add    $0x7,%rax
  8004211231:	0f b6 00             	movzbl (%rax),%eax
  8004211234:	0f b6 c0             	movzbl %al,%eax
  8004211237:	48 c1 e0 38          	shl    $0x38,%rax
  800421123b:	48 09 d0             	or     %rdx,%rax
  800421123e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 4:
		ret |= ((uint64_t) src[2]) << 16 | ((uint64_t) src[3]) << 24;
  8004211242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211246:	48 83 c0 02          	add    $0x2,%rax
  800421124a:	0f b6 00             	movzbl (%rax),%eax
  800421124d:	0f b6 c0             	movzbl %al,%eax
  8004211250:	48 c1 e0 10          	shl    $0x10,%rax
  8004211254:	48 89 c2             	mov    %rax,%rdx
  8004211257:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421125b:	48 83 c0 03          	add    $0x3,%rax
  800421125f:	0f b6 00             	movzbl (%rax),%eax
  8004211262:	0f b6 c0             	movzbl %al,%eax
  8004211265:	48 c1 e0 18          	shl    $0x18,%rax
  8004211269:	48 09 d0             	or     %rdx,%rax
  800421126c:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 2:
		ret |= ((uint64_t) src[1]) << 8;
  8004211270:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211274:	48 83 c0 01          	add    $0x1,%rax
  8004211278:	0f b6 00             	movzbl (%rax),%eax
  800421127b:	0f b6 c0             	movzbl %al,%eax
  800421127e:	48 c1 e0 08          	shl    $0x8,%rax
  8004211282:	48 09 45 f8          	or     %rax,-0x8(%rbp)
	case 1:
		ret |= src[0];
  8004211286:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421128a:	0f b6 00             	movzbl (%rax),%eax
  800421128d:	0f b6 c0             	movzbl %al,%eax
  8004211290:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211294:	90                   	nop
	default:
		return (0);
	}

	*data += bytes_to_read;
  8004211295:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211299:	48 8b 10             	mov    (%rax),%rdx
  800421129c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421129f:	48 98                	cltq   
  80042112a1:	48 01 c2             	add    %rax,%rdx
  80042112a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112a8:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042112ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042112af:	eb 05                	jmp    80042112b6 <_dwarf_decode_lsb+0x11f>
		ret |= ((uint64_t) src[1]) << 8;
	case 1:
		ret |= src[0];
		break;
	default:
		return (0);
  80042112b1:	b8 00 00 00 00       	mov    $0x0,%eax
	}

	*data += bytes_to_read;

	return (ret);
}
  80042112b6:	c9                   	leaveq 
  80042112b7:	c3                   	retq   

00000080042112b8 <_dwarf_read_msb>:

uint64_t
_dwarf_read_msb(uint8_t *data, uint64_t *offsetp, int bytes_to_read)
{
  80042112b8:	55                   	push   %rbp
  80042112b9:	48 89 e5             	mov    %rsp,%rbp
  80042112bc:	48 83 ec 24          	sub    $0x24,%rsp
  80042112c0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042112c4:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042112c8:	89 55 dc             	mov    %edx,-0x24(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = data + *offsetp;
  80042112cb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042112cf:	48 8b 10             	mov    (%rax),%rdx
  80042112d2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042112d6:	48 01 d0             	add    %rdx,%rax
  80042112d9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	switch (bytes_to_read) {
  80042112dd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  80042112e0:	83 f8 02             	cmp    $0x2,%eax
  80042112e3:	74 35                	je     800421131a <_dwarf_read_msb+0x62>
  80042112e5:	83 f8 02             	cmp    $0x2,%eax
  80042112e8:	7f 0a                	jg     80042112f4 <_dwarf_read_msb+0x3c>
  80042112ea:	83 f8 01             	cmp    $0x1,%eax
  80042112ed:	74 18                	je     8004211307 <_dwarf_read_msb+0x4f>
  80042112ef:	e9 53 01 00 00       	jmpq   8004211447 <_dwarf_read_msb+0x18f>
  80042112f4:	83 f8 04             	cmp    $0x4,%eax
  80042112f7:	74 49                	je     8004211342 <_dwarf_read_msb+0x8a>
  80042112f9:	83 f8 08             	cmp    $0x8,%eax
  80042112fc:	0f 84 96 00 00 00    	je     8004211398 <_dwarf_read_msb+0xe0>
  8004211302:	e9 40 01 00 00       	jmpq   8004211447 <_dwarf_read_msb+0x18f>
	case 1:
		ret = src[0];
  8004211307:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421130b:	0f b6 00             	movzbl (%rax),%eax
  800421130e:	0f b6 c0             	movzbl %al,%eax
  8004211311:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  8004211315:	e9 34 01 00 00       	jmpq   800421144e <_dwarf_read_msb+0x196>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  800421131a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421131e:	48 83 c0 01          	add    $0x1,%rax
  8004211322:	0f b6 00             	movzbl (%rax),%eax
  8004211325:	0f b6 d0             	movzbl %al,%edx
  8004211328:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421132c:	0f b6 00             	movzbl (%rax),%eax
  800421132f:	0f b6 c0             	movzbl %al,%eax
  8004211332:	48 c1 e0 08          	shl    $0x8,%rax
  8004211336:	48 09 d0             	or     %rdx,%rax
  8004211339:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  800421133d:	e9 0c 01 00 00       	jmpq   800421144e <_dwarf_read_msb+0x196>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  8004211342:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211346:	48 83 c0 03          	add    $0x3,%rax
  800421134a:	0f b6 00             	movzbl (%rax),%eax
  800421134d:	0f b6 c0             	movzbl %al,%eax
  8004211350:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211354:	48 83 c2 02          	add    $0x2,%rdx
  8004211358:	0f b6 12             	movzbl (%rdx),%edx
  800421135b:	0f b6 d2             	movzbl %dl,%edx
  800421135e:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211362:	48 09 d0             	or     %rdx,%rax
  8004211365:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211369:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421136d:	48 83 c0 01          	add    $0x1,%rax
  8004211371:	0f b6 00             	movzbl (%rax),%eax
  8004211374:	0f b6 c0             	movzbl %al,%eax
  8004211377:	48 c1 e0 10          	shl    $0x10,%rax
  800421137b:	48 89 c2             	mov    %rax,%rdx
  800421137e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211382:	0f b6 00             	movzbl (%rax),%eax
  8004211385:	0f b6 c0             	movzbl %al,%eax
  8004211388:	48 c1 e0 18          	shl    $0x18,%rax
  800421138c:	48 09 d0             	or     %rdx,%rax
  800421138f:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211393:	e9 b6 00 00 00       	jmpq   800421144e <_dwarf_read_msb+0x196>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211398:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421139c:	48 83 c0 07          	add    $0x7,%rax
  80042113a0:	0f b6 00             	movzbl (%rax),%eax
  80042113a3:	0f b6 c0             	movzbl %al,%eax
  80042113a6:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042113aa:	48 83 c2 06          	add    $0x6,%rdx
  80042113ae:	0f b6 12             	movzbl (%rdx),%edx
  80042113b1:	0f b6 d2             	movzbl %dl,%edx
  80042113b4:	48 c1 e2 08          	shl    $0x8,%rdx
  80042113b8:	48 09 d0             	or     %rdx,%rax
  80042113bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  80042113bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113c3:	48 83 c0 05          	add    $0x5,%rax
  80042113c7:	0f b6 00             	movzbl (%rax),%eax
  80042113ca:	0f b6 c0             	movzbl %al,%eax
  80042113cd:	48 c1 e0 10          	shl    $0x10,%rax
  80042113d1:	48 89 c2             	mov    %rax,%rdx
  80042113d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113d8:	48 83 c0 04          	add    $0x4,%rax
  80042113dc:	0f b6 00             	movzbl (%rax),%eax
  80042113df:	0f b6 c0             	movzbl %al,%eax
  80042113e2:	48 c1 e0 18          	shl    $0x18,%rax
  80042113e6:	48 09 d0             	or     %rdx,%rax
  80042113e9:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  80042113ed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042113f1:	48 83 c0 03          	add    $0x3,%rax
  80042113f5:	0f b6 00             	movzbl (%rax),%eax
  80042113f8:	0f b6 c0             	movzbl %al,%eax
  80042113fb:	48 c1 e0 20          	shl    $0x20,%rax
  80042113ff:	48 89 c2             	mov    %rax,%rdx
  8004211402:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211406:	48 83 c0 02          	add    $0x2,%rax
  800421140a:	0f b6 00             	movzbl (%rax),%eax
  800421140d:	0f b6 c0             	movzbl %al,%eax
  8004211410:	48 c1 e0 28          	shl    $0x28,%rax
  8004211414:	48 09 d0             	or     %rdx,%rax
  8004211417:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  800421141b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421141f:	48 83 c0 01          	add    $0x1,%rax
  8004211423:	0f b6 00             	movzbl (%rax),%eax
  8004211426:	0f b6 c0             	movzbl %al,%eax
  8004211429:	48 c1 e0 30          	shl    $0x30,%rax
  800421142d:	48 89 c2             	mov    %rax,%rdx
  8004211430:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211434:	0f b6 00             	movzbl (%rax),%eax
  8004211437:	0f b6 c0             	movzbl %al,%eax
  800421143a:	48 c1 e0 38          	shl    $0x38,%rax
  800421143e:	48 09 d0             	or     %rdx,%rax
  8004211441:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211445:	eb 07                	jmp    800421144e <_dwarf_read_msb+0x196>
	default:
		return (0);
  8004211447:	b8 00 00 00 00       	mov    $0x0,%eax
  800421144c:	eb 1a                	jmp    8004211468 <_dwarf_read_msb+0x1b0>
	}

	*offsetp += bytes_to_read;
  800421144e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211452:	48 8b 10             	mov    (%rax),%rdx
  8004211455:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004211458:	48 98                	cltq   
  800421145a:	48 01 c2             	add    %rax,%rdx
  800421145d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211461:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211464:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211468:	c9                   	leaveq 
  8004211469:	c3                   	retq   

000000800421146a <_dwarf_decode_msb>:

uint64_t
_dwarf_decode_msb(uint8_t **data, int bytes_to_read)
{
  800421146a:	55                   	push   %rbp
  800421146b:	48 89 e5             	mov    %rsp,%rbp
  800421146e:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004211472:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211476:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint64_t ret;
	uint8_t *src;

	src = *data;
  8004211479:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421147d:	48 8b 00             	mov    (%rax),%rax
  8004211480:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	ret = 0;
  8004211484:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421148b:	00 
	switch (bytes_to_read) {
  800421148c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421148f:	83 f8 02             	cmp    $0x2,%eax
  8004211492:	74 35                	je     80042114c9 <_dwarf_decode_msb+0x5f>
  8004211494:	83 f8 02             	cmp    $0x2,%eax
  8004211497:	7f 0a                	jg     80042114a3 <_dwarf_decode_msb+0x39>
  8004211499:	83 f8 01             	cmp    $0x1,%eax
  800421149c:	74 18                	je     80042114b6 <_dwarf_decode_msb+0x4c>
  800421149e:	e9 53 01 00 00       	jmpq   80042115f6 <_dwarf_decode_msb+0x18c>
  80042114a3:	83 f8 04             	cmp    $0x4,%eax
  80042114a6:	74 49                	je     80042114f1 <_dwarf_decode_msb+0x87>
  80042114a8:	83 f8 08             	cmp    $0x8,%eax
  80042114ab:	0f 84 96 00 00 00    	je     8004211547 <_dwarf_decode_msb+0xdd>
  80042114b1:	e9 40 01 00 00       	jmpq   80042115f6 <_dwarf_decode_msb+0x18c>
	case 1:
		ret = src[0];
  80042114b6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114ba:	0f b6 00             	movzbl (%rax),%eax
  80042114bd:	0f b6 c0             	movzbl %al,%eax
  80042114c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042114c4:	e9 34 01 00 00       	jmpq   80042115fd <_dwarf_decode_msb+0x193>
	case 2:
		ret = src[1] | ((uint64_t) src[0]) << 8;
  80042114c9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114cd:	48 83 c0 01          	add    $0x1,%rax
  80042114d1:	0f b6 00             	movzbl (%rax),%eax
  80042114d4:	0f b6 d0             	movzbl %al,%edx
  80042114d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114db:	0f b6 00             	movzbl (%rax),%eax
  80042114de:	0f b6 c0             	movzbl %al,%eax
  80042114e1:	48 c1 e0 08          	shl    $0x8,%rax
  80042114e5:	48 09 d0             	or     %rdx,%rax
  80042114e8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		break;
  80042114ec:	e9 0c 01 00 00       	jmpq   80042115fd <_dwarf_decode_msb+0x193>
	case 4:
		ret = src[3] | ((uint64_t) src[2]) << 8;
  80042114f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042114f5:	48 83 c0 03          	add    $0x3,%rax
  80042114f9:	0f b6 00             	movzbl (%rax),%eax
  80042114fc:	0f b6 c0             	movzbl %al,%eax
  80042114ff:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211503:	48 83 c2 02          	add    $0x2,%rdx
  8004211507:	0f b6 12             	movzbl (%rdx),%edx
  800421150a:	0f b6 d2             	movzbl %dl,%edx
  800421150d:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211511:	48 09 d0             	or     %rdx,%rax
  8004211514:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 16 | ((uint64_t) src[0]) << 24;
  8004211518:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421151c:	48 83 c0 01          	add    $0x1,%rax
  8004211520:	0f b6 00             	movzbl (%rax),%eax
  8004211523:	0f b6 c0             	movzbl %al,%eax
  8004211526:	48 c1 e0 10          	shl    $0x10,%rax
  800421152a:	48 89 c2             	mov    %rax,%rdx
  800421152d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211531:	0f b6 00             	movzbl (%rax),%eax
  8004211534:	0f b6 c0             	movzbl %al,%eax
  8004211537:	48 c1 e0 18          	shl    $0x18,%rax
  800421153b:	48 09 d0             	or     %rdx,%rax
  800421153e:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  8004211542:	e9 b6 00 00 00       	jmpq   80042115fd <_dwarf_decode_msb+0x193>
	case 8:
		ret = src[7] | ((uint64_t) src[6]) << 8;
  8004211547:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421154b:	48 83 c0 07          	add    $0x7,%rax
  800421154f:	0f b6 00             	movzbl (%rax),%eax
  8004211552:	0f b6 c0             	movzbl %al,%eax
  8004211555:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211559:	48 83 c2 06          	add    $0x6,%rdx
  800421155d:	0f b6 12             	movzbl (%rdx),%edx
  8004211560:	0f b6 d2             	movzbl %dl,%edx
  8004211563:	48 c1 e2 08          	shl    $0x8,%rdx
  8004211567:	48 09 d0             	or     %rdx,%rax
  800421156a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[5]) << 16 | ((uint64_t) src[4]) << 24;
  800421156e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211572:	48 83 c0 05          	add    $0x5,%rax
  8004211576:	0f b6 00             	movzbl (%rax),%eax
  8004211579:	0f b6 c0             	movzbl %al,%eax
  800421157c:	48 c1 e0 10          	shl    $0x10,%rax
  8004211580:	48 89 c2             	mov    %rax,%rdx
  8004211583:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211587:	48 83 c0 04          	add    $0x4,%rax
  800421158b:	0f b6 00             	movzbl (%rax),%eax
  800421158e:	0f b6 c0             	movzbl %al,%eax
  8004211591:	48 c1 e0 18          	shl    $0x18,%rax
  8004211595:	48 09 d0             	or     %rdx,%rax
  8004211598:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[3]) << 32 | ((uint64_t) src[2]) << 40;
  800421159c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115a0:	48 83 c0 03          	add    $0x3,%rax
  80042115a4:	0f b6 00             	movzbl (%rax),%eax
  80042115a7:	0f b6 c0             	movzbl %al,%eax
  80042115aa:	48 c1 e0 20          	shl    $0x20,%rax
  80042115ae:	48 89 c2             	mov    %rax,%rdx
  80042115b1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115b5:	48 83 c0 02          	add    $0x2,%rax
  80042115b9:	0f b6 00             	movzbl (%rax),%eax
  80042115bc:	0f b6 c0             	movzbl %al,%eax
  80042115bf:	48 c1 e0 28          	shl    $0x28,%rax
  80042115c3:	48 09 d0             	or     %rdx,%rax
  80042115c6:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		ret |= ((uint64_t) src[1]) << 48 | ((uint64_t) src[0]) << 56;
  80042115ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115ce:	48 83 c0 01          	add    $0x1,%rax
  80042115d2:	0f b6 00             	movzbl (%rax),%eax
  80042115d5:	0f b6 c0             	movzbl %al,%eax
  80042115d8:	48 c1 e0 30          	shl    $0x30,%rax
  80042115dc:	48 89 c2             	mov    %rax,%rdx
  80042115df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042115e3:	0f b6 00             	movzbl (%rax),%eax
  80042115e6:	0f b6 c0             	movzbl %al,%eax
  80042115e9:	48 c1 e0 38          	shl    $0x38,%rax
  80042115ed:	48 09 d0             	or     %rdx,%rax
  80042115f0:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		break;
  80042115f4:	eb 07                	jmp    80042115fd <_dwarf_decode_msb+0x193>
	default:
		return (0);
  80042115f6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042115fb:	eb 1a                	jmp    8004211617 <_dwarf_decode_msb+0x1ad>
		break;
	}

	*data += bytes_to_read;
  80042115fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211601:	48 8b 10             	mov    (%rax),%rdx
  8004211604:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004211607:	48 98                	cltq   
  8004211609:	48 01 c2             	add    %rax,%rdx
  800421160c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211610:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211613:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211617:	c9                   	leaveq 
  8004211618:	c3                   	retq   

0000008004211619 <_dwarf_read_sleb128>:

int64_t
_dwarf_read_sleb128(uint8_t *data, uint64_t *offsetp)
{
  8004211619:	55                   	push   %rbp
  800421161a:	48 89 e5             	mov    %rsp,%rbp
  800421161d:	48 83 ec 30          	sub    $0x30,%rsp
  8004211621:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211625:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	int64_t ret = 0;
  8004211629:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004211630:	00 
	uint8_t b;
	int shift = 0;
  8004211631:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  8004211638:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421163c:	48 8b 10             	mov    (%rax),%rdx
  800421163f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211643:	48 01 d0             	add    %rdx,%rax
  8004211646:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  800421164a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421164e:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211652:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211656:	0f b6 00             	movzbl (%rax),%eax
  8004211659:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  800421165c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211660:	83 e0 7f             	and    $0x7f,%eax
  8004211663:	89 c2                	mov    %eax,%edx
  8004211665:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211668:	89 c1                	mov    %eax,%ecx
  800421166a:	d3 e2                	shl    %cl,%edx
  800421166c:	89 d0                	mov    %edx,%eax
  800421166e:	48 98                	cltq   
  8004211670:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211674:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211678:	48 8b 00             	mov    (%rax),%rax
  800421167b:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421167f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211683:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  8004211686:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800421168a:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421168e:	84 c0                	test   %al,%al
  8004211690:	78 b8                	js     800421164a <_dwarf_read_sleb128+0x31>

	if (shift < 32 && (b & 0x40) != 0)
  8004211692:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  8004211696:	7f 1f                	jg     80042116b7 <_dwarf_read_sleb128+0x9e>
  8004211698:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421169c:	83 e0 40             	and    $0x40,%eax
  800421169f:	85 c0                	test   %eax,%eax
  80042116a1:	74 14                	je     80042116b7 <_dwarf_read_sleb128+0x9e>
		ret |= (-1 << shift);
  80042116a3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042116a6:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042116ab:	89 c1                	mov    %eax,%ecx
  80042116ad:	d3 e2                	shl    %cl,%edx
  80042116af:	89 d0                	mov    %edx,%eax
  80042116b1:	48 98                	cltq   
  80042116b3:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	return (ret);
  80042116b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042116bb:	c9                   	leaveq 
  80042116bc:	c3                   	retq   

00000080042116bd <_dwarf_read_uleb128>:

uint64_t
_dwarf_read_uleb128(uint8_t *data, uint64_t *offsetp)
{
  80042116bd:	55                   	push   %rbp
  80042116be:	48 89 e5             	mov    %rsp,%rbp
  80042116c1:	48 83 ec 30          	sub    $0x30,%rsp
  80042116c5:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042116c9:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
	uint64_t ret = 0;
  80042116cd:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042116d4:	00 
	uint8_t b;
	int shift = 0;
  80042116d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	uint8_t *src;

	src = data + *offsetp;
  80042116dc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042116e0:	48 8b 10             	mov    (%rax),%rdx
  80042116e3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042116e7:	48 01 d0             	add    %rdx,%rax
  80042116ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042116ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042116f2:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042116f6:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042116fa:	0f b6 00             	movzbl (%rax),%eax
  80042116fd:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211700:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211704:	83 e0 7f             	and    $0x7f,%eax
  8004211707:	89 c2                	mov    %eax,%edx
  8004211709:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421170c:	89 c1                	mov    %eax,%ecx
  800421170e:	d3 e2                	shl    %cl,%edx
  8004211710:	89 d0                	mov    %edx,%eax
  8004211712:	48 98                	cltq   
  8004211714:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		(*offsetp)++;
  8004211718:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421171c:	48 8b 00             	mov    (%rax),%rax
  800421171f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211723:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211727:	48 89 10             	mov    %rdx,(%rax)
		shift += 7;
  800421172a:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  800421172e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211732:	84 c0                	test   %al,%al
  8004211734:	78 b8                	js     80042116ee <_dwarf_read_uleb128+0x31>

	return (ret);
  8004211736:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  800421173a:	c9                   	leaveq 
  800421173b:	c3                   	retq   

000000800421173c <_dwarf_decode_sleb128>:

int64_t
_dwarf_decode_sleb128(uint8_t **dp)
{
  800421173c:	55                   	push   %rbp
  800421173d:	48 89 e5             	mov    %rsp,%rbp
  8004211740:	48 83 ec 28          	sub    $0x28,%rsp
  8004211744:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	int64_t ret = 0;
  8004211748:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  800421174f:	00 
	uint8_t b;
	int shift = 0;
  8004211750:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  8004211757:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421175b:	48 8b 00             	mov    (%rax),%rax
  800421175e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  8004211762:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211766:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421176a:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  800421176e:	0f b6 00             	movzbl (%rax),%eax
  8004211771:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211774:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211778:	83 e0 7f             	and    $0x7f,%eax
  800421177b:	89 c2                	mov    %eax,%edx
  800421177d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211780:	89 c1                	mov    %eax,%ecx
  8004211782:	d3 e2                	shl    %cl,%edx
  8004211784:	89 d0                	mov    %edx,%eax
  8004211786:	48 98                	cltq   
  8004211788:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  800421178c:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211790:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211794:	84 c0                	test   %al,%al
  8004211796:	78 ca                	js     8004211762 <_dwarf_decode_sleb128+0x26>

	if (shift < 32 && (b & 0x40) != 0)
  8004211798:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%rbp)
  800421179c:	7f 1f                	jg     80042117bd <_dwarf_decode_sleb128+0x81>
  800421179e:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  80042117a2:	83 e0 40             	and    $0x40,%eax
  80042117a5:	85 c0                	test   %eax,%eax
  80042117a7:	74 14                	je     80042117bd <_dwarf_decode_sleb128+0x81>
		ret |= (-1 << shift);
  80042117a9:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042117ac:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  80042117b1:	89 c1                	mov    %eax,%ecx
  80042117b3:	d3 e2                	shl    %cl,%edx
  80042117b5:	89 d0                	mov    %edx,%eax
  80042117b7:	48 98                	cltq   
  80042117b9:	48 09 45 f8          	or     %rax,-0x8(%rbp)

	*dp = src;
  80042117bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042117c1:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042117c5:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042117c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  80042117cc:	c9                   	leaveq 
  80042117cd:	c3                   	retq   

00000080042117ce <_dwarf_decode_uleb128>:

uint64_t
_dwarf_decode_uleb128(uint8_t **dp)
{
  80042117ce:	55                   	push   %rbp
  80042117cf:	48 89 e5             	mov    %rsp,%rbp
  80042117d2:	48 83 ec 28          	sub    $0x28,%rsp
  80042117d6:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
	uint64_t ret = 0;
  80042117da:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  80042117e1:	00 
	uint8_t b;
	int shift = 0;
  80042117e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)

	uint8_t *src = *dp;
  80042117e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042117ed:	48 8b 00             	mov    (%rax),%rax
  80042117f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	do {
		b = *src++;
  80042117f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042117f8:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042117fc:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004211800:	0f b6 00             	movzbl (%rax),%eax
  8004211803:	88 45 e7             	mov    %al,-0x19(%rbp)
		ret |= ((b & 0x7f) << shift);
  8004211806:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421180a:	83 e0 7f             	and    $0x7f,%eax
  800421180d:	89 c2                	mov    %eax,%edx
  800421180f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004211812:	89 c1                	mov    %eax,%ecx
  8004211814:	d3 e2                	shl    %cl,%edx
  8004211816:	89 d0                	mov    %edx,%eax
  8004211818:	48 98                	cltq   
  800421181a:	48 09 45 f8          	or     %rax,-0x8(%rbp)
		shift += 7;
  800421181e:	83 45 f4 07          	addl   $0x7,-0xc(%rbp)
	} while ((b & 0x80) != 0);
  8004211822:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  8004211826:	84 c0                	test   %al,%al
  8004211828:	78 ca                	js     80042117f4 <_dwarf_decode_uleb128+0x26>

	*dp = src;
  800421182a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421182e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211832:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  8004211835:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004211839:	c9                   	leaveq 
  800421183a:	c3                   	retq   

000000800421183b <_dwarf_read_string>:

#define Dwarf_Unsigned uint64_t

char *
_dwarf_read_string(void *data, Dwarf_Unsigned size, uint64_t *offsetp)
{
  800421183b:	55                   	push   %rbp
  800421183c:	48 89 e5             	mov    %rsp,%rbp
  800421183f:	48 83 ec 28          	sub    $0x28,%rsp
  8004211843:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211847:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421184b:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	char *ret, *src;

	ret = src = (char *) data + *offsetp;
  800421184f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211853:	48 8b 10             	mov    (%rax),%rdx
  8004211856:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421185a:	48 01 d0             	add    %rdx,%rax
  800421185d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004211861:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211865:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	while (*src != '\0' && *offsetp < size) {
  8004211869:	eb 17                	jmp    8004211882 <_dwarf_read_string+0x47>
		src++;
  800421186b:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
		(*offsetp)++;
  8004211870:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211874:	48 8b 00             	mov    (%rax),%rax
  8004211877:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421187b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421187f:	48 89 10             	mov    %rdx,(%rax)
{
	char *ret, *src;

	ret = src = (char *) data + *offsetp;

	while (*src != '\0' && *offsetp < size) {
  8004211882:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211886:	0f b6 00             	movzbl (%rax),%eax
  8004211889:	84 c0                	test   %al,%al
  800421188b:	74 0d                	je     800421189a <_dwarf_read_string+0x5f>
  800421188d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211891:	48 8b 00             	mov    (%rax),%rax
  8004211894:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004211898:	72 d1                	jb     800421186b <_dwarf_read_string+0x30>
		src++;
		(*offsetp)++;
	}

	if (*src == '\0' && *offsetp < size)
  800421189a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421189e:	0f b6 00             	movzbl (%rax),%eax
  80042118a1:	84 c0                	test   %al,%al
  80042118a3:	75 1f                	jne    80042118c4 <_dwarf_read_string+0x89>
  80042118a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042118a9:	48 8b 00             	mov    (%rax),%rax
  80042118ac:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042118b0:	73 12                	jae    80042118c4 <_dwarf_read_string+0x89>
		(*offsetp)++;
  80042118b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042118b6:	48 8b 00             	mov    (%rax),%rax
  80042118b9:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042118bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042118c1:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  80042118c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  80042118c8:	c9                   	leaveq 
  80042118c9:	c3                   	retq   

00000080042118ca <_dwarf_read_block>:

uint8_t *
_dwarf_read_block(void *data, uint64_t *offsetp, uint64_t length)
{
  80042118ca:	55                   	push   %rbp
  80042118cb:	48 89 e5             	mov    %rsp,%rbp
  80042118ce:	48 83 ec 28          	sub    $0x28,%rsp
  80042118d2:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042118d6:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042118da:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	uint8_t *ret, *src;

	ret = src = (uint8_t *) data + *offsetp;
  80042118de:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118e2:	48 8b 10             	mov    (%rax),%rdx
  80042118e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042118e9:	48 01 d0             	add    %rdx,%rax
  80042118ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042118f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042118f4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	(*offsetp) += length;
  80042118f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042118fc:	48 8b 10             	mov    (%rax),%rdx
  80042118ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211903:	48 01 c2             	add    %rax,%rdx
  8004211906:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421190a:	48 89 10             	mov    %rdx,(%rax)

	return (ret);
  800421190d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
}
  8004211911:	c9                   	leaveq 
  8004211912:	c3                   	retq   

0000008004211913 <_dwarf_elf_get_byte_order>:

Dwarf_Endianness
_dwarf_elf_get_byte_order(void *obj)
{
  8004211913:	55                   	push   %rbp
  8004211914:	48 89 e5             	mov    %rsp,%rbp
  8004211917:	48 83 ec 20          	sub    $0x20,%rsp
  800421191b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *)obj;
  800421191f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211923:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211927:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421192c:	75 35                	jne    8004211963 <_dwarf_elf_get_byte_order+0x50>
  800421192e:	48 b9 e0 01 22 04 80 	movabs $0x80042201e0,%rcx
  8004211935:	00 00 00 
  8004211938:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  800421193f:	00 00 00 
  8004211942:	be 29 01 00 00       	mov    $0x129,%esi
  8004211947:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  800421194e:	00 00 00 
  8004211951:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211956:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421195d:	00 00 00 
  8004211960:	41 ff d0             	callq  *%r8

//TODO: Need to check for 64bit here. Because currently Elf header for
//      64bit doesn't have any memeber e_ident. But need to see what is
//      similar in 64bit.
	switch (e->e_ident[EI_DATA]) {
  8004211963:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004211967:	0f b6 40 05          	movzbl 0x5(%rax),%eax
  800421196b:	0f b6 c0             	movzbl %al,%eax
  800421196e:	83 f8 02             	cmp    $0x2,%eax
  8004211971:	75 07                	jne    800421197a <_dwarf_elf_get_byte_order+0x67>
	case ELFDATA2MSB:
		return (DW_OBJECT_MSB);
  8004211973:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211978:	eb 05                	jmp    800421197f <_dwarf_elf_get_byte_order+0x6c>

	case ELFDATA2LSB:
	case ELFDATANONE:
	default:
		return (DW_OBJECT_LSB);
  800421197a:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
  800421197f:	c9                   	leaveq 
  8004211980:	c3                   	retq   

0000008004211981 <_dwarf_elf_get_pointer_size>:

Dwarf_Small
_dwarf_elf_get_pointer_size(void *obj)
{
  8004211981:	55                   	push   %rbp
  8004211982:	48 89 e5             	mov    %rsp,%rbp
  8004211985:	48 83 ec 20          	sub    $0x20,%rsp
  8004211989:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Elf *e;

	e = (Elf *) obj;
  800421198d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211991:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(e != NULL);
  8004211995:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  800421199a:	75 35                	jne    80042119d1 <_dwarf_elf_get_pointer_size+0x50>
  800421199c:	48 b9 e0 01 22 04 80 	movabs $0x80042201e0,%rcx
  80042119a3:	00 00 00 
  80042119a6:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  80042119ad:	00 00 00 
  80042119b0:	be 3f 01 00 00       	mov    $0x13f,%esi
  80042119b5:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  80042119bc:	00 00 00 
  80042119bf:	b8 00 00 00 00       	mov    $0x0,%eax
  80042119c4:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042119cb:	00 00 00 
  80042119ce:	41 ff d0             	callq  *%r8

	if (e->e_ident[4] == ELFCLASS32)
  80042119d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042119d5:	0f b6 40 04          	movzbl 0x4(%rax),%eax
  80042119d9:	3c 01                	cmp    $0x1,%al
  80042119db:	75 07                	jne    80042119e4 <_dwarf_elf_get_pointer_size+0x63>
		return (4);
  80042119dd:	b8 04 00 00 00       	mov    $0x4,%eax
  80042119e2:	eb 05                	jmp    80042119e9 <_dwarf_elf_get_pointer_size+0x68>
	else
		return (8);
  80042119e4:	b8 08 00 00 00       	mov    $0x8,%eax
}
  80042119e9:	c9                   	leaveq 
  80042119ea:	c3                   	retq   

00000080042119eb <_dwarf_init>:

//Return 0 on success
int _dwarf_init(Dwarf_Debug dbg, void *obj)
{
  80042119eb:	55                   	push   %rbp
  80042119ec:	48 89 e5             	mov    %rsp,%rbp
  80042119ef:	53                   	push   %rbx
  80042119f0:	48 83 ec 18          	sub    $0x18,%rsp
  80042119f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042119f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	memset(dbg, 0, sizeof(struct _Dwarf_Debug));
  80042119fc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a00:	ba 60 00 00 00       	mov    $0x60,%edx
  8004211a05:	be 00 00 00 00       	mov    $0x0,%esi
  8004211a0a:	48 89 c7             	mov    %rax,%rdi
  8004211a0d:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004211a14:	00 00 00 
  8004211a17:	ff d0                	callq  *%rax
	dbg->curr_off_dbginfo = 0;
  8004211a19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a1d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	dbg->dbg_info_size = 0;
  8004211a24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a28:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004211a2f:	00 
	dbg->dbg_pointer_size = _dwarf_elf_get_pointer_size(obj); 
  8004211a30:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a34:	48 89 c7             	mov    %rax,%rdi
  8004211a37:	48 b8 81 19 21 04 80 	movabs $0x8004211981,%rax
  8004211a3e:	00 00 00 
  8004211a41:	ff d0                	callq  *%rax
  8004211a43:	0f b6 d0             	movzbl %al,%edx
  8004211a46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a4a:	89 50 28             	mov    %edx,0x28(%rax)

	if (_dwarf_elf_get_byte_order(obj) == DW_OBJECT_MSB) {
  8004211a4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211a51:	48 89 c7             	mov    %rax,%rdi
  8004211a54:	48 b8 13 19 21 04 80 	movabs $0x8004211913,%rax
  8004211a5b:	00 00 00 
  8004211a5e:	ff d0                	callq  *%rax
  8004211a60:	85 c0                	test   %eax,%eax
  8004211a62:	75 26                	jne    8004211a8a <_dwarf_init+0x9f>
		dbg->read = _dwarf_read_msb;
  8004211a64:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a68:	48 b9 b8 12 21 04 80 	movabs $0x80042112b8,%rcx
  8004211a6f:	00 00 00 
  8004211a72:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_msb;
  8004211a76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a7a:	48 bb 6a 14 21 04 80 	movabs $0x800421146a,%rbx
  8004211a81:	00 00 00 
  8004211a84:	48 89 58 20          	mov    %rbx,0x20(%rax)
  8004211a88:	eb 24                	jmp    8004211aae <_dwarf_init+0xc3>
	} else {
		dbg->read = _dwarf_read_lsb;
  8004211a8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211a8e:	48 b9 6b 10 21 04 80 	movabs $0x800421106b,%rcx
  8004211a95:	00 00 00 
  8004211a98:	48 89 48 18          	mov    %rcx,0x18(%rax)
		dbg->decode = _dwarf_decode_lsb;
  8004211a9c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211aa0:	48 be 97 11 21 04 80 	movabs $0x8004211197,%rsi
  8004211aa7:	00 00 00 
  8004211aaa:	48 89 70 20          	mov    %rsi,0x20(%rax)
	}
	_dwarf_frame_params_init(dbg);
  8004211aae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ab2:	48 89 c7             	mov    %rax,%rdi
  8004211ab5:	48 b8 b8 2f 21 04 80 	movabs $0x8004212fb8,%rax
  8004211abc:	00 00 00 
  8004211abf:	ff d0                	callq  *%rax
	return 0;
  8004211ac1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211ac6:	48 83 c4 18          	add    $0x18,%rsp
  8004211aca:	5b                   	pop    %rbx
  8004211acb:	5d                   	pop    %rbp
  8004211acc:	c3                   	retq   

0000008004211acd <_get_next_cu>:

//Return 0 on success
int _get_next_cu(Dwarf_Debug dbg, Dwarf_CU *cu)
{
  8004211acd:	55                   	push   %rbp
  8004211ace:	48 89 e5             	mov    %rsp,%rbp
  8004211ad1:	48 83 ec 20          	sub    $0x20,%rsp
  8004211ad5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004211ad9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	uint32_t length;
	uint64_t offset;
	uint8_t dwarf_size;

	if(dbg->curr_off_dbginfo > dbg->dbg_info_size)
  8004211add:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ae1:	48 8b 10             	mov    (%rax),%rdx
  8004211ae4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211ae8:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004211aec:	48 39 c2             	cmp    %rax,%rdx
  8004211aef:	76 0a                	jbe    8004211afb <_get_next_cu+0x2e>
		return -1;
  8004211af1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211af6:	e9 6b 01 00 00       	jmpq   8004211c66 <_get_next_cu+0x199>

	offset = dbg->curr_off_dbginfo;
  8004211afb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211aff:	48 8b 00             	mov    (%rax),%rax
  8004211b02:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	cu->cu_offset = offset;
  8004211b06:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211b0a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b0e:	48 89 50 30          	mov    %rdx,0x30(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset,4);
  8004211b12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b16:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b1a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211b1e:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211b22:	48 89 d1             	mov    %rdx,%rcx
  8004211b25:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211b29:	ba 04 00 00 00       	mov    $0x4,%edx
  8004211b2e:	48 89 cf             	mov    %rcx,%rdi
  8004211b31:	ff d0                	callq  *%rax
  8004211b33:	89 45 fc             	mov    %eax,-0x4(%rbp)
	if (length == 0xffffffff) {
  8004211b36:	83 7d fc ff          	cmpl   $0xffffffff,-0x4(%rbp)
  8004211b3a:	75 2a                	jne    8004211b66 <_get_next_cu+0x99>
		length = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 8);
  8004211b3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b40:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211b44:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211b48:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211b4c:	48 89 d1             	mov    %rdx,%rcx
  8004211b4f:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211b53:	ba 08 00 00 00       	mov    $0x8,%edx
  8004211b58:	48 89 cf             	mov    %rcx,%rdi
  8004211b5b:	ff d0                	callq  *%rax
  8004211b5d:	89 45 fc             	mov    %eax,-0x4(%rbp)
		dwarf_size = 8;
  8004211b60:	c6 45 fb 08          	movb   $0x8,-0x5(%rbp)
  8004211b64:	eb 04                	jmp    8004211b6a <_get_next_cu+0x9d>
	} else {
		dwarf_size = 4;
  8004211b66:	c6 45 fb 04          	movb   $0x4,-0x5(%rbp)
	}

	cu->cu_dwarf_size = dwarf_size;
  8004211b6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b6e:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211b72:	88 50 19             	mov    %dl,0x19(%rax)
	 if (length > ds->ds_size - offset) {
	 return (DW_DLE_CU_LENGTH_ERROR);
	 }*/

	/* Compute the offset to the next compilation unit: */
	dbg->curr_off_dbginfo = offset + length;
  8004211b75:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211b78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211b7c:	48 01 c2             	add    %rax,%rdx
  8004211b7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b83:	48 89 10             	mov    %rdx,(%rax)
	cu->cu_next_offset   = dbg->curr_off_dbginfo;
  8004211b86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211b8a:	48 8b 10             	mov    (%rax),%rdx
  8004211b8d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b91:	48 89 50 20          	mov    %rdx,0x20(%rax)

	/* Initialise the compilation unit. */
	cu->cu_length = (uint64_t)length;
  8004211b95:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004211b98:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211b9c:	48 89 10             	mov    %rdx,(%rax)

	cu->cu_length_size   = (dwarf_size == 4 ? 4 : 12);
  8004211b9f:	80 7d fb 04          	cmpb   $0x4,-0x5(%rbp)
  8004211ba3:	75 07                	jne    8004211bac <_get_next_cu+0xdf>
  8004211ba5:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211baa:	eb 05                	jmp    8004211bb1 <_get_next_cu+0xe4>
  8004211bac:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004211bb1:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211bb5:	88 42 18             	mov    %al,0x18(%rdx)
	cu->version              = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 2);
  8004211bb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211bbc:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211bc0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211bc4:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211bc8:	48 89 d1             	mov    %rdx,%rcx
  8004211bcb:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211bcf:	ba 02 00 00 00       	mov    $0x2,%edx
  8004211bd4:	48 89 cf             	mov    %rcx,%rdi
  8004211bd7:	ff d0                	callq  *%rax
  8004211bd9:	89 c2                	mov    %eax,%edx
  8004211bdb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211bdf:	66 89 50 08          	mov    %dx,0x8(%rax)
	cu->debug_abbrev_offset  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, dwarf_size);
  8004211be3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211be7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211beb:	0f b6 55 fb          	movzbl -0x5(%rbp),%edx
  8004211bef:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004211bf3:	48 8b 49 08          	mov    0x8(%rcx),%rcx
  8004211bf7:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211bfb:	48 89 cf             	mov    %rcx,%rdi
  8004211bfe:	ff d0                	callq  *%rax
  8004211c00:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211c04:	48 89 42 10          	mov    %rax,0x10(%rdx)
	//cu->cu_abbrev_offset_cur = cu->cu_abbrev_offset;
	cu->addr_size  = dbg->read((uint8_t *)dbg->dbg_info_offset_elf, &offset, 1);
  8004211c08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004211c0c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211c10:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211c14:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  8004211c18:	48 89 d1             	mov    %rdx,%rcx
  8004211c1b:	48 8d 75 f0          	lea    -0x10(%rbp),%rsi
  8004211c1f:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211c24:	48 89 cf             	mov    %rcx,%rdi
  8004211c27:	ff d0                	callq  *%rax
  8004211c29:	89 c2                	mov    %eax,%edx
  8004211c2b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c2f:	88 50 0a             	mov    %dl,0xa(%rax)

	if (cu->version < 2 || cu->version > 4) {
  8004211c32:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c36:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211c3a:	66 83 f8 01          	cmp    $0x1,%ax
  8004211c3e:	76 0e                	jbe    8004211c4e <_get_next_cu+0x181>
  8004211c40:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c44:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004211c48:	66 83 f8 04          	cmp    $0x4,%ax
  8004211c4c:	76 07                	jbe    8004211c55 <_get_next_cu+0x188>
		return -1;
  8004211c4e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004211c53:	eb 11                	jmp    8004211c66 <_get_next_cu+0x199>
	}

	cu->cu_die_offset = offset;
  8004211c55:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004211c59:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004211c5d:	48 89 50 28          	mov    %rdx,0x28(%rax)

	return 0;
  8004211c61:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211c66:	c9                   	leaveq 
  8004211c67:	c3                   	retq   

0000008004211c68 <print_cu>:

void print_cu(Dwarf_CU cu)
{
  8004211c68:	55                   	push   %rbp
  8004211c69:	48 89 e5             	mov    %rsp,%rbp
	cprintf("%ld---%du--%d\n",cu.cu_length,cu.version,cu.addr_size);
  8004211c6c:	0f b6 45 1a          	movzbl 0x1a(%rbp),%eax
  8004211c70:	0f b6 c8             	movzbl %al,%ecx
  8004211c73:	0f b7 45 18          	movzwl 0x18(%rbp),%eax
  8004211c77:	0f b7 d0             	movzwl %ax,%edx
  8004211c7a:	48 8b 45 10          	mov    0x10(%rbp),%rax
  8004211c7e:	48 89 c6             	mov    %rax,%rsi
  8004211c81:	48 bf 12 02 22 04 80 	movabs $0x8004220212,%rdi
  8004211c88:	00 00 00 
  8004211c8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211c90:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004211c97:	00 00 00 
  8004211c9a:	41 ff d0             	callq  *%r8
}
  8004211c9d:	5d                   	pop    %rbp
  8004211c9e:	c3                   	retq   

0000008004211c9f <_dwarf_abbrev_parse>:

//Return 0 on success
int
_dwarf_abbrev_parse(Dwarf_Debug dbg, Dwarf_CU cu, Dwarf_Unsigned *offset,
		    Dwarf_Abbrev *abp, Dwarf_Section *ds)
{
  8004211c9f:	55                   	push   %rbp
  8004211ca0:	48 89 e5             	mov    %rsp,%rbp
  8004211ca3:	48 83 ec 60          	sub    $0x60,%rsp
  8004211ca7:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  8004211cab:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  8004211caf:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
  8004211cb3:	48 89 4d a0          	mov    %rcx,-0x60(%rbp)
	uint64_t tag;
	uint8_t children;
	uint64_t abbr_addr;
	int ret;

	assert(abp != NULL);
  8004211cb7:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
  8004211cbc:	75 35                	jne    8004211cf3 <_dwarf_abbrev_parse+0x54>
  8004211cbe:	48 b9 21 02 22 04 80 	movabs $0x8004220221,%rcx
  8004211cc5:	00 00 00 
  8004211cc8:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004211ccf:	00 00 00 
  8004211cd2:	be a4 01 00 00       	mov    $0x1a4,%esi
  8004211cd7:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004211cde:	00 00 00 
  8004211ce1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211ce6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211ced:	00 00 00 
  8004211cf0:	41 ff d0             	callq  *%r8
	assert(ds != NULL);
  8004211cf3:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
  8004211cf8:	75 35                	jne    8004211d2f <_dwarf_abbrev_parse+0x90>
  8004211cfa:	48 b9 2d 02 22 04 80 	movabs $0x800422022d,%rcx
  8004211d01:	00 00 00 
  8004211d04:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004211d0b:	00 00 00 
  8004211d0e:	be a5 01 00 00       	mov    $0x1a5,%esi
  8004211d13:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004211d1a:	00 00 00 
  8004211d1d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d22:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211d29:	00 00 00 
  8004211d2c:	41 ff d0             	callq  *%r8

	if (*offset >= ds->ds_size)
  8004211d2f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211d33:	48 8b 10             	mov    (%rax),%rdx
  8004211d36:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211d3a:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211d3e:	48 39 c2             	cmp    %rax,%rdx
  8004211d41:	72 0a                	jb     8004211d4d <_dwarf_abbrev_parse+0xae>
        	return (DW_DLE_NO_ENTRY);
  8004211d43:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211d48:	e9 d3 01 00 00       	jmpq   8004211f20 <_dwarf_abbrev_parse+0x281>

	aboff = *offset;
  8004211d4d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211d51:	48 8b 00             	mov    (%rax),%rax
  8004211d54:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	abbr_addr = (uint64_t)ds->ds_data; //(uint64_t)((uint8_t *)elf_base_ptr + ds->sh_offset);
  8004211d58:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004211d5c:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004211d60:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	entry = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211d64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211d68:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211d6c:	48 89 d6             	mov    %rdx,%rsi
  8004211d6f:	48 89 c7             	mov    %rax,%rdi
  8004211d72:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004211d79:	00 00 00 
  8004211d7c:	ff d0                	callq  *%rax
  8004211d7e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	if (entry == 0) {
  8004211d82:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004211d87:	75 15                	jne    8004211d9e <_dwarf_abbrev_parse+0xff>
		/* Last entry. */
		//Need to make connection from below function
		abp->ab_entry = 0;
  8004211d89:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211d8d:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		return DW_DLE_NONE;
  8004211d94:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211d99:	e9 82 01 00 00       	jmpq   8004211f20 <_dwarf_abbrev_parse+0x281>
	}

	tag = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211d9e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211da2:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211da6:	48 89 d6             	mov    %rdx,%rsi
  8004211da9:	48 89 c7             	mov    %rax,%rdi
  8004211dac:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004211db3:	00 00 00 
  8004211db6:	ff d0                	callq  *%rax
  8004211db8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	children = dbg->read((uint8_t *)abbr_addr, offset, 1);
  8004211dbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004211dc0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004211dc4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  8004211dc8:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004211dcc:	ba 01 00 00 00       	mov    $0x1,%edx
  8004211dd1:	48 89 cf             	mov    %rcx,%rdi
  8004211dd4:	ff d0                	callq  *%rax
  8004211dd6:	88 45 df             	mov    %al,-0x21(%rbp)

	abp->ab_entry    = entry;
  8004211dd9:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211ddd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004211de1:	48 89 10             	mov    %rdx,(%rax)
	abp->ab_tag      = tag;
  8004211de4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211de8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004211dec:	48 89 50 08          	mov    %rdx,0x8(%rax)
	abp->ab_children = children;
  8004211df0:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211df4:	0f b6 55 df          	movzbl -0x21(%rbp),%edx
  8004211df8:	88 50 10             	mov    %dl,0x10(%rax)
	abp->ab_offset   = aboff;
  8004211dfb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211dff:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004211e03:	48 89 50 18          	mov    %rdx,0x18(%rax)
	abp->ab_length   = 0;    /* fill in later. */
  8004211e07:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e0b:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
  8004211e12:	00 
	abp->ab_atnum    = 0;
  8004211e13:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e17:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
  8004211e1e:	00 

	/* Parse attribute definitions. */
	do {
		adoff = *offset;
  8004211e1f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211e23:	48 8b 00             	mov    (%rax),%rax
  8004211e26:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		attr = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211e2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211e2e:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211e32:	48 89 d6             	mov    %rdx,%rsi
  8004211e35:	48 89 c7             	mov    %rax,%rdi
  8004211e38:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004211e3f:	00 00 00 
  8004211e42:	ff d0                	callq  *%rax
  8004211e44:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		form = _dwarf_read_uleb128((uint8_t *)abbr_addr, offset);
  8004211e48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004211e4c:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  8004211e50:	48 89 d6             	mov    %rdx,%rsi
  8004211e53:	48 89 c7             	mov    %rax,%rdi
  8004211e56:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004211e5d:	00 00 00 
  8004211e60:	ff d0                	callq  *%rax
  8004211e62:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		if (attr != 0)
  8004211e66:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211e6b:	0f 84 89 00 00 00    	je     8004211efa <_dwarf_abbrev_parse+0x25b>
		{
			/* Initialise the attribute definition structure. */
			abp->ab_attrdef[abp->ab_atnum].ad_attrib = attr;
  8004211e71:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e75:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211e79:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211e7d:	48 89 d0             	mov    %rdx,%rax
  8004211e80:	48 01 c0             	add    %rax,%rax
  8004211e83:	48 01 d0             	add    %rdx,%rax
  8004211e86:	48 c1 e0 03          	shl    $0x3,%rax
  8004211e8a:	48 01 c8             	add    %rcx,%rax
  8004211e8d:	48 8d 50 30          	lea    0x30(%rax),%rdx
  8004211e91:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004211e95:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_form   = form;
  8004211e98:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211e9c:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211ea0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211ea4:	48 89 d0             	mov    %rdx,%rax
  8004211ea7:	48 01 c0             	add    %rax,%rax
  8004211eaa:	48 01 d0             	add    %rdx,%rax
  8004211ead:	48 c1 e0 03          	shl    $0x3,%rax
  8004211eb1:	48 01 c8             	add    %rcx,%rax
  8004211eb4:	48 8d 50 38          	lea    0x38(%rax),%rdx
  8004211eb8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004211ebc:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_attrdef[abp->ab_atnum].ad_offset = adoff;
  8004211ebf:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211ec3:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004211ec7:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  8004211ecb:	48 89 d0             	mov    %rdx,%rax
  8004211ece:	48 01 c0             	add    %rax,%rax
  8004211ed1:	48 01 d0             	add    %rdx,%rax
  8004211ed4:	48 c1 e0 03          	shl    $0x3,%rax
  8004211ed8:	48 01 c8             	add    %rcx,%rax
  8004211edb:	48 8d 50 40          	lea    0x40(%rax),%rdx
  8004211edf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004211ee3:	48 89 02             	mov    %rax,(%rdx)
			abp->ab_atnum++;
  8004211ee6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211eea:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004211eee:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004211ef2:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211ef6:	48 89 50 28          	mov    %rdx,0x28(%rax)
		}
	} while (attr != 0);
  8004211efa:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004211eff:	0f 85 1a ff ff ff    	jne    8004211e1f <_dwarf_abbrev_parse+0x180>

	//(*abp)->ab_length = *offset - aboff;
	abp->ab_length = (uint64_t)(*offset - aboff);
  8004211f05:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004211f09:	48 8b 00             	mov    (%rax),%rax
  8004211f0c:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
  8004211f10:	48 89 c2             	mov    %rax,%rdx
  8004211f13:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004211f17:	48 89 50 20          	mov    %rdx,0x20(%rax)

	return DW_DLV_OK;
  8004211f1b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004211f20:	c9                   	leaveq 
  8004211f21:	c3                   	retq   

0000008004211f22 <_dwarf_abbrev_find>:

//Return 0 on success
int
_dwarf_abbrev_find(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t entry, Dwarf_Abbrev *abp)
{
  8004211f22:	55                   	push   %rbp
  8004211f23:	48 89 e5             	mov    %rsp,%rbp
  8004211f26:	48 83 ec 70          	sub    $0x70,%rsp
  8004211f2a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004211f2e:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004211f32:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
	Dwarf_Section *ds;
	uint64_t offset;
	int ret;

	if (entry == 0)
  8004211f36:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004211f3b:	75 0a                	jne    8004211f47 <_dwarf_abbrev_find+0x25>
	{
		return (DW_DLE_NO_ENTRY);
  8004211f3d:	b8 04 00 00 00       	mov    $0x4,%eax
  8004211f42:	e9 0a 01 00 00       	jmpq   8004212051 <_dwarf_abbrev_find+0x12f>
	}

	/* Load and search the abbrev table. */
	ds = _dwarf_find_section(".debug_abbrev");
  8004211f47:	48 bf 38 02 22 04 80 	movabs $0x8004220238,%rdi
  8004211f4e:	00 00 00 
  8004211f51:	48 b8 82 62 21 04 80 	movabs $0x8004216282,%rax
  8004211f58:	00 00 00 
  8004211f5b:	ff d0                	callq  *%rax
  8004211f5d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	assert(ds != NULL);
  8004211f61:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004211f66:	75 35                	jne    8004211f9d <_dwarf_abbrev_find+0x7b>
  8004211f68:	48 b9 2d 02 22 04 80 	movabs $0x800422022d,%rcx
  8004211f6f:	00 00 00 
  8004211f72:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004211f79:	00 00 00 
  8004211f7c:	be e5 01 00 00       	mov    $0x1e5,%esi
  8004211f81:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004211f88:	00 00 00 
  8004211f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004211f90:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004211f97:	00 00 00 
  8004211f9a:	41 ff d0             	callq  *%r8

	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
  8004211f9d:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004211fa1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	while (offset < ds->ds_size) {
  8004211fa5:	e9 8d 00 00 00       	jmpq   8004212037 <_dwarf_abbrev_find+0x115>
		ret = _dwarf_abbrev_parse(dbg, cu, &offset, abp, ds);
  8004211faa:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004211fae:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004211fb2:	48 8d 75 e8          	lea    -0x18(%rbp),%rsi
  8004211fb6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004211fba:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004211fbe:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004211fc2:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
  8004211fc6:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004211fcb:	48 8b 7d 20          	mov    0x20(%rbp),%rdi
  8004211fcf:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004211fd4:	48 8b 7d 28          	mov    0x28(%rbp),%rdi
  8004211fd8:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004211fdd:	48 8b 7d 30          	mov    0x30(%rbp),%rdi
  8004211fe1:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004211fe6:	48 8b 7d 38          	mov    0x38(%rbp),%rdi
  8004211fea:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004211fef:	48 8b 7d 40          	mov    0x40(%rbp),%rdi
  8004211ff3:	48 89 7c 24 30       	mov    %rdi,0x30(%rsp)
  8004211ff8:	48 89 c7             	mov    %rax,%rdi
  8004211ffb:	48 b8 9f 1c 21 04 80 	movabs $0x8004211c9f,%rax
  8004212002:	00 00 00 
  8004212005:	ff d0                	callq  *%rax
  8004212007:	89 45 f4             	mov    %eax,-0xc(%rbp)
		if (ret != DW_DLE_NONE)
  800421200a:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  800421200e:	74 05                	je     8004212015 <_dwarf_abbrev_find+0xf3>
			return (ret);
  8004212010:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212013:	eb 3c                	jmp    8004212051 <_dwarf_abbrev_find+0x12f>
		if (abp->ab_entry == entry) {
  8004212015:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004212019:	48 8b 00             	mov    (%rax),%rax
  800421201c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004212020:	75 07                	jne    8004212029 <_dwarf_abbrev_find+0x107>
			//cu->cu_abbrev_offset_cur = offset;
			return DW_DLE_NONE;
  8004212022:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212027:	eb 28                	jmp    8004212051 <_dwarf_abbrev_find+0x12f>
		}
		if (abp->ab_entry == 0) {
  8004212029:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421202d:	48 8b 00             	mov    (%rax),%rax
  8004212030:	48 85 c0             	test   %rax,%rax
  8004212033:	75 02                	jne    8004212037 <_dwarf_abbrev_find+0x115>
			//cu->cu_abbrev_offset_cur = offset;
			//cu->cu_abbrev_loaded = 1;
			break;
  8004212035:	eb 15                	jmp    800421204c <_dwarf_abbrev_find+0x12a>
	//TODO: We are starting offset from 0, however libdwarf logic
	//      is keeping a counter for current offset. Ok. let use
	//      that. I relent, but this will be done in Phase 2. :)
	//offset = 0; //cu->cu_abbrev_offset_cur;
	offset = cu.debug_abbrev_offset; //cu->cu_abbrev_offset_cur;
	while (offset < ds->ds_size) {
  8004212037:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421203b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421203f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212043:	48 39 c2             	cmp    %rax,%rdx
  8004212046:	0f 87 5e ff ff ff    	ja     8004211faa <_dwarf_abbrev_find+0x88>
			//cu->cu_abbrev_loaded = 1;
			break;
		}
	}

	return DW_DLE_NO_ENTRY;
  800421204c:	b8 04 00 00 00       	mov    $0x4,%eax
}
  8004212051:	c9                   	leaveq 
  8004212052:	c3                   	retq   

0000008004212053 <_dwarf_attr_init>:

//Return 0 on success
int
_dwarf_attr_init(Dwarf_Debug dbg, uint64_t *offsetp, Dwarf_CU *cu, Dwarf_Die *ret_die, Dwarf_AttrDef *ad,
		 uint64_t form, int indirect)
{
  8004212053:	55                   	push   %rbp
  8004212054:	48 89 e5             	mov    %rsp,%rbp
  8004212057:	48 81 ec d0 00 00 00 	sub    $0xd0,%rsp
  800421205e:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004212065:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  800421206c:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004212073:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
  800421207a:	4c 89 85 48 ff ff ff 	mov    %r8,-0xb8(%rbp)
  8004212081:	4c 89 8d 40 ff ff ff 	mov    %r9,-0xc0(%rbp)
	struct _Dwarf_Attribute atref;
	Dwarf_Section *str;
	int ret;
	Dwarf_Section *ds = _dwarf_find_section(".debug_info");
  8004212088:	48 bf 46 02 22 04 80 	movabs $0x8004220246,%rdi
  800421208f:	00 00 00 
  8004212092:	48 b8 82 62 21 04 80 	movabs $0x8004216282,%rax
  8004212099:	00 00 00 
  800421209c:	ff d0                	callq  *%rax
  800421209e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	uint8_t *ds_data = (uint8_t *)ds->ds_data; //(uint8_t *)dbg->dbg_info_offset_elf;
  80042120a2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042120a6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042120aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint8_t dwarf_size = cu->cu_dwarf_size;
  80042120ae:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042120b5:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  80042120b9:	88 45 e7             	mov    %al,-0x19(%rbp)

	ret = DW_DLE_NONE;
  80042120bc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
	memset(&atref, 0, sizeof(atref));
  80042120c3:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042120ca:	ba 60 00 00 00       	mov    $0x60,%edx
  80042120cf:	be 00 00 00 00       	mov    $0x0,%esi
  80042120d4:	48 89 c7             	mov    %rax,%rdi
  80042120d7:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042120de:	00 00 00 
  80042120e1:	ff d0                	callq  *%rax
	atref.at_die = ret_die;
  80042120e3:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  80042120ea:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	atref.at_attrib = ad->ad_attrib;
  80042120f1:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  80042120f8:	48 8b 00             	mov    (%rax),%rax
  80042120fb:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	atref.at_form = ad->ad_form;
  80042120ff:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004212106:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421210a:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	atref.at_indirect = indirect;
  800421210e:	8b 45 10             	mov    0x10(%rbp),%eax
  8004212111:	89 45 90             	mov    %eax,-0x70(%rbp)
	atref.at_ld = NULL;
  8004212114:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800421211b:	00 

	switch (form) {
  800421211c:	48 83 bd 40 ff ff ff 	cmpq   $0x20,-0xc0(%rbp)
  8004212123:	20 
  8004212124:	0f 87 82 04 00 00    	ja     80042125ac <_dwarf_attr_init+0x559>
  800421212a:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004212131:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004212138:	00 
  8004212139:	48 b8 70 02 22 04 80 	movabs $0x8004220270,%rax
  8004212140:	00 00 00 
  8004212143:	48 01 d0             	add    %rdx,%rax
  8004212146:	48 8b 00             	mov    (%rax),%rax
  8004212149:	ff e0                	jmpq   *%rax
	case DW_FORM_addr:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  800421214b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212152:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212156:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  800421215d:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  8004212161:	0f b6 d2             	movzbl %dl,%edx
  8004212164:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421216b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421216f:	48 89 cf             	mov    %rcx,%rdi
  8004212172:	ff d0                	callq  *%rax
  8004212174:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212178:	e9 37 04 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_block:
	case DW_FORM_exprloc:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  800421217d:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212184:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212188:	48 89 d6             	mov    %rdx,%rsi
  800421218b:	48 89 c7             	mov    %rax,%rdi
  800421218e:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004212195:	00 00 00 
  8004212198:	ff d0                	callq  *%rax
  800421219a:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421219e:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042121a2:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042121a9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121ad:	48 89 ce             	mov    %rcx,%rsi
  80042121b0:	48 89 c7             	mov    %rax,%rdi
  80042121b3:	48 b8 ca 18 21 04 80 	movabs $0x80042118ca,%rax
  80042121ba:	00 00 00 
  80042121bd:	ff d0                	callq  *%rax
  80042121bf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042121c3:	e9 ec 03 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_block1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042121c8:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042121cf:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042121d3:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042121da:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042121de:	ba 01 00 00 00       	mov    $0x1,%edx
  80042121e3:	48 89 cf             	mov    %rcx,%rdi
  80042121e6:	ff d0                	callq  *%rax
  80042121e8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  80042121ec:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042121f0:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  80042121f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042121fb:	48 89 ce             	mov    %rcx,%rsi
  80042121fe:	48 89 c7             	mov    %rax,%rdi
  8004212201:	48 b8 ca 18 21 04 80 	movabs $0x80042118ca,%rax
  8004212208:	00 00 00 
  800421220b:	ff d0                	callq  *%rax
  800421220d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212211:	e9 9e 03 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_block2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  8004212216:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421221d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212221:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212228:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421222c:	ba 02 00 00 00       	mov    $0x2,%edx
  8004212231:	48 89 cf             	mov    %rcx,%rdi
  8004212234:	ff d0                	callq  *%rax
  8004212236:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  800421223a:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421223e:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212245:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212249:	48 89 ce             	mov    %rcx,%rsi
  800421224c:	48 89 c7             	mov    %rax,%rdi
  800421224f:	48 b8 ca 18 21 04 80 	movabs $0x80042118ca,%rax
  8004212256:	00 00 00 
  8004212259:	ff d0                	callq  *%rax
  800421225b:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  800421225f:	e9 50 03 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_block4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212264:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421226b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421226f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212276:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421227a:	ba 04 00 00 00       	mov    $0x4,%edx
  800421227f:	48 89 cf             	mov    %rcx,%rdi
  8004212282:	ff d0                	callq  *%rax
  8004212284:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		atref.u[1].u8p = (uint8_t*)_dwarf_read_block(ds_data, offsetp, atref.u[0].u64);
  8004212288:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421228c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212293:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212297:	48 89 ce             	mov    %rcx,%rsi
  800421229a:	48 89 c7             	mov    %rax,%rdi
  800421229d:	48 b8 ca 18 21 04 80 	movabs $0x80042118ca,%rax
  80042122a4:	00 00 00 
  80042122a7:	ff d0                	callq  *%rax
  80042122a9:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042122ad:	e9 02 03 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_data1:
	case DW_FORM_flag:
	case DW_FORM_ref1:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 1);
  80042122b2:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042122b9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042122bd:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042122c4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042122c8:	ba 01 00 00 00       	mov    $0x1,%edx
  80042122cd:	48 89 cf             	mov    %rcx,%rdi
  80042122d0:	ff d0                	callq  *%rax
  80042122d2:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042122d6:	e9 d9 02 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_data2:
	case DW_FORM_ref2:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 2);
  80042122db:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042122e2:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042122e6:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042122ed:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042122f1:	ba 02 00 00 00       	mov    $0x2,%edx
  80042122f6:	48 89 cf             	mov    %rcx,%rdi
  80042122f9:	ff d0                	callq  *%rax
  80042122fb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042122ff:	e9 b0 02 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_data4:
	case DW_FORM_ref4:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 4);
  8004212304:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421230b:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421230f:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  8004212316:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  800421231a:	ba 04 00 00 00       	mov    $0x4,%edx
  800421231f:	48 89 cf             	mov    %rcx,%rdi
  8004212322:	ff d0                	callq  *%rax
  8004212324:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212328:	e9 87 02 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_data8:
	case DW_FORM_ref8:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, 8);
  800421232d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212334:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212338:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421233f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212343:	ba 08 00 00 00       	mov    $0x8,%edx
  8004212348:	48 89 cf             	mov    %rcx,%rdi
  800421234b:	ff d0                	callq  *%rax
  800421234d:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212351:	e9 5e 02 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_indirect:
		form = _dwarf_read_uleb128(ds_data, offsetp);
  8004212356:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421235d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212361:	48 89 d6             	mov    %rdx,%rsi
  8004212364:	48 89 c7             	mov    %rax,%rdi
  8004212367:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  800421236e:	00 00 00 
  8004212371:	ff d0                	callq  *%rax
  8004212373:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
		return (_dwarf_attr_init(dbg, offsetp, cu, ret_die, ad, form, 1));
  800421237a:	4c 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%r8
  8004212381:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
  8004212388:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  800421238f:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  8004212396:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421239d:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042123a4:	c7 04 24 01 00 00 00 	movl   $0x1,(%rsp)
  80042123ab:	4d 89 c1             	mov    %r8,%r9
  80042123ae:	49 89 f8             	mov    %rdi,%r8
  80042123b1:	48 89 c7             	mov    %rax,%rdi
  80042123b4:	48 b8 53 20 21 04 80 	movabs $0x8004212053,%rax
  80042123bb:	00 00 00 
  80042123be:	ff d0                	callq  *%rax
  80042123c0:	e9 1d 03 00 00       	jmpq   80042126e2 <_dwarf_attr_init+0x68f>
	case DW_FORM_ref_addr:
		if (cu->version == 2)
  80042123c5:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  80042123cc:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042123d0:	66 83 f8 02          	cmp    $0x2,%ax
  80042123d4:	75 2f                	jne    8004212405 <_dwarf_attr_init+0x3b2>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, cu->addr_size);
  80042123d6:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042123dd:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042123e1:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  80042123e8:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042123ec:	0f b6 d2             	movzbl %dl,%edx
  80042123ef:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042123f6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042123fa:	48 89 cf             	mov    %rcx,%rdi
  80042123fd:	ff d0                	callq  *%rax
  80042123ff:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004212403:	eb 39                	jmp    800421243e <_dwarf_attr_init+0x3eb>
		else if (cu->version == 3)
  8004212405:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
  800421240c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004212410:	66 83 f8 03          	cmp    $0x3,%ax
  8004212414:	75 28                	jne    800421243e <_dwarf_attr_init+0x3eb>
			atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  8004212416:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421241d:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212421:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  8004212425:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  800421242c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212430:	48 89 cf             	mov    %rcx,%rdi
  8004212433:	ff d0                	callq  *%rax
  8004212435:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212439:	e9 76 01 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
  800421243e:	e9 71 01 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_udata:
	case DW_FORM_udata:
		atref.u[0].u64 = _dwarf_read_uleb128(ds_data, offsetp);
  8004212443:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421244a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421244e:	48 89 d6             	mov    %rdx,%rsi
  8004212451:	48 89 c7             	mov    %rax,%rdi
  8004212454:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  800421245b:	00 00 00 
  800421245e:	ff d0                	callq  *%rax
  8004212460:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  8004212464:	e9 4b 01 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_sdata:
		atref.u[0].s64 = _dwarf_read_sleb128(ds_data, offsetp);
  8004212469:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  8004212470:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212474:	48 89 d6             	mov    %rdx,%rsi
  8004212477:	48 89 c7             	mov    %rax,%rdi
  800421247a:	48 b8 19 16 21 04 80 	movabs $0x8004211619,%rax
  8004212481:	00 00 00 
  8004212484:	ff d0                	callq  *%rax
  8004212486:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  800421248a:	e9 25 01 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_sec_offset:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  800421248f:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004212496:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421249a:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  800421249e:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042124a5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042124a9:	48 89 cf             	mov    %rcx,%rdi
  80042124ac:	ff d0                	callq  *%rax
  80042124ae:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042124b2:	e9 fd 00 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_string:
		atref.u[0].s =(char*) _dwarf_read_string(ds_data, (uint64_t)ds->ds_size, offsetp);
  80042124b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042124bb:	48 8b 48 18          	mov    0x18(%rax),%rcx
  80042124bf:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042124c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042124ca:	48 89 ce             	mov    %rcx,%rsi
  80042124cd:	48 89 c7             	mov    %rax,%rdi
  80042124d0:	48 b8 3b 18 21 04 80 	movabs $0x800421183b,%rax
  80042124d7:	00 00 00 
  80042124da:	ff d0                	callq  *%rax
  80042124dc:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		break;
  80042124e0:	e9 cf 00 00 00       	jmpq   80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_strp:
		atref.u[0].u64 = dbg->read(ds_data, offsetp, dwarf_size);
  80042124e5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042124ec:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042124f0:	0f b6 55 e7          	movzbl -0x19(%rbp),%edx
  80042124f4:	48 8b b5 60 ff ff ff 	mov    -0xa0(%rbp),%rsi
  80042124fb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042124ff:	48 89 cf             	mov    %rcx,%rdi
  8004212502:	ff d0                	callq  *%rax
  8004212504:	48 89 45 98          	mov    %rax,-0x68(%rbp)
		str = _dwarf_find_section(".debug_str");
  8004212508:	48 bf 52 02 22 04 80 	movabs $0x8004220252,%rdi
  800421250f:	00 00 00 
  8004212512:	48 b8 82 62 21 04 80 	movabs $0x8004216282,%rax
  8004212519:	00 00 00 
  800421251c:	ff d0                	callq  *%rax
  800421251e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		assert(str != NULL);
  8004212522:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212527:	75 35                	jne    800421255e <_dwarf_attr_init+0x50b>
  8004212529:	48 b9 5d 02 22 04 80 	movabs $0x800422025d,%rcx
  8004212530:	00 00 00 
  8004212533:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  800421253a:	00 00 00 
  800421253d:	be 51 02 00 00       	mov    $0x251,%esi
  8004212542:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212549:	00 00 00 
  800421254c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212551:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212558:	00 00 00 
  800421255b:	41 ff d0             	callq  *%r8
		//atref.u[1].s = (char *)(elf_base_ptr + str->sh_offset) + atref.u[0].u64;
		atref.u[1].s = (char *)str->ds_data + atref.u[0].u64;
  800421255e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212562:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212566:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421256a:	48 01 d0             	add    %rdx,%rax
  800421256d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  8004212571:	eb 41                	jmp    80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_ref_sig8:
		atref.u[0].u64 = 8;
  8004212573:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
  800421257a:	00 
		atref.u[1].u8p = (uint8_t*)(_dwarf_read_block(ds_data, offsetp, atref.u[0].u64));
  800421257b:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421257f:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
  8004212586:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421258a:	48 89 ce             	mov    %rcx,%rsi
  800421258d:	48 89 c7             	mov    %rax,%rdi
  8004212590:	48 b8 ca 18 21 04 80 	movabs $0x80042118ca,%rax
  8004212597:	00 00 00 
  800421259a:	ff d0                	callq  *%rax
  800421259c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		break;
  80042125a0:	eb 12                	jmp    80042125b4 <_dwarf_attr_init+0x561>
	case DW_FORM_flag_present:
		/* This form has no value encoded in the DIE. */
		atref.u[0].u64 = 1;
  80042125a2:	48 c7 45 98 01 00 00 	movq   $0x1,-0x68(%rbp)
  80042125a9:	00 
		break;
  80042125aa:	eb 08                	jmp    80042125b4 <_dwarf_attr_init+0x561>
	default:
		//DWARF_SET_ERROR(dbg, error, DW_DLE_ATTR_FORM_BAD);
		ret = DW_DLE_ATTR_FORM_BAD;
  80042125ac:	c7 45 fc 0e 00 00 00 	movl   $0xe,-0x4(%rbp)
		break;
  80042125b3:	90                   	nop
	}

	if (ret == DW_DLE_NONE) {
  80042125b4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042125b8:	0f 85 21 01 00 00    	jne    80042126df <_dwarf_attr_init+0x68c>
		if (form == DW_FORM_block || form == DW_FORM_block1 ||
  80042125be:	48 83 bd 40 ff ff ff 	cmpq   $0x9,-0xc0(%rbp)
  80042125c5:	09 
  80042125c6:	74 1e                	je     80042125e6 <_dwarf_attr_init+0x593>
  80042125c8:	48 83 bd 40 ff ff ff 	cmpq   $0xa,-0xc0(%rbp)
  80042125cf:	0a 
  80042125d0:	74 14                	je     80042125e6 <_dwarf_attr_init+0x593>
  80042125d2:	48 83 bd 40 ff ff ff 	cmpq   $0x3,-0xc0(%rbp)
  80042125d9:	03 
  80042125da:	74 0a                	je     80042125e6 <_dwarf_attr_init+0x593>
		    form == DW_FORM_block2 || form == DW_FORM_block4) {
  80042125dc:	48 83 bd 40 ff ff ff 	cmpq   $0x4,-0xc0(%rbp)
  80042125e3:	04 
  80042125e4:	75 10                	jne    80042125f6 <_dwarf_attr_init+0x5a3>
			atref.at_block.bl_len = atref.u[0].u64;
  80042125e6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042125ea:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			atref.at_block.bl_data = atref.u[1].u8p;
  80042125ee:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042125f2:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
  80042125f6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042125fa:	48 83 f8 03          	cmp    $0x3,%rax
  80042125fe:	75 39                	jne    8004212639 <_dwarf_attr_init+0x5e6>
			switch (atref.at_form) {
  8004212600:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004212604:	48 83 f8 08          	cmp    $0x8,%rax
  8004212608:	74 1c                	je     8004212626 <_dwarf_attr_init+0x5d3>
  800421260a:	48 83 f8 0e          	cmp    $0xe,%rax
  800421260e:	74 02                	je     8004212612 <_dwarf_attr_init+0x5bf>
				break;
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
				break;
			default:
				break;
  8004212610:	eb 27                	jmp    8004212639 <_dwarf_attr_init+0x5e6>
		}
		//ret = _dwarf_attr_add(die, &atref, NULL, error);
		if (atref.at_attrib == DW_AT_name) {
			switch (atref.at_form) {
			case DW_FORM_strp:
				ret_die->die_name = atref.u[1].s;
  8004212612:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004212616:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  800421261d:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212624:	eb 13                	jmp    8004212639 <_dwarf_attr_init+0x5e6>
			case DW_FORM_string:
				ret_die->die_name = atref.u[0].s;
  8004212626:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  800421262a:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212631:	48 89 90 50 03 00 00 	mov    %rdx,0x350(%rax)
				break;
  8004212638:	90                   	nop
			default:
				break;
			}
		}
		ret_die->die_attr[ret_die->die_attr_count++] = atref;
  8004212639:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  8004212640:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212647:	8d 48 01             	lea    0x1(%rax),%ecx
  800421264a:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  8004212651:	88 8a 58 03 00 00    	mov    %cl,0x358(%rdx)
  8004212657:	0f b6 c0             	movzbl %al,%eax
  800421265a:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
  8004212661:	48 63 d0             	movslq %eax,%rdx
  8004212664:	48 89 d0             	mov    %rdx,%rax
  8004212667:	48 01 c0             	add    %rax,%rax
  800421266a:	48 01 d0             	add    %rdx,%rax
  800421266d:	48 c1 e0 05          	shl    $0x5,%rax
  8004212671:	48 01 c8             	add    %rcx,%rax
  8004212674:	48 05 70 03 00 00    	add    $0x370,%rax
  800421267a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004212681:	48 89 10             	mov    %rdx,(%rax)
  8004212684:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  800421268b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421268f:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004212693:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004212697:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421269b:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421269f:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042126a3:	48 89 50 20          	mov    %rdx,0x20(%rax)
  80042126a7:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  80042126ab:	48 89 50 28          	mov    %rdx,0x28(%rax)
  80042126af:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  80042126b3:	48 89 50 30          	mov    %rdx,0x30(%rax)
  80042126b7:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  80042126bb:	48 89 50 38          	mov    %rdx,0x38(%rax)
  80042126bf:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042126c3:	48 89 50 40          	mov    %rdx,0x40(%rax)
  80042126c7:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  80042126cb:	48 89 50 48          	mov    %rdx,0x48(%rax)
  80042126cf:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042126d3:	48 89 50 50          	mov    %rdx,0x50(%rax)
  80042126d7:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042126db:	48 89 50 58          	mov    %rdx,0x58(%rax)
	}

	return (ret);
  80042126df:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  80042126e2:	c9                   	leaveq 
  80042126e3:	c3                   	retq   

00000080042126e4 <dwarf_search_die_within_cu>:

int
dwarf_search_die_within_cu(Dwarf_Debug dbg, Dwarf_CU cu, uint64_t offset, Dwarf_Die *ret_die, int search_sibling)
{
  80042126e4:	55                   	push   %rbp
  80042126e5:	48 89 e5             	mov    %rsp,%rbp
  80042126e8:	48 81 ec d0 03 00 00 	sub    $0x3d0,%rsp
  80042126ef:	48 89 bd 88 fc ff ff 	mov    %rdi,-0x378(%rbp)
  80042126f6:	48 89 b5 80 fc ff ff 	mov    %rsi,-0x380(%rbp)
  80042126fd:	48 89 95 78 fc ff ff 	mov    %rdx,-0x388(%rbp)
  8004212704:	89 8d 74 fc ff ff    	mov    %ecx,-0x38c(%rbp)
	uint64_t abnum;
	uint64_t die_offset;
	int ret, level;
	int i;

	assert(dbg);
  800421270a:	48 83 bd 88 fc ff ff 	cmpq   $0x0,-0x378(%rbp)
  8004212711:	00 
  8004212712:	75 35                	jne    8004212749 <dwarf_search_die_within_cu+0x65>
  8004212714:	48 b9 78 03 22 04 80 	movabs $0x8004220378,%rcx
  800421271b:	00 00 00 
  800421271e:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212725:	00 00 00 
  8004212728:	be 86 02 00 00       	mov    $0x286,%esi
  800421272d:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212734:	00 00 00 
  8004212737:	b8 00 00 00 00       	mov    $0x0,%eax
  800421273c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212743:	00 00 00 
  8004212746:	41 ff d0             	callq  *%r8
	//assert(cu);
	assert(ret_die);
  8004212749:	48 83 bd 78 fc ff ff 	cmpq   $0x0,-0x388(%rbp)
  8004212750:	00 
  8004212751:	75 35                	jne    8004212788 <dwarf_search_die_within_cu+0xa4>
  8004212753:	48 b9 7c 03 22 04 80 	movabs $0x800422037c,%rcx
  800421275a:	00 00 00 
  800421275d:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212764:	00 00 00 
  8004212767:	be 88 02 00 00       	mov    $0x288,%esi
  800421276c:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212773:	00 00 00 
  8004212776:	b8 00 00 00 00       	mov    $0x0,%eax
  800421277b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212782:	00 00 00 
  8004212785:	41 ff d0             	callq  *%r8

	level = 1;
  8004212788:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  800421278f:	e9 17 02 00 00       	jmpq   80042129ab <dwarf_search_die_within_cu+0x2c7>

		die_offset = offset;
  8004212794:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  800421279b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

		abnum = _dwarf_read_uleb128((uint8_t *)dbg->dbg_info_offset_elf, &offset);
  800421279f:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042127a6:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042127aa:	48 8d 95 80 fc ff ff 	lea    -0x380(%rbp),%rdx
  80042127b1:	48 89 d6             	mov    %rdx,%rsi
  80042127b4:	48 89 c7             	mov    %rax,%rdi
  80042127b7:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  80042127be:	00 00 00 
  80042127c1:	ff d0                	callq  *%rax
  80042127c3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

		if (abnum == 0) {
  80042127c7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042127cc:	75 22                	jne    80042127f0 <dwarf_search_die_within_cu+0x10c>
			if (level == 0 || !search_sibling) {
  80042127ce:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042127d2:	74 09                	je     80042127dd <dwarf_search_die_within_cu+0xf9>
  80042127d4:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  80042127db:	75 0a                	jne    80042127e7 <dwarf_search_die_within_cu+0x103>
				//No more entry
				return (DW_DLE_NO_ENTRY);
  80042127dd:	b8 04 00 00 00       	mov    $0x4,%eax
  80042127e2:	e9 f4 01 00 00       	jmpq   80042129db <dwarf_search_die_within_cu+0x2f7>
			}
			/*
			 * Return to previous DIE level.
			 */
			level--;
  80042127e7:	83 6d fc 01          	subl   $0x1,-0x4(%rbp)
			continue;
  80042127eb:	e9 bb 01 00 00       	jmpq   80042129ab <dwarf_search_die_within_cu+0x2c7>
		}

		if ((ret = _dwarf_abbrev_find(dbg, cu, abnum, &ab)) != DW_DLE_NONE)
  80042127f0:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  80042127f7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  80042127fb:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212802:	48 8b 75 10          	mov    0x10(%rbp),%rsi
  8004212806:	48 89 34 24          	mov    %rsi,(%rsp)
  800421280a:	48 8b 75 18          	mov    0x18(%rbp),%rsi
  800421280e:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
  8004212813:	48 8b 75 20          	mov    0x20(%rbp),%rsi
  8004212817:	48 89 74 24 10       	mov    %rsi,0x10(%rsp)
  800421281c:	48 8b 75 28          	mov    0x28(%rbp),%rsi
  8004212820:	48 89 74 24 18       	mov    %rsi,0x18(%rsp)
  8004212825:	48 8b 75 30          	mov    0x30(%rbp),%rsi
  8004212829:	48 89 74 24 20       	mov    %rsi,0x20(%rsp)
  800421282e:	48 8b 75 38          	mov    0x38(%rbp),%rsi
  8004212832:	48 89 74 24 28       	mov    %rsi,0x28(%rsp)
  8004212837:	48 8b 75 40          	mov    0x40(%rbp),%rsi
  800421283b:	48 89 74 24 30       	mov    %rsi,0x30(%rsp)
  8004212840:	48 89 ce             	mov    %rcx,%rsi
  8004212843:	48 89 c7             	mov    %rax,%rdi
  8004212846:	48 b8 22 1f 21 04 80 	movabs $0x8004211f22,%rax
  800421284d:	00 00 00 
  8004212850:	ff d0                	callq  *%rax
  8004212852:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212855:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212859:	74 08                	je     8004212863 <dwarf_search_die_within_cu+0x17f>
			return (ret);
  800421285b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421285e:	e9 78 01 00 00       	jmpq   80042129db <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_offset = die_offset;
  8004212863:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421286a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421286e:	48 89 10             	mov    %rdx,(%rax)
		ret_die->die_abnum  = abnum;
  8004212871:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212878:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421287c:	48 89 50 10          	mov    %rdx,0x10(%rax)
		ret_die->die_ab  = ab;
  8004212880:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  8004212887:	48 8d 78 20          	lea    0x20(%rax),%rdi
  800421288b:	48 8d 95 b0 fc ff ff 	lea    -0x350(%rbp),%rdx
  8004212892:	b8 66 00 00 00       	mov    $0x66,%eax
  8004212897:	48 89 d6             	mov    %rdx,%rsi
  800421289a:	48 89 c1             	mov    %rax,%rcx
  800421289d:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
		ret_die->die_attr_count = 0;
  80042128a0:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  80042128a7:	c6 80 58 03 00 00 00 	movb   $0x0,0x358(%rax)
		ret_die->die_tag = ab.ab_tag;
  80042128ae:	48 8b 95 b8 fc ff ff 	mov    -0x348(%rbp),%rdx
  80042128b5:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  80042128bc:	48 89 50 18          	mov    %rdx,0x18(%rax)
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  80042128c0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  80042128c7:	e9 8e 00 00 00       	jmpq   800421295a <dwarf_search_die_within_cu+0x276>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
  80042128cc:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042128cf:	48 63 d0             	movslq %eax,%rdx
  80042128d2:	48 89 d0             	mov    %rdx,%rax
  80042128d5:	48 01 c0             	add    %rax,%rax
  80042128d8:	48 01 d0             	add    %rdx,%rax
  80042128db:	48 c1 e0 03          	shl    $0x3,%rax
  80042128df:	48 01 e8             	add    %rbp,%rax
  80042128e2:	48 2d 18 03 00 00    	sub    $0x318,%rax
  80042128e8:	48 8b 08             	mov    (%rax),%rcx
  80042128eb:	48 8d b5 b0 fc ff ff 	lea    -0x350(%rbp),%rsi
  80042128f2:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042128f5:	48 63 d0             	movslq %eax,%rdx
  80042128f8:	48 89 d0             	mov    %rdx,%rax
  80042128fb:	48 01 c0             	add    %rax,%rax
  80042128fe:	48 01 d0             	add    %rdx,%rax
  8004212901:	48 c1 e0 03          	shl    $0x3,%rax
  8004212905:	48 83 c0 30          	add    $0x30,%rax
  8004212909:	48 8d 3c 06          	lea    (%rsi,%rax,1),%rdi
  800421290d:	48 8b 95 78 fc ff ff 	mov    -0x388(%rbp),%rdx
  8004212914:	48 8d b5 80 fc ff ff 	lea    -0x380(%rbp),%rsi
  800421291b:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  8004212922:	c7 04 24 00 00 00 00 	movl   $0x0,(%rsp)
  8004212929:	49 89 c9             	mov    %rcx,%r9
  800421292c:	49 89 f8             	mov    %rdi,%r8
  800421292f:	48 89 d1             	mov    %rdx,%rcx
  8004212932:	48 8d 55 10          	lea    0x10(%rbp),%rdx
  8004212936:	48 89 c7             	mov    %rax,%rdi
  8004212939:	48 b8 53 20 21 04 80 	movabs $0x8004212053,%rax
  8004212940:	00 00 00 
  8004212943:	ff d0                	callq  *%rax
  8004212945:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  8004212948:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421294c:	74 08                	je     8004212956 <dwarf_search_die_within_cu+0x272>
				return (ret);
  800421294e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004212951:	e9 85 00 00 00       	jmpq   80042129db <dwarf_search_die_within_cu+0x2f7>
		ret_die->die_attr_count = 0;
		ret_die->die_tag = ab.ab_tag;
		//ret_die->die_cu  = cu;
		//ret_die->die_dbg = cu->cu_dbg;

		for(i=0; i < ab.ab_atnum; i++)
  8004212956:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421295a:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421295d:	48 63 d0             	movslq %eax,%rdx
  8004212960:	48 8b 85 d8 fc ff ff 	mov    -0x328(%rbp),%rax
  8004212967:	48 39 c2             	cmp    %rax,%rdx
  800421296a:	0f 82 5c ff ff ff    	jb     80042128cc <dwarf_search_die_within_cu+0x1e8>
		{
			if ((ret = _dwarf_attr_init(dbg, &offset, &cu, ret_die, &ab.ab_attrdef[i], ab.ab_attrdef[i].ad_form, 0)) != DW_DLE_NONE)
				return (ret);
		}

		ret_die->die_next_off = offset;
  8004212970:	48 8b 95 80 fc ff ff 	mov    -0x380(%rbp),%rdx
  8004212977:	48 8b 85 78 fc ff ff 	mov    -0x388(%rbp),%rax
  800421297e:	48 89 50 08          	mov    %rdx,0x8(%rax)
		if (search_sibling && level > 0) {
  8004212982:	83 bd 74 fc ff ff 00 	cmpl   $0x0,-0x38c(%rbp)
  8004212989:	74 19                	je     80042129a4 <dwarf_search_die_within_cu+0x2c0>
  800421298b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  800421298f:	7e 13                	jle    80042129a4 <dwarf_search_die_within_cu+0x2c0>
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  8004212991:	0f b6 85 c0 fc ff ff 	movzbl -0x340(%rbp),%eax
  8004212998:	3c 01                	cmp    $0x1,%al
  800421299a:	75 06                	jne    80042129a2 <dwarf_search_die_within_cu+0x2be>
				/* Advance to next DIE level. */
				level++;
  800421299c:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
		}

		ret_die->die_next_off = offset;
		if (search_sibling && level > 0) {
			//dwarf_dealloc(dbg, die, DW_DLA_DIE);
			if (ab.ab_children == DW_CHILDREN_yes) {
  80042129a0:	eb 09                	jmp    80042129ab <dwarf_search_die_within_cu+0x2c7>
  80042129a2:	eb 07                	jmp    80042129ab <dwarf_search_die_within_cu+0x2c7>
				/* Advance to next DIE level. */
				level++;
			}
		} else {
			//*ret_die = die;
			return (DW_DLE_NONE);
  80042129a4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042129a9:	eb 30                	jmp    80042129db <dwarf_search_die_within_cu+0x2f7>
	//assert(cu);
	assert(ret_die);

	level = 1;

	while (offset < cu.cu_next_offset && offset < dbg->dbg_info_size) {
  80042129ab:	48 8b 55 30          	mov    0x30(%rbp),%rdx
  80042129af:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  80042129b6:	48 39 c2             	cmp    %rax,%rdx
  80042129b9:	76 1b                	jbe    80042129d6 <dwarf_search_die_within_cu+0x2f2>
  80042129bb:	48 8b 85 88 fc ff ff 	mov    -0x378(%rbp),%rax
  80042129c2:	48 8b 50 10          	mov    0x10(%rax),%rdx
  80042129c6:	48 8b 85 80 fc ff ff 	mov    -0x380(%rbp),%rax
  80042129cd:	48 39 c2             	cmp    %rax,%rdx
  80042129d0:	0f 87 be fd ff ff    	ja     8004212794 <dwarf_search_die_within_cu+0xb0>
			//*ret_die = die;
			return (DW_DLE_NONE);
		}
	}

	return (DW_DLE_NO_ENTRY);
  80042129d6:	b8 04 00 00 00       	mov    $0x4,%eax
}
  80042129db:	c9                   	leaveq 
  80042129dc:	c3                   	retq   

00000080042129dd <dwarf_offdie>:

//Return 0 on success
int
dwarf_offdie(Dwarf_Debug dbg, uint64_t offset, Dwarf_Die *ret_die, Dwarf_CU cu)
{
  80042129dd:	55                   	push   %rbp
  80042129de:	48 89 e5             	mov    %rsp,%rbp
  80042129e1:	48 83 ec 60          	sub    $0x60,%rsp
  80042129e5:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042129e9:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  80042129ed:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
	int ret;

	assert(dbg);
  80042129f1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042129f6:	75 35                	jne    8004212a2d <dwarf_offdie+0x50>
  80042129f8:	48 b9 78 03 22 04 80 	movabs $0x8004220378,%rcx
  80042129ff:	00 00 00 
  8004212a02:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212a09:	00 00 00 
  8004212a0c:	be c4 02 00 00       	mov    $0x2c4,%esi
  8004212a11:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212a18:	00 00 00 
  8004212a1b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212a20:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212a27:	00 00 00 
  8004212a2a:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212a2d:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212a32:	75 35                	jne    8004212a69 <dwarf_offdie+0x8c>
  8004212a34:	48 b9 7c 03 22 04 80 	movabs $0x800422037c,%rcx
  8004212a3b:	00 00 00 
  8004212a3e:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212a45:	00 00 00 
  8004212a48:	be c5 02 00 00       	mov    $0x2c5,%esi
  8004212a4d:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212a54:	00 00 00 
  8004212a57:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212a5c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212a63:	00 00 00 
  8004212a66:	41 ff d0             	callq  *%r8

	/* First search the current CU. */
	if (offset < cu.cu_next_offset) {
  8004212a69:	48 8b 45 30          	mov    0x30(%rbp),%rax
  8004212a6d:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004212a71:	76 66                	jbe    8004212ad9 <dwarf_offdie+0xfc>
		ret = dwarf_search_die_within_cu(dbg, cu, offset, ret_die, 0);
  8004212a73:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004212a77:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
  8004212a7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212a7f:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
  8004212a83:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212a87:	48 8b 4d 18          	mov    0x18(%rbp),%rcx
  8004212a8b:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212a90:	48 8b 4d 20          	mov    0x20(%rbp),%rcx
  8004212a94:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212a99:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004212a9d:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212aa2:	48 8b 4d 30          	mov    0x30(%rbp),%rcx
  8004212aa6:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212aab:	48 8b 4d 38          	mov    0x38(%rbp),%rcx
  8004212aaf:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212ab4:	48 8b 4d 40          	mov    0x40(%rbp),%rcx
  8004212ab8:	48 89 4c 24 30       	mov    %rcx,0x30(%rsp)
  8004212abd:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212ac2:	48 89 c7             	mov    %rax,%rdi
  8004212ac5:	48 b8 e4 26 21 04 80 	movabs $0x80042126e4,%rax
  8004212acc:	00 00 00 
  8004212acf:	ff d0                	callq  *%rax
  8004212ad1:	89 45 fc             	mov    %eax,-0x4(%rbp)
		return ret;
  8004212ad4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004212ad7:	eb 05                	jmp    8004212ade <dwarf_offdie+0x101>
	}

	/*TODO: Search other CU*/
	return DW_DLV_OK;
  8004212ad9:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212ade:	c9                   	leaveq 
  8004212adf:	c3                   	retq   

0000008004212ae0 <_dwarf_attr_find>:

Dwarf_Attribute*
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
  8004212ae0:	55                   	push   %rbp
  8004212ae1:	48 89 e5             	mov    %rsp,%rbp
  8004212ae4:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004212ae8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212aec:	89 f0                	mov    %esi,%eax
  8004212aee:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Attribute *myat = NULL;
  8004212af2:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004212af9:	00 
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212afa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004212b01:	eb 57                	jmp    8004212b5a <_dwarf_attr_find+0x7a>
	{
		if (die->die_attr[i].at_attrib == attr)
  8004212b03:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004212b07:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212b0a:	48 63 d0             	movslq %eax,%rdx
  8004212b0d:	48 89 d0             	mov    %rdx,%rax
  8004212b10:	48 01 c0             	add    %rax,%rax
  8004212b13:	48 01 d0             	add    %rdx,%rax
  8004212b16:	48 c1 e0 05          	shl    $0x5,%rax
  8004212b1a:	48 01 c8             	add    %rcx,%rax
  8004212b1d:	48 05 80 03 00 00    	add    $0x380,%rax
  8004212b23:	48 8b 10             	mov    (%rax),%rdx
  8004212b26:	0f b7 45 e4          	movzwl -0x1c(%rbp),%eax
  8004212b2a:	48 39 c2             	cmp    %rax,%rdx
  8004212b2d:	75 27                	jne    8004212b56 <_dwarf_attr_find+0x76>
		{
			myat = &(die->die_attr[i]);
  8004212b2f:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004212b32:	48 63 d0             	movslq %eax,%rdx
  8004212b35:	48 89 d0             	mov    %rdx,%rax
  8004212b38:	48 01 c0             	add    %rax,%rax
  8004212b3b:	48 01 d0             	add    %rdx,%rax
  8004212b3e:	48 c1 e0 05          	shl    $0x5,%rax
  8004212b42:	48 8d 90 70 03 00 00 	lea    0x370(%rax),%rdx
  8004212b49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212b4d:	48 01 d0             	add    %rdx,%rax
  8004212b50:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			break;
  8004212b54:	eb 17                	jmp    8004212b6d <_dwarf_attr_find+0x8d>
_dwarf_attr_find(Dwarf_Die *die, uint16_t attr)
{
	Dwarf_Attribute *myat = NULL;
	int i;
    
	for(i=0; i < die->die_attr_count; i++)
  8004212b56:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004212b5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212b5e:	0f b6 80 58 03 00 00 	movzbl 0x358(%rax),%eax
  8004212b65:	0f b6 c0             	movzbl %al,%eax
  8004212b68:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  8004212b6b:	7f 96                	jg     8004212b03 <_dwarf_attr_find+0x23>
			myat = &(die->die_attr[i]);
			break;
		}
	}

	return myat;
  8004212b6d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  8004212b71:	c9                   	leaveq 
  8004212b72:	c3                   	retq   

0000008004212b73 <dwarf_siblingof>:

//Return 0 on success
int
dwarf_siblingof(Dwarf_Debug dbg, Dwarf_Die *die, Dwarf_Die *ret_die,
		Dwarf_CU *cu)
{
  8004212b73:	55                   	push   %rbp
  8004212b74:	48 89 e5             	mov    %rsp,%rbp
  8004212b77:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  8004212b7b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004212b7f:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004212b83:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004212b87:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	Dwarf_Attribute *at;
	uint64_t offset;
	int ret, search_sibling;

	assert(dbg);
  8004212b8b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212b90:	75 35                	jne    8004212bc7 <dwarf_siblingof+0x54>
  8004212b92:	48 b9 78 03 22 04 80 	movabs $0x8004220378,%rcx
  8004212b99:	00 00 00 
  8004212b9c:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212ba3:	00 00 00 
  8004212ba6:	be ec 02 00 00       	mov    $0x2ec,%esi
  8004212bab:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212bb2:	00 00 00 
  8004212bb5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bba:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212bc1:	00 00 00 
  8004212bc4:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212bc7:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004212bcc:	75 35                	jne    8004212c03 <dwarf_siblingof+0x90>
  8004212bce:	48 b9 7c 03 22 04 80 	movabs $0x800422037c,%rcx
  8004212bd5:	00 00 00 
  8004212bd8:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212bdf:	00 00 00 
  8004212be2:	be ed 02 00 00       	mov    $0x2ed,%esi
  8004212be7:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212bee:	00 00 00 
  8004212bf1:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212bf6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212bfd:	00 00 00 
  8004212c00:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212c03:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004212c08:	75 35                	jne    8004212c3f <dwarf_siblingof+0xcc>
  8004212c0a:	48 b9 84 03 22 04 80 	movabs $0x8004220384,%rcx
  8004212c11:	00 00 00 
  8004212c14:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212c1b:	00 00 00 
  8004212c1e:	be ee 02 00 00       	mov    $0x2ee,%esi
  8004212c23:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212c2a:	00 00 00 
  8004212c2d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212c32:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212c39:	00 00 00 
  8004212c3c:	41 ff d0             	callq  *%r8

	/* Application requests the first DIE in this CU. */
	if (die == NULL)
  8004212c3f:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212c44:	75 65                	jne    8004212cab <dwarf_siblingof+0x138>
		return (dwarf_offdie(dbg, cu->cu_die_offset, ret_die, *cu));
  8004212c46:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212c4a:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004212c4e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212c52:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004212c56:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212c5a:	48 8b 38             	mov    (%rax),%rdi
  8004212c5d:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004212c61:	48 8b 78 08          	mov    0x8(%rax),%rdi
  8004212c65:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
  8004212c6a:	48 8b 78 10          	mov    0x10(%rax),%rdi
  8004212c6e:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004212c73:	48 8b 78 18          	mov    0x18(%rax),%rdi
  8004212c77:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004212c7c:	48 8b 78 20          	mov    0x20(%rax),%rdi
  8004212c80:	48 89 7c 24 20       	mov    %rdi,0x20(%rsp)
  8004212c85:	48 8b 78 28          	mov    0x28(%rax),%rdi
  8004212c89:	48 89 7c 24 28       	mov    %rdi,0x28(%rsp)
  8004212c8e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212c92:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212c97:	48 89 cf             	mov    %rcx,%rdi
  8004212c9a:	48 b8 dd 29 21 04 80 	movabs $0x80042129dd,%rax
  8004212ca1:	00 00 00 
  8004212ca4:	ff d0                	callq  *%rax
  8004212ca6:	e9 0a 01 00 00       	jmpq   8004212db5 <dwarf_siblingof+0x242>

	/*
	 * If the DIE doesn't have any children, its sibling sits next
	 * right to it.
	 */
	search_sibling = 0;
  8004212cab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212cb2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212cb6:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212cba:	84 c0                	test   %al,%al
  8004212cbc:	75 0e                	jne    8004212ccc <dwarf_siblingof+0x159>
		offset = die->die_next_off;
  8004212cbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212cc2:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212cc6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212cca:	eb 6b                	jmp    8004212d37 <dwarf_siblingof+0x1c4>
	else {
		/*
		 * Look for DW_AT_sibling attribute for the offset of
		 * its sibling.
		 */
		if ((at = _dwarf_attr_find(die, DW_AT_sibling)) != NULL) {
  8004212ccc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212cd0:	be 01 00 00 00       	mov    $0x1,%esi
  8004212cd5:	48 89 c7             	mov    %rax,%rdi
  8004212cd8:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  8004212cdf:	00 00 00 
  8004212ce2:	ff d0                	callq  *%rax
  8004212ce4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004212ce8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212ced:	74 35                	je     8004212d24 <dwarf_siblingof+0x1b1>
			if (at->at_form != DW_FORM_ref_addr)
  8004212cef:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212cf3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004212cf7:	48 83 f8 10          	cmp    $0x10,%rax
  8004212cfb:	74 19                	je     8004212d16 <dwarf_siblingof+0x1a3>
				offset = at->u[0].u64 + cu->cu_offset;
  8004212cfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d01:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004212d05:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212d09:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212d0d:	48 01 d0             	add    %rdx,%rax
  8004212d10:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212d14:	eb 21                	jmp    8004212d37 <dwarf_siblingof+0x1c4>
			else
				offset = at->u[0].u64;
  8004212d16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212d1a:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004212d1e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004212d22:	eb 13                	jmp    8004212d37 <dwarf_siblingof+0x1c4>
		} else {
			offset = die->die_next_off;
  8004212d24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004212d28:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004212d2c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
			search_sibling = 1;
  8004212d30:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
		}
	}

	ret = dwarf_search_die_within_cu(dbg, *cu, offset, ret_die, search_sibling);
  8004212d37:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004212d3a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004212d3e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
  8004212d42:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
  8004212d46:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004212d4a:	4c 8b 00             	mov    (%rax),%r8
  8004212d4d:	4c 89 04 24          	mov    %r8,(%rsp)
  8004212d51:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004212d55:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  8004212d5a:	4c 8b 40 10          	mov    0x10(%rax),%r8
  8004212d5e:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  8004212d63:	4c 8b 40 18          	mov    0x18(%rax),%r8
  8004212d67:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  8004212d6c:	4c 8b 40 20          	mov    0x20(%rax),%r8
  8004212d70:	4c 89 44 24 20       	mov    %r8,0x20(%rsp)
  8004212d75:	4c 8b 40 28          	mov    0x28(%rax),%r8
  8004212d79:	4c 89 44 24 28       	mov    %r8,0x28(%rsp)
  8004212d7e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212d82:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212d87:	48 b8 e4 26 21 04 80 	movabs $0x80042126e4,%rax
  8004212d8e:	00 00 00 
  8004212d91:	ff d0                	callq  *%rax
  8004212d93:	89 45 e4             	mov    %eax,-0x1c(%rbp)


	if (ret == DW_DLE_NO_ENTRY) {
  8004212d96:	83 7d e4 04          	cmpl   $0x4,-0x1c(%rbp)
  8004212d9a:	75 07                	jne    8004212da3 <dwarf_siblingof+0x230>
		return (DW_DLV_NO_ENTRY);
  8004212d9c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212da1:	eb 12                	jmp    8004212db5 <dwarf_siblingof+0x242>
	} else if (ret != DW_DLE_NONE)
  8004212da3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004212da7:	74 07                	je     8004212db0 <dwarf_siblingof+0x23d>
		return (DW_DLV_ERROR);
  8004212da9:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212dae:	eb 05                	jmp    8004212db5 <dwarf_siblingof+0x242>


	return (DW_DLV_OK);
  8004212db0:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212db5:	c9                   	leaveq 
  8004212db6:	c3                   	retq   

0000008004212db7 <dwarf_child>:

int
dwarf_child(Dwarf_Debug dbg, Dwarf_CU *cu, Dwarf_Die *die, Dwarf_Die *ret_die)
{
  8004212db7:	55                   	push   %rbp
  8004212db8:	48 89 e5             	mov    %rsp,%rbp
  8004212dbb:	48 83 ec 70          	sub    $0x70,%rsp
  8004212dbf:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004212dc3:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004212dc7:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004212dcb:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
	int ret;

	assert(die);
  8004212dcf:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004212dd4:	75 35                	jne    8004212e0b <dwarf_child+0x54>
  8004212dd6:	48 b9 87 03 22 04 80 	movabs $0x8004220387,%rcx
  8004212ddd:	00 00 00 
  8004212de0:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212de7:	00 00 00 
  8004212dea:	be 1c 03 00 00       	mov    $0x31c,%esi
  8004212def:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212df6:	00 00 00 
  8004212df9:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212dfe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e05:	00 00 00 
  8004212e08:	41 ff d0             	callq  *%r8
	assert(ret_die);
  8004212e0b:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004212e10:	75 35                	jne    8004212e47 <dwarf_child+0x90>
  8004212e12:	48 b9 7c 03 22 04 80 	movabs $0x800422037c,%rcx
  8004212e19:	00 00 00 
  8004212e1c:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212e23:	00 00 00 
  8004212e26:	be 1d 03 00 00       	mov    $0x31d,%esi
  8004212e2b:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212e32:	00 00 00 
  8004212e35:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e41:	00 00 00 
  8004212e44:	41 ff d0             	callq  *%r8
	assert(dbg);
  8004212e47:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  8004212e4c:	75 35                	jne    8004212e83 <dwarf_child+0xcc>
  8004212e4e:	48 b9 78 03 22 04 80 	movabs $0x8004220378,%rcx
  8004212e55:	00 00 00 
  8004212e58:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212e5f:	00 00 00 
  8004212e62:	be 1e 03 00 00       	mov    $0x31e,%esi
  8004212e67:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212e6e:	00 00 00 
  8004212e71:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212e76:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212e7d:	00 00 00 
  8004212e80:	41 ff d0             	callq  *%r8
	assert(cu);
  8004212e83:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  8004212e88:	75 35                	jne    8004212ebf <dwarf_child+0x108>
  8004212e8a:	48 b9 84 03 22 04 80 	movabs $0x8004220384,%rcx
  8004212e91:	00 00 00 
  8004212e94:	48 ba ea 01 22 04 80 	movabs $0x80042201ea,%rdx
  8004212e9b:	00 00 00 
  8004212e9e:	be 1f 03 00 00       	mov    $0x31f,%esi
  8004212ea3:	48 bf ff 01 22 04 80 	movabs $0x80042201ff,%rdi
  8004212eaa:	00 00 00 
  8004212ead:	b8 00 00 00 00       	mov    $0x0,%eax
  8004212eb2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004212eb9:	00 00 00 
  8004212ebc:	41 ff d0             	callq  *%r8

	if (die->die_ab.ab_children == DW_CHILDREN_no)
  8004212ebf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212ec3:	0f b6 40 30          	movzbl 0x30(%rax),%eax
  8004212ec7:	84 c0                	test   %al,%al
  8004212ec9:	75 0a                	jne    8004212ed5 <dwarf_child+0x11e>
		return (DW_DLE_NO_ENTRY);
  8004212ecb:	b8 04 00 00 00       	mov    $0x4,%eax
  8004212ed0:	e9 84 00 00 00       	jmpq   8004212f59 <dwarf_child+0x1a2>

	ret = dwarf_search_die_within_cu(dbg, *cu, die->die_next_off, ret_die, 0);
  8004212ed5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004212ed9:	48 8b 70 08          	mov    0x8(%rax),%rsi
  8004212edd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004212ee1:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
  8004212ee5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004212ee9:	48 8b 08             	mov    (%rax),%rcx
  8004212eec:	48 89 0c 24          	mov    %rcx,(%rsp)
  8004212ef0:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004212ef4:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  8004212ef9:	48 8b 48 10          	mov    0x10(%rax),%rcx
  8004212efd:	48 89 4c 24 10       	mov    %rcx,0x10(%rsp)
  8004212f02:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004212f06:	48 89 4c 24 18       	mov    %rcx,0x18(%rsp)
  8004212f0b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004212f0f:	48 89 4c 24 20       	mov    %rcx,0x20(%rsp)
  8004212f14:	48 8b 48 28          	mov    0x28(%rax),%rcx
  8004212f18:	48 89 4c 24 28       	mov    %rcx,0x28(%rsp)
  8004212f1d:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004212f21:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
  8004212f26:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004212f2b:	48 b8 e4 26 21 04 80 	movabs $0x80042126e4,%rax
  8004212f32:	00 00 00 
  8004212f35:	ff d0                	callq  *%rax
  8004212f37:	89 45 fc             	mov    %eax,-0x4(%rbp)

	if (ret == DW_DLE_NO_ENTRY) {
  8004212f3a:	83 7d fc 04          	cmpl   $0x4,-0x4(%rbp)
  8004212f3e:	75 07                	jne    8004212f47 <dwarf_child+0x190>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  8004212f40:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004212f45:	eb 12                	jmp    8004212f59 <dwarf_child+0x1a2>
	} else if (ret != DW_DLE_NONE)
  8004212f47:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  8004212f4b:	74 07                	je     8004212f54 <dwarf_child+0x19d>
		return (DW_DLV_ERROR);
  8004212f4d:	b8 01 00 00 00       	mov    $0x1,%eax
  8004212f52:	eb 05                	jmp    8004212f59 <dwarf_child+0x1a2>

	return (DW_DLV_OK);
  8004212f54:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212f59:	c9                   	leaveq 
  8004212f5a:	c3                   	retq   

0000008004212f5b <_dwarf_find_section_enhanced>:


int  _dwarf_find_section_enhanced(Dwarf_Section *ds)
{
  8004212f5b:	55                   	push   %rbp
  8004212f5c:	48 89 e5             	mov    %rsp,%rbp
  8004212f5f:	48 83 ec 20          	sub    $0x20,%rsp
  8004212f63:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	Dwarf_Section *secthdr = _dwarf_find_section(ds->ds_name);
  8004212f67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f6b:	48 8b 00             	mov    (%rax),%rax
  8004212f6e:	48 89 c7             	mov    %rax,%rdi
  8004212f71:	48 b8 82 62 21 04 80 	movabs $0x8004216282,%rax
  8004212f78:	00 00 00 
  8004212f7b:	ff d0                	callq  *%rax
  8004212f7d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	ds->ds_data = secthdr->ds_data;//(Dwarf_Small*)((uint8_t *)elf_base_ptr + secthdr->sh_offset);
  8004212f81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f85:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004212f89:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f8d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	ds->ds_addr = secthdr->ds_addr;
  8004212f91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212f95:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004212f99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212f9d:	48 89 50 10          	mov    %rdx,0x10(%rax)
	ds->ds_size = secthdr->ds_size;
  8004212fa1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fa5:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004212fa9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004212fad:	48 89 50 18          	mov    %rdx,0x18(%rax)
	return 0;
  8004212fb1:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004212fb6:	c9                   	leaveq 
  8004212fb7:	c3                   	retq   

0000008004212fb8 <_dwarf_frame_params_init>:

extern int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

void
_dwarf_frame_params_init(Dwarf_Debug dbg)
{
  8004212fb8:	55                   	push   %rbp
  8004212fb9:	48 89 e5             	mov    %rsp,%rbp
  8004212fbc:	48 83 ec 08          	sub    $0x8,%rsp
  8004212fc0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	/* Initialise call frame related parameters. */
	dbg->dbg_frame_rule_table_size = DW_FRAME_LAST_REG_NUM;
  8004212fc4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fc8:	66 c7 40 48 42 00    	movw   $0x42,0x48(%rax)
	dbg->dbg_frame_rule_initial_value = DW_FRAME_REG_INITIAL_VALUE;
  8004212fce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fd2:	66 c7 40 4a 0b 04    	movw   $0x40b,0x4a(%rax)
	dbg->dbg_frame_cfa_value = DW_FRAME_CFA_COL3;
  8004212fd8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fdc:	66 c7 40 4c 9c 05    	movw   $0x59c,0x4c(%rax)
	dbg->dbg_frame_same_value = DW_FRAME_SAME_VAL;
  8004212fe2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212fe6:	66 c7 40 4e 0b 04    	movw   $0x40b,0x4e(%rax)
	dbg->dbg_frame_undefined_value = DW_FRAME_UNDEFINED_VAL;
  8004212fec:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004212ff0:	66 c7 40 50 0a 04    	movw   $0x40a,0x50(%rax)
}
  8004212ff6:	c9                   	leaveq 
  8004212ff7:	c3                   	retq   

0000008004212ff8 <dwarf_get_fde_at_pc>:

int
dwarf_get_fde_at_pc(Dwarf_Debug dbg, Dwarf_Addr pc,
		    struct _Dwarf_Fde *ret_fde, Dwarf_Cie cie,
		    Dwarf_Error *error)
{
  8004212ff8:	55                   	push   %rbp
  8004212ff9:	48 89 e5             	mov    %rsp,%rbp
  8004212ffc:	48 83 ec 40          	sub    $0x40,%rsp
  8004213000:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004213004:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004213008:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421300c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004213010:	4c 89 45 c8          	mov    %r8,-0x38(%rbp)
	Dwarf_Fde fde = ret_fde;
  8004213014:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213018:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	memset(fde, 0, sizeof(struct _Dwarf_Fde));
  800421301c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213020:	ba 80 00 00 00       	mov    $0x80,%edx
  8004213025:	be 00 00 00 00       	mov    $0x0,%esi
  800421302a:	48 89 c7             	mov    %rax,%rdi
  800421302d:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004213034:	00 00 00 
  8004213037:	ff d0                	callq  *%rax
	fde->fde_cie = cie;
  8004213039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421303d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213041:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	if (ret_fde == NULL)
  8004213045:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421304a:	75 07                	jne    8004213053 <dwarf_get_fde_at_pc+0x5b>
		return (DW_DLV_ERROR);
  800421304c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004213051:	eb 75                	jmp    80042130c8 <dwarf_get_fde_at_pc+0xd0>

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  8004213053:	eb 59                	jmp    80042130ae <dwarf_get_fde_at_pc+0xb6>
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
  8004213055:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  8004213059:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421305d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004213061:	be 01 00 00 00       	mov    $0x1,%esi
  8004213066:	48 89 c7             	mov    %rax,%rdi
  8004213069:	48 b8 0d 52 21 04 80 	movabs $0x800421520d,%rax
  8004213070:	00 00 00 
  8004213073:	ff d0                	callq  *%rax
  8004213075:	85 c0                	test   %eax,%eax
  8004213077:	79 07                	jns    8004213080 <dwarf_get_fde_at_pc+0x88>
		{
			return DW_DLV_NO_ENTRY;
  8004213079:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421307e:	eb 48                	jmp    80042130c8 <dwarf_get_fde_at_pc+0xd0>
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  8004213080:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213084:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004213088:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  800421308c:	77 20                	ja     80042130ae <dwarf_get_fde_at_pc+0xb6>
  800421308e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004213092:	48 8b 50 30          	mov    0x30(%rax),%rdx
		    fde->fde_adrange)
  8004213096:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421309a:	48 8b 40 38          	mov    0x38(%rax),%rax
	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
		if (_dwarf_get_next_fde(dbg, true, error, fde) < 0)
		{
			return DW_DLV_NO_ENTRY;
		}
		if (pc >= fde->fde_initloc && pc < fde->fde_initloc +
  800421309e:	48 01 d0             	add    %rdx,%rax
  80042130a1:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  80042130a5:	76 07                	jbe    80042130ae <dwarf_get_fde_at_pc+0xb6>
		    fde->fde_adrange)
			return (DW_DLV_OK);
  80042130a7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042130ac:	eb 1a                	jmp    80042130c8 <dwarf_get_fde_at_pc+0xd0>
	fde->fde_cie = cie;
	
	if (ret_fde == NULL)
		return (DW_DLV_ERROR);

	while(dbg->curr_off_eh < dbg->dbg_eh_size) {
  80042130ae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042130b2:	48 8b 50 30          	mov    0x30(%rax),%rdx
  80042130b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042130ba:	48 8b 40 40          	mov    0x40(%rax),%rax
  80042130be:	48 39 c2             	cmp    %rax,%rdx
  80042130c1:	72 92                	jb     8004213055 <dwarf_get_fde_at_pc+0x5d>
		    fde->fde_adrange)
			return (DW_DLV_OK);
	}

	DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
	return (DW_DLV_NO_ENTRY);
  80042130c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
  80042130c8:	c9                   	leaveq 
  80042130c9:	c3                   	retq   

00000080042130ca <_dwarf_frame_regtable_copy>:

int
_dwarf_frame_regtable_copy(Dwarf_Debug dbg, Dwarf_Regtable3 **dest,
			   Dwarf_Regtable3 *src, Dwarf_Error *error)
{
  80042130ca:	55                   	push   %rbp
  80042130cb:	48 89 e5             	mov    %rsp,%rbp
  80042130ce:	53                   	push   %rbx
  80042130cf:	48 83 ec 38          	sub    $0x38,%rsp
  80042130d3:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042130d7:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042130db:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042130df:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
	int i;

	assert(dest != NULL);
  80042130e3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  80042130e8:	75 35                	jne    800421311f <_dwarf_frame_regtable_copy+0x55>
  80042130ea:	48 b9 9a 03 22 04 80 	movabs $0x800422039a,%rcx
  80042130f1:	00 00 00 
  80042130f4:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  80042130fb:	00 00 00 
  80042130fe:	be 57 00 00 00       	mov    $0x57,%esi
  8004213103:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  800421310a:	00 00 00 
  800421310d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004213112:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213119:	00 00 00 
  800421311c:	41 ff d0             	callq  *%r8
	assert(src != NULL);
  800421311f:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004213124:	75 35                	jne    800421315b <_dwarf_frame_regtable_copy+0x91>
  8004213126:	48 b9 d2 03 22 04 80 	movabs $0x80042203d2,%rcx
  800421312d:	00 00 00 
  8004213130:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  8004213137:	00 00 00 
  800421313a:	be 58 00 00 00       	mov    $0x58,%esi
  800421313f:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  8004213146:	00 00 00 
  8004213149:	b8 00 00 00 00       	mov    $0x0,%eax
  800421314e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004213155:	00 00 00 
  8004213158:	41 ff d0             	callq  *%r8

	if (*dest == NULL) {
  800421315b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421315f:	48 8b 00             	mov    (%rax),%rax
  8004213162:	48 85 c0             	test   %rax,%rax
  8004213165:	75 39                	jne    80042131a0 <_dwarf_frame_regtable_copy+0xd6>
		*dest = &global_rt_table_shadow;
  8004213167:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421316b:	48 bb e0 f6 4d 04 80 	movabs $0x80044df6e0,%rbx
  8004213172:	00 00 00 
  8004213175:	48 89 18             	mov    %rbx,(%rax)
		(*dest)->rt3_reg_table_size = src->rt3_reg_table_size;
  8004213178:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421317c:	48 8b 00             	mov    (%rax),%rax
  800421317f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213183:	0f b7 52 18          	movzwl 0x18(%rdx),%edx
  8004213187:	66 89 50 18          	mov    %dx,0x18(%rax)
		(*dest)->rt3_rules = global_rules_shadow;
  800421318b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421318f:	48 8b 00             	mov    (%rax),%rax
  8004213192:	48 bb 00 d8 6d 04 80 	movabs $0x80046dd800,%rbx
  8004213199:	00 00 00 
  800421319c:	48 89 58 20          	mov    %rbx,0x20(%rax)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
  80042131a0:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  80042131a4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042131a8:	48 8b 00             	mov    (%rax),%rax
  80042131ab:	ba 18 00 00 00       	mov    $0x18,%edx
  80042131b0:	48 89 ce             	mov    %rcx,%rsi
  80042131b3:	48 89 c7             	mov    %rax,%rdi
  80042131b6:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  80042131bd:	00 00 00 
  80042131c0:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  80042131c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  80042131c9:	eb 5a                	jmp    8004213225 <_dwarf_frame_regtable_copy+0x15b>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
  80042131cb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042131cf:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042131d3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042131d6:	48 63 d0             	movslq %eax,%rdx
  80042131d9:	48 89 d0             	mov    %rdx,%rax
  80042131dc:	48 01 c0             	add    %rax,%rax
  80042131df:	48 01 d0             	add    %rdx,%rax
  80042131e2:	48 c1 e0 03          	shl    $0x3,%rax
  80042131e6:	48 01 c1             	add    %rax,%rcx
  80042131e9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042131ed:	48 8b 00             	mov    (%rax),%rax
  80042131f0:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042131f4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042131f7:	48 63 d0             	movslq %eax,%rdx
  80042131fa:	48 89 d0             	mov    %rdx,%rax
  80042131fd:	48 01 c0             	add    %rax,%rax
  8004213200:	48 01 d0             	add    %rdx,%rax
  8004213203:	48 c1 e0 03          	shl    $0x3,%rax
  8004213207:	48 01 f0             	add    %rsi,%rax
  800421320a:	ba 18 00 00 00       	mov    $0x18,%edx
  800421320f:	48 89 ce             	mov    %rcx,%rsi
  8004213212:	48 89 c7             	mov    %rax,%rdi
  8004213215:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  800421321c:	00 00 00 
  800421321f:	ff d0                	callq  *%rax

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
  8004213221:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213225:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213229:	48 8b 00             	mov    (%rax),%rax
  800421322c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213230:	0f b7 c0             	movzwl %ax,%eax
  8004213233:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213236:	7e 10                	jle    8004213248 <_dwarf_frame_regtable_copy+0x17e>
		     i < src->rt3_reg_table_size; i++)
  8004213238:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421323c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213240:	0f b7 c0             	movzwl %ax,%eax
	}

	memcpy(&(*dest)->rt3_cfa_rule, &src->rt3_cfa_rule,
	       sizeof(Dwarf_Regtable_Entry3));

	for (i = 0; i < (*dest)->rt3_reg_table_size &&
  8004213243:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004213246:	7f 83                	jg     80042131cb <_dwarf_frame_regtable_copy+0x101>
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213248:	eb 32                	jmp    800421327c <_dwarf_frame_regtable_copy+0x1b2>
		(*dest)->rt3_rules[i].dw_regnum =
  800421324a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421324e:	48 8b 00             	mov    (%rax),%rax
  8004213251:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213255:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004213258:	48 63 d0             	movslq %eax,%rdx
  800421325b:	48 89 d0             	mov    %rdx,%rax
  800421325e:	48 01 c0             	add    %rax,%rax
  8004213261:	48 01 d0             	add    %rdx,%rax
  8004213264:	48 c1 e0 03          	shl    $0x3,%rax
  8004213268:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
			dbg->dbg_frame_undefined_value;
  800421326c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004213270:	0f b7 40 50          	movzwl 0x50(%rax),%eax
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
		(*dest)->rt3_rules[i].dw_regnum =
  8004213274:	66 89 42 02          	mov    %ax,0x2(%rdx)
	for (i = 0; i < (*dest)->rt3_reg_table_size &&
		     i < src->rt3_reg_table_size; i++)
		memcpy(&(*dest)->rt3_rules[i], &src->rt3_rules[i],
		       sizeof(Dwarf_Regtable_Entry3));

	for (; i < (*dest)->rt3_reg_table_size; i++)
  8004213278:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  800421327c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004213280:	48 8b 00             	mov    (%rax),%rax
  8004213283:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213287:	0f b7 c0             	movzwl %ax,%eax
  800421328a:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421328d:	7f bb                	jg     800421324a <_dwarf_frame_regtable_copy+0x180>
		(*dest)->rt3_rules[i].dw_regnum =
			dbg->dbg_frame_undefined_value;

	return (DW_DLE_NONE);
  800421328f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004213294:	48 83 c4 38          	add    $0x38,%rsp
  8004213298:	5b                   	pop    %rbx
  8004213299:	5d                   	pop    %rbp
  800421329a:	c3                   	retq   

000000800421329b <_dwarf_frame_run_inst>:

static int
_dwarf_frame_run_inst(Dwarf_Debug dbg, Dwarf_Regtable3 *rt, uint8_t *insts,
		      Dwarf_Unsigned len, Dwarf_Unsigned caf, Dwarf_Signed daf, Dwarf_Addr pc,
		      Dwarf_Addr pc_req, Dwarf_Addr *row_pc, Dwarf_Error *error)
{
  800421329b:	55                   	push   %rbp
  800421329c:	48 89 e5             	mov    %rsp,%rbp
  800421329f:	53                   	push   %rbx
  80042132a0:	48 81 ec 88 00 00 00 	sub    $0x88,%rsp
  80042132a7:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  80042132ab:	48 89 75 90          	mov    %rsi,-0x70(%rbp)
  80042132af:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
  80042132b3:	48 89 4d 80          	mov    %rcx,-0x80(%rbp)
  80042132b7:	4c 89 85 78 ff ff ff 	mov    %r8,-0x88(%rbp)
  80042132be:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
			ret = DW_DLE_DF_REG_NUM_TOO_HIGH;               \
			goto program_done;                              \
		}                                                       \
	} while(0)

	ret = DW_DLE_NONE;
  80042132c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
	init_rt = saved_rt = NULL;
  80042132cc:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  80042132d3:	00 
  80042132d4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042132d8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	*row_pc = pc;
  80042132dc:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042132e0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042132e4:	48 89 10             	mov    %rdx,(%rax)

	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
  80042132e7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  80042132eb:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  80042132ef:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
  80042132f3:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042132f7:	48 89 c7             	mov    %rax,%rdi
  80042132fa:	48 b8 ca 30 21 04 80 	movabs $0x80042130ca,%rax
  8004213301:	00 00 00 
  8004213304:	ff d0                	callq  *%rax
	p = insts;
  8004213306:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421330a:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
	pe = p + len;
  800421330e:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213312:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004213316:	48 01 d0             	add    %rdx,%rax
  8004213319:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

	while (p < pe) {
  800421331d:	e9 3a 0d 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		if (*p == DW_CFA_nop) {
  8004213322:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213326:	0f b6 00             	movzbl (%rax),%eax
  8004213329:	84 c0                	test   %al,%al
  800421332b:	75 11                	jne    800421333e <_dwarf_frame_run_inst+0xa3>
			p++;
  800421332d:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213331:	48 83 c0 01          	add    $0x1,%rax
  8004213335:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			continue;
  8004213339:	e9 1e 0d 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		}

		high2 = *p & 0xc0;
  800421333e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213342:	0f b6 00             	movzbl (%rax),%eax
  8004213345:	83 e0 c0             	and    $0xffffffc0,%eax
  8004213348:	88 45 df             	mov    %al,-0x21(%rbp)
		low6 = *p & 0x3f;
  800421334b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421334f:	0f b6 00             	movzbl (%rax),%eax
  8004213352:	83 e0 3f             	and    $0x3f,%eax
  8004213355:	88 45 de             	mov    %al,-0x22(%rbp)
		p++;
  8004213358:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421335c:	48 83 c0 01          	add    $0x1,%rax
  8004213360:	48 89 45 a0          	mov    %rax,-0x60(%rbp)

		if (high2 > 0) {
  8004213364:	80 7d df 00          	cmpb   $0x0,-0x21(%rbp)
  8004213368:	0f 84 a1 01 00 00    	je     800421350f <_dwarf_frame_run_inst+0x274>
			switch (high2) {
  800421336e:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  8004213372:	3d 80 00 00 00       	cmp    $0x80,%eax
  8004213377:	74 38                	je     80042133b1 <_dwarf_frame_run_inst+0x116>
  8004213379:	3d c0 00 00 00       	cmp    $0xc0,%eax
  800421337e:	0f 84 01 01 00 00    	je     8004213485 <_dwarf_frame_run_inst+0x1ea>
  8004213384:	83 f8 40             	cmp    $0x40,%eax
  8004213387:	0f 85 71 01 00 00    	jne    80042134fe <_dwarf_frame_run_inst+0x263>
			case DW_CFA_advance_loc:
			        pc += low6 * caf;
  800421338d:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213391:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213398:	ff 
  8004213399:	48 01 45 10          	add    %rax,0x10(%rbp)
			        if (pc_req < pc)
  800421339d:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042133a1:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042133a5:	73 05                	jae    80042133ac <_dwarf_frame_run_inst+0x111>
			                goto program_done;
  80042133a7:	e9 be 0c 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			        break;
  80042133ac:	e9 59 01 00 00       	jmpq   800421350a <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_offset:
			        *row_pc = pc;
  80042133b1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042133b5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042133b9:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  80042133bc:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042133c0:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133c4:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042133c8:	66 39 c2             	cmp    %ax,%dx
  80042133cb:	72 0c                	jb     80042133d9 <_dwarf_frame_run_inst+0x13e>
  80042133cd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042133d4:	e9 91 0c 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			        RL[low6].dw_offset_relevant = 1;
  80042133d9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133dd:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042133e1:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042133e5:	48 89 d0             	mov    %rdx,%rax
  80042133e8:	48 01 c0             	add    %rax,%rax
  80042133eb:	48 01 d0             	add    %rdx,%rax
  80042133ee:	48 c1 e0 03          	shl    $0x3,%rax
  80042133f2:	48 01 c8             	add    %rcx,%rax
  80042133f5:	c6 00 01             	movb   $0x1,(%rax)
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
  80042133f8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042133fc:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213400:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213404:	48 89 d0             	mov    %rdx,%rax
  8004213407:	48 01 c0             	add    %rax,%rax
  800421340a:	48 01 d0             	add    %rdx,%rax
  800421340d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213411:	48 01 c8             	add    %rcx,%rax
  8004213414:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213418:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421341c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213420:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213424:	48 89 d0             	mov    %rdx,%rax
  8004213427:	48 01 c0             	add    %rax,%rax
  800421342a:	48 01 d0             	add    %rdx,%rax
  800421342d:	48 c1 e0 03          	shl    $0x3,%rax
  8004213431:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213435:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213439:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  800421343d:	66 89 42 02          	mov    %ax,0x2(%rdx)
			        RL[low6].dw_offset_or_block_len =
  8004213441:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213445:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213449:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  800421344d:	48 89 d0             	mov    %rdx,%rax
  8004213450:	48 01 c0             	add    %rax,%rax
  8004213453:	48 01 d0             	add    %rdx,%rax
  8004213456:	48 c1 e0 03          	shl    $0x3,%rax
  800421345a:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
					_dwarf_decode_uleb128(&p) * daf;
  800421345e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213462:	48 89 c7             	mov    %rax,%rdi
  8004213465:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  800421346c:	00 00 00 
  800421346f:	ff d0                	callq  *%rax
  8004213471:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213478:	48 0f af c2          	imul   %rdx,%rax
			        *row_pc = pc;
			        CHECK_TABLE_SIZE(low6);
			        RL[low6].dw_offset_relevant = 1;
			        RL[low6].dw_value_type = DW_EXPR_OFFSET;
			        RL[low6].dw_regnum = dbg->dbg_frame_cfa_value;
			        RL[low6].dw_offset_or_block_len =
  800421347c:	48 89 43 08          	mov    %rax,0x8(%rbx)
					_dwarf_decode_uleb128(&p) * daf;
			        break;
  8004213480:	e9 85 00 00 00       	jmpq   800421350a <_dwarf_frame_run_inst+0x26f>
			case DW_CFA_restore:
			        *row_pc = pc;
  8004213485:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213489:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  800421348d:	48 89 10             	mov    %rdx,(%rax)
			        CHECK_TABLE_SIZE(low6);
  8004213490:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  8004213494:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213498:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421349c:	66 39 c2             	cmp    %ax,%dx
  800421349f:	72 0c                	jb     80042134ad <_dwarf_frame_run_inst+0x212>
  80042134a1:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042134a8:	e9 bd 0b 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			        memcpy(&RL[low6], &INITRL[low6],
  80042134ad:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042134b1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042134b5:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042134b9:	48 89 d0             	mov    %rdx,%rax
  80042134bc:	48 01 c0             	add    %rax,%rax
  80042134bf:	48 01 d0             	add    %rdx,%rax
  80042134c2:	48 c1 e0 03          	shl    $0x3,%rax
  80042134c6:	48 01 c1             	add    %rax,%rcx
  80042134c9:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042134cd:	48 8b 70 20          	mov    0x20(%rax),%rsi
  80042134d1:	0f b6 55 de          	movzbl -0x22(%rbp),%edx
  80042134d5:	48 89 d0             	mov    %rdx,%rax
  80042134d8:	48 01 c0             	add    %rax,%rax
  80042134db:	48 01 d0             	add    %rdx,%rax
  80042134de:	48 c1 e0 03          	shl    $0x3,%rax
  80042134e2:	48 01 f0             	add    %rsi,%rax
  80042134e5:	ba 18 00 00 00       	mov    $0x18,%edx
  80042134ea:	48 89 ce             	mov    %rcx,%rsi
  80042134ed:	48 89 c7             	mov    %rax,%rdi
  80042134f0:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  80042134f7:	00 00 00 
  80042134fa:	ff d0                	callq  *%rax
				       sizeof(Dwarf_Regtable_Entry3));
			        break;
  80042134fc:	eb 0c                	jmp    800421350a <_dwarf_frame_run_inst+0x26f>
			default:
			        DWARF_SET_ERROR(dbg, error,
						DW_DLE_FRAME_INSTR_EXEC_ERROR);
			        ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  80042134fe:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			        goto program_done;
  8004213505:	e9 60 0b 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			}

			continue;
  800421350a:	e9 4d 0b 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		}

		switch (low6) {
  800421350f:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  8004213513:	83 f8 16             	cmp    $0x16,%eax
  8004213516:	0f 87 37 0b 00 00    	ja     8004214053 <_dwarf_frame_run_inst+0xdb8>
  800421351c:	89 c0                	mov    %eax,%eax
  800421351e:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004213525:	00 
  8004213526:	48 b8 e0 03 22 04 80 	movabs $0x80042203e0,%rax
  800421352d:	00 00 00 
  8004213530:	48 01 d0             	add    %rdx,%rax
  8004213533:	48 8b 00             	mov    (%rax),%rax
  8004213536:	ff e0                	jmpq   *%rax
		case DW_CFA_set_loc:
			pc = dbg->decode(&p, dbg->dbg_pointer_size);
  8004213538:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421353c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213540:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
  8004213544:	8b 4a 28             	mov    0x28(%rdx),%ecx
  8004213547:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  800421354b:	89 ce                	mov    %ecx,%esi
  800421354d:	48 89 d7             	mov    %rdx,%rdi
  8004213550:	ff d0                	callq  *%rax
  8004213552:	48 89 45 10          	mov    %rax,0x10(%rbp)
			if (pc_req < pc)
  8004213556:	48 8b 45 18          	mov    0x18(%rbp),%rax
  800421355a:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  800421355e:	73 05                	jae    8004213565 <_dwarf_frame_run_inst+0x2ca>
			        goto program_done;
  8004213560:	e9 05 0b 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213565:	e9 f2 0a 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc1:
			pc += dbg->decode(&p, 1) * caf;
  800421356a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421356e:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004213572:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  8004213576:	be 01 00 00 00       	mov    $0x1,%esi
  800421357b:	48 89 d7             	mov    %rdx,%rdi
  800421357e:	ff d0                	callq  *%rax
  8004213580:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  8004213587:	ff 
  8004213588:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  800421358c:	48 8b 45 18          	mov    0x18(%rbp),%rax
  8004213590:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213594:	73 05                	jae    800421359b <_dwarf_frame_run_inst+0x300>
			        goto program_done;
  8004213596:	e9 cf 0a 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			break;
  800421359b:	e9 bc 0a 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc2:
			pc += dbg->decode(&p, 2) * caf;
  80042135a0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042135a4:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042135a8:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042135ac:	be 02 00 00 00       	mov    $0x2,%esi
  80042135b1:	48 89 d7             	mov    %rdx,%rdi
  80042135b4:	ff d0                	callq  *%rax
  80042135b6:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042135bd:	ff 
  80042135be:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042135c2:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042135c6:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  80042135ca:	73 05                	jae    80042135d1 <_dwarf_frame_run_inst+0x336>
			        goto program_done;
  80042135cc:	e9 99 0a 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			break;
  80042135d1:	e9 86 0a 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_advance_loc4:
			pc += dbg->decode(&p, 4) * caf;
  80042135d6:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042135da:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042135de:	48 8d 55 a0          	lea    -0x60(%rbp),%rdx
  80042135e2:	be 04 00 00 00       	mov    $0x4,%esi
  80042135e7:	48 89 d7             	mov    %rdx,%rdi
  80042135ea:	ff d0                	callq  *%rax
  80042135ec:	48 0f af 85 78 ff ff 	imul   -0x88(%rbp),%rax
  80042135f3:	ff 
  80042135f4:	48 01 45 10          	add    %rax,0x10(%rbp)
			if (pc_req < pc)
  80042135f8:	48 8b 45 18          	mov    0x18(%rbp),%rax
  80042135fc:	48 3b 45 10          	cmp    0x10(%rbp),%rax
  8004213600:	73 05                	jae    8004213607 <_dwarf_frame_run_inst+0x36c>
			        goto program_done;
  8004213602:	e9 63 0a 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			break;
  8004213607:	e9 50 0a 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended:
			*row_pc = pc;
  800421360c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213610:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213614:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213617:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421361b:	48 89 c7             	mov    %rax,%rdi
  800421361e:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213625:	00 00 00 
  8004213628:	ff d0                	callq  *%rax
  800421362a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  800421362e:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213632:	48 89 c7             	mov    %rax,%rdi
  8004213635:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  800421363c:	00 00 00 
  800421363f:	ff d0                	callq  *%rax
  8004213641:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213645:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213649:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421364d:	0f b7 c0             	movzwl %ax,%eax
  8004213650:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213654:	77 0c                	ja     8004213662 <_dwarf_frame_run_inst+0x3c7>
  8004213656:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421365d:	e9 08 0a 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213662:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213666:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421366a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421366e:	48 89 d0             	mov    %rdx,%rax
  8004213671:	48 01 c0             	add    %rax,%rax
  8004213674:	48 01 d0             	add    %rdx,%rax
  8004213677:	48 c1 e0 03          	shl    $0x3,%rax
  800421367b:	48 01 c8             	add    %rcx,%rax
  800421367e:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213681:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213685:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213689:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421368d:	48 89 d0             	mov    %rdx,%rax
  8004213690:	48 01 c0             	add    %rax,%rax
  8004213693:	48 01 d0             	add    %rdx,%rax
  8004213696:	48 c1 e0 03          	shl    $0x3,%rax
  800421369a:	48 01 c8             	add    %rcx,%rax
  800421369d:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  80042136a1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136a5:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136a9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042136ad:	48 89 d0             	mov    %rdx,%rax
  80042136b0:	48 01 c0             	add    %rax,%rax
  80042136b3:	48 01 d0             	add    %rdx,%rax
  80042136b6:	48 c1 e0 03          	shl    $0x3,%rax
  80042136ba:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042136be:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042136c2:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042136c6:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  80042136ca:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042136ce:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042136d2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042136d6:	48 89 d0             	mov    %rdx,%rax
  80042136d9:	48 01 c0             	add    %rax,%rax
  80042136dc:	48 01 d0             	add    %rdx,%rax
  80042136df:	48 c1 e0 03          	shl    $0x3,%rax
  80042136e3:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  80042136e7:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  80042136ee:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  80042136f3:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  80042136f7:	e9 60 09 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_extended:
			*row_pc = pc;
  80042136fc:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213700:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213704:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213707:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421370b:	48 89 c7             	mov    %rax,%rdi
  800421370e:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213715:	00 00 00 
  8004213718:	ff d0                	callq  *%rax
  800421371a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  800421371e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213722:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213726:	0f b7 c0             	movzwl %ax,%eax
  8004213729:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  800421372d:	77 0c                	ja     800421373b <_dwarf_frame_run_inst+0x4a0>
  800421372f:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213736:	e9 2f 09 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			memcpy(&RL[reg], &INITRL[reg],
  800421373b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421373f:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213743:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213747:	48 89 d0             	mov    %rdx,%rax
  800421374a:	48 01 c0             	add    %rax,%rax
  800421374d:	48 01 d0             	add    %rdx,%rax
  8004213750:	48 c1 e0 03          	shl    $0x3,%rax
  8004213754:	48 01 c1             	add    %rax,%rcx
  8004213757:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421375b:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421375f:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213763:	48 89 d0             	mov    %rdx,%rax
  8004213766:	48 01 c0             	add    %rax,%rax
  8004213769:	48 01 d0             	add    %rdx,%rax
  800421376c:	48 c1 e0 03          	shl    $0x3,%rax
  8004213770:	48 01 f0             	add    %rsi,%rax
  8004213773:	ba 18 00 00 00       	mov    $0x18,%edx
  8004213778:	48 89 ce             	mov    %rcx,%rsi
  800421377b:	48 89 c7             	mov    %rax,%rdi
  800421377e:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  8004213785:	00 00 00 
  8004213788:	ff d0                	callq  *%rax
			       sizeof(Dwarf_Regtable_Entry3));
			break;
  800421378a:	e9 cd 08 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_undefined:
			*row_pc = pc;
  800421378f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213793:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213797:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  800421379a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421379e:	48 89 c7             	mov    %rax,%rdi
  80042137a1:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042137a8:	00 00 00 
  80042137ab:	ff d0                	callq  *%rax
  80042137ad:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042137b1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137b5:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042137b9:	0f b7 c0             	movzwl %ax,%eax
  80042137bc:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042137c0:	77 0c                	ja     80042137ce <_dwarf_frame_run_inst+0x533>
  80042137c2:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042137c9:	e9 9c 08 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042137ce:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137d2:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137d6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137da:	48 89 d0             	mov    %rdx,%rax
  80042137dd:	48 01 c0             	add    %rax,%rax
  80042137e0:	48 01 d0             	add    %rdx,%rax
  80042137e3:	48 c1 e0 03          	shl    $0x3,%rax
  80042137e7:	48 01 c8             	add    %rcx,%rax
  80042137ea:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_undefined_value;
  80042137ed:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042137f1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042137f5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042137f9:	48 89 d0             	mov    %rdx,%rax
  80042137fc:	48 01 c0             	add    %rax,%rax
  80042137ff:	48 01 d0             	add    %rdx,%rax
  8004213802:	48 c1 e0 03          	shl    $0x3,%rax
  8004213806:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421380a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421380e:	0f b7 40 50          	movzwl 0x50(%rax),%eax
  8004213812:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213816:	e9 41 08 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_same_value:
			reg = _dwarf_decode_uleb128(&p);
  800421381b:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421381f:	48 89 c7             	mov    %rax,%rdi
  8004213822:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213829:	00 00 00 
  800421382c:	ff d0                	callq  *%rax
  800421382e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213832:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213836:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  800421383a:	0f b7 c0             	movzwl %ax,%eax
  800421383d:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213841:	77 0c                	ja     800421384f <_dwarf_frame_run_inst+0x5b4>
  8004213843:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  800421384a:	e9 1b 08 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  800421384f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213853:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213857:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421385b:	48 89 d0             	mov    %rdx,%rax
  800421385e:	48 01 c0             	add    %rax,%rax
  8004213861:	48 01 d0             	add    %rdx,%rax
  8004213864:	48 c1 e0 03          	shl    $0x3,%rax
  8004213868:	48 01 c8             	add    %rcx,%rax
  800421386b:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_same_value;
  800421386e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213872:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213876:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421387a:	48 89 d0             	mov    %rdx,%rax
  800421387d:	48 01 c0             	add    %rax,%rax
  8004213880:	48 01 d0             	add    %rdx,%rax
  8004213883:	48 c1 e0 03          	shl    $0x3,%rax
  8004213887:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421388b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421388f:	0f b7 40 4e          	movzwl 0x4e(%rax),%eax
  8004213893:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213897:	e9 c0 07 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_register:
			*row_pc = pc;
  800421389c:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042138a0:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042138a4:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042138a7:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042138ab:	48 89 c7             	mov    %rax,%rdi
  80042138ae:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042138b5:	00 00 00 
  80042138b8:	ff d0                	callq  *%rax
  80042138ba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			reg2 = _dwarf_decode_uleb128(&p);
  80042138be:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042138c2:	48 89 c7             	mov    %rax,%rdi
  80042138c5:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042138cc:	00 00 00 
  80042138cf:	ff d0                	callq  *%rax
  80042138d1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
			CHECK_TABLE_SIZE(reg);
  80042138d5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138d9:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042138dd:	0f b7 c0             	movzwl %ax,%eax
  80042138e0:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  80042138e4:	77 0c                	ja     80042138f2 <_dwarf_frame_run_inst+0x657>
  80042138e6:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  80042138ed:	e9 78 07 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  80042138f2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042138f6:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042138fa:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042138fe:	48 89 d0             	mov    %rdx,%rax
  8004213901:	48 01 c0             	add    %rax,%rax
  8004213904:	48 01 d0             	add    %rdx,%rax
  8004213907:	48 c1 e0 03          	shl    $0x3,%rax
  800421390b:	48 01 c8             	add    %rcx,%rax
  800421390e:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_regnum = reg2;
  8004213911:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213915:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213919:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421391d:	48 89 d0             	mov    %rdx,%rax
  8004213920:	48 01 c0             	add    %rax,%rax
  8004213923:	48 01 d0             	add    %rdx,%rax
  8004213926:	48 c1 e0 03          	shl    $0x3,%rax
  800421392a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421392e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004213932:	66 89 42 02          	mov    %ax,0x2(%rdx)
			break;
  8004213936:	e9 21 07 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_remember_state:
			_dwarf_frame_regtable_copy(dbg, &saved_rt, rt, error);
  800421393b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421393f:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213943:	48 8d 75 a8          	lea    -0x58(%rbp),%rsi
  8004213947:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421394b:	48 89 c7             	mov    %rax,%rdi
  800421394e:	48 b8 ca 30 21 04 80 	movabs $0x80042130ca,%rax
  8004213955:	00 00 00 
  8004213958:	ff d0                	callq  *%rax
			break;
  800421395a:	e9 fd 06 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_restore_state:
			*row_pc = pc;
  800421395f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213963:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213967:	48 89 10             	mov    %rdx,(%rax)
			_dwarf_frame_regtable_copy(dbg, &rt, saved_rt, error);
  800421396a:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421396e:	48 8b 4d 28          	mov    0x28(%rbp),%rcx
  8004213972:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
  8004213976:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421397a:	48 89 c7             	mov    %rax,%rdi
  800421397d:	48 b8 ca 30 21 04 80 	movabs $0x80042130ca,%rax
  8004213984:	00 00 00 
  8004213987:	ff d0                	callq  *%rax
			break;
  8004213989:	e9 ce 06 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa:
			*row_pc = pc;
  800421398e:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213992:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213996:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213999:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  800421399d:	48 89 c7             	mov    %rax,%rdi
  80042139a0:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042139a7:	00 00 00 
  80042139aa:	ff d0                	callq  *%rax
  80042139ac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  80042139b0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  80042139b4:	48 89 c7             	mov    %rax,%rdi
  80042139b7:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042139be:	00 00 00 
  80042139c1:	ff d0                	callq  *%rax
  80042139c3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  80042139c7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139cb:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  80042139ce:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139d2:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  80042139d6:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139da:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042139de:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = uoff;
  80042139e2:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042139e6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042139ea:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  80042139ee:	e9 69 06 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_register:
			*row_pc = pc;
  80042139f3:	48 8b 45 20          	mov    0x20(%rbp),%rax
  80042139f7:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  80042139fb:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  80042139fe:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a02:	48 89 c7             	mov    %rax,%rdi
  8004213a05:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213a0c:	00 00 00 
  8004213a0f:	ff d0                	callq  *%rax
  8004213a11:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CFA.dw_regnum = reg;
  8004213a15:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a19:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213a1d:	66 89 50 02          	mov    %dx,0x2(%rax)
			 * Note that DW_CFA_def_cfa_register change the CFA
			 * rule register while keep the old offset. So we
			 * should not touch the CFA.dw_offset_relevant flag
			 * here.
			 */
			break;
  8004213a21:	e9 36 06 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset:
			*row_pc = pc;
  8004213a26:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a2a:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a2e:	48 89 10             	mov    %rdx,(%rax)
			uoff = _dwarf_decode_uleb128(&p);
  8004213a31:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a35:	48 89 c7             	mov    %rax,%rdi
  8004213a38:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213a3f:	00 00 00 
  8004213a42:	ff d0                	callq  *%rax
  8004213a44:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213a48:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a4c:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213a4f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a53:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = uoff;
  8004213a57:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a5b:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004213a5f:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213a63:	e9 f4 05 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_expression:
			*row_pc = pc;
  8004213a68:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213a6c:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213a70:	48 89 10             	mov    %rdx,(%rax)
			CFA.dw_offset_relevant = 0;
  8004213a73:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a77:	c6 00 00             	movb   $0x0,(%rax)
			CFA.dw_value_type = DW_EXPR_EXPRESSION;
  8004213a7a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213a7e:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			CFA.dw_offset_or_block_len = _dwarf_decode_uleb128(&p);
  8004213a82:	48 8b 5d 90          	mov    -0x70(%rbp),%rbx
  8004213a86:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213a8a:	48 89 c7             	mov    %rax,%rdi
  8004213a8d:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213a94:	00 00 00 
  8004213a97:	ff d0                	callq  *%rax
  8004213a99:	48 89 43 08          	mov    %rax,0x8(%rbx)
			CFA.dw_block_ptr = p;
  8004213a9d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213aa1:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213aa5:	48 89 50 10          	mov    %rdx,0x10(%rax)
			p += CFA.dw_offset_or_block_len;
  8004213aa9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  8004213aad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ab1:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213ab5:	48 01 d0             	add    %rdx,%rax
  8004213ab8:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213abc:	e9 9b 05 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_expression:
			*row_pc = pc;
  8004213ac1:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213ac5:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213ac9:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213acc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213ad0:	48 89 c7             	mov    %rax,%rdi
  8004213ad3:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213ada:	00 00 00 
  8004213add:	ff d0                	callq  *%rax
  8004213adf:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213ae3:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ae7:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213aeb:	0f b7 c0             	movzwl %ax,%eax
  8004213aee:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213af2:	77 0c                	ja     8004213b00 <_dwarf_frame_run_inst+0x865>
  8004213af4:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213afb:	e9 6a 05 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213b00:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b04:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b08:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b0c:	48 89 d0             	mov    %rdx,%rax
  8004213b0f:	48 01 c0             	add    %rax,%rax
  8004213b12:	48 01 d0             	add    %rdx,%rax
  8004213b15:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b19:	48 01 c8             	add    %rcx,%rax
  8004213b1c:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
  8004213b1f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b23:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b27:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b2b:	48 89 d0             	mov    %rdx,%rax
  8004213b2e:	48 01 c0             	add    %rax,%rax
  8004213b31:	48 01 d0             	add    %rdx,%rax
  8004213b34:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b38:	48 01 c8             	add    %rcx,%rax
  8004213b3b:	c6 40 01 02          	movb   $0x2,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213b3f:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b43:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b47:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b4b:	48 89 d0             	mov    %rdx,%rax
  8004213b4e:	48 01 c0             	add    %rax,%rax
  8004213b51:	48 01 d0             	add    %rdx,%rax
  8004213b54:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b58:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213b5c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213b60:	48 89 c7             	mov    %rax,%rdi
  8004213b63:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213b6a:	00 00 00 
  8004213b6d:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213b6f:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004213b73:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213b77:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213b7b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213b7f:	48 89 d0             	mov    %rdx,%rax
  8004213b82:	48 01 c0             	add    %rax,%rax
  8004213b85:	48 01 d0             	add    %rdx,%rax
  8004213b88:	48 c1 e0 03          	shl    $0x3,%rax
  8004213b8c:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213b90:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004213b94:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004213b98:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  8004213b9c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ba0:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004213ba4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ba8:	48 89 d0             	mov    %rdx,%rax
  8004213bab:	48 01 c0             	add    %rax,%rax
  8004213bae:	48 01 d0             	add    %rdx,%rax
  8004213bb1:	48 c1 e0 03          	shl    $0x3,%rax
  8004213bb5:	48 01 f0             	add    %rsi,%rax
  8004213bb8:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004213bbc:	48 01 c8             	add    %rcx,%rax
  8004213bbf:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004213bc3:	e9 94 04 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_offset_extended_sf:
			*row_pc = pc;
  8004213bc8:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213bcc:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213bd0:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213bd3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213bd7:	48 89 c7             	mov    %rax,%rdi
  8004213bda:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213be1:	00 00 00 
  8004213be4:	ff d0                	callq  *%rax
  8004213be6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213bea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213bee:	48 89 c7             	mov    %rax,%rdi
  8004213bf1:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  8004213bf8:	00 00 00 
  8004213bfb:	ff d0                	callq  *%rax
  8004213bfd:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213c01:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c05:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213c09:	0f b7 c0             	movzwl %ax,%eax
  8004213c0c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213c10:	77 0c                	ja     8004213c1e <_dwarf_frame_run_inst+0x983>
  8004213c12:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213c19:	e9 4c 04 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213c1e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c22:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c26:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c2a:	48 89 d0             	mov    %rdx,%rax
  8004213c2d:	48 01 c0             	add    %rax,%rax
  8004213c30:	48 01 d0             	add    %rdx,%rax
  8004213c33:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c37:	48 01 c8             	add    %rcx,%rax
  8004213c3a:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_OFFSET;
  8004213c3d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c41:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c45:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c49:	48 89 d0             	mov    %rdx,%rax
  8004213c4c:	48 01 c0             	add    %rax,%rax
  8004213c4f:	48 01 d0             	add    %rdx,%rax
  8004213c52:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c56:	48 01 c8             	add    %rcx,%rax
  8004213c59:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213c5d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c61:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c65:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c69:	48 89 d0             	mov    %rdx,%rax
  8004213c6c:	48 01 c0             	add    %rax,%rax
  8004213c6f:	48 01 d0             	add    %rdx,%rax
  8004213c72:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c76:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213c7a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213c7e:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213c82:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213c86:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213c8a:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213c8e:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213c92:	48 89 d0             	mov    %rdx,%rax
  8004213c95:	48 01 c0             	add    %rax,%rax
  8004213c98:	48 01 d0             	add    %rdx,%rax
  8004213c9b:	48 c1 e0 03          	shl    $0x3,%rax
  8004213c9f:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213ca3:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213caa:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213caf:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213cb3:	e9 a4 03 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_sf:
			*row_pc = pc;
  8004213cb8:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213cbc:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213cc0:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213cc3:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213cc7:	48 89 c7             	mov    %rax,%rdi
  8004213cca:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213cd1:	00 00 00 
  8004213cd4:	ff d0                	callq  *%rax
  8004213cd6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213cda:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213cde:	48 89 c7             	mov    %rax,%rdi
  8004213ce1:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  8004213ce8:	00 00 00 
  8004213ceb:	ff d0                	callq  *%rax
  8004213ced:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213cf1:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cf5:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213cf8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213cfc:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_regnum = reg;
  8004213d00:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d04:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213d08:	66 89 50 02          	mov    %dx,0x2(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213d0c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d10:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213d17:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213d1c:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213d20:	e9 37 03 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_def_cfa_offset_sf:
			*row_pc = pc;
  8004213d25:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d29:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d2d:	48 89 10             	mov    %rdx,(%rax)
			soff = _dwarf_decode_sleb128(&p);
  8004213d30:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d34:	48 89 c7             	mov    %rax,%rdi
  8004213d37:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  8004213d3e:	00 00 00 
  8004213d41:	ff d0                	callq  *%rax
  8004213d43:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CFA.dw_offset_relevant = 1;
  8004213d47:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d4b:	c6 00 01             	movb   $0x1,(%rax)
			CFA.dw_value_type = DW_EXPR_OFFSET;
  8004213d4e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d52:	c6 40 01 00          	movb   $0x0,0x1(%rax)
			CFA.dw_offset_or_block_len = soff * daf;
  8004213d56:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213d5a:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  8004213d61:	48 0f af 55 b8       	imul   -0x48(%rbp),%rdx
  8004213d66:	48 89 50 08          	mov    %rdx,0x8(%rax)
			break;
  8004213d6a:	e9 ed 02 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset:
			*row_pc = pc;
  8004213d6f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213d73:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213d77:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213d7a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d7e:	48 89 c7             	mov    %rax,%rdi
  8004213d81:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213d88:	00 00 00 
  8004213d8b:	ff d0                	callq  *%rax
  8004213d8d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			uoff = _dwarf_decode_uleb128(&p);
  8004213d91:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213d95:	48 89 c7             	mov    %rax,%rdi
  8004213d98:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213d9f:	00 00 00 
  8004213da2:	ff d0                	callq  *%rax
  8004213da4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213da8:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dac:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213db0:	0f b7 c0             	movzwl %ax,%eax
  8004213db3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213db7:	77 0c                	ja     8004213dc5 <_dwarf_frame_run_inst+0xb2a>
  8004213db9:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213dc0:	e9 a5 02 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213dc5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213dc9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213dcd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213dd1:	48 89 d0             	mov    %rdx,%rax
  8004213dd4:	48 01 c0             	add    %rax,%rax
  8004213dd7:	48 01 d0             	add    %rdx,%rax
  8004213dda:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dde:	48 01 c8             	add    %rcx,%rax
  8004213de1:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213de4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213de8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213dec:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213df0:	48 89 d0             	mov    %rdx,%rax
  8004213df3:	48 01 c0             	add    %rax,%rax
  8004213df6:	48 01 d0             	add    %rdx,%rax
  8004213df9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213dfd:	48 01 c8             	add    %rcx,%rax
  8004213e00:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213e04:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e08:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e0c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e10:	48 89 d0             	mov    %rdx,%rax
  8004213e13:	48 01 c0             	add    %rax,%rax
  8004213e16:	48 01 d0             	add    %rdx,%rax
  8004213e19:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e1d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e21:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213e25:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213e29:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = uoff * daf;
  8004213e2d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e31:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213e35:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213e39:	48 89 d0             	mov    %rdx,%rax
  8004213e3c:	48 01 c0             	add    %rax,%rax
  8004213e3f:	48 01 d0             	add    %rdx,%rax
  8004213e42:	48 c1 e0 03          	shl    $0x3,%rax
  8004213e46:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213e4a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213e51:	48 0f af 45 c8       	imul   -0x38(%rbp),%rax
  8004213e56:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213e5a:	e9 fd 01 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_offset_sf:
			*row_pc = pc;
  8004213e5f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213e63:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213e67:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213e6a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e6e:	48 89 c7             	mov    %rax,%rdi
  8004213e71:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213e78:	00 00 00 
  8004213e7b:	ff d0                	callq  *%rax
  8004213e7d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			soff = _dwarf_decode_sleb128(&p);
  8004213e81:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213e85:	48 89 c7             	mov    %rax,%rdi
  8004213e88:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  8004213e8f:	00 00 00 
  8004213e92:	ff d0                	callq  *%rax
  8004213e94:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213e98:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213e9c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213ea0:	0f b7 c0             	movzwl %ax,%eax
  8004213ea3:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213ea7:	77 0c                	ja     8004213eb5 <_dwarf_frame_run_inst+0xc1a>
  8004213ea9:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213eb0:	e9 b5 01 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 1;
  8004213eb5:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213eb9:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213ebd:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ec1:	48 89 d0             	mov    %rdx,%rax
  8004213ec4:	48 01 c0             	add    %rax,%rax
  8004213ec7:	48 01 d0             	add    %rdx,%rax
  8004213eca:	48 c1 e0 03          	shl    $0x3,%rax
  8004213ece:	48 01 c8             	add    %rcx,%rax
  8004213ed1:	c6 00 01             	movb   $0x1,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_OFFSET;
  8004213ed4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ed8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213edc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213ee0:	48 89 d0             	mov    %rdx,%rax
  8004213ee3:	48 01 c0             	add    %rax,%rax
  8004213ee6:	48 01 d0             	add    %rdx,%rax
  8004213ee9:	48 c1 e0 03          	shl    $0x3,%rax
  8004213eed:	48 01 c8             	add    %rcx,%rax
  8004213ef0:	c6 40 01 01          	movb   $0x1,0x1(%rax)
			RL[reg].dw_regnum = dbg->dbg_frame_cfa_value;
  8004213ef4:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213ef8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213efc:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f00:	48 89 d0             	mov    %rdx,%rax
  8004213f03:	48 01 c0             	add    %rax,%rax
  8004213f06:	48 01 d0             	add    %rdx,%rax
  8004213f09:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f0d:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f11:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  8004213f15:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004213f19:	66 89 42 02          	mov    %ax,0x2(%rdx)
			RL[reg].dw_offset_or_block_len = soff * daf;
  8004213f1d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f21:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f25:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f29:	48 89 d0             	mov    %rdx,%rax
  8004213f2c:	48 01 c0             	add    %rax,%rax
  8004213f2f:	48 01 d0             	add    %rdx,%rax
  8004213f32:	48 c1 e0 03          	shl    $0x3,%rax
  8004213f36:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004213f3a:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004213f41:	48 0f af 45 b8       	imul   -0x48(%rbp),%rax
  8004213f46:	48 89 42 08          	mov    %rax,0x8(%rdx)
			break;
  8004213f4a:	e9 0d 01 00 00       	jmpq   800421405c <_dwarf_frame_run_inst+0xdc1>
		case DW_CFA_val_expression:
			*row_pc = pc;
  8004213f4f:	48 8b 45 20          	mov    0x20(%rbp),%rax
  8004213f53:	48 8b 55 10          	mov    0x10(%rbp),%rdx
  8004213f57:	48 89 10             	mov    %rdx,(%rax)
			reg = _dwarf_decode_uleb128(&p);
  8004213f5a:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213f5e:	48 89 c7             	mov    %rax,%rdi
  8004213f61:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213f68:	00 00 00 
  8004213f6b:	ff d0                	callq  *%rax
  8004213f6d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
			CHECK_TABLE_SIZE(reg);
  8004213f71:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f75:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004213f79:	0f b7 c0             	movzwl %ax,%eax
  8004213f7c:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004213f80:	77 0c                	ja     8004213f8e <_dwarf_frame_run_inst+0xcf3>
  8004213f82:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%rbp)
  8004213f89:	e9 dc 00 00 00       	jmpq   800421406a <_dwarf_frame_run_inst+0xdcf>
			RL[reg].dw_offset_relevant = 0;
  8004213f8e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213f92:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213f96:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213f9a:	48 89 d0             	mov    %rdx,%rax
  8004213f9d:	48 01 c0             	add    %rax,%rax
  8004213fa0:	48 01 d0             	add    %rdx,%rax
  8004213fa3:	48 c1 e0 03          	shl    $0x3,%rax
  8004213fa7:	48 01 c8             	add    %rcx,%rax
  8004213faa:	c6 00 00             	movb   $0x0,(%rax)
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
  8004213fad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fb1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213fb5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213fb9:	48 89 d0             	mov    %rdx,%rax
  8004213fbc:	48 01 c0             	add    %rax,%rax
  8004213fbf:	48 01 d0             	add    %rdx,%rax
  8004213fc2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213fc6:	48 01 c8             	add    %rcx,%rax
  8004213fc9:	c6 40 01 03          	movb   $0x3,0x1(%rax)
			RL[reg].dw_offset_or_block_len =
  8004213fcd:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004213fd1:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004213fd5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004213fd9:	48 89 d0             	mov    %rdx,%rax
  8004213fdc:	48 01 c0             	add    %rax,%rax
  8004213fdf:	48 01 d0             	add    %rdx,%rax
  8004213fe2:	48 c1 e0 03          	shl    $0x3,%rax
  8004213fe6:	48 8d 1c 01          	lea    (%rcx,%rax,1),%rbx
				_dwarf_decode_uleb128(&p);
  8004213fea:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004213fee:	48 89 c7             	mov    %rax,%rdi
  8004213ff1:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004213ff8:	00 00 00 
  8004213ffb:	ff d0                	callq  *%rax
			*row_pc = pc;
			reg = _dwarf_decode_uleb128(&p);
			CHECK_TABLE_SIZE(reg);
			RL[reg].dw_offset_relevant = 0;
			RL[reg].dw_value_type = DW_EXPR_VAL_EXPRESSION;
			RL[reg].dw_offset_or_block_len =
  8004213ffd:	48 89 43 08          	mov    %rax,0x8(%rbx)
				_dwarf_decode_uleb128(&p);
			RL[reg].dw_block_ptr = p;
  8004214001:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  8004214005:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214009:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421400d:	48 89 d0             	mov    %rdx,%rax
  8004214010:	48 01 c0             	add    %rax,%rax
  8004214013:	48 01 d0             	add    %rdx,%rax
  8004214016:	48 c1 e0 03          	shl    $0x3,%rax
  800421401a:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  800421401e:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214022:	48 89 42 10          	mov    %rax,0x10(%rdx)
			p += RL[reg].dw_offset_or_block_len;
  8004214026:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  800421402a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  800421402e:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004214032:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214036:	48 89 d0             	mov    %rdx,%rax
  8004214039:	48 01 c0             	add    %rax,%rax
  800421403c:	48 01 d0             	add    %rdx,%rax
  800421403f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214043:	48 01 f0             	add    %rsi,%rax
  8004214046:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421404a:	48 01 c8             	add    %rcx,%rax
  800421404d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
			break;
  8004214051:	eb 09                	jmp    800421405c <_dwarf_frame_run_inst+0xdc1>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_INSTR_EXEC_ERROR);
			ret = DW_DLE_FRAME_INSTR_EXEC_ERROR;
  8004214053:	c7 45 ec 15 00 00 00 	movl   $0x15,-0x14(%rbp)
			goto program_done;
  800421405a:	eb 0e                	jmp    800421406a <_dwarf_frame_run_inst+0xdcf>
	/* Save a copy of the table as initial state. */
	_dwarf_frame_regtable_copy(dbg, &init_rt, rt, error);
	p = insts;
	pe = p + len;

	while (p < pe) {
  800421405c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214060:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214064:	0f 82 b8 f2 ff ff    	jb     8004213322 <_dwarf_frame_run_inst+0x87>
			goto program_done;
		}
	}

program_done:
	return (ret);
  800421406a:	8b 45 ec             	mov    -0x14(%rbp),%eax
#undef  CFA
#undef  INITCFA
#undef  RL
#undef  INITRL
#undef  CHECK_TABLE_SIZE
}
  800421406d:	48 81 c4 88 00 00 00 	add    $0x88,%rsp
  8004214074:	5b                   	pop    %rbx
  8004214075:	5d                   	pop    %rbp
  8004214076:	c3                   	retq   

0000008004214077 <_dwarf_frame_get_internal_table>:
int
_dwarf_frame_get_internal_table(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_req, Dwarf_Regtable3 **ret_rt,
				Dwarf_Addr *ret_row_pc,
				Dwarf_Error *error)
{
  8004214077:	55                   	push   %rbp
  8004214078:	48 89 e5             	mov    %rsp,%rbp
  800421407b:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  800421407f:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214083:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214087:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  800421408b:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  800421408f:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
  8004214093:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Cie cie;
	Dwarf_Regtable3 *rt;
	Dwarf_Addr row_pc;
	int i, ret;

	assert(ret_rt != NULL);
  8004214097:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  800421409c:	75 35                	jne    80042140d3 <_dwarf_frame_get_internal_table+0x5c>
  800421409e:	48 b9 98 04 22 04 80 	movabs $0x8004220498,%rcx
  80042140a5:	00 00 00 
  80042140a8:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  80042140af:	00 00 00 
  80042140b2:	be 83 01 00 00       	mov    $0x183,%esi
  80042140b7:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  80042140be:	00 00 00 
  80042140c1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042140c6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042140cd:	00 00 00 
  80042140d0:	41 ff d0             	callq  *%r8

	//dbg = fde->fde_dbg;
	assert(dbg != NULL);
  80042140d3:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  80042140d8:	75 35                	jne    800421410f <_dwarf_frame_get_internal_table+0x98>
  80042140da:	48 b9 a7 04 22 04 80 	movabs $0x80042204a7,%rcx
  80042140e1:	00 00 00 
  80042140e4:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  80042140eb:	00 00 00 
  80042140ee:	be 86 01 00 00       	mov    $0x186,%esi
  80042140f3:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  80042140fa:	00 00 00 
  80042140fd:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214102:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214109:	00 00 00 
  800421410c:	41 ff d0             	callq  *%r8

	rt = dbg->dbg_internal_reg_table;
  800421410f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214113:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004214117:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

	/* Clear the content of regtable from previous run. */
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
  800421411b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421411f:	ba 18 00 00 00       	mov    $0x18,%edx
  8004214124:	be 00 00 00 00       	mov    $0x0,%esi
  8004214129:	48 89 c7             	mov    %rax,%rdi
  800421412c:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004214133:	00 00 00 
  8004214136:	ff d0                	callq  *%rax
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
  8004214138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421413c:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  8004214140:	0f b7 d0             	movzwl %ax,%edx
  8004214143:	48 89 d0             	mov    %rdx,%rax
  8004214146:	48 01 c0             	add    %rax,%rax
  8004214149:	48 01 d0             	add    %rdx,%rax
  800421414c:	48 c1 e0 03          	shl    $0x3,%rax
  8004214150:	48 89 c2             	mov    %rax,%rdx
  8004214153:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214157:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421415b:	be 00 00 00 00       	mov    $0x0,%esi
  8004214160:	48 89 c7             	mov    %rax,%rdi
  8004214163:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  800421416a:	00 00 00 
  800421416d:	ff d0                	callq  *%rax
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  800421416f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004214176:	eb 2f                	jmp    80042141a7 <_dwarf_frame_get_internal_table+0x130>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;
  8004214178:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421417c:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214180:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214183:	48 63 d0             	movslq %eax,%rdx
  8004214186:	48 89 d0             	mov    %rdx,%rax
  8004214189:	48 01 c0             	add    %rax,%rax
  800421418c:	48 01 d0             	add    %rdx,%rax
  800421418f:	48 c1 e0 03          	shl    $0x3,%rax
  8004214193:	48 8d 14 01          	lea    (%rcx,%rax,1),%rdx
  8004214197:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421419b:	0f b7 40 4a          	movzwl 0x4a(%rax),%eax
  800421419f:	66 89 42 02          	mov    %ax,0x2(%rdx)
	memset(&rt->rt3_cfa_rule, 0, sizeof(Dwarf_Regtable_Entry3));
	memset(rt->rt3_rules, 0, rt->rt3_reg_table_size *
	       sizeof(Dwarf_Regtable_Entry3));

	/* Set rules to initial values. */
	for (i = 0; i < rt->rt3_reg_table_size; i++)
  80042141a3:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042141a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042141ab:	0f b7 40 18          	movzwl 0x18(%rax),%eax
  80042141af:	0f b7 c0             	movzwl %ax,%eax
  80042141b2:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  80042141b5:	7f c1                	jg     8004214178 <_dwarf_frame_get_internal_table+0x101>
		rt->rt3_rules[i].dw_regnum = dbg->dbg_frame_rule_initial_value;

	/* Run initial instructions in CIE. */
	cie = fde->fde_cie;
  80042141b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042141bb:	48 8b 40 08          	mov    0x8(%rax),%rax
  80042141bf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	assert(cie != NULL);
  80042141c3:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  80042141c8:	75 35                	jne    80042141ff <_dwarf_frame_get_internal_table+0x188>
  80042141ca:	48 b9 b3 04 22 04 80 	movabs $0x80042204b3,%rcx
  80042141d1:	00 00 00 
  80042141d4:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  80042141db:	00 00 00 
  80042141de:	be 95 01 00 00       	mov    $0x195,%esi
  80042141e3:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  80042141ea:	00 00 00 
  80042141ed:	b8 00 00 00 00       	mov    $0x0,%eax
  80042141f2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042141f9:	00 00 00 
  80042141fc:	41 ff d0             	callq  *%r8
	ret = _dwarf_frame_run_inst(dbg, rt, cie->cie_initinst,
  80042141ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214203:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421420b:	4c 8b 40 38          	mov    0x38(%rax),%r8
  800421420f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214213:	48 8b 48 70          	mov    0x70(%rax),%rcx
  8004214217:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421421b:	48 8b 50 68          	mov    0x68(%rax),%rdx
  800421421f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  8004214223:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214227:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
  800421422b:	48 89 7c 24 18       	mov    %rdi,0x18(%rsp)
  8004214230:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
  8004214234:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004214239:	48 c7 44 24 08 ff ff 	movq   $0xffffffffffffffff,0x8(%rsp)
  8004214240:	ff ff 
  8004214242:	48 c7 04 24 00 00 00 	movq   $0x0,(%rsp)
  8004214249:	00 
  800421424a:	48 89 c7             	mov    %rax,%rdi
  800421424d:	48 b8 9b 32 21 04 80 	movabs $0x800421329b,%rax
  8004214254:	00 00 00 
  8004214257:	ff d0                	callq  *%rax
  8004214259:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    cie->cie_instlen, cie->cie_caf,
				    cie->cie_daf, 0, ~0ULL,
				    &row_pc, error);
	if (ret != DW_DLE_NONE)
  800421425c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  8004214260:	74 08                	je     800421426a <_dwarf_frame_get_internal_table+0x1f3>
		return (ret);
  8004214262:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004214265:	e9 98 00 00 00       	jmpq   8004214302 <_dwarf_frame_get_internal_table+0x28b>
	/* Run instructions in FDE. */
	if (pc_req >= fde->fde_initloc) {
  800421426a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421426e:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214272:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
  8004214276:	77 6f                	ja     80042142e7 <_dwarf_frame_get_internal_table+0x270>
		ret = _dwarf_frame_run_inst(dbg, rt, fde->fde_inst,
  8004214278:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421427c:	48 8b 78 30          	mov    0x30(%rax),%rdi
  8004214280:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214284:	4c 8b 48 40          	mov    0x40(%rax),%r9
  8004214288:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421428c:	4c 8b 50 38          	mov    0x38(%rax),%r10
  8004214290:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214294:	48 8b 48 58          	mov    0x58(%rax),%rcx
  8004214298:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421429c:	48 8b 50 50          	mov    0x50(%rax),%rdx
  80042142a0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
  80042142a4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042142a8:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
  80042142ac:	4c 89 44 24 18       	mov    %r8,0x18(%rsp)
  80042142b1:	4c 8d 45 d8          	lea    -0x28(%rbp),%r8
  80042142b5:	4c 89 44 24 10       	mov    %r8,0x10(%rsp)
  80042142ba:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
  80042142be:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042142c3:	48 89 3c 24          	mov    %rdi,(%rsp)
  80042142c7:	4d 89 d0             	mov    %r10,%r8
  80042142ca:	48 89 c7             	mov    %rax,%rdi
  80042142cd:	48 b8 9b 32 21 04 80 	movabs $0x800421329b,%rax
  80042142d4:	00 00 00 
  80042142d7:	ff d0                	callq  *%rax
  80042142d9:	89 45 e4             	mov    %eax,-0x1c(%rbp)
					    fde->fde_instlen, cie->cie_caf,
					    cie->cie_daf,
					    fde->fde_initloc, pc_req,
					    &row_pc, error);
		if (ret != DW_DLE_NONE)
  80042142dc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042142e0:	74 05                	je     80042142e7 <_dwarf_frame_get_internal_table+0x270>
			return (ret);
  80042142e2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042142e5:	eb 1b                	jmp    8004214302 <_dwarf_frame_get_internal_table+0x28b>
	}

	*ret_rt = rt;
  80042142e7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042142eb:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042142ef:	48 89 10             	mov    %rdx,(%rax)
	*ret_row_pc = row_pc;
  80042142f2:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042142f6:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042142fa:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  80042142fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214302:	c9                   	leaveq 
  8004214303:	c3                   	retq   

0000008004214304 <dwarf_get_fde_info_for_all_regs>:
int
dwarf_get_fde_info_for_all_regs(Dwarf_Debug dbg, Dwarf_Fde fde,
				Dwarf_Addr pc_requested,
				Dwarf_Regtable *reg_table, Dwarf_Addr *row_pc,
				Dwarf_Error *error)
{
  8004214304:	55                   	push   %rbp
  8004214305:	48 89 e5             	mov    %rsp,%rbp
  8004214308:	48 83 ec 50          	sub    $0x50,%rsp
  800421430c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004214310:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004214314:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004214318:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  800421431c:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
  8004214320:	4c 89 4d b0          	mov    %r9,-0x50(%rbp)
	Dwarf_Regtable3 *rt;
	Dwarf_Addr pc;
	Dwarf_Half cfa;
	int i, ret;

	if (fde == NULL || reg_table == NULL) {
  8004214324:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004214329:	74 07                	je     8004214332 <dwarf_get_fde_info_for_all_regs+0x2e>
  800421432b:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  8004214330:	75 0a                	jne    800421433c <dwarf_get_fde_info_for_all_regs+0x38>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  8004214332:	b8 01 00 00 00       	mov    $0x1,%eax
  8004214337:	e9 eb 02 00 00       	jmpq   8004214627 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	assert(dbg != NULL);
  800421433c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004214341:	75 35                	jne    8004214378 <dwarf_get_fde_info_for_all_regs+0x74>
  8004214343:	48 b9 a7 04 22 04 80 	movabs $0x80042204a7,%rcx
  800421434a:	00 00 00 
  800421434d:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  8004214354:	00 00 00 
  8004214357:	be bf 01 00 00       	mov    $0x1bf,%esi
  800421435c:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  8004214363:	00 00 00 
  8004214366:	b8 00 00 00 00       	mov    $0x0,%eax
  800421436b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004214372:	00 00 00 
  8004214375:	41 ff d0             	callq  *%r8

	if (pc_requested < fde->fde_initloc ||
  8004214378:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421437c:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004214380:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  8004214384:	77 19                	ja     800421439f <dwarf_get_fde_info_for_all_regs+0x9b>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
  8004214386:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421438a:	48 8b 50 30          	mov    0x30(%rax),%rdx
  800421438e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004214392:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214396:	48 01 d0             	add    %rdx,%rax
		return (DW_DLV_ERROR);
	}

	assert(dbg != NULL);

	if (pc_requested < fde->fde_initloc ||
  8004214399:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
  800421439d:	77 0a                	ja     80042143a9 <dwarf_get_fde_info_for_all_regs+0xa5>
	    pc_requested >= fde->fde_initloc + fde->fde_adrange) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_PC_NOT_IN_FDE_RANGE);
		return (DW_DLV_ERROR);
  800421439f:	b8 01 00 00 00       	mov    $0x1,%eax
  80042143a4:	e9 7e 02 00 00       	jmpq   8004214627 <dwarf_get_fde_info_for_all_regs+0x323>
	}

	ret = _dwarf_frame_get_internal_table(dbg, fde, pc_requested, &rt, &pc,
  80042143a9:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
  80042143ad:	48 8d 7d e0          	lea    -0x20(%rbp),%rdi
  80042143b1:	48 8d 4d e8          	lea    -0x18(%rbp),%rcx
  80042143b5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042143b9:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042143bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042143c1:	4d 89 c1             	mov    %r8,%r9
  80042143c4:	49 89 f8             	mov    %rdi,%r8
  80042143c7:	48 89 c7             	mov    %rax,%rdi
  80042143ca:	48 b8 77 40 21 04 80 	movabs $0x8004214077,%rax
  80042143d1:	00 00 00 
  80042143d4:	ff d0                	callq  *%rax
  80042143d6:	89 45 f8             	mov    %eax,-0x8(%rbp)
					      error);
	if (ret != DW_DLE_NONE)
  80042143d9:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  80042143dd:	74 0a                	je     80042143e9 <dwarf_get_fde_info_for_all_regs+0xe5>
		return (DW_DLV_ERROR);
  80042143df:	b8 01 00 00 00       	mov    $0x1,%eax
  80042143e4:	e9 3e 02 00 00       	jmpq   8004214627 <dwarf_get_fde_info_for_all_regs+0x323>
	/*
	 * Copy the CFA rule to the column intended for holding the CFA,
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
  80042143e9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042143ed:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  80042143f1:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
	if (cfa < DW_REG_TABLE_SIZE) {
  80042143f5:	66 83 7d f6 41       	cmpw   $0x41,-0xa(%rbp)
  80042143fa:	0f 87 b1 00 00 00    	ja     80042144b1 <dwarf_get_fde_info_for_all_regs+0x1ad>
		reg_table->rules[cfa].dw_offset_relevant =
  8004214400:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
			CFA.dw_offset_relevant;
  8004214404:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214408:	0f b6 00             	movzbl (%rax),%eax
	 * if it's within the range of regtable.
	 */
#define CFA rt->rt3_cfa_rule
	cfa = dbg->dbg_frame_cfa_value;
	if (cfa < DW_REG_TABLE_SIZE) {
		reg_table->rules[cfa].dw_offset_relevant =
  800421440b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421440f:	48 63 c9             	movslq %ecx,%rcx
  8004214412:	48 83 c1 01          	add    $0x1,%rcx
  8004214416:	48 c1 e1 04          	shl    $0x4,%rcx
  800421441a:	48 01 ca             	add    %rcx,%rdx
  800421441d:	88 02                	mov    %al,(%rdx)
			CFA.dw_offset_relevant;
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
  800421441f:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214423:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214427:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  800421442b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421442f:	48 63 c9             	movslq %ecx,%rcx
  8004214432:	48 83 c1 01          	add    $0x1,%rcx
  8004214436:	48 c1 e1 04          	shl    $0x4,%rcx
  800421443a:	48 01 ca             	add    %rcx,%rdx
  800421443d:	88 42 01             	mov    %al,0x1(%rdx)
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
  8004214440:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214444:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214448:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800421444c:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214450:	48 63 c9             	movslq %ecx,%rcx
  8004214453:	48 83 c1 01          	add    $0x1,%rcx
  8004214457:	48 c1 e1 04          	shl    $0x4,%rcx
  800421445b:	48 01 ca             	add    %rcx,%rdx
  800421445e:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
  8004214462:	0f b7 4d f6          	movzwl -0xa(%rbp),%ecx
  8004214466:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421446a:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421446e:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214472:	48 63 c9             	movslq %ecx,%rcx
  8004214475:	48 83 c1 01          	add    $0x1,%rcx
  8004214479:	48 c1 e1 04          	shl    $0x4,%rcx
  800421447d:	48 01 ca             	add    %rcx,%rdx
  8004214480:	48 83 c2 08          	add    $0x8,%rdx
  8004214484:	48 89 02             	mov    %rax,(%rdx)
		reg_table->cfa_rule = reg_table->rules[cfa];
  8004214487:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  800421448b:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  800421448f:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214493:	48 63 d2             	movslq %edx,%rdx
  8004214496:	48 83 c2 01          	add    $0x1,%rdx
  800421449a:	48 c1 e2 04          	shl    $0x4,%rdx
  800421449e:	48 01 d0             	add    %rdx,%rax
  80042144a1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042144a5:	48 8b 00             	mov    (%rax),%rax
  80042144a8:	48 89 01             	mov    %rax,(%rcx)
  80042144ab:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  80042144af:	eb 3c                	jmp    80042144ed <dwarf_get_fde_info_for_all_regs+0x1e9>
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
		    CFA.dw_offset_relevant;
  80042144b1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144b5:	0f b6 10             	movzbl (%rax),%edx
		reg_table->rules[cfa].dw_value_type = CFA.dw_value_type;
		reg_table->rules[cfa].dw_regnum = CFA.dw_regnum;
		reg_table->rules[cfa].dw_offset = CFA.dw_offset_or_block_len;
		reg_table->cfa_rule = reg_table->rules[cfa];
	} else {
		reg_table->cfa_rule.dw_offset_relevant =
  80042144b8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144bc:	88 10                	mov    %dl,(%rax)
		    CFA.dw_offset_relevant;
		reg_table->cfa_rule.dw_value_type = CFA.dw_value_type;
  80042144be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144c2:	0f b6 50 01          	movzbl 0x1(%rax),%edx
  80042144c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144ca:	88 50 01             	mov    %dl,0x1(%rax)
		reg_table->cfa_rule.dw_regnum = CFA.dw_regnum;
  80042144cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144d1:	0f b7 50 02          	movzwl 0x2(%rax),%edx
  80042144d5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144d9:	66 89 50 02          	mov    %dx,0x2(%rax)
		reg_table->cfa_rule.dw_offset = CFA.dw_offset_or_block_len;
  80042144dd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042144e1:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042144e5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042144e9:	48 89 50 08          	mov    %rdx,0x8(%rax)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042144ed:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042144f4:	e9 fd 00 00 00       	jmpq   80042145f6 <dwarf_get_fde_info_for_all_regs+0x2f2>
	     i++) {

		/* Do not overwrite CFA column */
		if (i == cfa)
  80042144f9:	0f b7 45 f6          	movzwl -0xa(%rbp),%eax
  80042144fd:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  8004214500:	75 05                	jne    8004214507 <dwarf_get_fde_info_for_all_regs+0x203>
			continue;
  8004214502:	e9 eb 00 00 00       	jmpq   80042145f2 <dwarf_get_fde_info_for_all_regs+0x2ee>

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
  8004214507:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421450b:	48 8b 48 20          	mov    0x20(%rax),%rcx
  800421450f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214512:	48 63 d0             	movslq %eax,%rdx
  8004214515:	48 89 d0             	mov    %rdx,%rax
  8004214518:	48 01 c0             	add    %rax,%rax
  800421451b:	48 01 d0             	add    %rdx,%rax
  800421451e:	48 c1 e0 03          	shl    $0x3,%rax
  8004214522:	48 01 c8             	add    %rcx,%rax
  8004214525:	0f b6 00             	movzbl (%rax),%eax

		/* Do not overwrite CFA column */
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
  8004214528:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421452c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421452f:	48 63 c9             	movslq %ecx,%rcx
  8004214532:	48 83 c1 01          	add    $0x1,%rcx
  8004214536:	48 c1 e1 04          	shl    $0x4,%rcx
  800421453a:	48 01 ca             	add    %rcx,%rdx
  800421453d:	88 02                	mov    %al,(%rdx)
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
  800421453f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214543:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214547:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421454a:	48 63 d0             	movslq %eax,%rdx
  800421454d:	48 89 d0             	mov    %rdx,%rax
  8004214550:	48 01 c0             	add    %rax,%rax
  8004214553:	48 01 d0             	add    %rdx,%rax
  8004214556:	48 c1 e0 03          	shl    $0x3,%rax
  800421455a:	48 01 c8             	add    %rcx,%rax
  800421455d:	0f b6 40 01          	movzbl 0x1(%rax),%eax
		if (i == cfa)
			continue;

		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
  8004214561:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004214565:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  8004214568:	48 63 c9             	movslq %ecx,%rcx
  800421456b:	48 83 c1 01          	add    $0x1,%rcx
  800421456f:	48 c1 e1 04          	shl    $0x4,%rcx
  8004214573:	48 01 ca             	add    %rcx,%rdx
  8004214576:	88 42 01             	mov    %al,0x1(%rdx)
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
  8004214579:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421457d:	48 8b 48 20          	mov    0x20(%rax),%rcx
  8004214581:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004214584:	48 63 d0             	movslq %eax,%rdx
  8004214587:	48 89 d0             	mov    %rdx,%rax
  800421458a:	48 01 c0             	add    %rax,%rax
  800421458d:	48 01 d0             	add    %rdx,%rax
  8004214590:	48 c1 e0 03          	shl    $0x3,%rax
  8004214594:	48 01 c8             	add    %rcx,%rax
  8004214597:	0f b7 40 02          	movzwl 0x2(%rax),%eax
  800421459b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421459f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042145a2:	48 63 c9             	movslq %ecx,%rcx
  80042145a5:	48 83 c1 01          	add    $0x1,%rcx
  80042145a9:	48 c1 e1 04          	shl    $0x4,%rcx
  80042145ad:	48 01 ca             	add    %rcx,%rdx
  80042145b0:	66 89 42 02          	mov    %ax,0x2(%rdx)
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
  80042145b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042145b8:	48 8b 48 20          	mov    0x20(%rax),%rcx
  80042145bc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042145bf:	48 63 d0             	movslq %eax,%rdx
  80042145c2:	48 89 d0             	mov    %rdx,%rax
  80042145c5:	48 01 c0             	add    %rax,%rax
  80042145c8:	48 01 d0             	add    %rdx,%rax
  80042145cb:	48 c1 e0 03          	shl    $0x3,%rax
  80042145cf:	48 01 c8             	add    %rcx,%rax
  80042145d2:	48 8b 40 08          	mov    0x8(%rax),%rax
		reg_table->rules[i].dw_offset_relevant =
			rt->rt3_rules[i].dw_offset_relevant;
		reg_table->rules[i].dw_value_type =
			rt->rt3_rules[i].dw_value_type;
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
  80042145d6:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  80042145da:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042145dd:	48 63 c9             	movslq %ecx,%rcx
  80042145e0:	48 83 c1 01          	add    $0x1,%rcx
  80042145e4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042145e8:	48 01 ca             	add    %rcx,%rdx
  80042145eb:	48 83 c2 08          	add    $0x8,%rdx
  80042145ef:	48 89 02             	mov    %rax,(%rdx)

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
	     i++) {
  80042145f2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
	}

	/*
	 * Copy other columns.
	 */
	for (i = 0; i < DW_REG_TABLE_SIZE && i < dbg->dbg_frame_rule_table_size;
  80042145f6:	83 7d fc 41          	cmpl   $0x41,-0x4(%rbp)
  80042145fa:	7f 14                	jg     8004214610 <dwarf_get_fde_info_for_all_regs+0x30c>
  80042145fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004214600:	0f b7 40 48          	movzwl 0x48(%rax),%eax
  8004214604:	0f b7 c0             	movzwl %ax,%eax
  8004214607:	3b 45 fc             	cmp    -0x4(%rbp),%eax
  800421460a:	0f 8f e9 fe ff ff    	jg     80042144f9 <dwarf_get_fde_info_for_all_regs+0x1f5>
		reg_table->rules[i].dw_regnum = rt->rt3_rules[i].dw_regnum;
		reg_table->rules[i].dw_offset =
			rt->rt3_rules[i].dw_offset_or_block_len;
	}

	if (row_pc) *row_pc = pc;
  8004214610:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
  8004214615:	74 0b                	je     8004214622 <dwarf_get_fde_info_for_all_regs+0x31e>
  8004214617:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421461b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421461f:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLV_OK);
  8004214622:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214627:	c9                   	leaveq 
  8004214628:	c3                   	retq   

0000008004214629 <_dwarf_frame_read_lsb_encoded>:

static int
_dwarf_frame_read_lsb_encoded(Dwarf_Debug dbg, uint64_t *val, uint8_t *data,
			      uint64_t *offsetp, uint8_t encode, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004214629:	55                   	push   %rbp
  800421462a:	48 89 e5             	mov    %rsp,%rbp
  800421462d:	48 83 ec 40          	sub    $0x40,%rsp
  8004214631:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004214635:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004214639:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421463d:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004214641:	44 89 c0             	mov    %r8d,%eax
  8004214644:	4c 89 4d c0          	mov    %r9,-0x40(%rbp)
  8004214648:	88 45 cc             	mov    %al,-0x34(%rbp)
	uint8_t application;

	if (encode == DW_EH_PE_omit)
  800421464b:	80 7d cc ff          	cmpb   $0xff,-0x34(%rbp)
  800421464f:	75 0a                	jne    800421465b <_dwarf_frame_read_lsb_encoded+0x32>
		return (DW_DLE_NONE);
  8004214651:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214656:	e9 e6 01 00 00       	jmpq   8004214841 <_dwarf_frame_read_lsb_encoded+0x218>

	application = encode & 0xf0;
  800421465b:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421465f:	83 e0 f0             	and    $0xfffffff0,%eax
  8004214662:	88 45 ff             	mov    %al,-0x1(%rbp)
	encode &= 0x0f;
  8004214665:	80 65 cc 0f          	andb   $0xf,-0x34(%rbp)

	switch (encode) {
  8004214669:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  800421466d:	83 f8 0c             	cmp    $0xc,%eax
  8004214670:	0f 87 72 01 00 00    	ja     80042147e8 <_dwarf_frame_read_lsb_encoded+0x1bf>
  8004214676:	89 c0                	mov    %eax,%eax
  8004214678:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421467f:	00 
  8004214680:	48 b8 c0 04 22 04 80 	movabs $0x80042204c0,%rax
  8004214687:	00 00 00 
  800421468a:	48 01 d0             	add    %rdx,%rax
  800421468d:	48 8b 00             	mov    (%rax),%rax
  8004214690:	ff e0                	jmpq   *%rax
	case DW_EH_PE_absptr:
		*val = dbg->read(data, offsetp, dbg->dbg_pointer_size);
  8004214692:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214696:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421469a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421469e:	8b 52 28             	mov    0x28(%rdx),%edx
  80042146a1:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042146a5:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042146a9:	48 89 cf             	mov    %rcx,%rdi
  80042146ac:	ff d0                	callq  *%rax
  80042146ae:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042146b2:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042146b5:	e9 35 01 00 00       	jmpq   80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_uleb128:
		*val = _dwarf_read_uleb128(data, offsetp);
  80042146ba:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042146be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042146c2:	48 89 d6             	mov    %rdx,%rsi
  80042146c5:	48 89 c7             	mov    %rax,%rdi
  80042146c8:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  80042146cf:	00 00 00 
  80042146d2:	ff d0                	callq  *%rax
  80042146d4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042146d8:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042146db:	e9 0f 01 00 00       	jmpq   80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata2:
		*val = dbg->read(data, offsetp, 2);
  80042146e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042146e4:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042146e8:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042146ec:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042146f0:	ba 02 00 00 00       	mov    $0x2,%edx
  80042146f5:	48 89 cf             	mov    %rcx,%rdi
  80042146f8:	ff d0                	callq  *%rax
  80042146fa:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042146fe:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214701:	e9 e9 00 00 00       	jmpq   80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata4:
		*val = dbg->read(data, offsetp, 4);
  8004214706:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421470a:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421470e:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214712:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214716:	ba 04 00 00 00       	mov    $0x4,%edx
  800421471b:	48 89 cf             	mov    %rcx,%rdi
  800421471e:	ff d0                	callq  *%rax
  8004214720:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214724:	48 89 02             	mov    %rax,(%rdx)
		break;
  8004214727:	e9 c3 00 00 00       	jmpq   80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_udata8:
		*val = dbg->read(data, offsetp, 8);
  800421472c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214730:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214734:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214738:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  800421473c:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214741:	48 89 cf             	mov    %rcx,%rdi
  8004214744:	ff d0                	callq  *%rax
  8004214746:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421474a:	48 89 02             	mov    %rax,(%rdx)
		break;
  800421474d:	e9 9d 00 00 00       	jmpq   80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sleb128:
		*val = _dwarf_read_sleb128(data, offsetp);
  8004214752:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214756:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421475a:	48 89 d6             	mov    %rdx,%rsi
  800421475d:	48 89 c7             	mov    %rax,%rdi
  8004214760:	48 b8 19 16 21 04 80 	movabs $0x8004211619,%rax
  8004214767:	00 00 00 
  800421476a:	ff d0                	callq  *%rax
  800421476c:	48 89 c2             	mov    %rax,%rdx
  800421476f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214773:	48 89 10             	mov    %rdx,(%rax)
		break;
  8004214776:	eb 77                	jmp    80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata2:
		*val = (int16_t) dbg->read(data, offsetp, 2);
  8004214778:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421477c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214780:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004214784:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  8004214788:	ba 02 00 00 00       	mov    $0x2,%edx
  800421478d:	48 89 cf             	mov    %rcx,%rdi
  8004214790:	ff d0                	callq  *%rax
  8004214792:	48 0f bf d0          	movswq %ax,%rdx
  8004214796:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421479a:	48 89 10             	mov    %rdx,(%rax)
		break;
  800421479d:	eb 50                	jmp    80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata4:
		*val = (int32_t) dbg->read(data, offsetp, 4);
  800421479f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147a3:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042147a7:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042147ab:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042147af:	ba 04 00 00 00       	mov    $0x4,%edx
  80042147b4:	48 89 cf             	mov    %rcx,%rdi
  80042147b7:	ff d0                	callq  *%rax
  80042147b9:	48 63 d0             	movslq %eax,%rdx
  80042147bc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042147c0:	48 89 10             	mov    %rdx,(%rax)
		break;
  80042147c3:	eb 2a                	jmp    80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	case DW_EH_PE_sdata8:
		*val = dbg->read(data, offsetp, 8);
  80042147c5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042147c9:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042147cd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042147d1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  80042147d5:	ba 08 00 00 00       	mov    $0x8,%edx
  80042147da:	48 89 cf             	mov    %rcx,%rdi
  80042147dd:	ff d0                	callq  *%rax
  80042147df:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042147e3:	48 89 02             	mov    %rax,(%rdx)
		break;
  80042147e6:	eb 07                	jmp    80042147ef <_dwarf_frame_read_lsb_encoded+0x1c6>
	default:
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  80042147e8:	b8 14 00 00 00       	mov    $0x14,%eax
  80042147ed:	eb 52                	jmp    8004214841 <_dwarf_frame_read_lsb_encoded+0x218>
	}

	if (application == DW_EH_PE_pcrel) {
  80042147ef:	80 7d ff 10          	cmpb   $0x10,-0x1(%rbp)
  80042147f3:	75 47                	jne    800421483c <_dwarf_frame_read_lsb_encoded+0x213>
		/*
		 * Value is relative to .eh_frame section virtual addr.
		 */
		switch (encode) {
  80042147f5:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  80042147f9:	83 f8 01             	cmp    $0x1,%eax
  80042147fc:	7c 3d                	jl     800421483b <_dwarf_frame_read_lsb_encoded+0x212>
  80042147fe:	83 f8 04             	cmp    $0x4,%eax
  8004214801:	7e 0a                	jle    800421480d <_dwarf_frame_read_lsb_encoded+0x1e4>
  8004214803:	83 e8 09             	sub    $0x9,%eax
  8004214806:	83 f8 03             	cmp    $0x3,%eax
  8004214809:	77 30                	ja     800421483b <_dwarf_frame_read_lsb_encoded+0x212>
  800421480b:	eb 17                	jmp    8004214824 <_dwarf_frame_read_lsb_encoded+0x1fb>
		case DW_EH_PE_uleb128:
		case DW_EH_PE_udata2:
		case DW_EH_PE_udata4:
		case DW_EH_PE_udata8:
			*val += pc;
  800421480d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214811:	48 8b 10             	mov    (%rax),%rdx
  8004214814:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214818:	48 01 c2             	add    %rax,%rdx
  800421481b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421481f:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214822:	eb 18                	jmp    800421483c <_dwarf_frame_read_lsb_encoded+0x213>
		case DW_EH_PE_sleb128:
		case DW_EH_PE_sdata2:
		case DW_EH_PE_sdata4:
		case DW_EH_PE_sdata8:
			*val = pc + (int64_t) *val;
  8004214824:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214828:	48 8b 10             	mov    (%rax),%rdx
  800421482b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421482f:	48 01 c2             	add    %rax,%rdx
  8004214832:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004214836:	48 89 10             	mov    %rdx,(%rax)
			break;
  8004214839:	eb 01                	jmp    800421483c <_dwarf_frame_read_lsb_encoded+0x213>
		default:
			/* DW_EH_PE_absptr is absolute value. */
			break;
  800421483b:	90                   	nop
		}
	}

	/* XXX Applications other than DW_EH_PE_pcrel are not handled. */

	return (DW_DLE_NONE);
  800421483c:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214841:	c9                   	leaveq 
  8004214842:	c3                   	retq   

0000008004214843 <_dwarf_frame_parse_lsb_cie_augment>:

static int
_dwarf_frame_parse_lsb_cie_augment(Dwarf_Debug dbg, Dwarf_Cie cie,
				   Dwarf_Error *error)
{
  8004214843:	55                   	push   %rbp
  8004214844:	48 89 e5             	mov    %rsp,%rbp
  8004214847:	48 83 ec 50          	sub    $0x50,%rsp
  800421484b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421484f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214853:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
	uint8_t *aug_p, *augdata_p;
	uint64_t val, offset;
	uint8_t encode;
	int ret;

	assert(cie->cie_augment != NULL && *cie->cie_augment == 'z');
  8004214857:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421485b:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421485f:	48 85 c0             	test   %rax,%rax
  8004214862:	74 0f                	je     8004214873 <_dwarf_frame_parse_lsb_cie_augment+0x30>
  8004214864:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214868:	48 8b 40 28          	mov    0x28(%rax),%rax
  800421486c:	0f b6 00             	movzbl (%rax),%eax
  800421486f:	3c 7a                	cmp    $0x7a,%al
  8004214871:	74 35                	je     80042148a8 <_dwarf_frame_parse_lsb_cie_augment+0x65>
  8004214873:	48 b9 28 05 22 04 80 	movabs $0x8004220528,%rcx
  800421487a:	00 00 00 
  800421487d:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  8004214884:	00 00 00 
  8004214887:	be 4a 02 00 00       	mov    $0x24a,%esi
  800421488c:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  8004214893:	00 00 00 
  8004214896:	b8 00 00 00 00       	mov    $0x0,%eax
  800421489b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042148a2:	00 00 00 
  80042148a5:	41 ff d0             	callq  *%r8
	/*
	 * Here we're only interested in the presence of augment 'R'
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
  80042148a8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148ac:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042148b0:	48 83 c0 01          	add    $0x1,%rax
  80042148b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	augdata_p = cie->cie_augdata;
  80042148b8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  80042148bc:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042148c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	while (*aug_p != '\0') {
  80042148c4:	e9 af 00 00 00       	jmpq   8004214978 <_dwarf_frame_parse_lsb_cie_augment+0x135>
		switch (*aug_p) {
  80042148c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042148cd:	0f b6 00             	movzbl (%rax),%eax
  80042148d0:	0f b6 c0             	movzbl %al,%eax
  80042148d3:	83 f8 50             	cmp    $0x50,%eax
  80042148d6:	74 18                	je     80042148f0 <_dwarf_frame_parse_lsb_cie_augment+0xad>
  80042148d8:	83 f8 52             	cmp    $0x52,%eax
  80042148db:	74 77                	je     8004214954 <_dwarf_frame_parse_lsb_cie_augment+0x111>
  80042148dd:	83 f8 4c             	cmp    $0x4c,%eax
  80042148e0:	0f 85 86 00 00 00    	jne    800421496c <_dwarf_frame_parse_lsb_cie_augment+0x129>
		case 'L':
			/* Skip one augment in augment data. */
			augdata_p++;
  80042148e6:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
			break;
  80042148eb:	e9 83 00 00 00       	jmpq   8004214973 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'P':
			/* Skip two augments in augment data. */
			encode = *augdata_p++;
  80042148f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042148f4:	48 8d 50 01          	lea    0x1(%rax),%rdx
  80042148f8:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  80042148fc:	0f b6 00             	movzbl (%rax),%eax
  80042148ff:	88 45 ef             	mov    %al,-0x11(%rbp)
			offset = 0;
  8004214902:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  8004214909:	00 
			ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  800421490a:	44 0f b6 45 ef       	movzbl -0x11(%rbp),%r8d
  800421490f:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
  8004214913:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004214917:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
  800421491b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421491f:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004214923:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214927:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  800421492d:	48 89 c7             	mov    %rax,%rdi
  8004214930:	48 b8 29 46 21 04 80 	movabs $0x8004214629,%rax
  8004214937:	00 00 00 
  800421493a:	ff d0                	callq  *%rax
  800421493c:	89 45 e8             	mov    %eax,-0x18(%rbp)
							    augdata_p, &offset, encode, 0, error);
			if (ret != DW_DLE_NONE)
  800421493f:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  8004214943:	74 05                	je     800421494a <_dwarf_frame_parse_lsb_cie_augment+0x107>
				return (ret);
  8004214945:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004214948:	eb 42                	jmp    800421498c <_dwarf_frame_parse_lsb_cie_augment+0x149>
			augdata_p += offset;
  800421494a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421494e:	48 01 45 f0          	add    %rax,-0x10(%rbp)
			break;
  8004214952:	eb 1f                	jmp    8004214973 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		case 'R':
			cie->cie_fde_encode = *augdata_p++;
  8004214954:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004214958:	48 8d 50 01          	lea    0x1(%rax),%rdx
  800421495c:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
  8004214960:	0f b6 10             	movzbl (%rax),%edx
  8004214963:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214967:	88 50 60             	mov    %dl,0x60(%rax)
			break;
  800421496a:	eb 07                	jmp    8004214973 <_dwarf_frame_parse_lsb_cie_augment+0x130>
		default:
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
  800421496c:	b8 14 00 00 00       	mov    $0x14,%eax
  8004214971:	eb 19                	jmp    800421498c <_dwarf_frame_parse_lsb_cie_augment+0x149>
		}
		aug_p++;
  8004214973:	48 83 45 f8 01       	addq   $0x1,-0x8(%rbp)
	 * and associated CIE augment data, which describes the
	 * encoding scheme of FDE PC begin and range.
	 */
	aug_p = &cie->cie_augment[1];
	augdata_p = cie->cie_augdata;
	while (*aug_p != '\0') {
  8004214978:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421497c:	0f b6 00             	movzbl (%rax),%eax
  800421497f:	84 c0                	test   %al,%al
  8004214981:	0f 85 42 ff ff ff    	jne    80042148c9 <_dwarf_frame_parse_lsb_cie_augment+0x86>
			return (DW_DLE_FRAME_AUGMENTATION_UNKNOWN);
		}
		aug_p++;
	}

	return (DW_DLE_NONE);
  8004214987:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421498c:	c9                   	leaveq 
  800421498d:	c3                   	retq   

000000800421498e <_dwarf_frame_set_cie>:


static int
_dwarf_frame_set_cie(Dwarf_Debug dbg, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, Dwarf_Cie ret_cie, Dwarf_Error *error)
{
  800421498e:	55                   	push   %rbp
  800421498f:	48 89 e5             	mov    %rsp,%rbp
  8004214992:	48 83 ec 60          	sub    $0x60,%rsp
  8004214996:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421499a:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421499e:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  80042149a2:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  80042149a6:	4c 89 45 a8          	mov    %r8,-0x58(%rbp)
	Dwarf_Cie cie;
	uint64_t length;
	int dwarf_size, ret;
	char *p;

	assert(ret_cie);
  80042149aa:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
  80042149af:	75 35                	jne    80042149e6 <_dwarf_frame_set_cie+0x58>
  80042149b1:	48 b9 5d 05 22 04 80 	movabs $0x800422055d,%rcx
  80042149b8:	00 00 00 
  80042149bb:	48 ba a7 03 22 04 80 	movabs $0x80042203a7,%rdx
  80042149c2:	00 00 00 
  80042149c5:	be 7b 02 00 00       	mov    $0x27b,%esi
  80042149ca:	48 bf bc 03 22 04 80 	movabs $0x80042203bc,%rdi
  80042149d1:	00 00 00 
  80042149d4:	b8 00 00 00 00       	mov    $0x0,%eax
  80042149d9:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042149e0:	00 00 00 
  80042149e3:	41 ff d0             	callq  *%r8
	cie = ret_cie;
  80042149e6:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042149ea:	48 89 45 e8          	mov    %rax,-0x18(%rbp)

	cie->cie_dbg = dbg;
  80042149ee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042149f2:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042149f6:	48 89 10             	mov    %rdx,(%rax)
	cie->cie_offset = *off;
  80042149f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042149fd:	48 8b 10             	mov    (%rax),%rdx
  8004214a00:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214a04:	48 89 50 10          	mov    %rdx,0x10(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214a08:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a0c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a10:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a14:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a18:	48 89 d1             	mov    %rdx,%rcx
  8004214a1b:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a1f:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214a24:	48 89 cf             	mov    %rcx,%rdi
  8004214a27:	ff d0                	callq  *%rax
  8004214a29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214a2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214a32:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214a36:	75 2e                	jne    8004214a66 <_dwarf_frame_set_cie+0xd8>
		dwarf_size = 8;
  8004214a38:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214a3f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a43:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a47:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a4b:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214a4f:	48 89 d1             	mov    %rdx,%rcx
  8004214a52:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214a56:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214a5b:	48 89 cf             	mov    %rcx,%rdi
  8004214a5e:	ff d0                	callq  *%rax
  8004214a60:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214a64:	eb 07                	jmp    8004214a6d <_dwarf_frame_set_cie+0xdf>
	} else
		dwarf_size = 4;
  8004214a66:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214a6d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a71:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214a75:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214a79:	48 8b 00             	mov    (%rax),%rax
  8004214a7c:	48 29 c2             	sub    %rax,%rdx
  8004214a7f:	48 89 d0             	mov    %rdx,%rax
  8004214a82:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214a86:	73 0a                	jae    8004214a92 <_dwarf_frame_set_cie+0x104>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214a88:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214a8d:	e9 5d 03 00 00       	jmpq   8004214def <_dwarf_frame_set_cie+0x461>
	}

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
  8004214a92:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214a96:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214a9a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214a9e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214aa2:	48 89 d1             	mov    %rdx,%rcx
  8004214aa5:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214aa8:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214aac:	48 89 cf             	mov    %rcx,%rdi
  8004214aaf:	ff d0                	callq  *%rax
	cie->cie_length = length;
  8004214ab1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ab5:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214ab9:	48 89 50 18          	mov    %rdx,0x18(%rax)

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214abd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ac1:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214ac5:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ac9:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214acd:	48 89 d1             	mov    %rdx,%rcx
  8004214ad0:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214ad4:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214ad9:	48 89 cf             	mov    %rcx,%rdi
  8004214adc:	ff d0                	callq  *%rax
  8004214ade:	89 c2                	mov    %eax,%edx
  8004214ae0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ae4:	66 89 50 20          	mov    %dx,0x20(%rax)
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214ae8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214aec:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214af0:	66 83 f8 01          	cmp    $0x1,%ax
  8004214af4:	74 26                	je     8004214b1c <_dwarf_frame_set_cie+0x18e>
  8004214af6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214afa:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214afe:	66 83 f8 03          	cmp    $0x3,%ax
  8004214b02:	74 18                	je     8004214b1c <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
  8004214b04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b08:	0f b7 40 20          	movzwl 0x20(%rax),%eax

	(void) dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size); /* Skip CIE id. */
	cie->cie_length = length;

	cie->cie_version = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
	if (cie->cie_version != 1 && cie->cie_version != 3 &&
  8004214b0c:	66 83 f8 04          	cmp    $0x4,%ax
  8004214b10:	74 0a                	je     8004214b1c <_dwarf_frame_set_cie+0x18e>
	    cie->cie_version != 4) {
		DWARF_SET_ERROR(dbg, error, DW_DLE_FRAME_VERSION_BAD);
		return (DW_DLE_FRAME_VERSION_BAD);
  8004214b12:	b8 16 00 00 00       	mov    $0x16,%eax
  8004214b17:	e9 d3 02 00 00       	jmpq   8004214def <_dwarf_frame_set_cie+0x461>
	}

	cie->cie_augment = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214b1c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b20:	48 8b 10             	mov    (%rax),%rdx
  8004214b23:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b27:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214b2b:	48 01 d0             	add    %rdx,%rax
  8004214b2e:	48 89 c2             	mov    %rax,%rdx
  8004214b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b35:	48 89 50 28          	mov    %rdx,0x28(%rax)
	p = (char *)dbg->dbg_eh_offset;
  8004214b39:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214b3d:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214b41:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	while (p[(*off)++] != '\0')
  8004214b45:	90                   	nop
  8004214b46:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214b4a:	48 8b 00             	mov    (%rax),%rax
  8004214b4d:	48 8d 48 01          	lea    0x1(%rax),%rcx
  8004214b51:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214b55:	48 89 0a             	mov    %rcx,(%rdx)
  8004214b58:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004214b5c:	48 01 d0             	add    %rdx,%rax
  8004214b5f:	0f b6 00             	movzbl (%rax),%eax
  8004214b62:	84 c0                	test   %al,%al
  8004214b64:	75 e0                	jne    8004214b46 <_dwarf_frame_set_cie+0x1b8>
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
  8004214b66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b6a:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214b6e:	0f b6 00             	movzbl (%rax),%eax
  8004214b71:	84 c0                	test   %al,%al
  8004214b73:	74 48                	je     8004214bbd <_dwarf_frame_set_cie+0x22f>
  8004214b75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b79:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214b7d:	0f b6 00             	movzbl (%rax),%eax
  8004214b80:	3c 7a                	cmp    $0x7a,%al
  8004214b82:	74 39                	je     8004214bbd <_dwarf_frame_set_cie+0x22f>
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214b84:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214b88:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214b8c:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214b90:	75 07                	jne    8004214b99 <_dwarf_frame_set_cie+0x20b>
  8004214b92:	b8 04 00 00 00       	mov    $0x4,%eax
  8004214b97:	eb 05                	jmp    8004214b9e <_dwarf_frame_set_cie+0x210>
  8004214b99:	b8 0c 00 00 00       	mov    $0xc,%eax
  8004214b9e:	48 01 c2             	add    %rax,%rdx
			cie->cie_length;
  8004214ba1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ba5:	48 8b 40 18          	mov    0x18(%rax),%rax
	while (p[(*off)++] != '\0')
		;

	/* We only recognize normal .dwarf_frame and GNU .eh_frame sections. */
	if (*cie->cie_augment != 0 && *cie->cie_augment != 'z') {
		*off = cie->cie_offset + ((dwarf_size == 4) ? 4 : 12) +
  8004214ba9:	48 01 c2             	add    %rax,%rdx
  8004214bac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214bb0:	48 89 10             	mov    %rdx,(%rax)
			cie->cie_length;
		return (DW_DLE_NONE);
  8004214bb3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004214bb8:	e9 32 02 00 00       	jmpq   8004214def <_dwarf_frame_set_cie+0x461>
	}

	/* Optional EH Data field for .eh_frame section. */
	if (strstr((char *)cie->cie_augment, "eh") != NULL)
  8004214bbd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214bc1:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214bc5:	48 be 65 05 22 04 80 	movabs $0x8004220565,%rsi
  8004214bcc:	00 00 00 
  8004214bcf:	48 89 c7             	mov    %rax,%rdi
  8004214bd2:	48 b8 d0 0f 21 04 80 	movabs $0x8004210fd0,%rax
  8004214bd9:	00 00 00 
  8004214bdc:	ff d0                	callq  *%rax
  8004214bde:	48 85 c0             	test   %rax,%rax
  8004214be1:	74 28                	je     8004214c0b <_dwarf_frame_set_cie+0x27d>
		cie->cie_ehdata = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004214be3:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214be7:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214beb:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214bef:	8b 52 28             	mov    0x28(%rdx),%edx
  8004214bf2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004214bf6:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004214bfa:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214bfe:	48 89 cf             	mov    %rcx,%rdi
  8004214c01:	ff d0                	callq  *%rax
  8004214c03:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c07:	48 89 42 30          	mov    %rax,0x30(%rdx)
					    dbg->dbg_pointer_size);

	cie->cie_caf = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214c0b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c0f:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214c13:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214c17:	48 89 d6             	mov    %rdx,%rsi
  8004214c1a:	48 89 c7             	mov    %rax,%rdi
  8004214c1d:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004214c24:	00 00 00 
  8004214c27:	ff d0                	callq  *%rax
  8004214c29:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c2d:	48 89 42 38          	mov    %rax,0x38(%rdx)
	cie->cie_daf = _dwarf_read_sleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214c31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c35:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214c39:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214c3d:	48 89 d6             	mov    %rdx,%rsi
  8004214c40:	48 89 c7             	mov    %rax,%rdi
  8004214c43:	48 b8 19 16 21 04 80 	movabs $0x8004211619,%rax
  8004214c4a:	00 00 00 
  8004214c4d:	ff d0                	callq  *%rax
  8004214c4f:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c53:	48 89 42 40          	mov    %rax,0x40(%rdx)

	/* Return address register. */
	if (cie->cie_version == 1)
  8004214c57:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214c5b:	0f b7 40 20          	movzwl 0x20(%rax),%eax
  8004214c5f:	66 83 f8 01          	cmp    $0x1,%ax
  8004214c63:	75 2b                	jne    8004214c90 <_dwarf_frame_set_cie+0x302>
		cie->cie_ra = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 1);
  8004214c65:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c69:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214c6d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214c71:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214c75:	48 89 d1             	mov    %rdx,%rcx
  8004214c78:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
  8004214c7c:	ba 01 00 00 00       	mov    $0x1,%edx
  8004214c81:	48 89 cf             	mov    %rcx,%rdi
  8004214c84:	ff d0                	callq  *%rax
  8004214c86:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214c8a:	48 89 42 48          	mov    %rax,0x48(%rdx)
  8004214c8e:	eb 26                	jmp    8004214cb6 <_dwarf_frame_set_cie+0x328>
	else
		cie->cie_ra = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214c90:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214c94:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214c98:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214c9c:	48 89 d6             	mov    %rdx,%rsi
  8004214c9f:	48 89 c7             	mov    %rax,%rdi
  8004214ca2:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004214ca9:	00 00 00 
  8004214cac:	ff d0                	callq  *%rax
  8004214cae:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214cb2:	48 89 42 48          	mov    %rax,0x48(%rdx)

	/* Optional CIE augmentation data for .eh_frame section. */
	if (*cie->cie_augment == 'z') {
  8004214cb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214cba:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214cbe:	0f b6 00             	movzbl (%rax),%eax
  8004214cc1:	3c 7a                	cmp    $0x7a,%al
  8004214cc3:	0f 85 93 00 00 00    	jne    8004214d5c <_dwarf_frame_set_cie+0x3ce>
		cie->cie_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  8004214cc9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ccd:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214cd1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004214cd5:	48 89 d6             	mov    %rdx,%rsi
  8004214cd8:	48 89 c7             	mov    %rax,%rdi
  8004214cdb:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  8004214ce2:	00 00 00 
  8004214ce5:	ff d0                	callq  *%rax
  8004214ce7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214ceb:	48 89 42 50          	mov    %rax,0x50(%rdx)
		cie->cie_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214cef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214cf3:	48 8b 10             	mov    (%rax),%rdx
  8004214cf6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214cfa:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214cfe:	48 01 d0             	add    %rdx,%rax
  8004214d01:	48 89 c2             	mov    %rax,%rdx
  8004214d04:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d08:	48 89 50 58          	mov    %rdx,0x58(%rax)
		*off += cie->cie_auglen;
  8004214d0c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d10:	48 8b 10             	mov    (%rax),%rdx
  8004214d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d17:	48 8b 40 50          	mov    0x50(%rax),%rax
  8004214d1b:	48 01 c2             	add    %rax,%rdx
  8004214d1e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d22:	48 89 10             	mov    %rdx,(%rax)
		/*
		 * XXX Use DW_EH_PE_absptr for default FDE PC start/range,
		 * in case _dwarf_frame_parse_lsb_cie_augment fails to
		 * find out the real encode.
		 */
		cie->cie_fde_encode = DW_EH_PE_absptr;
  8004214d25:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d29:	c6 40 60 00          	movb   $0x0,0x60(%rax)
		ret = _dwarf_frame_parse_lsb_cie_augment(dbg, cie, error);
  8004214d2d:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  8004214d31:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004214d35:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d39:	48 89 ce             	mov    %rcx,%rsi
  8004214d3c:	48 89 c7             	mov    %rax,%rdi
  8004214d3f:	48 b8 43 48 21 04 80 	movabs $0x8004214843,%rax
  8004214d46:	00 00 00 
  8004214d49:	ff d0                	callq  *%rax
  8004214d4b:	89 45 dc             	mov    %eax,-0x24(%rbp)
		if (ret != DW_DLE_NONE)
  8004214d4e:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214d52:	74 08                	je     8004214d5c <_dwarf_frame_set_cie+0x3ce>
			return (ret);
  8004214d54:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214d57:	e9 93 00 00 00       	jmpq   8004214def <_dwarf_frame_set_cie+0x461>
	}

	/* CIE Initial instructions. */
	cie->cie_initinst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214d5c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d60:	48 8b 10             	mov    (%rax),%rdx
  8004214d63:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214d67:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214d6b:	48 01 d0             	add    %rdx,%rax
  8004214d6e:	48 89 c2             	mov    %rax,%rdx
  8004214d71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d75:	48 89 50 68          	mov    %rdx,0x68(%rax)
	if (dwarf_size == 4)
  8004214d79:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004214d7d:	75 2a                	jne    8004214da9 <_dwarf_frame_set_cie+0x41b>
		cie->cie_instlen = cie->cie_offset + 4 + length - *off;
  8004214d7f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214d83:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214d8b:	48 01 c2             	add    %rax,%rdx
  8004214d8e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214d92:	48 8b 00             	mov    (%rax),%rax
  8004214d95:	48 29 c2             	sub    %rax,%rdx
  8004214d98:	48 89 d0             	mov    %rdx,%rax
  8004214d9b:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004214d9f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214da3:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004214da7:	eb 28                	jmp    8004214dd1 <_dwarf_frame_set_cie+0x443>
	else
		cie->cie_instlen = cie->cie_offset + 12 + length - *off;
  8004214da9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dad:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214db1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004214db5:	48 01 c2             	add    %rax,%rdx
  8004214db8:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214dbc:	48 8b 00             	mov    (%rax),%rax
  8004214dbf:	48 29 c2             	sub    %rax,%rdx
  8004214dc2:	48 89 d0             	mov    %rdx,%rax
  8004214dc5:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  8004214dc9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214dcd:	48 89 50 70          	mov    %rdx,0x70(%rax)

	*off += cie->cie_instlen;
  8004214dd1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214dd5:	48 8b 10             	mov    (%rax),%rdx
  8004214dd8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ddc:	48 8b 40 70          	mov    0x70(%rax),%rax
  8004214de0:	48 01 c2             	add    %rax,%rdx
  8004214de3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214de7:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  8004214dea:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004214def:	c9                   	leaveq 
  8004214df0:	c3                   	retq   

0000008004214df1 <_dwarf_frame_set_fde>:

static int
_dwarf_frame_set_fde(Dwarf_Debug dbg, Dwarf_Fde ret_fde, Dwarf_Section *ds,
		     Dwarf_Unsigned *off, int eh_frame, Dwarf_Cie cie, Dwarf_Error *error)
{
  8004214df1:	55                   	push   %rbp
  8004214df2:	48 89 e5             	mov    %rsp,%rbp
  8004214df5:	48 83 ec 70          	sub    $0x70,%rsp
  8004214df9:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004214dfd:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004214e01:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004214e05:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
  8004214e09:	44 89 45 ac          	mov    %r8d,-0x54(%rbp)
  8004214e0d:	4c 89 4d a0          	mov    %r9,-0x60(%rbp)
	Dwarf_Fde fde;
	Dwarf_Unsigned cieoff;
	uint64_t length, val;
	int dwarf_size, ret;

	fde = ret_fde;
  8004214e11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004214e15:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	fde->fde_dbg = dbg;
  8004214e19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e1d:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e21:	48 89 10             	mov    %rdx,(%rax)
	fde->fde_addr = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004214e24:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e28:	48 8b 10             	mov    (%rax),%rdx
  8004214e2b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e2f:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004214e33:	48 01 d0             	add    %rdx,%rax
  8004214e36:	48 89 c2             	mov    %rax,%rdx
  8004214e39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e3d:	48 89 50 10          	mov    %rdx,0x10(%rax)
	fde->fde_offset = *off;
  8004214e41:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214e45:	48 8b 10             	mov    (%rax),%rdx
  8004214e48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214e4c:	48 89 50 18          	mov    %rdx,0x18(%rax)

	length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214e50:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e54:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e58:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e5c:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e60:	48 89 d1             	mov    %rdx,%rcx
  8004214e63:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e67:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214e6c:	48 89 cf             	mov    %rcx,%rdi
  8004214e6f:	ff d0                	callq  *%rax
  8004214e71:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	if (length == 0xffffffff) {
  8004214e75:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004214e7a:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004214e7e:	75 2e                	jne    8004214eae <_dwarf_frame_set_fde+0xbd>
		dwarf_size = 8;
  8004214e80:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 8);
  8004214e87:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214e8b:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214e8f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214e93:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214e97:	48 89 d1             	mov    %rdx,%rcx
  8004214e9a:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214e9e:	ba 08 00 00 00       	mov    $0x8,%edx
  8004214ea3:	48 89 cf             	mov    %rcx,%rdi
  8004214ea6:	ff d0                	callq  *%rax
  8004214ea8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004214eac:	eb 07                	jmp    8004214eb5 <_dwarf_frame_set_fde+0xc4>
	} else
		dwarf_size = 4;
  8004214eae:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

	if (length > dbg->dbg_eh_size - *off) {
  8004214eb5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214eb9:	48 8b 50 40          	mov    0x40(%rax),%rdx
  8004214ebd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214ec1:	48 8b 00             	mov    (%rax),%rax
  8004214ec4:	48 29 c2             	sub    %rax,%rdx
  8004214ec7:	48 89 d0             	mov    %rdx,%rax
  8004214eca:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  8004214ece:	73 0a                	jae    8004214eda <_dwarf_frame_set_fde+0xe9>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_FRAME_LENGTH_BAD);
		return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  8004214ed0:	b8 12 00 00 00       	mov    $0x12,%eax
  8004214ed5:	e9 ca 02 00 00       	jmpq   80042151a4 <_dwarf_frame_set_fde+0x3b3>
	}

	fde->fde_length = length;
  8004214eda:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214ede:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004214ee2:	48 89 50 20          	mov    %rdx,0x20(%rax)

	if (eh_frame) {
  8004214ee6:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214eea:	74 5e                	je     8004214f4a <_dwarf_frame_set_fde+0x159>
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, 4);
  8004214eec:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214ef0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214ef4:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214ef8:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214efc:	48 89 d1             	mov    %rdx,%rcx
  8004214eff:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214f03:	ba 04 00 00 00       	mov    $0x4,%edx
  8004214f08:	48 89 cf             	mov    %rcx,%rdi
  8004214f0b:	ff d0                	callq  *%rax
  8004214f0d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f11:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = *off - (4 + fde->fde_cieoff);
  8004214f15:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f19:	48 8b 10             	mov    (%rax),%rdx
  8004214f1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f20:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f24:	48 29 c2             	sub    %rax,%rdx
  8004214f27:	48 89 d0             	mov    %rdx,%rax
  8004214f2a:	48 83 e8 04          	sub    $0x4,%rax
  8004214f2e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		/* This delta should never be 0. */
		if (cieoff == fde->fde_offset) {
  8004214f32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f36:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214f3a:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
  8004214f3e:	75 3d                	jne    8004214f7d <_dwarf_frame_set_fde+0x18c>
			DWARF_SET_ERROR(dbg, error, DW_DLE_NO_CIE_FOR_FDE);
			return (DW_DLE_NO_CIE_FOR_FDE);
  8004214f40:	b8 13 00 00 00       	mov    $0x13,%eax
  8004214f45:	e9 5a 02 00 00       	jmpq   80042151a4 <_dwarf_frame_set_fde+0x3b3>
		}
	} else {
		fde->fde_cieoff = dbg->read((uint8_t *)dbg->dbg_eh_offset, off, dwarf_size);
  8004214f4a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214f4e:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004214f52:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004214f56:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004214f5a:	48 89 d1             	mov    %rdx,%rcx
  8004214f5d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004214f60:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004214f64:	48 89 cf             	mov    %rcx,%rdi
  8004214f67:	ff d0                	callq  *%rax
  8004214f69:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004214f6d:	48 89 42 28          	mov    %rax,0x28(%rdx)
		cieoff = fde->fde_cieoff;
  8004214f71:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214f75:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004214f79:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	}

	if (eh_frame) {
  8004214f7d:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  8004214f81:	0f 84 c9 00 00 00    	je     8004215050 <_dwarf_frame_set_fde+0x25f>
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214f87:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004214f8b:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004214f8f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004214f93:	48 8b 00             	mov    (%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214f96:	4c 8d 0c 02          	lea    (%rdx,%rax,1),%r9
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
  8004214f9a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214f9e:	0f b6 40 60          	movzbl 0x60(%rax),%eax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214fa2:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214fa6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214faa:	48 8b 40 38          	mov    0x38(%rax),%rax
	if (eh_frame) {
		/*
		 * The FDE PC start/range for .eh_frame is encoded according
		 * to the LSB spec's extension to DWARF2.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214fae:	48 89 c2             	mov    %rax,%rdx
  8004214fb1:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  8004214fb5:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004214fb9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004214fbd:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004214fc1:	48 89 3c 24          	mov    %rdi,(%rsp)
  8004214fc5:	48 89 c7             	mov    %rax,%rdi
  8004214fc8:	48 b8 29 46 21 04 80 	movabs $0x8004214629,%rax
  8004214fcf:	00 00 00 
  8004214fd2:	ff d0                	callq  *%rax
  8004214fd4:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, ds->ds_addr + *off, error);
		if (ret != DW_DLE_NONE)
  8004214fd7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004214fdb:	74 08                	je     8004214fe5 <_dwarf_frame_set_fde+0x1f4>
			return (ret);
  8004214fdd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004214fe0:	e9 bf 01 00 00       	jmpq   80042151a4 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_initloc = val;
  8004214fe5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004214fe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004214fed:	48 89 50 30          	mov    %rdx,0x30(%rax)
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
  8004214ff1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004214ff5:	0f b6 40 60          	movzbl 0x60(%rax),%eax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004214ff9:	44 0f b6 c0          	movzbl %al,%r8d
						    (uint8_t *)dbg->dbg_eh_offset,
  8004214ffd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215001:	48 8b 40 38          	mov    0x38(%rax),%rax
		fde->fde_initloc = val;
		/*
		 * FDE PC range should not be relative value to anything.
		 * So pass 0 for pc value.
		 */
		ret = _dwarf_frame_read_lsb_encoded(dbg, &val,
  8004215005:	48 89 c2             	mov    %rax,%rdx
  8004215008:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
  800421500c:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
  8004215010:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215014:	48 8b 7d 10          	mov    0x10(%rbp),%rdi
  8004215018:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421501c:	41 b9 00 00 00 00    	mov    $0x0,%r9d
  8004215022:	48 89 c7             	mov    %rax,%rdi
  8004215025:	48 b8 29 46 21 04 80 	movabs $0x8004214629,%rax
  800421502c:	00 00 00 
  800421502f:	ff d0                	callq  *%rax
  8004215031:	89 45 dc             	mov    %eax,-0x24(%rbp)
						    (uint8_t *)dbg->dbg_eh_offset,
						    off, cie->cie_fde_encode, 0, error);
		if (ret != DW_DLE_NONE)
  8004215034:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004215038:	74 08                	je     8004215042 <_dwarf_frame_set_fde+0x251>
			return (ret);
  800421503a:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421503d:	e9 62 01 00 00       	jmpq   80042151a4 <_dwarf_frame_set_fde+0x3b3>
		fde->fde_adrange = val;
  8004215042:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215046:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421504a:	48 89 50 38          	mov    %rdx,0x38(%rax)
  800421504e:	eb 50                	jmp    80042150a0 <_dwarf_frame_set_fde+0x2af>
	} else {
		fde->fde_initloc = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215050:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215054:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215058:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421505c:	8b 52 28             	mov    0x28(%rdx),%edx
  800421505f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  8004215063:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  8004215067:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  800421506b:	48 89 cf             	mov    %rcx,%rdi
  800421506e:	ff d0                	callq  *%rax
  8004215070:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215074:	48 89 42 30          	mov    %rax,0x30(%rdx)
					     dbg->dbg_pointer_size);
		fde->fde_adrange = dbg->read((uint8_t *)dbg->dbg_eh_offset, off,
  8004215078:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421507c:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215080:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215084:	8b 52 28             	mov    0x28(%rdx),%edx
  8004215087:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
  800421508b:	48 8b 49 38          	mov    0x38(%rcx),%rcx
  800421508f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215093:	48 89 cf             	mov    %rcx,%rdi
  8004215096:	ff d0                	callq  *%rax
  8004215098:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421509c:	48 89 42 38          	mov    %rax,0x38(%rdx)
					     dbg->dbg_pointer_size);
	}

	/* Optional FDE augmentation data for .eh_frame section. (ignored) */
	if (eh_frame && *cie->cie_augment == 'z') {
  80042150a0:	83 7d ac 00          	cmpl   $0x0,-0x54(%rbp)
  80042150a4:	74 6b                	je     8004215111 <_dwarf_frame_set_fde+0x320>
  80042150a6:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042150aa:	48 8b 40 28          	mov    0x28(%rax),%rax
  80042150ae:	0f b6 00             	movzbl (%rax),%eax
  80042150b1:	3c 7a                	cmp    $0x7a,%al
  80042150b3:	75 5c                	jne    8004215111 <_dwarf_frame_set_fde+0x320>
		fde->fde_auglen = _dwarf_read_uleb128((uint8_t *)dbg->dbg_eh_offset, off);
  80042150b5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150b9:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150bd:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  80042150c1:	48 89 d6             	mov    %rdx,%rsi
  80042150c4:	48 89 c7             	mov    %rax,%rdi
  80042150c7:	48 b8 bd 16 21 04 80 	movabs $0x80042116bd,%rax
  80042150ce:	00 00 00 
  80042150d1:	ff d0                	callq  *%rax
  80042150d3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042150d7:	48 89 42 40          	mov    %rax,0x40(%rdx)
		fde->fde_augdata = (uint8_t *)dbg->dbg_eh_offset + *off;
  80042150db:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150df:	48 8b 10             	mov    (%rax),%rdx
  80042150e2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042150e6:	48 8b 40 38          	mov    0x38(%rax),%rax
  80042150ea:	48 01 d0             	add    %rdx,%rax
  80042150ed:	48 89 c2             	mov    %rax,%rdx
  80042150f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042150f4:	48 89 50 48          	mov    %rdx,0x48(%rax)
		*off += fde->fde_auglen;
  80042150f8:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042150fc:	48 8b 10             	mov    (%rax),%rdx
  80042150ff:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215103:	48 8b 40 40          	mov    0x40(%rax),%rax
  8004215107:	48 01 c2             	add    %rax,%rdx
  800421510a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421510e:	48 89 10             	mov    %rdx,(%rax)
	}

	fde->fde_inst = (uint8_t *)dbg->dbg_eh_offset + *off;
  8004215111:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215115:	48 8b 10             	mov    (%rax),%rdx
  8004215118:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421511c:	48 8b 40 38          	mov    0x38(%rax),%rax
  8004215120:	48 01 d0             	add    %rdx,%rax
  8004215123:	48 89 c2             	mov    %rax,%rdx
  8004215126:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421512a:	48 89 50 50          	mov    %rdx,0x50(%rax)
	if (dwarf_size == 4)
  800421512e:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  8004215132:	75 2a                	jne    800421515e <_dwarf_frame_set_fde+0x36d>
		fde->fde_instlen = fde->fde_offset + 4 + length - *off;
  8004215134:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215138:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421513c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215140:	48 01 c2             	add    %rax,%rdx
  8004215143:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215147:	48 8b 00             	mov    (%rax),%rax
  800421514a:	48 29 c2             	sub    %rax,%rdx
  800421514d:	48 89 d0             	mov    %rdx,%rax
  8004215150:	48 8d 50 04          	lea    0x4(%rax),%rdx
  8004215154:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215158:	48 89 50 58          	mov    %rdx,0x58(%rax)
  800421515c:	eb 28                	jmp    8004215186 <_dwarf_frame_set_fde+0x395>
	else
		fde->fde_instlen = fde->fde_offset + 12 + length - *off;
  800421515e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215162:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215166:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421516a:	48 01 c2             	add    %rax,%rdx
  800421516d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215171:	48 8b 00             	mov    (%rax),%rax
  8004215174:	48 29 c2             	sub    %rax,%rdx
  8004215177:	48 89 d0             	mov    %rdx,%rax
  800421517a:	48 8d 50 0c          	lea    0xc(%rax),%rdx
  800421517e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215182:	48 89 50 58          	mov    %rdx,0x58(%rax)

	*off += fde->fde_instlen;
  8004215186:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421518a:	48 8b 10             	mov    (%rax),%rdx
  800421518d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215191:	48 8b 40 58          	mov    0x58(%rax),%rax
  8004215195:	48 01 c2             	add    %rax,%rdx
  8004215198:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421519c:	48 89 10             	mov    %rdx,(%rax)
	return (DW_DLE_NONE);
  800421519f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  80042151a4:	c9                   	leaveq 
  80042151a5:	c3                   	retq   

00000080042151a6 <_dwarf_frame_interal_table_init>:


int
_dwarf_frame_interal_table_init(Dwarf_Debug dbg, Dwarf_Error *error)
{
  80042151a6:	55                   	push   %rbp
  80042151a7:	48 89 e5             	mov    %rsp,%rbp
  80042151aa:	48 83 ec 20          	sub    $0x20,%rsp
  80042151ae:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042151b2:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Dwarf_Regtable3 *rt = &global_rt_table;
  80042151b6:	48 b8 a0 f6 4d 04 80 	movabs $0x80044df6a0,%rax
  80042151bd:	00 00 00 
  80042151c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if (dbg->dbg_internal_reg_table != NULL)
  80042151c4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151c8:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042151cc:	48 85 c0             	test   %rax,%rax
  80042151cf:	74 07                	je     80042151d8 <_dwarf_frame_interal_table_init+0x32>
		return (DW_DLE_NONE);
  80042151d1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042151d6:	eb 33                	jmp    800421520b <_dwarf_frame_interal_table_init+0x65>

	rt->rt3_reg_table_size = dbg->dbg_frame_rule_table_size;
  80042151d8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151dc:	0f b7 50 48          	movzwl 0x48(%rax),%edx
  80042151e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042151e4:	66 89 50 18          	mov    %dx,0x18(%rax)
	rt->rt3_rules = global_rules;
  80042151e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042151ec:	48 b9 40 de 6d 04 80 	movabs $0x80046dde40,%rcx
  80042151f3:	00 00 00 
  80042151f6:	48 89 48 20          	mov    %rcx,0x20(%rax)

	dbg->dbg_internal_reg_table = rt;
  80042151fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042151fe:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004215202:	48 89 50 58          	mov    %rdx,0x58(%rax)

	return (DW_DLE_NONE);
  8004215206:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421520b:	c9                   	leaveq 
  800421520c:	c3                   	retq   

000000800421520d <_dwarf_get_next_fde>:

static int
_dwarf_get_next_fde(Dwarf_Debug dbg,
		    int eh_frame, Dwarf_Error *error, Dwarf_Fde ret_fde)
{
  800421520d:	55                   	push   %rbp
  800421520e:	48 89 e5             	mov    %rsp,%rbp
  8004215211:	48 83 ec 60          	sub    $0x60,%rsp
  8004215215:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004215219:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  800421521c:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
  8004215220:	48 89 4d b0          	mov    %rcx,-0x50(%rbp)
	Dwarf_Section *ds = &debug_frame_sec; 
  8004215224:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  800421522b:	00 00 00 
  800421522e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	uint64_t length, offset, cie_id, entry_off;
	int dwarf_size, i, ret=-1;
  8004215232:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%rbp)

	offset = dbg->curr_off_eh;
  8004215239:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421523d:	48 8b 40 30          	mov    0x30(%rax),%rax
  8004215241:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (offset < dbg->dbg_eh_size) {
  8004215245:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215249:	48 8b 50 40          	mov    0x40(%rax),%rdx
  800421524d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004215251:	48 39 c2             	cmp    %rax,%rdx
  8004215254:	0f 86 fe 01 00 00    	jbe    8004215458 <_dwarf_get_next_fde+0x24b>
		entry_off = offset;
  800421525a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421525e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 4);
  8004215262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215266:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421526a:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  800421526e:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  8004215272:	48 89 d1             	mov    %rdx,%rcx
  8004215275:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215279:	ba 04 00 00 00       	mov    $0x4,%edx
  800421527e:	48 89 cf             	mov    %rcx,%rdi
  8004215281:	ff d0                	callq  *%rax
  8004215283:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		if (length == 0xffffffff) {
  8004215287:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421528c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004215290:	75 2e                	jne    80042152c0 <_dwarf_get_next_fde+0xb3>
			dwarf_size = 8;
  8004215292:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%rbp)
			length = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, 8);
  8004215299:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421529d:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042152a1:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  80042152a5:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  80042152a9:	48 89 d1             	mov    %rdx,%rcx
  80042152ac:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  80042152b0:	ba 08 00 00 00       	mov    $0x8,%edx
  80042152b5:	48 89 cf             	mov    %rcx,%rdi
  80042152b8:	ff d0                	callq  *%rax
  80042152ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042152be:	eb 07                	jmp    80042152c7 <_dwarf_get_next_fde+0xba>
		} else
			dwarf_size = 4;
  80042152c0:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)

		if (length > dbg->dbg_eh_size - offset || (length == 0 && !eh_frame)) {
  80042152c7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042152cb:	48 8b 50 40          	mov    0x40(%rax),%rdx
  80042152cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042152d3:	48 29 c2             	sub    %rax,%rdx
  80042152d6:	48 89 d0             	mov    %rdx,%rax
  80042152d9:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
  80042152dd:	72 0d                	jb     80042152ec <_dwarf_get_next_fde+0xdf>
  80042152df:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042152e4:	75 10                	jne    80042152f6 <_dwarf_get_next_fde+0xe9>
  80042152e6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042152ea:	75 0a                	jne    80042152f6 <_dwarf_get_next_fde+0xe9>
			DWARF_SET_ERROR(dbg, error,
					DW_DLE_DEBUG_FRAME_LENGTH_BAD);
			return (DW_DLE_DEBUG_FRAME_LENGTH_BAD);
  80042152ec:	b8 12 00 00 00       	mov    $0x12,%eax
  80042152f1:	e9 67 01 00 00       	jmpq   800421545d <_dwarf_get_next_fde+0x250>
		}

		/* Check terminator for .eh_frame */
		if (eh_frame && length == 0)
  80042152f6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042152fa:	74 11                	je     800421530d <_dwarf_get_next_fde+0x100>
  80042152fc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004215301:	75 0a                	jne    800421530d <_dwarf_get_next_fde+0x100>
			return(-1);
  8004215303:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215308:	e9 50 01 00 00       	jmpq   800421545d <_dwarf_get_next_fde+0x250>

		cie_id = dbg->read((uint8_t *)dbg->dbg_eh_offset, &offset, dwarf_size);
  800421530d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215311:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215315:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004215319:	48 8b 52 38          	mov    0x38(%rdx),%rdx
  800421531d:	48 89 d1             	mov    %rdx,%rcx
  8004215320:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004215323:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
  8004215327:	48 89 cf             	mov    %rcx,%rdi
  800421532a:	ff d0                	callq  *%rax
  800421532c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)

		if (eh_frame) {
  8004215330:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  8004215334:	74 79                	je     80042153af <_dwarf_get_next_fde+0x1a2>
			/* GNU .eh_frame use CIE id 0. */
			if (cie_id == 0)
  8004215336:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421533b:	75 32                	jne    800421536f <_dwarf_get_next_fde+0x162>
				ret = _dwarf_frame_set_cie(dbg, ds,
  800421533d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215341:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004215345:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215349:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  800421534d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  8004215351:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215355:	49 89 f8             	mov    %rdi,%r8
  8004215358:	48 89 c7             	mov    %rax,%rdi
  800421535b:	48 b8 8e 49 21 04 80 	movabs $0x800421498e,%rax
  8004215362:	00 00 00 
  8004215365:	ff d0                	callq  *%rax
  8004215367:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421536a:	e9 c8 00 00 00       	jmpq   8004215437 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg,ret_fde, ds,
  800421536f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215373:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215377:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  800421537b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421537f:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215383:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215387:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  800421538b:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421538f:	4d 89 c1             	mov    %r8,%r9
  8004215392:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004215398:	48 89 c7             	mov    %rax,%rdi
  800421539b:	48 b8 f1 4d 21 04 80 	movabs $0x8004214df1,%rax
  80042153a2:	00 00 00 
  80042153a5:	ff d0                	callq  *%rax
  80042153a7:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042153aa:	e9 88 00 00 00       	jmpq   8004215437 <_dwarf_get_next_fde+0x22a>
							   &entry_off, 1, ret_fde->fde_cie, error);
		} else {
			/* .dwarf_frame use CIE id ~0 */
			if ((dwarf_size == 4 && cie_id == ~0U) ||
  80042153af:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042153b3:	75 0b                	jne    80042153c0 <_dwarf_get_next_fde+0x1b3>
  80042153b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042153ba:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  80042153be:	74 0d                	je     80042153cd <_dwarf_get_next_fde+0x1c0>
  80042153c0:	83 7d f4 08          	cmpl   $0x8,-0xc(%rbp)
  80042153c4:	75 36                	jne    80042153fc <_dwarf_get_next_fde+0x1ef>
			    (dwarf_size == 8 && cie_id == ~0ULL))
  80042153c6:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
  80042153cb:	75 2f                	jne    80042153fc <_dwarf_get_next_fde+0x1ef>
				ret = _dwarf_frame_set_cie(dbg, ds,
  80042153cd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  80042153d1:	48 8b 48 08          	mov    0x8(%rax),%rcx
  80042153d5:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  80042153d9:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
  80042153dd:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
  80042153e1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042153e5:	49 89 f8             	mov    %rdi,%r8
  80042153e8:	48 89 c7             	mov    %rax,%rdi
  80042153eb:	48 b8 8e 49 21 04 80 	movabs $0x800421498e,%rax
  80042153f2:	00 00 00 
  80042153f5:	ff d0                	callq  *%rax
  80042153f7:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042153fa:	eb 3b                	jmp    8004215437 <_dwarf_get_next_fde+0x22a>
							   &entry_off, ret_fde->fde_cie, error);
			else
				ret = _dwarf_frame_set_fde(dbg, ret_fde, ds,
  80042153fc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004215400:	4c 8b 40 08          	mov    0x8(%rax),%r8
  8004215404:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
  8004215408:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421540c:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
  8004215410:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215414:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
  8004215418:	48 89 3c 24          	mov    %rdi,(%rsp)
  800421541c:	4d 89 c1             	mov    %r8,%r9
  800421541f:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004215425:	48 89 c7             	mov    %rax,%rdi
  8004215428:	48 b8 f1 4d 21 04 80 	movabs $0x8004214df1,%rax
  800421542f:	00 00 00 
  8004215432:	ff d0                	callq  *%rax
  8004215434:	89 45 f0             	mov    %eax,-0x10(%rbp)
							   &entry_off, 0, ret_fde->fde_cie, error);
		}

		if (ret != DW_DLE_NONE)
  8004215437:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  800421543b:	74 07                	je     8004215444 <_dwarf_get_next_fde+0x237>
			return(-1);
  800421543d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215442:	eb 19                	jmp    800421545d <_dwarf_get_next_fde+0x250>

		offset = entry_off;
  8004215444:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215448:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		dbg->curr_off_eh = offset;
  800421544c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215450:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004215454:	48 89 50 30          	mov    %rdx,0x30(%rax)
	}

	return (0);
  8004215458:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421545d:	c9                   	leaveq 
  800421545e:	c3                   	retq   

000000800421545f <dwarf_set_frame_cfa_value>:

Dwarf_Half
dwarf_set_frame_cfa_value(Dwarf_Debug dbg, Dwarf_Half value)
{
  800421545f:	55                   	push   %rbp
  8004215460:	48 89 e5             	mov    %rsp,%rbp
  8004215463:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004215467:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421546b:	89 f0                	mov    %esi,%eax
  800421546d:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
	Dwarf_Half old_value;

	old_value = dbg->dbg_frame_cfa_value;
  8004215471:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215475:	0f b7 40 4c          	movzwl 0x4c(%rax),%eax
  8004215479:	66 89 45 fe          	mov    %ax,-0x2(%rbp)
	dbg->dbg_frame_cfa_value = value;
  800421547d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215481:	0f b7 55 e4          	movzwl -0x1c(%rbp),%edx
  8004215485:	66 89 50 4c          	mov    %dx,0x4c(%rax)

	return (old_value);
  8004215489:	0f b7 45 fe          	movzwl -0x2(%rbp),%eax
}
  800421548d:	c9                   	leaveq 
  800421548e:	c3                   	retq   

000000800421548f <dwarf_init_eh_section>:

int dwarf_init_eh_section(Dwarf_Debug dbg, Dwarf_Error *error)
{
  800421548f:	55                   	push   %rbp
  8004215490:	48 89 e5             	mov    %rsp,%rbp
  8004215493:	48 83 ec 10          	sub    $0x10,%rsp
  8004215497:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421549b:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	Dwarf_Section *section;

	if (dbg == NULL) {
  800421549f:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042154a4:	75 0a                	jne    80042154b0 <dwarf_init_eh_section+0x21>
		DWARF_SET_ERROR(dbg, error, DW_DLE_ARGUMENT);
		return (DW_DLV_ERROR);
  80042154a6:	b8 01 00 00 00       	mov    $0x1,%eax
  80042154ab:	e9 85 00 00 00       	jmpq   8004215535 <dwarf_init_eh_section+0xa6>
	}

	if (dbg->dbg_internal_reg_table == NULL) {
  80042154b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042154b4:	48 8b 40 58          	mov    0x58(%rax),%rax
  80042154b8:	48 85 c0             	test   %rax,%rax
  80042154bb:	75 25                	jne    80042154e2 <dwarf_init_eh_section+0x53>
		if (_dwarf_frame_interal_table_init(dbg, error) != DW_DLE_NONE)
  80042154bd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  80042154c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042154c5:	48 89 d6             	mov    %rdx,%rsi
  80042154c8:	48 89 c7             	mov    %rax,%rdi
  80042154cb:	48 b8 a6 51 21 04 80 	movabs $0x80042151a6,%rax
  80042154d2:	00 00 00 
  80042154d5:	ff d0                	callq  *%rax
  80042154d7:	85 c0                	test   %eax,%eax
  80042154d9:	74 07                	je     80042154e2 <dwarf_init_eh_section+0x53>
			return (DW_DLV_ERROR);
  80042154db:	b8 01 00 00 00       	mov    $0x1,%eax
  80042154e0:	eb 53                	jmp    8004215535 <dwarf_init_eh_section+0xa6>
	}

	_dwarf_find_section_enhanced(&debug_frame_sec);
  80042154e2:	48 bf a0 56 23 04 80 	movabs $0x80042356a0,%rdi
  80042154e9:	00 00 00 
  80042154ec:	48 b8 5b 2f 21 04 80 	movabs $0x8004212f5b,%rax
  80042154f3:	00 00 00 
  80042154f6:	ff d0                	callq  *%rax

	dbg->curr_off_eh = 0;
  80042154f8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042154fc:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
  8004215503:	00 
	dbg->dbg_eh_offset = debug_frame_sec.ds_addr;
  8004215504:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  800421550b:	00 00 00 
  800421550e:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004215512:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004215516:	48 89 50 38          	mov    %rdx,0x38(%rax)
	dbg->dbg_eh_size = debug_frame_sec.ds_size;
  800421551a:	48 b8 a0 56 23 04 80 	movabs $0x80042356a0,%rax
  8004215521:	00 00 00 
  8004215524:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215528:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421552c:	48 89 50 40          	mov    %rdx,0x40(%rax)

	return (DW_DLV_OK);
  8004215530:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215535:	c9                   	leaveq 
  8004215536:	c3                   	retq   

0000008004215537 <_dwarf_lineno_run_program>:
int  _dwarf_find_section_enhanced(Dwarf_Section *ds);

static int
_dwarf_lineno_run_program(Dwarf_CU *cu, Dwarf_LineInfo li, uint8_t *p,
			  uint8_t *pe, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004215537:	55                   	push   %rbp
  8004215538:	48 89 e5             	mov    %rsp,%rbp
  800421553b:	53                   	push   %rbx
  800421553c:	48 81 ec 98 00 00 00 	sub    $0x98,%rsp
  8004215543:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  8004215547:	48 89 75 80          	mov    %rsi,-0x80(%rbp)
  800421554b:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  8004215552:	48 89 8d 70 ff ff ff 	mov    %rcx,-0x90(%rbp)
  8004215559:	4c 89 85 68 ff ff ff 	mov    %r8,-0x98(%rbp)
  8004215560:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	uint64_t address, file, line, column, isa, opsize;
	int is_stmt, basic_block, end_sequence;
	int prologue_end, epilogue_begin;
	int ret;

	ln = &li->li_line;
  8004215567:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421556b:	48 83 c0 48          	add    $0x48,%rax
  800421556f:	48 89 45 b8          	mov    %rax,-0x48(%rbp)

	/*
	 *   ln->ln_li     = li;             \
	 * Set registers to their default values.
	 */
	RESET_REGISTERS;
  8004215573:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  800421557a:	00 
  800421557b:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  8004215582:	00 
  8004215583:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  800421558a:	00 
  800421558b:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  8004215592:	00 
  8004215593:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215597:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  800421559b:	0f b6 c0             	movzbl %al,%eax
  800421559e:	89 45 cc             	mov    %eax,-0x34(%rbp)
  80042155a1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  80042155a8:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  80042155af:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  80042155b6:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  80042155bd:	e9 0a 05 00 00       	jmpq   8004215acc <_dwarf_lineno_run_program+0x595>
		if (*p == 0) {
  80042155c2:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042155c9:	0f b6 00             	movzbl (%rax),%eax
  80042155cc:	84 c0                	test   %al,%al
  80042155ce:	0f 85 78 01 00 00    	jne    800421574c <_dwarf_lineno_run_program+0x215>

			/*
			 * Extended Opcodes.
			 */

			p++;
  80042155d4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042155db:	48 83 c0 01          	add    $0x1,%rax
  80042155df:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
			opsize = _dwarf_decode_uleb128(&p);
  80042155e6:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042155ed:	48 89 c7             	mov    %rax,%rdi
  80042155f0:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042155f7:	00 00 00 
  80042155fa:	ff d0                	callq  *%rax
  80042155fc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
			switch (*p) {
  8004215600:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215607:	0f b6 00             	movzbl (%rax),%eax
  800421560a:	0f b6 c0             	movzbl %al,%eax
  800421560d:	83 f8 02             	cmp    $0x2,%eax
  8004215610:	74 7a                	je     800421568c <_dwarf_lineno_run_program+0x155>
  8004215612:	83 f8 03             	cmp    $0x3,%eax
  8004215615:	0f 84 b3 00 00 00    	je     80042156ce <_dwarf_lineno_run_program+0x197>
  800421561b:	83 f8 01             	cmp    $0x1,%eax
  800421561e:	0f 85 09 01 00 00    	jne    800421572d <_dwarf_lineno_run_program+0x1f6>
			case DW_LNE_end_sequence:
				p++;
  8004215624:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421562b:	48 83 c0 01          	add    $0x1,%rax
  800421562f:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				end_sequence = 1;
  8004215636:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%rbp)
				RESET_REGISTERS;
  800421563d:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215644:	00 
  8004215645:	48 c7 45 e0 01 00 00 	movq   $0x1,-0x20(%rbp)
  800421564c:	00 
  800421564d:	48 c7 45 d8 01 00 00 	movq   $0x1,-0x28(%rbp)
  8004215654:	00 
  8004215655:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421565c:	00 
  800421565d:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215661:	0f b6 40 19          	movzbl 0x19(%rax),%eax
  8004215665:	0f b6 c0             	movzbl %al,%eax
  8004215668:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421566b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
  8004215672:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%rbp)
  8004215679:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
  8004215680:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215687:	e9 bb 00 00 00       	jmpq   8004215747 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_set_address:
				p++;
  800421568c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215693:	48 83 c0 01          	add    $0x1,%rax
  8004215697:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				address = dbg->decode(&p, cu->addr_size);
  800421569e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042156a5:	00 00 00 
  80042156a8:	48 8b 00             	mov    (%rax),%rax
  80042156ab:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042156af:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  80042156b3:	0f b6 52 0a          	movzbl 0xa(%rdx),%edx
  80042156b7:	0f b6 ca             	movzbl %dl,%ecx
  80042156ba:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  80042156c1:	89 ce                	mov    %ecx,%esi
  80042156c3:	48 89 d7             	mov    %rdx,%rdi
  80042156c6:	ff d0                	callq  *%rax
  80042156c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
				break;
  80042156cc:	eb 79                	jmp    8004215747 <_dwarf_lineno_run_program+0x210>
			case DW_LNE_define_file:
				p++;
  80042156ce:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042156d5:	48 83 c0 01          	add    $0x1,%rax
  80042156d9:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
				ret = _dwarf_lineno_add_file(li, &p, NULL,
  80042156e0:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  80042156e7:	00 00 00 
  80042156ea:	48 8b 08             	mov    (%rax),%rcx
  80042156ed:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  80042156f4:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
  80042156fb:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042156ff:	49 89 c8             	mov    %rcx,%r8
  8004215702:	48 89 d1             	mov    %rdx,%rcx
  8004215705:	ba 00 00 00 00       	mov    $0x0,%edx
  800421570a:	48 89 c7             	mov    %rax,%rdi
  800421570d:	48 b8 ef 5a 21 04 80 	movabs $0x8004215aef,%rax
  8004215714:	00 00 00 
  8004215717:	ff d0                	callq  *%rax
  8004215719:	89 45 a4             	mov    %eax,-0x5c(%rbp)
							     error, dbg);
				if (ret != DW_DLE_NONE)
  800421571c:	83 7d a4 00          	cmpl   $0x0,-0x5c(%rbp)
  8004215720:	74 09                	je     800421572b <_dwarf_lineno_run_program+0x1f4>
					goto prog_fail;
  8004215722:	90                   	nop

	return (DW_DLE_NONE);

prog_fail:

	return (ret);
  8004215723:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  8004215726:	e9 ba 03 00 00       	jmpq   8004215ae5 <_dwarf_lineno_run_program+0x5ae>
				p++;
				ret = _dwarf_lineno_add_file(li, &p, NULL,
							     error, dbg);
				if (ret != DW_DLE_NONE)
					goto prog_fail;
				break;
  800421572b:	eb 1a                	jmp    8004215747 <_dwarf_lineno_run_program+0x210>
			default:
				/* Unrecognized extened opcodes. */
				p += opsize;
  800421572d:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  8004215734:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004215738:	48 01 d0             	add    %rdx,%rax
  800421573b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004215742:	e9 85 03 00 00       	jmpq   8004215acc <_dwarf_lineno_run_program+0x595>
  8004215747:	e9 80 03 00 00       	jmpq   8004215acc <_dwarf_lineno_run_program+0x595>
			}

		} else if (*p > 0 && *p < li->li_opbase) {
  800421574c:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215753:	0f b6 00             	movzbl (%rax),%eax
  8004215756:	84 c0                	test   %al,%al
  8004215758:	0f 84 3c 02 00 00    	je     800421599a <_dwarf_lineno_run_program+0x463>
  800421575e:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215765:	0f b6 10             	movzbl (%rax),%edx
  8004215768:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421576c:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215770:	38 c2                	cmp    %al,%dl
  8004215772:	0f 83 22 02 00 00    	jae    800421599a <_dwarf_lineno_run_program+0x463>

			/*
			 * Standard Opcodes.
			 */

			switch (*p++) {
  8004215778:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421577f:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215783:	48 89 95 78 ff ff ff 	mov    %rdx,-0x88(%rbp)
  800421578a:	0f b6 00             	movzbl (%rax),%eax
  800421578d:	0f b6 c0             	movzbl %al,%eax
  8004215790:	83 f8 0c             	cmp    $0xc,%eax
  8004215793:	0f 87 fb 01 00 00    	ja     8004215994 <_dwarf_lineno_run_program+0x45d>
  8004215799:	89 c0                	mov    %eax,%eax
  800421579b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042157a2:	00 
  80042157a3:	48 b8 68 05 22 04 80 	movabs $0x8004220568,%rax
  80042157aa:	00 00 00 
  80042157ad:	48 01 d0             	add    %rdx,%rax
  80042157b0:	48 8b 00             	mov    (%rax),%rax
  80042157b3:	ff e0                	jmpq   *%rax
			case DW_LNS_copy:
				APPEND_ROW;
  80042157b5:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042157bc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  80042157c0:	73 0a                	jae    80042157cc <_dwarf_lineno_run_program+0x295>
  80042157c2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042157c7:	e9 19 03 00 00       	jmpq   8004215ae5 <_dwarf_lineno_run_program+0x5ae>
  80042157cc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157d0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042157d4:	48 89 10             	mov    %rdx,(%rax)
  80042157d7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157db:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  80042157e2:	00 
  80042157e3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157e7:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042157eb:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042157ef:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042157f3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  80042157f7:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042157fb:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  80042157ff:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215803:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215807:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421580b:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421580e:	89 50 28             	mov    %edx,0x28(%rax)
  8004215811:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215815:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215818:	89 50 2c             	mov    %edx,0x2c(%rax)
  800421581b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421581f:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215822:	89 50 30             	mov    %edx,0x30(%rax)
  8004215825:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215829:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215830:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215834:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215838:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
				basic_block = 0;
  800421583f:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
				prologue_end = 0;
  8004215846:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
				epilogue_begin = 0;
  800421584d:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
				break;
  8004215854:	e9 3c 01 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215859:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  8004215860:	48 89 c7             	mov    %rax,%rdi
  8004215863:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  800421586a:	00 00 00 
  800421586d:	ff d0                	callq  *%rax
					li->li_minlen;
  800421586f:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  8004215873:	0f b6 52 18          	movzbl 0x18(%rdx),%edx
				basic_block = 0;
				prologue_end = 0;
				epilogue_begin = 0;
				break;
			case DW_LNS_advance_pc:
				address += _dwarf_decode_uleb128(&p) *
  8004215877:	0f b6 d2             	movzbl %dl,%edx
  800421587a:	48 0f af c2          	imul   %rdx,%rax
  800421587e:	48 01 45 e8          	add    %rax,-0x18(%rbp)
					li->li_minlen;
				break;
  8004215882:	e9 0e 01 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_advance_line:
				line += _dwarf_decode_sleb128(&p);
  8004215887:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421588e:	48 89 c7             	mov    %rax,%rdi
  8004215891:	48 b8 3c 17 21 04 80 	movabs $0x800421173c,%rax
  8004215898:	00 00 00 
  800421589b:	ff d0                	callq  *%rax
  800421589d:	48 01 45 d8          	add    %rax,-0x28(%rbp)
				break;
  80042158a1:	e9 ef 00 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_file:
				file = _dwarf_decode_uleb128(&p);
  80042158a6:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042158ad:	48 89 c7             	mov    %rax,%rdi
  80042158b0:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042158b7:	00 00 00 
  80042158ba:	ff d0                	callq  *%rax
  80042158bc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
				break;
  80042158c0:	e9 d0 00 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_column:
				column = _dwarf_decode_uleb128(&p);
  80042158c5:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  80042158cc:	48 89 c7             	mov    %rax,%rdi
  80042158cf:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  80042158d6:	00 00 00 
  80042158d9:	ff d0                	callq  *%rax
  80042158db:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
				break;
  80042158df:	e9 b1 00 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_negate_stmt:
				is_stmt = !is_stmt;
  80042158e4:	83 7d cc 00          	cmpl   $0x0,-0x34(%rbp)
  80042158e8:	0f 94 c0             	sete   %al
  80042158eb:	0f b6 c0             	movzbl %al,%eax
  80042158ee:	89 45 cc             	mov    %eax,-0x34(%rbp)
				break;
  80042158f1:	e9 9f 00 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_basic_block:
				basic_block = 1;
  80042158f6:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%rbp)
				break;
  80042158fd:	e9 93 00 00 00       	jmpq   8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_const_add_pc:
				address += ADDRESS(255);
  8004215902:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215906:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  800421590a:	0f b6 c0             	movzbl %al,%eax
  800421590d:	ba ff 00 00 00       	mov    $0xff,%edx
  8004215912:	89 d1                	mov    %edx,%ecx
  8004215914:	29 c1                	sub    %eax,%ecx
  8004215916:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421591a:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  800421591e:	0f b6 d8             	movzbl %al,%ebx
  8004215921:	89 c8                	mov    %ecx,%eax
  8004215923:	99                   	cltd   
  8004215924:	f7 fb                	idiv   %ebx
  8004215926:	89 c2                	mov    %eax,%edx
  8004215928:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421592c:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215930:	0f b6 c0             	movzbl %al,%eax
  8004215933:	0f af c2             	imul   %edx,%eax
  8004215936:	48 98                	cltq   
  8004215938:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  800421593c:	eb 57                	jmp    8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_fixed_advance_pc:
				address += dbg->decode(&p, 2);
  800421593e:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215945:	00 00 00 
  8004215948:	48 8b 00             	mov    (%rax),%rax
  800421594b:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421594f:	48 8d 95 78 ff ff ff 	lea    -0x88(%rbp),%rdx
  8004215956:	be 02 00 00 00       	mov    $0x2,%esi
  800421595b:	48 89 d7             	mov    %rdx,%rdi
  800421595e:	ff d0                	callq  *%rax
  8004215960:	48 01 45 e8          	add    %rax,-0x18(%rbp)
				break;
  8004215964:	eb 2f                	jmp    8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_prologue_end:
				prologue_end = 1;
  8004215966:	c7 45 b4 01 00 00 00 	movl   $0x1,-0x4c(%rbp)
				break;
  800421596d:	eb 26                	jmp    8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_epilogue_begin:
				epilogue_begin = 1;
  800421596f:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%rbp)
				break;
  8004215976:	eb 1d                	jmp    8004215995 <_dwarf_lineno_run_program+0x45e>
			case DW_LNS_set_isa:
				isa = _dwarf_decode_uleb128(&p);
  8004215978:	48 8d 85 78 ff ff ff 	lea    -0x88(%rbp),%rax
  800421597f:	48 89 c7             	mov    %rax,%rdi
  8004215982:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004215989:	00 00 00 
  800421598c:	ff d0                	callq  *%rax
  800421598e:	48 89 45 98          	mov    %rax,-0x68(%rbp)
				break;
  8004215992:	eb 01                	jmp    8004215995 <_dwarf_lineno_run_program+0x45e>
			default:
				/* Unrecognized extened opcodes. What to do? */
				break;
  8004215994:	90                   	nop
			}

		} else {
  8004215995:	e9 32 01 00 00       	jmpq   8004215acc <_dwarf_lineno_run_program+0x595>

			/*
			 * Special Opcodes.
			 */

			line += LINE(*p);
  800421599a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421599e:	0f b6 40 1a          	movzbl 0x1a(%rax),%eax
  80042159a2:	0f be c8             	movsbl %al,%ecx
  80042159a5:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159ac:	0f b6 00             	movzbl (%rax),%eax
  80042159af:	0f b6 d0             	movzbl %al,%edx
  80042159b2:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159b6:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042159ba:	0f b6 c0             	movzbl %al,%eax
  80042159bd:	29 c2                	sub    %eax,%edx
  80042159bf:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159c3:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042159c7:	0f b6 f0             	movzbl %al,%esi
  80042159ca:	89 d0                	mov    %edx,%eax
  80042159cc:	99                   	cltd   
  80042159cd:	f7 fe                	idiv   %esi
  80042159cf:	89 d0                	mov    %edx,%eax
  80042159d1:	01 c8                	add    %ecx,%eax
  80042159d3:	48 98                	cltq   
  80042159d5:	48 01 45 d8          	add    %rax,-0x28(%rbp)
			address += ADDRESS(*p);
  80042159d9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042159e0:	0f b6 00             	movzbl (%rax),%eax
  80042159e3:	0f b6 d0             	movzbl %al,%edx
  80042159e6:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159ea:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  80042159ee:	0f b6 c0             	movzbl %al,%eax
  80042159f1:	89 d1                	mov    %edx,%ecx
  80042159f3:	29 c1                	sub    %eax,%ecx
  80042159f5:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042159f9:	0f b6 40 1b          	movzbl 0x1b(%rax),%eax
  80042159fd:	0f b6 d8             	movzbl %al,%ebx
  8004215a00:	89 c8                	mov    %ecx,%eax
  8004215a02:	99                   	cltd   
  8004215a03:	f7 fb                	idiv   %ebx
  8004215a05:	89 c2                	mov    %eax,%edx
  8004215a07:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a0b:	0f b6 40 18          	movzbl 0x18(%rax),%eax
  8004215a0f:	0f b6 c0             	movzbl %al,%eax
  8004215a12:	0f af c2             	imul   %edx,%eax
  8004215a15:	48 98                	cltq   
  8004215a17:	48 01 45 e8          	add    %rax,-0x18(%rbp)
			APPEND_ROW;
  8004215a1b:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004215a22:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215a26:	73 0a                	jae    8004215a32 <_dwarf_lineno_run_program+0x4fb>
  8004215a28:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215a2d:	e9 b3 00 00 00       	jmpq   8004215ae5 <_dwarf_lineno_run_program+0x5ae>
  8004215a32:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a36:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215a3a:	48 89 10             	mov    %rdx,(%rax)
  8004215a3d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a41:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
  8004215a48:	00 
  8004215a49:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a4d:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215a51:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004215a55:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a59:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004215a5d:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004215a61:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215a65:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a69:	48 89 50 20          	mov    %rdx,0x20(%rax)
  8004215a6d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a71:	8b 55 c8             	mov    -0x38(%rbp),%edx
  8004215a74:	89 50 28             	mov    %edx,0x28(%rax)
  8004215a77:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a7b:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004215a7e:	89 50 2c             	mov    %edx,0x2c(%rax)
  8004215a81:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004215a85:	8b 55 c4             	mov    -0x3c(%rbp),%edx
  8004215a88:	89 50 30             	mov    %edx,0x30(%rax)
  8004215a8b:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a8f:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
  8004215a96:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215a9a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  8004215a9e:	48 89 90 80 00 00 00 	mov    %rdx,0x80(%rax)
			basic_block = 0;
  8004215aa5:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%rbp)
			prologue_end = 0;
  8004215aac:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
			epilogue_begin = 0;
  8004215ab3:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%rbp)
			p++;
  8004215aba:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215ac1:	48 83 c0 01          	add    $0x1,%rax
  8004215ac5:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
	RESET_REGISTERS;

	/*
	 * Start line number program.
	 */
	while (p < pe) {
  8004215acc:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  8004215ad3:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
  8004215ada:	0f 82 e2 fa ff ff    	jb     80042155c2 <_dwarf_lineno_run_program+0x8b>
			epilogue_begin = 0;
			p++;
		}
	}

	return (DW_DLE_NONE);
  8004215ae0:	b8 00 00 00 00       	mov    $0x0,%eax

#undef  RESET_REGISTERS
#undef  APPEND_ROW
#undef  LINE
#undef  ADDRESS
}
  8004215ae5:	48 81 c4 98 00 00 00 	add    $0x98,%rsp
  8004215aec:	5b                   	pop    %rbx
  8004215aed:	5d                   	pop    %rbp
  8004215aee:	c3                   	retq   

0000008004215aef <_dwarf_lineno_add_file>:

static int
_dwarf_lineno_add_file(Dwarf_LineInfo li, uint8_t **p, const char *compdir,
		       Dwarf_Error *error, Dwarf_Debug dbg)
{
  8004215aef:	55                   	push   %rbp
  8004215af0:	48 89 e5             	mov    %rsp,%rbp
  8004215af3:	53                   	push   %rbx
  8004215af4:	48 83 ec 48          	sub    $0x48,%rsp
  8004215af8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004215afc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  8004215b00:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  8004215b04:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
  8004215b08:	4c 89 45 b8          	mov    %r8,-0x48(%rbp)
	char *fname;
	//const char *dirname;
	uint8_t *src;
	int slen;

	src = *p;
  8004215b0c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b10:	48 8b 00             	mov    (%rax),%rax
  8004215b13:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  DWARF_SET_ERROR(dbg, error, DW_DLE_MEMORY);
  return (DW_DLE_MEMORY);
  }
*/  
	//lf->lf_fullpath = NULL;
	fname = (char *) src;
  8004215b17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004215b1b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	src += strlen(fname) + 1;
  8004215b1f:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
  8004215b23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215b27:	48 89 c7             	mov    %rax,%rdi
  8004215b2a:	48 b8 a6 08 21 04 80 	movabs $0x80042108a6,%rax
  8004215b31:	00 00 00 
  8004215b34:	ff d0                	callq  *%rax
  8004215b36:	48 98                	cltq   
  8004215b38:	48 83 c0 01          	add    $0x1,%rax
  8004215b3c:	48 01 d8             	add    %rbx,%rax
  8004215b3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	_dwarf_decode_uleb128(&src);
  8004215b43:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215b47:	48 89 c7             	mov    %rax,%rdi
  8004215b4a:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004215b51:	00 00 00 
  8004215b54:	ff d0                	callq  *%rax
	   snprintf(lf->lf_fullpath, slen, "%s/%s", dirname,
	   lf->lf_fname);
	   }
	   }
	*/
	_dwarf_decode_uleb128(&src);
  8004215b56:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215b5a:	48 89 c7             	mov    %rax,%rdi
  8004215b5d:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004215b64:	00 00 00 
  8004215b67:	ff d0                	callq  *%rax
	_dwarf_decode_uleb128(&src);
  8004215b69:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004215b6d:	48 89 c7             	mov    %rax,%rdi
  8004215b70:	48 b8 ce 17 21 04 80 	movabs $0x80042117ce,%rax
  8004215b77:	00 00 00 
  8004215b7a:	ff d0                	callq  *%rax
	//STAILQ_INSERT_TAIL(&li->li_lflist, lf, lf_next);
	//li->li_lflen++;

	*p = src;
  8004215b7c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004215b80:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215b84:	48 89 10             	mov    %rdx,(%rax)

	return (DW_DLE_NONE);
  8004215b87:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004215b8c:	48 83 c4 48          	add    $0x48,%rsp
  8004215b90:	5b                   	pop    %rbx
  8004215b91:	5d                   	pop    %rbp
  8004215b92:	c3                   	retq   

0000008004215b93 <_dwarf_lineno_init>:

int     
_dwarf_lineno_init(Dwarf_Die *die, uint64_t offset, Dwarf_LineInfo linfo, Dwarf_Addr pc, Dwarf_Error *error)
{   
  8004215b93:	55                   	push   %rbp
  8004215b94:	48 89 e5             	mov    %rsp,%rbp
  8004215b97:	53                   	push   %rbx
  8004215b98:	48 81 ec 08 01 00 00 	sub    $0x108,%rsp
  8004215b9f:	48 89 bd 18 ff ff ff 	mov    %rdi,-0xe8(%rbp)
  8004215ba6:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
  8004215bad:	48 89 95 08 ff ff ff 	mov    %rdx,-0xf8(%rbp)
  8004215bb4:	48 89 8d 00 ff ff ff 	mov    %rcx,-0x100(%rbp)
  8004215bbb:	4c 89 85 f8 fe ff ff 	mov    %r8,-0x108(%rbp)
	Dwarf_Section myds = {.ds_name = ".debug_line"};
  8004215bc2:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  8004215bc9:	00 
  8004215bca:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  8004215bd1:	00 
  8004215bd2:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  8004215bd9:	00 
  8004215bda:	48 c7 45 a8 00 00 00 	movq   $0x0,-0x58(%rbp)
  8004215be1:	00 
  8004215be2:	48 b8 d0 05 22 04 80 	movabs $0x80042205d0,%rax
  8004215be9:	00 00 00 
  8004215bec:	48 89 45 90          	mov    %rax,-0x70(%rbp)
	Dwarf_Section *ds = &myds;
  8004215bf0:	48 8d 45 90          	lea    -0x70(%rbp),%rax
  8004215bf4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	//Dwarf_LineFile lf, tlf;
	uint64_t length, hdroff, endoff;
	uint8_t *p;
	int dwarf_size, i, ret;
            
	cu = die->cu_header;
  8004215bf8:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004215bff:	48 8b 80 60 03 00 00 	mov    0x360(%rax),%rax
  8004215c06:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	assert(cu != NULL); 
  8004215c0a:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  8004215c0f:	75 35                	jne    8004215c46 <_dwarf_lineno_init+0xb3>
  8004215c11:	48 b9 dc 05 22 04 80 	movabs $0x80042205dc,%rcx
  8004215c18:	00 00 00 
  8004215c1b:	48 ba e7 05 22 04 80 	movabs $0x80042205e7,%rdx
  8004215c22:	00 00 00 
  8004215c25:	be 13 01 00 00       	mov    $0x113,%esi
  8004215c2a:	48 bf fc 05 22 04 80 	movabs $0x80042205fc,%rdi
  8004215c31:	00 00 00 
  8004215c34:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c39:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215c40:	00 00 00 
  8004215c43:	41 ff d0             	callq  *%r8
	assert(dbg != NULL);
  8004215c46:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215c4d:	00 00 00 
  8004215c50:	48 8b 00             	mov    (%rax),%rax
  8004215c53:	48 85 c0             	test   %rax,%rax
  8004215c56:	75 35                	jne    8004215c8d <_dwarf_lineno_init+0xfa>
  8004215c58:	48 b9 13 06 22 04 80 	movabs $0x8004220613,%rcx
  8004215c5f:	00 00 00 
  8004215c62:	48 ba e7 05 22 04 80 	movabs $0x80042205e7,%rdx
  8004215c69:	00 00 00 
  8004215c6c:	be 14 01 00 00       	mov    $0x114,%esi
  8004215c71:	48 bf fc 05 22 04 80 	movabs $0x80042205fc,%rdi
  8004215c78:	00 00 00 
  8004215c7b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215c80:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004215c87:	00 00 00 
  8004215c8a:	41 ff d0             	callq  *%r8

	if ((_dwarf_find_section_enhanced(ds)) != 0)
  8004215c8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215c91:	48 89 c7             	mov    %rax,%rdi
  8004215c94:	48 b8 5b 2f 21 04 80 	movabs $0x8004212f5b,%rax
  8004215c9b:	00 00 00 
  8004215c9e:	ff d0                	callq  *%rax
  8004215ca0:	85 c0                	test   %eax,%eax
  8004215ca2:	74 0a                	je     8004215cae <_dwarf_lineno_init+0x11b>
		return (DW_DLE_NONE);
  8004215ca4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004215ca9:	e9 4f 04 00 00       	jmpq   80042160fd <_dwarf_lineno_init+0x56a>

	li = linfo;
  8004215cae:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004215cb5:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	 break;
	 }
	 }
	*/

	length = dbg->read(ds->ds_data, &offset, 4);
  8004215cb9:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215cc0:	00 00 00 
  8004215cc3:	48 8b 00             	mov    (%rax),%rax
  8004215cc6:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215cca:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215cce:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215cd2:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215cd9:	ba 04 00 00 00       	mov    $0x4,%edx
  8004215cde:	48 89 cf             	mov    %rcx,%rdi
  8004215ce1:	ff d0                	callq  *%rax
  8004215ce3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if (length == 0xffffffff) {
  8004215ce7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  8004215cec:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004215cf0:	75 37                	jne    8004215d29 <_dwarf_lineno_init+0x196>
		dwarf_size = 8;
  8004215cf2:	c7 45 e4 08 00 00 00 	movl   $0x8,-0x1c(%rbp)
		length = dbg->read(ds->ds_data, &offset, 8);
  8004215cf9:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215d00:	00 00 00 
  8004215d03:	48 8b 00             	mov    (%rax),%rax
  8004215d06:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d0a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215d0e:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215d12:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215d19:	ba 08 00 00 00       	mov    $0x8,%edx
  8004215d1e:	48 89 cf             	mov    %rcx,%rdi
  8004215d21:	ff d0                	callq  *%rax
  8004215d23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004215d27:	eb 07                	jmp    8004215d30 <_dwarf_lineno_init+0x19d>
	} else
		dwarf_size = 4;
  8004215d29:	c7 45 e4 04 00 00 00 	movl   $0x4,-0x1c(%rbp)

	if (length > ds->ds_size - offset) {
  8004215d30:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215d34:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004215d38:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215d3f:	48 29 c2             	sub    %rax,%rdx
  8004215d42:	48 89 d0             	mov    %rdx,%rax
  8004215d45:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004215d49:	73 0a                	jae    8004215d55 <_dwarf_lineno_init+0x1c2>
		DWARF_SET_ERROR(dbg, error, DW_DLE_DEBUG_LINE_LENGTH_BAD);
		return (DW_DLE_DEBUG_LINE_LENGTH_BAD);
  8004215d4b:	b8 0f 00 00 00       	mov    $0xf,%eax
  8004215d50:	e9 a8 03 00 00       	jmpq   80042160fd <_dwarf_lineno_init+0x56a>
	}
	/*
	 * Read in line number program header.
	 */
	li->li_length = length;
  8004215d55:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215d59:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215d5d:	48 89 10             	mov    %rdx,(%rax)
	endoff = offset + length;
  8004215d60:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  8004215d67:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004215d6b:	48 01 d0             	add    %rdx,%rax
  8004215d6e:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	li->li_version = dbg->read(ds->ds_data, &offset, 2); /* FIXME: verify version */
  8004215d72:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215d79:	00 00 00 
  8004215d7c:	48 8b 00             	mov    (%rax),%rax
  8004215d7f:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215d83:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215d87:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215d8b:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215d92:	ba 02 00 00 00       	mov    $0x2,%edx
  8004215d97:	48 89 cf             	mov    %rcx,%rdi
  8004215d9a:	ff d0                	callq  *%rax
  8004215d9c:	89 c2                	mov    %eax,%edx
  8004215d9e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215da2:	66 89 50 08          	mov    %dx,0x8(%rax)
	li->li_hdrlen = dbg->read(ds->ds_data, &offset, dwarf_size);
  8004215da6:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215dad:	00 00 00 
  8004215db0:	48 8b 00             	mov    (%rax),%rax
  8004215db3:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215db7:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215dbb:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215dbf:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004215dc2:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215dc9:	48 89 cf             	mov    %rcx,%rdi
  8004215dcc:	ff d0                	callq  *%rax
  8004215dce:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004215dd2:	48 89 42 10          	mov    %rax,0x10(%rdx)
	hdroff = offset;
  8004215dd6:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215ddd:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
	li->li_minlen = dbg->read(ds->ds_data, &offset, 1);
  8004215de1:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215de8:	00 00 00 
  8004215deb:	48 8b 00             	mov    (%rax),%rax
  8004215dee:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215df2:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215df6:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215dfa:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e01:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e06:	48 89 cf             	mov    %rcx,%rdi
  8004215e09:	ff d0                	callq  *%rax
  8004215e0b:	89 c2                	mov    %eax,%edx
  8004215e0d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e11:	88 50 18             	mov    %dl,0x18(%rax)
	li->li_defstmt = dbg->read(ds->ds_data, &offset, 1);
  8004215e14:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e1b:	00 00 00 
  8004215e1e:	48 8b 00             	mov    (%rax),%rax
  8004215e21:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e25:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e29:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215e2d:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e34:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e39:	48 89 cf             	mov    %rcx,%rdi
  8004215e3c:	ff d0                	callq  *%rax
  8004215e3e:	89 c2                	mov    %eax,%edx
  8004215e40:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e44:	88 50 19             	mov    %dl,0x19(%rax)
	li->li_lbase = dbg->read(ds->ds_data, &offset, 1);
  8004215e47:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e4e:	00 00 00 
  8004215e51:	48 8b 00             	mov    (%rax),%rax
  8004215e54:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e58:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e5c:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215e60:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e67:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e6c:	48 89 cf             	mov    %rcx,%rdi
  8004215e6f:	ff d0                	callq  *%rax
  8004215e71:	89 c2                	mov    %eax,%edx
  8004215e73:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215e77:	88 50 1a             	mov    %dl,0x1a(%rax)
	li->li_lrange = dbg->read(ds->ds_data, &offset, 1);
  8004215e7a:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215e81:	00 00 00 
  8004215e84:	48 8b 00             	mov    (%rax),%rax
  8004215e87:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215e8b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215e8f:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215e93:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215e9a:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215e9f:	48 89 cf             	mov    %rcx,%rdi
  8004215ea2:	ff d0                	callq  *%rax
  8004215ea4:	89 c2                	mov    %eax,%edx
  8004215ea6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215eaa:	88 50 1b             	mov    %dl,0x1b(%rax)
	li->li_opbase = dbg->read(ds->ds_data, &offset, 1);
  8004215ead:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215eb4:	00 00 00 
  8004215eb7:	48 8b 00             	mov    (%rax),%rax
  8004215eba:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215ebe:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215ec2:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215ec6:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215ecd:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215ed2:	48 89 cf             	mov    %rcx,%rdi
  8004215ed5:	ff d0                	callq  *%rax
  8004215ed7:	89 c2                	mov    %eax,%edx
  8004215ed9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215edd:	88 50 1c             	mov    %dl,0x1c(%rax)
	//STAILQ_INIT(&li->li_lflist);
	//STAILQ_INIT(&li->li_lnlist);

	if ((int)li->li_hdrlen - 5 < li->li_opbase - 1) {
  8004215ee0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215ee4:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004215ee8:	8d 50 fb             	lea    -0x5(%rax),%edx
  8004215eeb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215eef:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215ef3:	0f b6 c0             	movzbl %al,%eax
  8004215ef6:	83 e8 01             	sub    $0x1,%eax
  8004215ef9:	39 c2                	cmp    %eax,%edx
  8004215efb:	7d 0c                	jge    8004215f09 <_dwarf_lineno_init+0x376>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215efd:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215f04:	e9 f1 01 00 00       	jmpq   80042160fa <_dwarf_lineno_init+0x567>
	}

	li->li_oplen = global_std_op;
  8004215f09:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215f0d:	48 bb 80 e4 6d 04 80 	movabs $0x80046de480,%rbx
  8004215f14:	00 00 00 
  8004215f17:	48 89 58 20          	mov    %rbx,0x20(%rax)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215f1b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
  8004215f22:	eb 41                	jmp    8004215f65 <_dwarf_lineno_init+0x3d2>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);
  8004215f24:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215f28:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004215f2c:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004215f2f:	48 98                	cltq   
  8004215f31:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  8004215f35:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  8004215f3c:	00 00 00 
  8004215f3f:	48 8b 00             	mov    (%rax),%rax
  8004215f42:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215f46:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  8004215f4a:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
  8004215f4e:	48 8d b5 10 ff ff ff 	lea    -0xf0(%rbp),%rsi
  8004215f55:	ba 01 00 00 00       	mov    $0x1,%edx
  8004215f5a:	48 89 cf             	mov    %rcx,%rdi
  8004215f5d:	ff d0                	callq  *%rax
  8004215f5f:	88 03                	mov    %al,(%rbx)

	/*
	 * Read in std opcode arg length list. Note that the first
	 * element is not used.
	 */
	for (i = 1; i < li->li_opbase; i++)
  8004215f61:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  8004215f65:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215f69:	0f b6 40 1c          	movzbl 0x1c(%rax),%eax
  8004215f6d:	0f b6 c0             	movzbl %al,%eax
  8004215f70:	3b 45 e0             	cmp    -0x20(%rbp),%eax
  8004215f73:	7f af                	jg     8004215f24 <_dwarf_lineno_init+0x391>
		li->li_oplen[i] = dbg->read(ds->ds_data, &offset, 1);

	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
  8004215f75:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  8004215f7c:	00 
	p = ds->ds_data + offset;
  8004215f7d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215f81:	48 8b 50 08          	mov    0x8(%rax),%rdx
  8004215f85:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004215f8c:	48 01 d0             	add    %rdx,%rax
  8004215f8f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	while (*p != '\0') {
  8004215f96:	eb 1f                	jmp    8004215fb7 <_dwarf_lineno_init+0x424>
		while (*p++ != '\0')
  8004215f98:	90                   	nop
  8004215f99:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215fa0:	48 8d 50 01          	lea    0x1(%rax),%rdx
  8004215fa4:	48 89 95 28 ff ff ff 	mov    %rdx,-0xd8(%rbp)
  8004215fab:	0f b6 00             	movzbl (%rax),%eax
  8004215fae:	84 c0                	test   %al,%al
  8004215fb0:	75 e7                	jne    8004215f99 <_dwarf_lineno_init+0x406>
			;
		length++;
  8004215fb2:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
	/*
	 * Check how many strings in the include dir string array.
	 */
	length = 0;
	p = ds->ds_data + offset;
	while (*p != '\0') {
  8004215fb7:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215fbe:	0f b6 00             	movzbl (%rax),%eax
  8004215fc1:	84 c0                	test   %al,%al
  8004215fc3:	75 d3                	jne    8004215f98 <_dwarf_lineno_init+0x405>
		while (*p++ != '\0')
			;
		length++;
	}
	li->li_inclen = length;
  8004215fc5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004215fc9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004215fcd:	48 89 50 30          	mov    %rdx,0x30(%rax)

	/* Sanity check. */
	if (p - ds->ds_data > (int) ds->ds_size) {
  8004215fd1:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004215fd8:	48 89 c2             	mov    %rax,%rdx
  8004215fdb:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215fdf:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004215fe3:	48 29 c2             	sub    %rax,%rdx
  8004215fe6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004215fea:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004215fee:	48 98                	cltq   
  8004215ff0:	48 39 c2             	cmp    %rax,%rdx
  8004215ff3:	7e 0c                	jle    8004216001 <_dwarf_lineno_init+0x46e>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  8004215ff5:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  8004215ffc:	e9 f9 00 00 00       	jmpq   80042160fa <_dwarf_lineno_init+0x567>
	}
	p++;
  8004216001:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216008:	48 83 c0 01          	add    $0x1,%rax
  800421600c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004216013:	eb 3c                	jmp    8004216051 <_dwarf_lineno_init+0x4be>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
  8004216015:	48 b8 88 56 23 04 80 	movabs $0x8004235688,%rax
  800421601c:	00 00 00 
  800421601f:	48 8b 08             	mov    (%rax),%rcx
  8004216022:	48 8b 95 f8 fe ff ff 	mov    -0x108(%rbp),%rdx
  8004216029:	48 8d b5 28 ff ff ff 	lea    -0xd8(%rbp),%rsi
  8004216030:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216034:	49 89 c8             	mov    %rcx,%r8
  8004216037:	48 89 d1             	mov    %rdx,%rcx
  800421603a:	ba 00 00 00 00       	mov    $0x0,%edx
  800421603f:	48 89 c7             	mov    %rax,%rdi
  8004216042:	48 b8 ef 5a 21 04 80 	movabs $0x8004215aef,%rax
  8004216049:	00 00 00 
  800421604c:	ff d0                	callq  *%rax
  800421604e:	89 45 dc             	mov    %eax,-0x24(%rbp)
	p++;

	/*
	 * Process file list.
	 */
	while (*p != '\0') {
  8004216051:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216058:	0f b6 00             	movzbl (%rax),%eax
  800421605b:	84 c0                	test   %al,%al
  800421605d:	75 b6                	jne    8004216015 <_dwarf_lineno_init+0x482>
		ret = _dwarf_lineno_add_file(li, &p, NULL, error, dbg);
		//p++;
	}

	p++;
  800421605f:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216066:	48 83 c0 01          	add    $0x1,%rax
  800421606a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
	/* Sanity check. */
	if (p - ds->ds_data - hdroff != li->li_hdrlen) {
  8004216071:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004216078:	48 89 c2             	mov    %rax,%rdx
  800421607b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421607f:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004216083:	48 29 c2             	sub    %rax,%rdx
  8004216086:	48 89 d0             	mov    %rdx,%rax
  8004216089:	48 2b 45 b0          	sub    -0x50(%rbp),%rax
  800421608d:	48 89 c2             	mov    %rax,%rdx
  8004216090:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004216094:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216098:	48 39 c2             	cmp    %rax,%rdx
  800421609b:	74 09                	je     80042160a6 <_dwarf_lineno_init+0x513>
		ret = DW_DLE_DEBUG_LINE_LENGTH_BAD;
  800421609d:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%rbp)
		DWARF_SET_ERROR(dbg, error, ret);
		goto fail_cleanup;
  80042160a4:	eb 54                	jmp    80042160fa <_dwarf_lineno_init+0x567>
	}

	/*
	 * Process line number program.
	 */
	ret = _dwarf_lineno_run_program(cu, li, p, ds->ds_data + endoff, pc,
  80042160a6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042160aa:	48 8b 50 08          	mov    0x8(%rax),%rdx
  80042160ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  80042160b2:	48 8d 0c 02          	lea    (%rdx,%rax,1),%rcx
  80042160b6:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  80042160bd:	4c 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%r8
  80042160c4:	48 8b bd 00 ff ff ff 	mov    -0x100(%rbp),%rdi
  80042160cb:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
  80042160cf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042160d3:	4d 89 c1             	mov    %r8,%r9
  80042160d6:	49 89 f8             	mov    %rdi,%r8
  80042160d9:	48 89 c7             	mov    %rax,%rdi
  80042160dc:	48 b8 37 55 21 04 80 	movabs $0x8004215537,%rax
  80042160e3:	00 00 00 
  80042160e6:	ff d0                	callq  *%rax
  80042160e8:	89 45 dc             	mov    %eax,-0x24(%rbp)
					error);
	if (ret != DW_DLE_NONE)
  80042160eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  80042160ef:	74 02                	je     80042160f3 <_dwarf_lineno_init+0x560>
		goto fail_cleanup;
  80042160f1:	eb 07                	jmp    80042160fa <_dwarf_lineno_init+0x567>

	//cu->cu_lineinfo = li;

	return (DW_DLE_NONE);
  80042160f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042160f8:	eb 03                	jmp    80042160fd <_dwarf_lineno_init+0x56a>
fail_cleanup:

	/*if (li->li_oplen)
	  free(li->li_oplen);*/

	return (ret);
  80042160fa:	8b 45 dc             	mov    -0x24(%rbp),%eax
}
  80042160fd:	48 81 c4 08 01 00 00 	add    $0x108,%rsp
  8004216104:	5b                   	pop    %rbx
  8004216105:	5d                   	pop    %rbp
  8004216106:	c3                   	retq   

0000008004216107 <dwarf_srclines>:

int
dwarf_srclines(Dwarf_Die *die, Dwarf_Line linebuf, Dwarf_Addr pc, Dwarf_Error *error)
{
  8004216107:	55                   	push   %rbp
  8004216108:	48 89 e5             	mov    %rsp,%rbp
  800421610b:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
  8004216112:	48 89 bd 68 ff ff ff 	mov    %rdi,-0x98(%rbp)
  8004216119:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
  8004216120:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
  8004216127:	48 89 8d 50 ff ff ff 	mov    %rcx,-0xb0(%rbp)
	_Dwarf_LineInfo li;
	Dwarf_Attribute *at;

	assert(die);
  800421612e:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
  8004216135:	00 
  8004216136:	75 35                	jne    800421616d <dwarf_srclines+0x66>
  8004216138:	48 b9 1f 06 22 04 80 	movabs $0x800422061f,%rcx
  800421613f:	00 00 00 
  8004216142:	48 ba e7 05 22 04 80 	movabs $0x80042205e7,%rdx
  8004216149:	00 00 00 
  800421614c:	be 9a 01 00 00       	mov    $0x19a,%esi
  8004216151:	48 bf fc 05 22 04 80 	movabs $0x80042205fc,%rdi
  8004216158:	00 00 00 
  800421615b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216160:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216167:	00 00 00 
  800421616a:	41 ff d0             	callq  *%r8
	assert(linebuf);
  800421616d:	48 83 bd 60 ff ff ff 	cmpq   $0x0,-0xa0(%rbp)
  8004216174:	00 
  8004216175:	75 35                	jne    80042161ac <dwarf_srclines+0xa5>
  8004216177:	48 b9 23 06 22 04 80 	movabs $0x8004220623,%rcx
  800421617e:	00 00 00 
  8004216181:	48 ba e7 05 22 04 80 	movabs $0x80042205e7,%rdx
  8004216188:	00 00 00 
  800421618b:	be 9b 01 00 00       	mov    $0x19b,%esi
  8004216190:	48 bf fc 05 22 04 80 	movabs $0x80042205fc,%rdi
  8004216197:	00 00 00 
  800421619a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421619f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042161a6:	00 00 00 
  80042161a9:	41 ff d0             	callq  *%r8

	memset(&li, 0, sizeof(_Dwarf_LineInfo));
  80042161ac:	48 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%rax
  80042161b3:	ba 88 00 00 00       	mov    $0x88,%edx
  80042161b8:	be 00 00 00 00       	mov    $0x0,%esi
  80042161bd:	48 89 c7             	mov    %rax,%rdi
  80042161c0:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042161c7:	00 00 00 
  80042161ca:	ff d0                	callq  *%rax

	if ((at = _dwarf_attr_find(die, DW_AT_stmt_list)) == NULL) {
  80042161cc:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  80042161d3:	be 10 00 00 00       	mov    $0x10,%esi
  80042161d8:	48 89 c7             	mov    %rax,%rdi
  80042161db:	48 b8 e0 2a 21 04 80 	movabs $0x8004212ae0,%rax
  80042161e2:	00 00 00 
  80042161e5:	ff d0                	callq  *%rax
  80042161e7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042161eb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  80042161f0:	75 0a                	jne    80042161fc <dwarf_srclines+0xf5>
		DWARF_SET_ERROR(dbg, error, DW_DLE_NO_ENTRY);
		return (DW_DLV_NO_ENTRY);
  80042161f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  80042161f7:	e9 84 00 00 00       	jmpq   8004216280 <dwarf_srclines+0x179>
	}

	if (_dwarf_lineno_init(die, at->u[0].u64, &li, pc, error) !=
  80042161fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216200:	48 8b 70 28          	mov    0x28(%rax),%rsi
  8004216204:	48 8b bd 50 ff ff ff 	mov    -0xb0(%rbp),%rdi
  800421620b:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
  8004216212:	48 8d 95 70 ff ff ff 	lea    -0x90(%rbp),%rdx
  8004216219:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216220:	49 89 f8             	mov    %rdi,%r8
  8004216223:	48 89 c7             	mov    %rax,%rdi
  8004216226:	48 b8 93 5b 21 04 80 	movabs $0x8004215b93,%rax
  800421622d:	00 00 00 
  8004216230:	ff d0                	callq  *%rax
  8004216232:	85 c0                	test   %eax,%eax
  8004216234:	74 07                	je     800421623d <dwarf_srclines+0x136>
	    DW_DLE_NONE)
	{
		return (DW_DLV_ERROR);
  8004216236:	b8 01 00 00 00       	mov    $0x1,%eax
  800421623b:	eb 43                	jmp    8004216280 <dwarf_srclines+0x179>
	}
	*linebuf = li.li_line;
  800421623d:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  8004216244:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  8004216248:	48 89 10             	mov    %rdx,(%rax)
  800421624b:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421624f:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216253:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  8004216257:	48 89 50 10          	mov    %rdx,0x10(%rax)
  800421625b:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421625f:	48 89 50 18          	mov    %rdx,0x18(%rax)
  8004216263:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216267:	48 89 50 20          	mov    %rdx,0x20(%rax)
  800421626b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421626f:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216273:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216277:	48 89 50 30          	mov    %rdx,0x30(%rax)

	return (DW_DLV_OK);
  800421627b:	b8 00 00 00 00       	mov    $0x0,%eax
}
  8004216280:	c9                   	leaveq 
  8004216281:	c3                   	retq   

0000008004216282 <_dwarf_find_section>:
  8004216282:	55                   	push   %rbp
  8004216283:	48 89 e5             	mov    %rsp,%rbp
  8004216286:	48 83 ec 20          	sub    $0x20,%rsp
  800421628a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421628e:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  8004216295:	00 
  8004216296:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  800421629d:	eb 57                	jmp    80042162f6 <_dwarf_find_section+0x74>
  800421629f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042162a6:	00 00 00 
  80042162a9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042162ac:	48 63 d2             	movslq %edx,%rdx
  80042162af:	48 c1 e2 05          	shl    $0x5,%rdx
  80042162b3:	48 01 d0             	add    %rdx,%rax
  80042162b6:	48 8b 00             	mov    (%rax),%rax
  80042162b9:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  80042162bd:	48 89 d6             	mov    %rdx,%rsi
  80042162c0:	48 89 c7             	mov    %rax,%rdi
  80042162c3:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  80042162ca:	00 00 00 
  80042162cd:	ff d0                	callq  *%rax
  80042162cf:	85 c0                	test   %eax,%eax
  80042162d1:	75 1f                	jne    80042162f2 <_dwarf_find_section+0x70>
  80042162d3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042162d6:	48 98                	cltq   
  80042162d8:	48 c1 e0 05          	shl    $0x5,%rax
  80042162dc:	48 89 c2             	mov    %rax,%rdx
  80042162df:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042162e6:	00 00 00 
  80042162e9:	48 01 d0             	add    %rdx,%rax
  80042162ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042162f0:	eb 0a                	jmp    80042162fc <_dwarf_find_section+0x7a>
  80042162f2:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  80042162f6:	83 7d f4 04          	cmpl   $0x4,-0xc(%rbp)
  80042162fa:	7e a3                	jle    800421629f <_dwarf_find_section+0x1d>
  80042162fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216300:	c9                   	leaveq 
  8004216301:	c3                   	retq   

0000008004216302 <find_debug_sections>:
  8004216302:	55                   	push   %rbp
  8004216303:	48 89 e5             	mov    %rsp,%rbp
  8004216306:	48 83 ec 40          	sub    $0x40,%rsp
  800421630a:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421630e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216312:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004216316:	48 c7 45 f8 00 00 20 	movq   $0x200000,-0x8(%rbp)
  800421631d:	00 
  800421631e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216322:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216326:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421632a:	48 01 d0             	add    %rdx,%rax
  800421632d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216331:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216335:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  8004216339:	0f b7 c0             	movzwl %ax,%eax
  800421633c:	48 c1 e0 06          	shl    $0x6,%rax
  8004216340:	48 89 c2             	mov    %rax,%rdx
  8004216343:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216347:	48 01 d0             	add    %rdx,%rax
  800421634a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421634e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216352:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  8004216356:	0f b7 c0             	movzwl %ax,%eax
  8004216359:	48 c1 e0 06          	shl    $0x6,%rax
  800421635d:	48 89 c2             	mov    %rax,%rdx
  8004216360:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216364:	48 01 d0             	add    %rdx,%rax
  8004216367:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421636b:	e9 4b 02 00 00       	jmpq   80042165bb <find_debug_sections+0x2b9>
  8004216370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216374:	8b 00                	mov    (%rax),%eax
  8004216376:	89 c2                	mov    %eax,%edx
  8004216378:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421637c:	48 8b 48 18          	mov    0x18(%rax),%rcx
  8004216380:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216384:	48 01 c8             	add    %rcx,%rax
  8004216387:	48 01 d0             	add    %rdx,%rax
  800421638a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421638e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216392:	48 be 2b 06 22 04 80 	movabs $0x800422062b,%rsi
  8004216399:	00 00 00 
  800421639c:	48 89 c7             	mov    %rax,%rdi
  800421639f:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  80042163a6:	00 00 00 
  80042163a9:	ff d0                	callq  *%rax
  80042163ab:	85 c0                	test   %eax,%eax
  80042163ad:	75 4b                	jne    80042163fa <find_debug_sections+0xf8>
  80042163af:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042163b3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042163ba:	00 00 00 
  80042163bd:	48 89 50 08          	mov    %rdx,0x8(%rax)
  80042163c1:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042163c8:	00 00 00 
  80042163cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042163cf:	48 89 50 10          	mov    %rdx,0x10(%rax)
  80042163d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042163d7:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042163db:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042163e2:	00 00 00 
  80042163e5:	48 89 50 18          	mov    %rdx,0x18(%rax)
  80042163e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042163ed:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042163f1:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042163f5:	e9 bc 01 00 00       	jmpq   80042165b6 <find_debug_sections+0x2b4>
  80042163fa:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042163fe:	48 be 37 06 22 04 80 	movabs $0x8004220637,%rsi
  8004216405:	00 00 00 
  8004216408:	48 89 c7             	mov    %rax,%rdi
  800421640b:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004216412:	00 00 00 
  8004216415:	ff d0                	callq  *%rax
  8004216417:	85 c0                	test   %eax,%eax
  8004216419:	75 4b                	jne    8004216466 <find_debug_sections+0x164>
  800421641b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421641f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216426:	00 00 00 
  8004216429:	48 89 50 28          	mov    %rdx,0x28(%rax)
  800421642d:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216434:	00 00 00 
  8004216437:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421643b:	48 89 50 30          	mov    %rdx,0x30(%rax)
  800421643f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216443:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216447:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421644e:	00 00 00 
  8004216451:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216455:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216459:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421645d:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216461:	e9 50 01 00 00       	jmpq   80042165b6 <find_debug_sections+0x2b4>
  8004216466:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421646a:	48 be 4f 06 22 04 80 	movabs $0x800422064f,%rsi
  8004216471:	00 00 00 
  8004216474:	48 89 c7             	mov    %rax,%rdi
  8004216477:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  800421647e:	00 00 00 
  8004216481:	ff d0                	callq  *%rax
  8004216483:	85 c0                	test   %eax,%eax
  8004216485:	75 4b                	jne    80042164d2 <find_debug_sections+0x1d0>
  8004216487:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421648b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216492:	00 00 00 
  8004216495:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216499:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042164a0:	00 00 00 
  80042164a3:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042164a7:	48 89 50 70          	mov    %rdx,0x70(%rax)
  80042164ab:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164af:	48 8b 50 20          	mov    0x20(%rax),%rdx
  80042164b3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042164ba:	00 00 00 
  80042164bd:	48 89 50 78          	mov    %rdx,0x78(%rax)
  80042164c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164c5:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042164c9:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042164cd:	e9 e4 00 00 00       	jmpq   80042165b6 <find_debug_sections+0x2b4>
  80042164d2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042164d6:	48 be 45 06 22 04 80 	movabs $0x8004220645,%rsi
  80042164dd:	00 00 00 
  80042164e0:	48 89 c7             	mov    %rax,%rdi
  80042164e3:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  80042164ea:	00 00 00 
  80042164ed:	ff d0                	callq  *%rax
  80042164ef:	85 c0                	test   %eax,%eax
  80042164f1:	75 53                	jne    8004216546 <find_debug_sections+0x244>
  80042164f3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042164f7:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042164fb:	48 89 c2             	mov    %rax,%rdx
  80042164fe:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216505:	00 00 00 
  8004216508:	48 89 50 48          	mov    %rdx,0x48(%rax)
  800421650c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216510:	48 8b 50 10          	mov    0x10(%rax),%rdx
  8004216514:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421651b:	00 00 00 
  800421651e:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216522:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216526:	48 8b 50 20          	mov    0x20(%rax),%rdx
  800421652a:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216531:	00 00 00 
  8004216534:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216538:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421653c:	48 8b 40 20          	mov    0x20(%rax),%rax
  8004216540:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  8004216544:	eb 70                	jmp    80042165b6 <find_debug_sections+0x2b4>
  8004216546:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421654a:	48 be 5b 06 22 04 80 	movabs $0x800422065b,%rsi
  8004216551:	00 00 00 
  8004216554:	48 89 c7             	mov    %rax,%rdi
  8004216557:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  800421655e:	00 00 00 
  8004216561:	ff d0                	callq  *%rax
  8004216563:	85 c0                	test   %eax,%eax
  8004216565:	75 4f                	jne    80042165b6 <find_debug_sections+0x2b4>
  8004216567:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421656b:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216572:	00 00 00 
  8004216575:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  800421657c:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216583:	00 00 00 
  8004216586:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421658a:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216591:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004216595:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216599:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  80042165a0:	00 00 00 
  80042165a3:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  80042165aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165ae:	48 8b 40 20          	mov    0x20(%rax),%rax
  80042165b2:	48 01 45 f8          	add    %rax,-0x8(%rbp)
  80042165b6:	48 83 45 f0 40       	addq   $0x40,-0x10(%rbp)
  80042165bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042165bf:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
  80042165c3:	0f 82 a7 fd ff ff    	jb     8004216370 <find_debug_sections+0x6e>
  80042165c9:	c9                   	leaveq 
  80042165ca:	c3                   	retq   

00000080042165cb <read_section_headers>:
  80042165cb:	55                   	push   %rbp
  80042165cc:	48 89 e5             	mov    %rsp,%rbp
  80042165cf:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
  80042165d6:	48 89 bd a8 fe ff ff 	mov    %rdi,-0x158(%rbp)
  80042165dd:	48 89 b5 a0 fe ff ff 	mov    %rsi,-0x160(%rbp)
  80042165e4:	48 8d b5 c0 fe ff ff 	lea    -0x140(%rbp),%rsi
  80042165eb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042165f0:	ba 14 00 00 00       	mov    $0x14,%edx
  80042165f5:	48 89 f7             	mov    %rsi,%rdi
  80042165f8:	48 89 d1             	mov    %rdx,%rcx
  80042165fb:	f3 48 ab             	rep stos %rax,%es:(%rdi)
  80042165fe:	48 c7 45 e8 00 02 00 	movq   $0x200,-0x18(%rbp)
  8004216605:	00 
  8004216606:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421660a:	48 8b 95 a0 fe ff ff 	mov    -0x160(%rbp),%rdx
  8004216611:	48 01 d0             	add    %rdx,%rax
  8004216614:	48 83 e8 01          	sub    $0x1,%rax
  8004216618:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421661c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216620:	ba 00 00 00 00       	mov    $0x0,%edx
  8004216625:	48 f7 75 e8          	divq   -0x18(%rbp)
  8004216629:	48 89 d0             	mov    %rdx,%rax
  800421662c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004216630:	48 29 c2             	sub    %rax,%rdx
  8004216633:	48 89 d0             	mov    %rdx,%rax
  8004216636:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421663a:	48 c7 85 b8 fe ff ff 	movq   $0x0,-0x148(%rbp)
  8004216641:	00 00 00 00 
  8004216645:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216649:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421664d:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  8004216654:	00 
  8004216655:	48 b8 00 00 01 04 80 	movabs $0x8004010000,%rax
  800421665c:	00 00 00 
  800421665f:	48 39 85 a8 fe ff ff 	cmp    %rax,-0x158(%rbp)
  8004216666:	75 11                	jne    8004216679 <read_section_headers+0xae>
  8004216668:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421666f:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216673:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216677:	eb 26                	jmp    800421669f <read_section_headers+0xd4>
  8004216679:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  8004216680:	48 8b 50 28          	mov    0x28(%rax),%rdx
  8004216684:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  800421668b:	48 01 c2             	add    %rax,%rdx
  800421668e:	48 b8 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rax
  8004216695:	ff ff ff 
  8004216698:	48 01 d0             	add    %rdx,%rax
  800421669b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421669f:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042166a6:	0f b7 40 3c          	movzwl 0x3c(%rax),%eax
  80042166aa:	0f b7 c0             	movzwl %ax,%eax
  80042166ad:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  80042166b0:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042166b7:	0f b7 40 3a          	movzwl 0x3a(%rax),%eax
  80042166bb:	0f b7 c0             	movzwl %ax,%eax
  80042166be:	89 45 c0             	mov    %eax,-0x40(%rbp)
  80042166c1:	48 8b 85 a8 fe ff ff 	mov    -0x158(%rbp),%rax
  80042166c8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  80042166cc:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  80042166cf:	0f af 45 c0          	imul   -0x40(%rbp),%eax
  80042166d3:	48 63 f0             	movslq %eax,%rsi
  80042166d6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042166da:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042166e1:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  80042166e5:	48 89 c7             	mov    %rax,%rdi
  80042166e8:	48 b8 0a 6d 21 04 80 	movabs $0x8004216d0a,%rax
  80042166ef:	00 00 00 
  80042166f2:	ff d0                	callq  *%rax
  80042166f4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042166f8:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  80042166fc:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004216700:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216706:	48 89 c2             	mov    %rax,%rdx
  8004216709:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421670d:	48 29 d0             	sub    %rdx,%rax
  8004216710:	48 89 c2             	mov    %rax,%rdx
  8004216713:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216717:	48 01 d0             	add    %rdx,%rax
  800421671a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  800421671e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004216725:	eb 24                	jmp    800421674b <read_section_headers+0x180>
  8004216727:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421672a:	48 98                	cltq   
  800421672c:	48 c1 e0 06          	shl    $0x6,%rax
  8004216730:	48 89 c2             	mov    %rax,%rdx
  8004216733:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004216737:	48 01 c2             	add    %rax,%rdx
  800421673a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421673d:	48 98                	cltq   
  800421673f:	48 89 94 c5 c0 fe ff 	mov    %rdx,-0x140(%rbp,%rax,8)
  8004216746:	ff 
  8004216747:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  800421674b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421674e:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216751:	7c d4                	jl     8004216727 <read_section_headers+0x15c>
  8004216753:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004216757:	0f b7 40 3e          	movzwl 0x3e(%rax),%eax
  800421675b:	0f b7 c0             	movzwl %ax,%eax
  800421675e:	48 98                	cltq   
  8004216760:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216767:	ff 
  8004216768:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421676c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216773:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216777:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421677b:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421677f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216783:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216787:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  800421678e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216792:	48 01 c8             	add    %rcx,%rax
  8004216795:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  800421679c:	48 89 c7             	mov    %rax,%rdi
  800421679f:	48 b8 0a 6d 21 04 80 	movabs $0x8004216d0a,%rax
  80042167a6:	00 00 00 
  80042167a9:	ff d0                	callq  *%rax
  80042167ab:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042167af:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042167b3:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  80042167b7:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042167bb:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  80042167bf:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  80042167c3:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042167c9:	48 29 c2             	sub    %rax,%rdx
  80042167cc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042167d0:	48 01 c2             	add    %rax,%rdx
  80042167d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042167d7:	48 01 d0             	add    %rdx,%rax
  80042167da:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  80042167de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  80042167e5:	e9 04 05 00 00       	jmpq   8004216cee <read_section_headers+0x723>
  80042167ea:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042167ed:	48 98                	cltq   
  80042167ef:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042167f6:	ff 
  80042167f7:	8b 00                	mov    (%rax),%eax
  80042167f9:	89 c2                	mov    %eax,%edx
  80042167fb:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  80042167ff:	48 01 d0             	add    %rdx,%rax
  8004216802:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004216806:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  800421680d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216812:	48 85 c0             	test   %rax,%rax
  8004216815:	74 35                	je     800421684c <read_section_headers+0x281>
  8004216817:	48 b9 66 06 22 04 80 	movabs $0x8004220666,%rcx
  800421681e:	00 00 00 
  8004216821:	48 ba 7f 06 22 04 80 	movabs $0x800422067f,%rdx
  8004216828:	00 00 00 
  800421682b:	be 8a 00 00 00       	mov    $0x8a,%esi
  8004216830:	48 bf 94 06 22 04 80 	movabs $0x8004220694,%rdi
  8004216837:	00 00 00 
  800421683a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421683f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216846:	00 00 00 
  8004216849:	41 ff d0             	callq  *%r8
  800421684c:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216853:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004216857:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  800421685b:	48 be 2b 06 22 04 80 	movabs $0x800422062b,%rsi
  8004216862:	00 00 00 
  8004216865:	48 89 c7             	mov    %rax,%rdi
  8004216868:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  800421686f:	00 00 00 
  8004216872:	ff d0                	callq  *%rax
  8004216874:	85 c0                	test   %eax,%eax
  8004216876:	0f 85 d8 00 00 00    	jne    8004216954 <read_section_headers+0x389>
  800421687c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421687f:	48 98                	cltq   
  8004216881:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216888:	ff 
  8004216889:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421688d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216890:	48 98                	cltq   
  8004216892:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216899:	ff 
  800421689a:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421689e:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042168a5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042168a9:	48 01 c8             	add    %rcx,%rax
  80042168ac:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042168b3:	48 89 c7             	mov    %rax,%rdi
  80042168b6:	48 b8 0a 6d 21 04 80 	movabs $0x8004216d0a,%rax
  80042168bd:	00 00 00 
  80042168c0:	ff d0                	callq  *%rax
  80042168c2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042168c5:	48 98                	cltq   
  80042168c7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042168ce:	ff 
  80042168cf:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042168d3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042168d6:	48 98                	cltq   
  80042168d8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042168df:	ff 
  80042168e0:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042168e4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  80042168e8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  80042168ec:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042168f2:	48 29 c2             	sub    %rax,%rdx
  80042168f5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042168f9:	48 01 c2             	add    %rax,%rdx
  80042168fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216900:	48 01 c2             	add    %rax,%rdx
  8004216903:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  800421690a:	00 00 00 
  800421690d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004216911:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216918:	00 00 00 
  800421691b:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421691f:	48 89 c2             	mov    %rax,%rdx
  8004216922:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216929:	00 00 00 
  800421692c:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004216930:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216933:	48 98                	cltq   
  8004216935:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  800421693c:	ff 
  800421693d:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216941:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216948:	00 00 00 
  800421694b:	48 89 50 18          	mov    %rdx,0x18(%rax)
  800421694f:	e9 96 03 00 00       	jmpq   8004216cea <read_section_headers+0x71f>
  8004216954:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216958:	48 be 37 06 22 04 80 	movabs $0x8004220637,%rsi
  800421695f:	00 00 00 
  8004216962:	48 89 c7             	mov    %rax,%rdi
  8004216965:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  800421696c:	00 00 00 
  800421696f:	ff d0                	callq  *%rax
  8004216971:	85 c0                	test   %eax,%eax
  8004216973:	0f 85 de 00 00 00    	jne    8004216a57 <read_section_headers+0x48c>
  8004216979:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421697c:	48 98                	cltq   
  800421697e:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216985:	ff 
  8004216986:	48 8b 50 18          	mov    0x18(%rax),%rdx
  800421698a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421698d:	48 98                	cltq   
  800421698f:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216996:	ff 
  8004216997:	48 8b 70 20          	mov    0x20(%rax),%rsi
  800421699b:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  80042169a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042169a6:	48 01 c8             	add    %rcx,%rax
  80042169a9:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  80042169b0:	48 89 c7             	mov    %rax,%rdi
  80042169b3:	48 b8 0a 6d 21 04 80 	movabs $0x8004216d0a,%rax
  80042169ba:	00 00 00 
  80042169bd:	ff d0                	callq  *%rax
  80042169bf:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169c2:	48 98                	cltq   
  80042169c4:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169cb:	ff 
  80042169cc:	48 8b 50 18          	mov    0x18(%rax),%rdx
  80042169d0:	8b 45 f4             	mov    -0xc(%rbp),%eax
  80042169d3:	48 98                	cltq   
  80042169d5:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  80042169dc:	ff 
  80042169dd:	48 8b 40 18          	mov    0x18(%rax),%rax
  80042169e1:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  80042169e8:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  80042169ef:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  80042169f5:	48 29 c2             	sub    %rax,%rdx
  80042169f8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  80042169fc:	48 01 c2             	add    %rax,%rdx
  80042169ff:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216a03:	48 01 c2             	add    %rax,%rdx
  8004216a06:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216a0d:	00 00 00 
  8004216a10:	48 89 50 28          	mov    %rdx,0x28(%rax)
  8004216a14:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216a1b:	00 00 00 
  8004216a1e:	48 8b 40 28          	mov    0x28(%rax),%rax
  8004216a22:	48 89 c2             	mov    %rax,%rdx
  8004216a25:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216a2c:	00 00 00 
  8004216a2f:	48 89 50 30          	mov    %rdx,0x30(%rax)
  8004216a33:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a36:	48 98                	cltq   
  8004216a38:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a3f:	ff 
  8004216a40:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216a44:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216a4b:	00 00 00 
  8004216a4e:	48 89 50 38          	mov    %rdx,0x38(%rax)
  8004216a52:	e9 93 02 00 00       	jmpq   8004216cea <read_section_headers+0x71f>
  8004216a57:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216a5b:	48 be 4f 06 22 04 80 	movabs $0x800422064f,%rsi
  8004216a62:	00 00 00 
  8004216a65:	48 89 c7             	mov    %rax,%rdi
  8004216a68:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004216a6f:	00 00 00 
  8004216a72:	ff d0                	callq  *%rax
  8004216a74:	85 c0                	test   %eax,%eax
  8004216a76:	0f 85 de 00 00 00    	jne    8004216b5a <read_section_headers+0x58f>
  8004216a7c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a7f:	48 98                	cltq   
  8004216a81:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a88:	ff 
  8004216a89:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216a8d:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216a90:	48 98                	cltq   
  8004216a92:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216a99:	ff 
  8004216a9a:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216a9e:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216aa5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216aa9:	48 01 c8             	add    %rcx,%rax
  8004216aac:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216ab3:	48 89 c7             	mov    %rax,%rdi
  8004216ab6:	48 b8 0a 6d 21 04 80 	movabs $0x8004216d0a,%rax
  8004216abd:	00 00 00 
  8004216ac0:	ff d0                	callq  *%rax
  8004216ac2:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ac5:	48 98                	cltq   
  8004216ac7:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216ace:	ff 
  8004216acf:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216ad3:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ad6:	48 98                	cltq   
  8004216ad8:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216adf:	ff 
  8004216ae0:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216ae4:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004216aeb:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  8004216af2:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216af8:	48 29 c2             	sub    %rax,%rdx
  8004216afb:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216aff:	48 01 c2             	add    %rax,%rdx
  8004216b02:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216b06:	48 01 c2             	add    %rax,%rdx
  8004216b09:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b10:	00 00 00 
  8004216b13:	48 89 50 68          	mov    %rdx,0x68(%rax)
  8004216b17:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b1e:	00 00 00 
  8004216b21:	48 8b 40 68          	mov    0x68(%rax),%rax
  8004216b25:	48 89 c2             	mov    %rax,%rdx
  8004216b28:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b2f:	00 00 00 
  8004216b32:	48 89 50 70          	mov    %rdx,0x70(%rax)
  8004216b36:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b39:	48 98                	cltq   
  8004216b3b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b42:	ff 
  8004216b43:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216b47:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b4e:	00 00 00 
  8004216b51:	48 89 50 78          	mov    %rdx,0x78(%rax)
  8004216b55:	e9 90 01 00 00       	jmpq   8004216cea <read_section_headers+0x71f>
  8004216b5a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216b5e:	48 be 45 06 22 04 80 	movabs $0x8004220645,%rsi
  8004216b65:	00 00 00 
  8004216b68:	48 89 c7             	mov    %rax,%rdi
  8004216b6b:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004216b72:	00 00 00 
  8004216b75:	ff d0                	callq  *%rax
  8004216b77:	85 c0                	test   %eax,%eax
  8004216b79:	75 65                	jne    8004216be0 <read_section_headers+0x615>
  8004216b7b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216b7e:	48 98                	cltq   
  8004216b80:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216b87:	ff 
  8004216b88:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004216b8c:	48 89 c2             	mov    %rax,%rdx
  8004216b8f:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216b96:	00 00 00 
  8004216b99:	48 89 50 48          	mov    %rdx,0x48(%rax)
  8004216b9d:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ba4:	00 00 00 
  8004216ba7:	48 8b 40 48          	mov    0x48(%rax),%rax
  8004216bab:	48 89 c2             	mov    %rax,%rdx
  8004216bae:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216bb5:	00 00 00 
  8004216bb8:	48 89 50 50          	mov    %rdx,0x50(%rax)
  8004216bbc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216bbf:	48 98                	cltq   
  8004216bc1:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216bc8:	ff 
  8004216bc9:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216bcd:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216bd4:	00 00 00 
  8004216bd7:	48 89 50 58          	mov    %rdx,0x58(%rax)
  8004216bdb:	e9 0a 01 00 00       	jmpq   8004216cea <read_section_headers+0x71f>
  8004216be0:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  8004216be4:	48 be 5b 06 22 04 80 	movabs $0x800422065b,%rsi
  8004216beb:	00 00 00 
  8004216bee:	48 89 c7             	mov    %rax,%rdi
  8004216bf1:	48 b8 74 0a 21 04 80 	movabs $0x8004210a74,%rax
  8004216bf8:	00 00 00 
  8004216bfb:	ff d0                	callq  *%rax
  8004216bfd:	85 c0                	test   %eax,%eax
  8004216bff:	0f 85 e5 00 00 00    	jne    8004216cea <read_section_headers+0x71f>
  8004216c05:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c08:	48 98                	cltq   
  8004216c0a:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c11:	ff 
  8004216c12:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216c16:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c19:	48 98                	cltq   
  8004216c1b:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c22:	ff 
  8004216c23:	48 8b 70 20          	mov    0x20(%rax),%rsi
  8004216c27:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
  8004216c2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c32:	48 01 c8             	add    %rcx,%rax
  8004216c35:	48 8d 8d b8 fe ff ff 	lea    -0x148(%rbp),%rcx
  8004216c3c:	48 89 c7             	mov    %rax,%rdi
  8004216c3f:	48 b8 0a 6d 21 04 80 	movabs $0x8004216d0a,%rax
  8004216c46:	00 00 00 
  8004216c49:	ff d0                	callq  *%rax
  8004216c4b:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c4e:	48 98                	cltq   
  8004216c50:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c57:	ff 
  8004216c58:	48 8b 50 18          	mov    0x18(%rax),%rdx
  8004216c5c:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216c5f:	48 98                	cltq   
  8004216c61:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216c68:	ff 
  8004216c69:	48 8b 40 18          	mov    0x18(%rax),%rax
  8004216c6d:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004216c74:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  8004216c7b:	48 25 00 fe ff ff    	and    $0xfffffffffffffe00,%rax
  8004216c81:	48 29 c2             	sub    %rax,%rdx
  8004216c84:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216c88:	48 01 c2             	add    %rax,%rdx
  8004216c8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216c8f:	48 01 c2             	add    %rax,%rdx
  8004216c92:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216c99:	00 00 00 
  8004216c9c:	48 89 90 88 00 00 00 	mov    %rdx,0x88(%rax)
  8004216ca3:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216caa:	00 00 00 
  8004216cad:	48 8b 80 88 00 00 00 	mov    0x88(%rax),%rax
  8004216cb4:	48 89 c2             	mov    %rax,%rdx
  8004216cb7:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216cbe:	00 00 00 
  8004216cc1:	48 89 90 90 00 00 00 	mov    %rdx,0x90(%rax)
  8004216cc8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216ccb:	48 98                	cltq   
  8004216ccd:	48 8b 84 c5 c0 fe ff 	mov    -0x140(%rbp,%rax,8),%rax
  8004216cd4:	ff 
  8004216cd5:	48 8b 50 20          	mov    0x20(%rax),%rdx
  8004216cd9:	48 b8 c0 56 23 04 80 	movabs $0x80042356c0,%rax
  8004216ce0:	00 00 00 
  8004216ce3:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
  8004216cea:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004216cee:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004216cf1:	3b 45 c4             	cmp    -0x3c(%rbp),%eax
  8004216cf4:	0f 8c f0 fa ff ff    	jl     80042167ea <read_section_headers+0x21f>
  8004216cfa:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216cfe:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  8004216d05:	48 01 d0             	add    %rdx,%rax
  8004216d08:	c9                   	leaveq 
  8004216d09:	c3                   	retq   

0000008004216d0a <readseg>:
  8004216d0a:	55                   	push   %rbp
  8004216d0b:	48 89 e5             	mov    %rsp,%rbp
  8004216d0e:	48 83 ec 30          	sub    $0x30,%rsp
  8004216d12:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004216d16:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  8004216d1a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  8004216d1e:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  8004216d22:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d26:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004216d2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216d2e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004216d32:	48 01 d0             	add    %rdx,%rax
  8004216d35:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  8004216d39:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216d3d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216d42:	48 85 c0             	test   %rax,%rax
  8004216d45:	74 35                	je     8004216d7c <readseg+0x72>
  8004216d47:	48 b9 a5 06 22 04 80 	movabs $0x80042206a5,%rcx
  8004216d4e:	00 00 00 
  8004216d51:	48 ba 7f 06 22 04 80 	movabs $0x800422067f,%rdx
  8004216d58:	00 00 00 
  8004216d5b:	be c4 00 00 00       	mov    $0xc4,%esi
  8004216d60:	48 bf 94 06 22 04 80 	movabs $0x8004220694,%rdi
  8004216d67:	00 00 00 
  8004216d6a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216d6f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216d76:	00 00 00 
  8004216d79:	41 ff d0             	callq  *%r8
  8004216d7c:	48 81 65 e8 00 fe ff 	andq   $0xfffffffffffffe00,-0x18(%rbp)
  8004216d83:	ff 
  8004216d84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004216d88:	48 c1 e8 09          	shr    $0x9,%rax
  8004216d8c:	48 83 c0 01          	add    $0x1,%rax
  8004216d90:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004216d94:	eb 3c                	jmp    8004216dd2 <readseg+0xc8>
  8004216d96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216d9a:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216d9e:	48 89 d6             	mov    %rdx,%rsi
  8004216da1:	48 89 c7             	mov    %rax,%rdi
  8004216da4:	48 b8 9a 6e 21 04 80 	movabs $0x8004216e9a,%rax
  8004216dab:	00 00 00 
  8004216dae:	ff d0                	callq  *%rax
  8004216db0:	48 81 45 e8 00 02 00 	addq   $0x200,-0x18(%rbp)
  8004216db7:	00 
  8004216db8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216dbc:	48 8b 00             	mov    (%rax),%rax
  8004216dbf:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216dc6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216dca:	48 89 10             	mov    %rdx,(%rax)
  8004216dcd:	48 83 45 d8 01       	addq   $0x1,-0x28(%rbp)
  8004216dd2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216dd6:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
  8004216dda:	72 ba                	jb     8004216d96 <readseg+0x8c>
  8004216ddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004216de0:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216de5:	48 89 c2             	mov    %rax,%rdx
  8004216de8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004216dec:	48 01 d0             	add    %rdx,%rax
  8004216def:	48 3d 00 02 00 00    	cmp    $0x200,%rax
  8004216df5:	76 2f                	jbe    8004216e26 <readseg+0x11c>
  8004216df7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004216dfb:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004216dff:	48 89 d6             	mov    %rdx,%rsi
  8004216e02:	48 89 c7             	mov    %rax,%rdi
  8004216e05:	48 b8 9a 6e 21 04 80 	movabs $0x8004216e9a,%rax
  8004216e0c:	00 00 00 
  8004216e0f:	ff d0                	callq  *%rax
  8004216e11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e15:	48 8b 00             	mov    (%rax),%rax
  8004216e18:	48 8d 90 00 02 00 00 	lea    0x200(%rax),%rdx
  8004216e1f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e23:	48 89 10             	mov    %rdx,(%rax)
  8004216e26:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004216e2a:	48 8b 00             	mov    (%rax),%rax
  8004216e2d:	25 ff 01 00 00       	and    $0x1ff,%eax
  8004216e32:	48 85 c0             	test   %rax,%rax
  8004216e35:	74 35                	je     8004216e6c <readseg+0x162>
  8004216e37:	48 b9 b8 06 22 04 80 	movabs $0x80042206b8,%rcx
  8004216e3e:	00 00 00 
  8004216e41:	48 ba 7f 06 22 04 80 	movabs $0x800422067f,%rdx
  8004216e48:	00 00 00 
  8004216e4b:	be da 00 00 00       	mov    $0xda,%esi
  8004216e50:	48 bf 94 06 22 04 80 	movabs $0x8004220694,%rdi
  8004216e57:	00 00 00 
  8004216e5a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004216e5f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004216e66:	00 00 00 
  8004216e69:	41 ff d0             	callq  *%r8
  8004216e6c:	c9                   	leaveq 
  8004216e6d:	c3                   	retq   

0000008004216e6e <waitdisk>:
  8004216e6e:	55                   	push   %rbp
  8004216e6f:	48 89 e5             	mov    %rsp,%rbp
  8004216e72:	48 83 ec 10          	sub    $0x10,%rsp
  8004216e76:	90                   	nop
  8004216e77:	c7 45 fc f7 01 00 00 	movl   $0x1f7,-0x4(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004216e7e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004216e81:	89 c2                	mov    %eax,%edx
  8004216e83:	ec                   	in     (%dx),%al
  8004216e84:	88 45 fb             	mov    %al,-0x5(%rbp)
	return data;
  8004216e87:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216e8b:	0f b6 c0             	movzbl %al,%eax
  8004216e8e:	25 c0 00 00 00       	and    $0xc0,%eax
  8004216e93:	83 f8 40             	cmp    $0x40,%eax
  8004216e96:	75 df                	jne    8004216e77 <waitdisk+0x9>
  8004216e98:	c9                   	leaveq 
  8004216e99:	c3                   	retq   

0000008004216e9a <readsect>:
  8004216e9a:	55                   	push   %rbp
  8004216e9b:	48 89 e5             	mov    %rsp,%rbp
  8004216e9e:	48 83 ec 60          	sub    $0x60,%rsp
  8004216ea2:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  8004216ea6:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  8004216eaa:	48 b8 6e 6e 21 04 80 	movabs $0x8004216e6e,%rax
  8004216eb1:	00 00 00 
  8004216eb4:	ff d0                	callq  *%rax
  8004216eb6:	c7 45 fc f2 01 00 00 	movl   $0x1f2,-0x4(%rbp)
  8004216ebd:	c6 45 fb 01          	movb   $0x1,-0x5(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004216ec1:	0f b6 45 fb          	movzbl -0x5(%rbp),%eax
  8004216ec5:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004216ec8:	ee                   	out    %al,(%dx)
  8004216ec9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ecd:	0f b6 c0             	movzbl %al,%eax
  8004216ed0:	c7 45 f4 f3 01 00 00 	movl   $0x1f3,-0xc(%rbp)
  8004216ed7:	88 45 f3             	mov    %al,-0xd(%rbp)
  8004216eda:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
  8004216ede:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004216ee1:	ee                   	out    %al,(%dx)
  8004216ee2:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216ee6:	48 c1 e8 08          	shr    $0x8,%rax
  8004216eea:	0f b6 c0             	movzbl %al,%eax
  8004216eed:	c7 45 ec f4 01 00 00 	movl   $0x1f4,-0x14(%rbp)
  8004216ef4:	88 45 eb             	mov    %al,-0x15(%rbp)
  8004216ef7:	0f b6 45 eb          	movzbl -0x15(%rbp),%eax
  8004216efb:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004216efe:	ee                   	out    %al,(%dx)
  8004216eff:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216f03:	48 c1 e8 10          	shr    $0x10,%rax
  8004216f07:	0f b6 c0             	movzbl %al,%eax
  8004216f0a:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%rbp)
  8004216f11:	88 45 e3             	mov    %al,-0x1d(%rbp)
  8004216f14:	0f b6 45 e3          	movzbl -0x1d(%rbp),%eax
  8004216f18:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  8004216f1b:	ee                   	out    %al,(%dx)
  8004216f1c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004216f20:	48 c1 e8 18          	shr    $0x18,%rax
  8004216f24:	83 c8 e0             	or     $0xffffffe0,%eax
  8004216f27:	0f b6 c0             	movzbl %al,%eax
  8004216f2a:	c7 45 dc f6 01 00 00 	movl   $0x1f6,-0x24(%rbp)
  8004216f31:	88 45 db             	mov    %al,-0x25(%rbp)
  8004216f34:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004216f38:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004216f3b:	ee                   	out    %al,(%dx)
  8004216f3c:	c7 45 d4 f7 01 00 00 	movl   $0x1f7,-0x2c(%rbp)
  8004216f43:	c6 45 d3 20          	movb   $0x20,-0x2d(%rbp)
  8004216f47:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004216f4b:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004216f4e:	ee                   	out    %al,(%dx)
  8004216f4f:	48 b8 6e 6e 21 04 80 	movabs $0x8004216e6e,%rax
  8004216f56:	00 00 00 
  8004216f59:	ff d0                	callq  *%rax
  8004216f5b:	c7 45 cc f0 01 00 00 	movl   $0x1f0,-0x34(%rbp)
  8004216f62:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004216f66:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  8004216f6a:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%rbp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
  8004216f71:	8b 55 cc             	mov    -0x34(%rbp),%edx
  8004216f74:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
  8004216f78:	8b 45 bc             	mov    -0x44(%rbp),%eax
  8004216f7b:	48 89 ce             	mov    %rcx,%rsi
  8004216f7e:	48 89 f7             	mov    %rsi,%rdi
  8004216f81:	89 c1                	mov    %eax,%ecx
  8004216f83:	fc                   	cld    
  8004216f84:	f2 6d                	repnz insl (%dx),%es:(%rdi)
  8004216f86:	89 c8                	mov    %ecx,%eax
  8004216f88:	48 89 fe             	mov    %rdi,%rsi
  8004216f8b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  8004216f8f:	89 45 bc             	mov    %eax,-0x44(%rbp)
  8004216f92:	c9                   	leaveq 
  8004216f93:	c3                   	retq   
  8004216f94:	0f 1f 40 00          	nopl   0x0(%rax)

0000008004216f98 <mpentry_start>:
.set pml4, pml4phys

.code16           
.globl mpentry_start
mpentry_start:
	cli
  8004216f98:	fa                   	cli    
	xorw    %ax, %ax
  8004216f99:	31 c0                	xor    %eax,%eax
	movw    %ax, %ds
  8004216f9b:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216f9d:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216f9f:	8e d0                	mov    %eax,%ss
	
	
	lgdt    MPBOOTPHYS(gdt32desc)   // load 32 bit global descritor table
  8004216fa1:	0f 01 16             	lgdt   (%rsi)
  8004216fa4:	e0 70                	loopne 8004217016 <start64+0x10>
	movl    %cr0, %eax
  8004216fa6:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216fa9:	66 83 c8 01          	or     $0x1,%ax
	movl    %eax, %cr0
  8004216fad:	0f 22 c0             	mov    %rax,%cr0
	ljmp	$(PROT_MODE_CSEG),$(MPBOOTPHYS(start32))
  8004216fb0:	ea                   	(bad)  
  8004216fb1:	1d 70 08 00 66       	sbb    $0x66000870,%eax

0000008004216fb5 <start32>:

.code32
start32:
	
	movw    $(PROT_MODE_DSEG), %ax
  8004216fb5:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  8004216fb9:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  8004216fbb:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  8004216fbd:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004216fbf:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004216fc3:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004216fc5:	8e e8                	mov    %eax,%gs

#ifndef VMM_GUEST
	movl $CR4_PAE,%eax
  8004216fc7:	b8 20 00 00 00       	mov    $0x20,%eax
#else
	movl $(CR4_PAE|CR4_VMXE),%eax
#endif

	movl %eax,%cr4
  8004216fcc:	0f 22 e0             	mov    %rax,%cr4
	
	lgdt    MPBOOTPHYS(gdtdesc)
  8004216fcf:	0f 01 15 c0 70 00 00 	lgdt   0x70c0(%rip)        # 800421e096 <etext+0x336>
	movl    %cr0, %eax
  8004216fd6:	0f 20 c0             	mov    %cr0,%rax
	orl     $CR0_PE, %eax
  8004216fd9:	83 c8 01             	or     $0x1,%eax
	movl    %eax, %cr0
  8004216fdc:	0f 22 c0             	mov    %rax,%cr0
	
	# Set up initial page table. We cannot use kern_pgdir yet because
	# we are still running at a low EIP.
	movl    $pml4, %eax
  8004216fdf:	b8 00 20 10 00       	mov    $0x102000,%eax
	movl    %eax, %cr3
  8004216fe4:	0f 22 d8             	mov    %rax,%cr3
	
	# enable the long mode in MSR
	movl $EFER_MSR,%ecx
  8004216fe7:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
	rdmsr
  8004216fec:	0f 32                	rdmsr  
	btsl $EFER_LME,%eax
  8004216fee:	0f ba e8 08          	bts    $0x8,%eax
	wrmsr
  8004216ff2:	0f 30                	wrmsr  
	
	# Turn on paging.
	movl    %cr0, %eax
  8004216ff4:	0f 20 c0             	mov    %cr0,%rax
	orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
  8004216ff7:	0d 01 00 01 80       	or     $0x80010001,%eax
	movl    %eax, %cr0
  8004216ffc:	0f 22 c0             	mov    %rax,%cr0
	

	ljmpl   $(LONG_MODE_CSEG), $(MPBOOTPHYS(start64))
  8004216fff:	ea                   	(bad)  
  8004217000:	6e                   	outsb  %ds:(%rsi),(%dx)
  8004217001:	70 00                	jo     8004217003 <start32+0x4e>
  8004217003:	00 08                	add    %cl,(%rax)
	...

0000008004217006 <start64>:

.code64
start64:
	movw    $(LONG_MODE_DSEG), %ax
  8004217006:	66 b8 10 00          	mov    $0x10,%ax
	movw    %ax, %ds
  800421700a:	8e d8                	mov    %eax,%ds
	movw    %ax, %es
  800421700c:	8e c0                	mov    %eax,%es
	movw    %ax, %ss
  800421700e:	8e d0                	mov    %eax,%ss
	movw    $0, %ax
  8004217010:	66 b8 00 00          	mov    $0x0,%ax
	movw    %ax, %fs
  8004217014:	8e e0                	mov    %eax,%fs
	movw    %ax, %gs
  8004217016:	8e e8                	mov    %eax,%gs

	# Switch to the per-cpu stack allocated in boot_aps()
	movabs    mpentry_kstack, %rax
  8004217018:	48 a1 e0 d5 6d 04 80 	movabs 0x80046dd5e0,%rax
  800421701f:	00 00 00 
	movq    %rax,%rsp
  8004217022:	48 89 c4             	mov    %rax,%rsp
	movq    $0x0, %rbp       # nuke frame pointer
  8004217025:	48 c7 c5 00 00 00 00 	mov    $0x0,%rbp

	# Call mp_main().  (Exercise for the reader: why the indirect call?)
	movabs    $mp_main, %rax
  800421702c:	48 b8 03 04 20 04 80 	movabs $0x8004200403,%rax
  8004217033:	00 00 00 
	call    *%rax
  8004217036:	ff d0                	callq  *%rax

0000008004217038 <spin>:

	# If mp_main returns (it shouldn't), loop.
spin:
	jmp     spin
  8004217038:	eb fe                	jmp    8004217038 <spin>
  800421703a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000008004217040 <gdt>:
	...
  8004217048:	ff                   	(bad)  
  8004217049:	ff 00                	incl   (%rax)
  800421704b:	00 00                	add    %al,(%rax)
  800421704d:	9a                   	(bad)  
  800421704e:	af                   	scas   %es:(%rdi),%eax
  800421704f:	00 ff                	add    %bh,%bh
  8004217051:	ff 00                	incl   (%rax)
  8004217053:	00 00                	add    %al,(%rax)
  8004217055:	92                   	xchg   %eax,%edx
  8004217056:	af                   	scas   %es:(%rdi),%eax
	...

0000008004217058 <gdtdesc>:
  8004217058:	17                   	(bad)  
  8004217059:	00 a8 70 00 00 66    	add    %ch,0x66000070(%rax)
  800421705f:	90                   	nop

0000008004217060 <gdt32>:
	...
  8004217068:	ff                   	(bad)  
  8004217069:	ff 00                	incl   (%rax)
  800421706b:	00 00                	add    %al,(%rax)
  800421706d:	9a                   	(bad)  
  800421706e:	cf                   	iret   
  800421706f:	00 ff                	add    %bh,%bh
  8004217071:	ff 00                	incl   (%rax)
  8004217073:	00 00                	add    %al,(%rax)
  8004217075:	92                   	xchg   %eax,%edx
  8004217076:	cf                   	iret   
	...

0000008004217078 <gdt32desc>:
  8004217078:	17                   	(bad)  
  8004217079:	00 c8                	add    %cl,%al
  800421707b:	70 00                	jo     800421707d <gdt32desc+0x5>
	...

000000800421707e <mpentry_end>:
	.long   MPBOOTPHYS(gdt32)			# address gdt


.globl mpentry_end
mpentry_end:
	nop
  800421707e:	90                   	nop

000000800421707f <sum>:
  800421707f:	55                   	push   %rbp
  8004217080:	48 89 e5             	mov    %rsp,%rbp
  8004217083:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217087:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421708b:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800421708e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  8004217095:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421709c:	eb 1a                	jmp    80042170b8 <sum+0x39>
  800421709e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042170a1:	48 63 d0             	movslq %eax,%rdx
  80042170a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042170a8:	48 01 d0             	add    %rdx,%rax
  80042170ab:	0f b6 00             	movzbl (%rax),%eax
  80042170ae:	0f b6 c0             	movzbl %al,%eax
  80042170b1:	01 45 f8             	add    %eax,-0x8(%rbp)
  80042170b4:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042170b8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042170bb:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042170be:	7c de                	jl     800421709e <sum+0x1f>
  80042170c0:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042170c3:	c9                   	leaveq 
  80042170c4:	c3                   	retq   

00000080042170c5 <mpsearch1>:
  80042170c5:	55                   	push   %rbp
  80042170c6:	48 89 e5             	mov    %rsp,%rbp
  80042170c9:	48 83 ec 40          	sub    $0x40,%rsp
  80042170cd:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042170d1:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042170d4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042170d8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042170dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042170e0:	48 c1 e8 0c          	shr    $0xc,%rax
  80042170e4:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042170e7:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042170ea:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042170f1:	00 00 00 
  80042170f4:	48 8b 00             	mov    (%rax),%rax
  80042170f7:	48 39 c2             	cmp    %rax,%rdx
  80042170fa:	72 32                	jb     800421712e <mpsearch1+0x69>
  80042170fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217100:	48 89 c1             	mov    %rax,%rcx
  8004217103:	48 ba d8 06 22 04 80 	movabs $0x80042206d8,%rdx
  800421710a:	00 00 00 
  800421710d:	be 74 00 00 00       	mov    $0x74,%esi
  8004217112:	48 bf fb 06 22 04 80 	movabs $0x80042206fb,%rdi
  8004217119:	00 00 00 
  800421711c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217121:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217128:	00 00 00 
  800421712b:	41 ff d0             	callq  *%r8
  800421712e:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217135:	00 00 00 
  8004217138:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421713c:	48 01 d0             	add    %rdx,%rax
  800421713f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217143:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217146:	48 63 d0             	movslq %eax,%rdx
  8004217149:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421714d:	48 01 d0             	add    %rdx,%rax
  8004217150:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217154:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217158:	48 c1 e8 0c          	shr    $0xc,%rax
  800421715c:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421715f:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217162:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004217169:	00 00 00 
  800421716c:	48 8b 00             	mov    (%rax),%rax
  800421716f:	48 39 c2             	cmp    %rax,%rdx
  8004217172:	72 32                	jb     80042171a6 <mpsearch1+0xe1>
  8004217174:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217178:	48 89 c1             	mov    %rax,%rcx
  800421717b:	48 ba d8 06 22 04 80 	movabs $0x80042206d8,%rdx
  8004217182:	00 00 00 
  8004217185:	be 74 00 00 00       	mov    $0x74,%esi
  800421718a:	48 bf fb 06 22 04 80 	movabs $0x80042206fb,%rdi
  8004217191:	00 00 00 
  8004217194:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217199:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042171a0:	00 00 00 
  80042171a3:	41 ff d0             	callq  *%r8
  80042171a6:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042171ad:	00 00 00 
  80042171b0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042171b4:	48 01 d0             	add    %rdx,%rax
  80042171b7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  80042171bb:	eb 4d                	jmp    800421720a <mpsearch1+0x145>
  80042171bd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171c1:	ba 04 00 00 00       	mov    $0x4,%edx
  80042171c6:	48 be 0e 07 22 04 80 	movabs $0x800422070e,%rsi
  80042171cd:	00 00 00 
  80042171d0:	48 89 c7             	mov    %rax,%rdi
  80042171d3:	48 b8 81 0d 21 04 80 	movabs $0x8004210d81,%rax
  80042171da:	00 00 00 
  80042171dd:	ff d0                	callq  *%rax
  80042171df:	85 c0                	test   %eax,%eax
  80042171e1:	75 22                	jne    8004217205 <mpsearch1+0x140>
  80042171e3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042171e7:	be 10 00 00 00       	mov    $0x10,%esi
  80042171ec:	48 89 c7             	mov    %rax,%rdi
  80042171ef:	48 b8 7f 70 21 04 80 	movabs $0x800421707f,%rax
  80042171f6:	00 00 00 
  80042171f9:	ff d0                	callq  *%rax
  80042171fb:	84 c0                	test   %al,%al
  80042171fd:	75 06                	jne    8004217205 <mpsearch1+0x140>
  80042171ff:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217203:	eb 14                	jmp    8004217219 <mpsearch1+0x154>
  8004217205:	48 83 45 f8 10       	addq   $0x10,-0x8(%rbp)
  800421720a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421720e:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
  8004217212:	72 a9                	jb     80042171bd <mpsearch1+0xf8>
  8004217214:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217219:	c9                   	leaveq 
  800421721a:	c3                   	retq   

000000800421721b <mpsearch>:
  800421721b:	55                   	push   %rbp
  800421721c:	48 89 e5             	mov    %rsp,%rbp
  800421721f:	48 83 ec 30          	sub    $0x30,%rsp
  8004217223:	48 c7 45 f8 00 04 00 	movq   $0x400,-0x8(%rbp)
  800421722a:	00 
  800421722b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421722f:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217233:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004217236:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004217239:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004217240:	00 00 00 
  8004217243:	48 8b 00             	mov    (%rax),%rax
  8004217246:	48 39 c2             	cmp    %rax,%rdx
  8004217249:	72 32                	jb     800421727d <mpsearch+0x62>
  800421724b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421724f:	48 89 c1             	mov    %rax,%rcx
  8004217252:	48 ba d8 06 22 04 80 	movabs $0x80042206d8,%rdx
  8004217259:	00 00 00 
  800421725c:	be 8c 00 00 00       	mov    $0x8c,%esi
  8004217261:	48 bf fb 06 22 04 80 	movabs $0x80042206fb,%rdi
  8004217268:	00 00 00 
  800421726b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217270:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217277:	00 00 00 
  800421727a:	41 ff d0             	callq  *%r8
  800421727d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217284:	00 00 00 
  8004217287:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421728b:	48 01 d0             	add    %rdx,%rax
  800421728e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004217292:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217296:	48 83 c0 0e          	add    $0xe,%rax
  800421729a:	0f b7 00             	movzwl (%rax),%eax
  800421729d:	0f b7 c0             	movzwl %ax,%eax
  80042172a0:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042172a3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  80042172a7:	74 2c                	je     80042172d5 <mpsearch+0xba>
  80042172a9:	c1 65 e4 04          	shll   $0x4,-0x1c(%rbp)
  80042172ad:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042172b0:	be 00 04 00 00       	mov    $0x400,%esi
  80042172b5:	48 89 c7             	mov    %rax,%rdi
  80042172b8:	48 b8 c5 70 21 04 80 	movabs $0x80042170c5,%rax
  80042172bf:	00 00 00 
  80042172c2:	ff d0                	callq  *%rax
  80042172c4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  80042172c8:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  80042172cd:	74 49                	je     8004217318 <mpsearch+0xfd>
  80042172cf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042172d3:	eb 59                	jmp    800421732e <mpsearch+0x113>
  80042172d5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042172d9:	48 83 c0 13          	add    $0x13,%rax
  80042172dd:	0f b7 00             	movzwl (%rax),%eax
  80042172e0:	0f b7 c0             	movzwl %ax,%eax
  80042172e3:	c1 e0 0a             	shl    $0xa,%eax
  80042172e6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042172e9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042172ec:	2d 00 04 00 00       	sub    $0x400,%eax
  80042172f1:	89 c0                	mov    %eax,%eax
  80042172f3:	be 00 04 00 00       	mov    $0x400,%esi
  80042172f8:	48 89 c7             	mov    %rax,%rdi
  80042172fb:	48 b8 c5 70 21 04 80 	movabs $0x80042170c5,%rax
  8004217302:	00 00 00 
  8004217305:	ff d0                	callq  *%rax
  8004217307:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421730b:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217310:	74 06                	je     8004217318 <mpsearch+0xfd>
  8004217312:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217316:	eb 16                	jmp    800421732e <mpsearch+0x113>
  8004217318:	be 00 00 01 00       	mov    $0x10000,%esi
  800421731d:	bf 00 00 0f 00       	mov    $0xf0000,%edi
  8004217322:	48 b8 c5 70 21 04 80 	movabs $0x80042170c5,%rax
  8004217329:	00 00 00 
  800421732c:	ff d0                	callq  *%rax
  800421732e:	c9                   	leaveq 
  800421732f:	c3                   	retq   

0000008004217330 <mpconfig>:
  8004217330:	55                   	push   %rbp
  8004217331:	48 89 e5             	mov    %rsp,%rbp
  8004217334:	48 83 ec 30          	sub    $0x30,%rsp
  8004217338:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421733c:	48 b8 1b 72 21 04 80 	movabs $0x800421721b,%rax
  8004217343:	00 00 00 
  8004217346:	ff d0                	callq  *%rax
  8004217348:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421734c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217351:	75 0a                	jne    800421735d <mpconfig+0x2d>
  8004217353:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217358:	e9 f6 01 00 00       	jmpq   8004217553 <mpconfig+0x223>
  800421735d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217361:	8b 40 04             	mov    0x4(%rax),%eax
  8004217364:	85 c0                	test   %eax,%eax
  8004217366:	74 0c                	je     8004217374 <mpconfig+0x44>
  8004217368:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421736c:	0f b6 40 0b          	movzbl 0xb(%rax),%eax
  8004217370:	84 c0                	test   %al,%al
  8004217372:	74 25                	je     8004217399 <mpconfig+0x69>
  8004217374:	48 bf 18 07 22 04 80 	movabs $0x8004220718,%rdi
  800421737b:	00 00 00 
  800421737e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217383:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421738a:	00 00 00 
  800421738d:	ff d2                	callq  *%rdx
  800421738f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217394:	e9 ba 01 00 00       	jmpq   8004217553 <mpconfig+0x223>
  8004217399:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421739d:	8b 40 04             	mov    0x4(%rax),%eax
  80042173a0:	89 c0                	mov    %eax,%eax
  80042173a2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042173a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042173aa:	48 c1 e8 0c          	shr    $0xc,%rax
  80042173ae:	89 45 ec             	mov    %eax,-0x14(%rbp)
  80042173b1:	8b 55 ec             	mov    -0x14(%rbp),%edx
  80042173b4:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042173bb:	00 00 00 
  80042173be:	48 8b 00             	mov    (%rax),%rax
  80042173c1:	48 39 c2             	cmp    %rax,%rdx
  80042173c4:	72 32                	jb     80042173f8 <mpconfig+0xc8>
  80042173c6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042173ca:	48 89 c1             	mov    %rax,%rcx
  80042173cd:	48 ba d8 06 22 04 80 	movabs $0x80042206d8,%rdx
  80042173d4:	00 00 00 
  80042173d7:	be ad 00 00 00       	mov    $0xad,%esi
  80042173dc:	48 bf fb 06 22 04 80 	movabs $0x80042206fb,%rdi
  80042173e3:	00 00 00 
  80042173e6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042173eb:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042173f2:	00 00 00 
  80042173f5:	41 ff d0             	callq  *%r8
  80042173f8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042173ff:	00 00 00 
  8004217402:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217406:	48 01 d0             	add    %rdx,%rax
  8004217409:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421740d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217411:	ba 04 00 00 00       	mov    $0x4,%edx
  8004217416:	48 be 45 07 22 04 80 	movabs $0x8004220745,%rsi
  800421741d:	00 00 00 
  8004217420:	48 89 c7             	mov    %rax,%rdi
  8004217423:	48 b8 81 0d 21 04 80 	movabs $0x8004210d81,%rax
  800421742a:	00 00 00 
  800421742d:	ff d0                	callq  *%rax
  800421742f:	85 c0                	test   %eax,%eax
  8004217431:	74 25                	je     8004217458 <mpconfig+0x128>
  8004217433:	48 bf 50 07 22 04 80 	movabs $0x8004220750,%rdi
  800421743a:	00 00 00 
  800421743d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217442:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217449:	00 00 00 
  800421744c:	ff d2                	callq  *%rdx
  800421744e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217453:	e9 fb 00 00 00       	jmpq   8004217553 <mpconfig+0x223>
  8004217458:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421745c:	0f b7 40 04          	movzwl 0x4(%rax),%eax
  8004217460:	0f b7 d0             	movzwl %ax,%edx
  8004217463:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217467:	89 d6                	mov    %edx,%esi
  8004217469:	48 89 c7             	mov    %rax,%rdi
  800421746c:	48 b8 7f 70 21 04 80 	movabs $0x800421707f,%rax
  8004217473:	00 00 00 
  8004217476:	ff d0                	callq  *%rax
  8004217478:	84 c0                	test   %al,%al
  800421747a:	74 25                	je     80042174a1 <mpconfig+0x171>
  800421747c:	48 bf 88 07 22 04 80 	movabs $0x8004220788,%rdi
  8004217483:	00 00 00 
  8004217486:	b8 00 00 00 00       	mov    $0x0,%eax
  800421748b:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217492:	00 00 00 
  8004217495:	ff d2                	callq  *%rdx
  8004217497:	b8 00 00 00 00       	mov    $0x0,%eax
  800421749c:	e9 b2 00 00 00       	jmpq   8004217553 <mpconfig+0x223>
  80042174a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042174a5:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042174a9:	3c 01                	cmp    $0x1,%al
  80042174ab:	74 3b                	je     80042174e8 <mpconfig+0x1b8>
  80042174ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042174b1:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042174b5:	3c 04                	cmp    $0x4,%al
  80042174b7:	74 2f                	je     80042174e8 <mpconfig+0x1b8>
  80042174b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042174bd:	0f b6 40 06          	movzbl 0x6(%rax),%eax
  80042174c1:	0f b6 c0             	movzbl %al,%eax
  80042174c4:	89 c6                	mov    %eax,%esi
  80042174c6:	48 bf b0 07 22 04 80 	movabs $0x80042207b0,%rdi
  80042174cd:	00 00 00 
  80042174d0:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174d5:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042174dc:	00 00 00 
  80042174df:	ff d2                	callq  *%rdx
  80042174e1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042174e6:	eb 6b                	jmp    8004217553 <mpconfig+0x223>
  80042174e8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042174ec:	0f b7 40 28          	movzwl 0x28(%rax),%eax
  80042174f0:	0f b7 c0             	movzwl %ax,%eax
  80042174f3:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  80042174f7:	0f b7 52 04          	movzwl 0x4(%rdx),%edx
  80042174fb:	0f b7 ca             	movzwl %dx,%ecx
  80042174fe:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  8004217502:	48 01 ca             	add    %rcx,%rdx
  8004217505:	89 c6                	mov    %eax,%esi
  8004217507:	48 89 d7             	mov    %rdx,%rdi
  800421750a:	48 b8 7f 70 21 04 80 	movabs $0x800421707f,%rax
  8004217511:	00 00 00 
  8004217514:	ff d0                	callq  *%rax
  8004217516:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421751a:	0f b6 52 2a          	movzbl 0x2a(%rdx),%edx
  800421751e:	38 d0                	cmp    %dl,%al
  8004217520:	74 22                	je     8004217544 <mpconfig+0x214>
  8004217522:	48 bf d0 07 22 04 80 	movabs $0x80042207d0,%rdi
  8004217529:	00 00 00 
  800421752c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217531:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217538:	00 00 00 
  800421753b:	ff d2                	callq  *%rdx
  800421753d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217542:	eb 0f                	jmp    8004217553 <mpconfig+0x223>
  8004217544:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217548:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421754c:	48 89 10             	mov    %rdx,(%rax)
  800421754f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217553:	c9                   	leaveq 
  8004217554:	c3                   	retq   

0000008004217555 <mp_init>:
  8004217555:	55                   	push   %rbp
  8004217556:	48 89 e5             	mov    %rsp,%rbp
  8004217559:	53                   	push   %rbx
  800421755a:	48 83 ec 58          	sub    $0x58,%rsp
  800421755e:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217565:	00 00 00 
  8004217568:	48 bb 20 f0 6d 04 80 	movabs $0x80046df020,%rbx
  800421756f:	00 00 00 
  8004217572:	48 89 18             	mov    %rbx,(%rax)
  8004217575:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  8004217579:	48 89 c7             	mov    %rax,%rdi
  800421757c:	48 b8 30 73 21 04 80 	movabs $0x8004217330,%rax
  8004217583:	00 00 00 
  8004217586:	ff d0                	callq  *%rax
  8004217588:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421758c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  8004217591:	75 05                	jne    8004217598 <mp_init+0x43>
  8004217593:	e9 d2 03 00 00       	jmpq   800421796a <mp_init+0x415>
  8004217598:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  800421759f:	00 00 00 
  80042175a2:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  80042175a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042175ac:	8b 40 24             	mov    0x24(%rax),%eax
  80042175af:	89 c2                	mov    %eax,%edx
  80042175b1:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  80042175b8:	00 00 00 
  80042175bb:	48 89 10             	mov    %rdx,(%rax)
  80042175be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042175c2:	48 83 c0 2c          	add    $0x2c,%rax
  80042175c6:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  80042175ca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  80042175d1:	e9 17 02 00 00       	jmpq   80042177ed <mp_init+0x298>
  80042175d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042175da:	0f b6 00             	movzbl (%rax),%eax
  80042175dd:	0f b6 c0             	movzbl %al,%eax
  80042175e0:	85 c0                	test   %eax,%eax
  80042175e2:	74 16                	je     80042175fa <mp_init+0xa5>
  80042175e4:	85 c0                	test   %eax,%eax
  80042175e6:	0f 88 b8 01 00 00    	js     80042177a4 <mp_init+0x24f>
  80042175ec:	83 f8 04             	cmp    $0x4,%eax
  80042175ef:	0f 8f af 01 00 00    	jg     80042177a4 <mp_init+0x24f>
  80042175f5:	e9 a3 01 00 00       	jmpq   800421779d <mp_init+0x248>
  80042175fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042175fe:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004217602:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217606:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  800421760a:	0f b6 c0             	movzbl %al,%eax
  800421760d:	83 e0 02             	and    $0x2,%eax
  8004217610:	85 c0                	test   %eax,%eax
  8004217612:	74 51                	je     8004217665 <mp_init+0x110>
  8004217614:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  800421761b:	00 00 00 
  800421761e:	8b 00                	mov    (%rax),%eax
  8004217620:	48 98                	cltq   
  8004217622:	48 c1 e0 03          	shl    $0x3,%rax
  8004217626:	48 89 c2             	mov    %rax,%rdx
  8004217629:	48 c1 e2 04          	shl    $0x4,%rdx
  800421762d:	48 01 d0             	add    %rdx,%rax
  8004217630:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217637:	00 00 00 
  800421763a:	48 01 c2             	add    %rax,%rdx
  800421763d:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217644:	00 00 00 
  8004217647:	48 89 10             	mov    %rdx,(%rax)
  800421764a:	48 bf fd 07 22 04 80 	movabs $0x80042207fd,%rdi
  8004217651:	00 00 00 
  8004217654:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217659:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217660:	00 00 00 
  8004217663:	ff d2                	callq  *%rdx
  8004217665:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  800421766c:	00 00 00 
  800421766f:	8b 00                	mov    (%rax),%eax
  8004217671:	83 f8 03             	cmp    $0x3,%eax
  8004217674:	0f 8f f4 00 00 00    	jg     800421776e <mp_init+0x219>
  800421767a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421767e:	4c 8d 40 0c          	lea    0xc(%rax),%r8
  8004217682:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217686:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  800421768a:	0f b6 f0             	movzbl %al,%esi
  800421768d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217691:	8b 78 08             	mov    0x8(%rax),%edi
  8004217694:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217698:	4c 8d 50 04          	lea    0x4(%rax),%r10
  800421769c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042176a0:	0f b6 40 02          	movzbl 0x2(%rax),%eax
  80042176a4:	0f b6 c8             	movzbl %al,%ecx
  80042176a7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042176ab:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  80042176af:	0f b6 d0             	movzbl %al,%edx
  80042176b2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042176b6:	0f b6 00             	movzbl (%rax),%eax
  80042176b9:	0f b6 c0             	movzbl %al,%eax
  80042176bc:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
  80042176c1:	89 34 24             	mov    %esi,(%rsp)
  80042176c4:	41 89 f9             	mov    %edi,%r9d
  80042176c7:	4d 89 d0             	mov    %r10,%r8
  80042176ca:	89 c6                	mov    %eax,%esi
  80042176cc:	48 bf 10 08 22 04 80 	movabs $0x8004220810,%rdi
  80042176d3:	00 00 00 
  80042176d6:	b8 00 00 00 00       	mov    $0x0,%eax
  80042176db:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042176e2:	00 00 00 
  80042176e5:	41 ff d2             	callq  *%r10
  80042176e8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  80042176ec:	0f b6 40 03          	movzbl 0x3(%rax),%eax
  80042176f0:	0f b6 c0             	movzbl %al,%eax
  80042176f3:	83 e0 01             	and    $0x1,%eax
  80042176f6:	85 c0                	test   %eax,%eax
  80042176f8:	74 57                	je     8004217751 <mp_init+0x1fc>
  80042176fa:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  8004217701:	00 00 00 
  8004217704:	8b 30                	mov    (%rax),%esi
  8004217706:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  800421770d:	00 00 00 
  8004217710:	8b 00                	mov    (%rax),%eax
  8004217712:	89 c2                	mov    %eax,%edx
  8004217714:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  800421771b:	00 00 00 
  800421771e:	48 63 c6             	movslq %esi,%rax
  8004217721:	48 c1 e0 03          	shl    $0x3,%rax
  8004217725:	48 89 c6             	mov    %rax,%rsi
  8004217728:	48 c1 e6 04          	shl    $0x4,%rsi
  800421772c:	48 01 f0             	add    %rsi,%rax
  800421772f:	48 01 c8             	add    %rcx,%rax
  8004217732:	88 10                	mov    %dl,(%rax)
  8004217734:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  800421773b:	00 00 00 
  800421773e:	8b 00                	mov    (%rax),%eax
  8004217740:	8d 50 01             	lea    0x1(%rax),%edx
  8004217743:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  800421774a:	00 00 00 
  800421774d:	89 10                	mov    %edx,(%rax)
  800421774f:	eb 45                	jmp    8004217796 <mp_init+0x241>
  8004217751:	48 bf 60 08 22 04 80 	movabs $0x8004220860,%rdi
  8004217758:	00 00 00 
  800421775b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217760:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217767:	00 00 00 
  800421776a:	ff d2                	callq  *%rdx
  800421776c:	eb 28                	jmp    8004217796 <mp_init+0x241>
  800421776e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004217772:	0f b6 40 01          	movzbl 0x1(%rax),%eax
  8004217776:	0f b6 c0             	movzbl %al,%eax
  8004217779:	89 c6                	mov    %eax,%esi
  800421777b:	48 bf 90 08 22 04 80 	movabs $0x8004220890,%rdi
  8004217782:	00 00 00 
  8004217785:	b8 00 00 00 00       	mov    $0x0,%eax
  800421778a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217791:	00 00 00 
  8004217794:	ff d2                	callq  *%rdx
  8004217796:	48 83 45 e8 14       	addq   $0x14,-0x18(%rbp)
  800421779b:	eb 4c                	jmp    80042177e9 <mp_init+0x294>
  800421779d:	48 83 45 e8 08       	addq   $0x8,-0x18(%rbp)
  80042177a2:	eb 45                	jmp    80042177e9 <mp_init+0x294>
  80042177a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042177a8:	0f b6 00             	movzbl (%rax),%eax
  80042177ab:	0f b6 c0             	movzbl %al,%eax
  80042177ae:	89 c6                	mov    %eax,%esi
  80042177b0:	48 bf b8 08 22 04 80 	movabs $0x80042208b8,%rdi
  80042177b7:	00 00 00 
  80042177ba:	b8 00 00 00 00       	mov    $0x0,%eax
  80042177bf:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042177c6:	00 00 00 
  80042177c9:	ff d2                	callq  *%rdx
  80042177cb:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  80042177d2:	00 00 00 
  80042177d5:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042177db:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042177df:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  80042177e3:	0f b7 c0             	movzwl %ax,%eax
  80042177e6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042177e9:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  80042177ed:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042177f1:	0f b7 40 22          	movzwl 0x22(%rax),%eax
  80042177f5:	0f b7 c0             	movzwl %ax,%eax
  80042177f8:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  80042177fb:	0f 87 d5 fd ff ff    	ja     80042175d6 <mp_init+0x81>
  8004217801:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  8004217808:	eb 53                	jmp    800421785d <mp_init+0x308>
  800421780a:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217811:	00 00 00 
  8004217814:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217817:	48 c1 e0 03          	shl    $0x3,%rax
  800421781b:	48 89 c1             	mov    %rax,%rcx
  800421781e:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217822:	48 01 c8             	add    %rcx,%rax
  8004217825:	48 01 d0             	add    %rdx,%rax
  8004217828:	48 83 c0 70          	add    $0x70,%rax
  800421782c:	c6 40 08 00          	movb   $0x0,0x8(%rax)
  8004217830:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217837:	00 00 00 
  800421783a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421783d:	48 c1 e0 03          	shl    $0x3,%rax
  8004217841:	48 89 c1             	mov    %rax,%rcx
  8004217844:	48 c1 e1 04          	shl    $0x4,%rcx
  8004217848:	48 01 c8             	add    %rcx,%rax
  800421784b:	48 01 d0             	add    %rdx,%rax
  800421784e:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  8004217852:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217859:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  800421785d:	83 7d e4 03          	cmpl   $0x3,-0x1c(%rbp)
  8004217861:	76 a7                	jbe    800421780a <mp_init+0x2b5>
  8004217863:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  800421786a:	00 00 00 
  800421786d:	48 8b 00             	mov    (%rax),%rax
  8004217870:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
  8004217877:	48 b8 00 f0 6d 04 80 	movabs $0x80046df000,%rax
  800421787e:	00 00 00 
  8004217881:	8b 00                	mov    (%rax),%eax
  8004217883:	85 c0                	test   %eax,%eax
  8004217885:	75 41                	jne    80042178c8 <mp_init+0x373>
  8004217887:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  800421788e:	00 00 00 
  8004217891:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  8004217897:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  800421789e:	00 00 00 
  80042178a1:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042178a8:	48 bf d8 08 22 04 80 	movabs $0x80042208d8,%rdi
  80042178af:	00 00 00 
  80042178b2:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178b7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042178be:	00 00 00 
  80042178c1:	ff d2                	callq  *%rdx
  80042178c3:	e9 a2 00 00 00       	jmpq   800421796a <mp_init+0x415>
  80042178c8:	48 b8 48 f2 6d 04 80 	movabs $0x80046df248,%rax
  80042178cf:	00 00 00 
  80042178d2:	8b 10                	mov    (%rax),%edx
  80042178d4:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  80042178db:	00 00 00 
  80042178de:	48 8b 00             	mov    (%rax),%rax
  80042178e1:	0f b6 00             	movzbl (%rax),%eax
  80042178e4:	0f b6 c0             	movzbl %al,%eax
  80042178e7:	89 c6                	mov    %eax,%esi
  80042178e9:	48 bf 04 09 22 04 80 	movabs $0x8004220904,%rdi
  80042178f0:	00 00 00 
  80042178f3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042178f8:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042178ff:	00 00 00 
  8004217902:	ff d1                	callq  *%rcx
  8004217904:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004217908:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  800421790c:	84 c0                	test   %al,%al
  800421790e:	74 5a                	je     800421796a <mp_init+0x415>
  8004217910:	48 bf 28 09 22 04 80 	movabs $0x8004220928,%rdi
  8004217917:	00 00 00 
  800421791a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421791f:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004217926:	00 00 00 
  8004217929:	ff d2                	callq  *%rdx
  800421792b:	c7 45 cc 22 00 00 00 	movl   $0x22,-0x34(%rbp)
  8004217932:	c6 45 cb 70          	movb   $0x70,-0x35(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217936:	0f b6 45 cb          	movzbl -0x35(%rbp),%eax
  800421793a:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421793d:	ee                   	out    %al,(%dx)
  800421793e:	c7 45 c4 23 00 00 00 	movl   $0x23,-0x3c(%rbp)

static __inline uint8_t
inb(int port)
{
	uint8_t data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
  8004217945:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004217948:	89 c2                	mov    %eax,%edx
  800421794a:	ec                   	in     (%dx),%al
  800421794b:	88 45 c3             	mov    %al,-0x3d(%rbp)
	return data;
  800421794e:	0f b6 45 c3          	movzbl -0x3d(%rbp),%eax
  8004217952:	83 c8 01             	or     $0x1,%eax
  8004217955:	0f b6 c0             	movzbl %al,%eax
  8004217958:	c7 45 bc 23 00 00 00 	movl   $0x23,-0x44(%rbp)
  800421795f:	88 45 bb             	mov    %al,-0x45(%rbp)
}

static __inline void
outb(int port, uint8_t data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
  8004217962:	0f b6 45 bb          	movzbl -0x45(%rbp),%eax
  8004217966:	8b 55 bc             	mov    -0x44(%rbp),%edx
  8004217969:	ee                   	out    %al,(%dx)
  800421796a:	48 83 c4 58          	add    $0x58,%rsp
  800421796e:	5b                   	pop    %rbx
  800421796f:	5d                   	pop    %rbp
  8004217970:	c3                   	retq   

0000008004217971 <lapicw>:
  8004217971:	55                   	push   %rbp
  8004217972:	48 89 e5             	mov    %rsp,%rbp
  8004217975:	48 83 ec 08          	sub    $0x8,%rsp
  8004217979:	89 7d fc             	mov    %edi,-0x4(%rbp)
  800421797c:	89 75 f8             	mov    %esi,-0x8(%rbp)
  800421797f:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217986:	00 00 00 
  8004217989:	48 8b 00             	mov    (%rax),%rax
  800421798c:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421798f:	48 63 d2             	movslq %edx,%rdx
  8004217992:	48 c1 e2 02          	shl    $0x2,%rdx
  8004217996:	48 01 c2             	add    %rax,%rdx
  8004217999:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421799c:	89 02                	mov    %eax,(%rdx)
  800421799e:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  80042179a5:	00 00 00 
  80042179a8:	48 8b 00             	mov    (%rax),%rax
  80042179ab:	48 83 c0 20          	add    $0x20,%rax
  80042179af:	8b 00                	mov    (%rax),%eax
  80042179b1:	c9                   	leaveq 
  80042179b2:	c3                   	retq   

00000080042179b3 <lapic_init>:
  80042179b3:	55                   	push   %rbp
  80042179b4:	48 89 e5             	mov    %rsp,%rbp
  80042179b7:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  80042179be:	00 00 00 
  80042179c1:	48 8b 00             	mov    (%rax),%rax
  80042179c4:	48 85 c0             	test   %rax,%rax
  80042179c7:	75 05                	jne    80042179ce <lapic_init+0x1b>
  80042179c9:	e9 da 01 00 00       	jmpq   8004217ba8 <lapic_init+0x1f5>
  80042179ce:	48 b8 00 00 72 04 80 	movabs $0x8004720000,%rax
  80042179d5:	00 00 00 
  80042179d8:	48 8b 00             	mov    (%rax),%rax
  80042179db:	be 00 10 00 00       	mov    $0x1000,%esi
  80042179e0:	48 89 c7             	mov    %rax,%rdi
  80042179e3:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  80042179ea:	00 00 00 
  80042179ed:	ff d0                	callq  *%rax
  80042179ef:	48 ba 08 00 72 04 80 	movabs $0x8004720008,%rdx
  80042179f6:	00 00 00 
  80042179f9:	48 89 02             	mov    %rax,(%rdx)
  80042179fc:	be 27 01 00 00       	mov    $0x127,%esi
  8004217a01:	bf 3c 00 00 00       	mov    $0x3c,%edi
  8004217a06:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217a0d:	00 00 00 
  8004217a10:	ff d0                	callq  *%rax
  8004217a12:	be 0b 00 00 00       	mov    $0xb,%esi
  8004217a17:	bf f8 00 00 00       	mov    $0xf8,%edi
  8004217a1c:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217a23:	00 00 00 
  8004217a26:	ff d0                	callq  *%rax
  8004217a28:	be 20 00 02 00       	mov    $0x20020,%esi
  8004217a2d:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217a32:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217a39:	00 00 00 
  8004217a3c:	ff d0                	callq  *%rax
  8004217a3e:	be 80 96 98 00       	mov    $0x989680,%esi
  8004217a43:	bf e0 00 00 00       	mov    $0xe0,%edi
  8004217a48:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217a4f:	00 00 00 
  8004217a52:	ff d0                	callq  *%rax
  8004217a54:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004217a5b:	00 00 00 
  8004217a5e:	ff d0                	callq  *%rax
  8004217a60:	48 98                	cltq   
  8004217a62:	48 c1 e0 03          	shl    $0x3,%rax
  8004217a66:	48 89 c2             	mov    %rax,%rdx
  8004217a69:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217a6d:	48 01 d0             	add    %rdx,%rax
  8004217a70:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217a77:	00 00 00 
  8004217a7a:	48 01 c2             	add    %rax,%rdx
  8004217a7d:	48 b8 40 f2 6d 04 80 	movabs $0x80046df240,%rax
  8004217a84:	00 00 00 
  8004217a87:	48 8b 00             	mov    (%rax),%rax
  8004217a8a:	48 39 c2             	cmp    %rax,%rdx
  8004217a8d:	74 16                	je     8004217aa5 <lapic_init+0xf2>
  8004217a8f:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217a94:	bf d4 00 00 00       	mov    $0xd4,%edi
  8004217a99:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217aa0:	00 00 00 
  8004217aa3:	ff d0                	callq  *%rax
  8004217aa5:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217aaa:	bf d8 00 00 00       	mov    $0xd8,%edi
  8004217aaf:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217ab6:	00 00 00 
  8004217ab9:	ff d0                	callq  *%rax
  8004217abb:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217ac2:	00 00 00 
  8004217ac5:	48 8b 00             	mov    (%rax),%rax
  8004217ac8:	48 83 c0 30          	add    $0x30,%rax
  8004217acc:	8b 00                	mov    (%rax),%eax
  8004217ace:	c1 e8 10             	shr    $0x10,%eax
  8004217ad1:	0f b6 c0             	movzbl %al,%eax
  8004217ad4:	83 f8 03             	cmp    $0x3,%eax
  8004217ad7:	76 16                	jbe    8004217aef <lapic_init+0x13c>
  8004217ad9:	be 00 00 01 00       	mov    $0x10000,%esi
  8004217ade:	bf d0 00 00 00       	mov    $0xd0,%edi
  8004217ae3:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217aea:	00 00 00 
  8004217aed:	ff d0                	callq  *%rax
  8004217aef:	be 33 00 00 00       	mov    $0x33,%esi
  8004217af4:	bf dc 00 00 00       	mov    $0xdc,%edi
  8004217af9:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217b00:	00 00 00 
  8004217b03:	ff d0                	callq  *%rax
  8004217b05:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b0a:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217b0f:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217b16:	00 00 00 
  8004217b19:	ff d0                	callq  *%rax
  8004217b1b:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b20:	bf a0 00 00 00       	mov    $0xa0,%edi
  8004217b25:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217b2c:	00 00 00 
  8004217b2f:	ff d0                	callq  *%rax
  8004217b31:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b36:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217b3b:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217b42:	00 00 00 
  8004217b45:	ff d0                	callq  *%rax
  8004217b47:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b4c:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217b51:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217b58:	00 00 00 
  8004217b5b:	ff d0                	callq  *%rax
  8004217b5d:	be 00 85 08 00       	mov    $0x88500,%esi
  8004217b62:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217b67:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217b6e:	00 00 00 
  8004217b71:	ff d0                	callq  *%rax
  8004217b73:	90                   	nop
  8004217b74:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217b7b:	00 00 00 
  8004217b7e:	48 8b 00             	mov    (%rax),%rax
  8004217b81:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217b87:	8b 00                	mov    (%rax),%eax
  8004217b89:	25 00 10 00 00       	and    $0x1000,%eax
  8004217b8e:	85 c0                	test   %eax,%eax
  8004217b90:	75 e2                	jne    8004217b74 <lapic_init+0x1c1>
  8004217b92:	be 00 00 00 00       	mov    $0x0,%esi
  8004217b97:	bf 20 00 00 00       	mov    $0x20,%edi
  8004217b9c:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217ba3:	00 00 00 
  8004217ba6:	ff d0                	callq  *%rax
  8004217ba8:	5d                   	pop    %rbp
  8004217ba9:	c3                   	retq   

0000008004217baa <cpunum>:
  8004217baa:	55                   	push   %rbp
  8004217bab:	48 89 e5             	mov    %rsp,%rbp
  8004217bae:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217bb5:	00 00 00 
  8004217bb8:	48 8b 00             	mov    (%rax),%rax
  8004217bbb:	48 85 c0             	test   %rax,%rax
  8004217bbe:	74 18                	je     8004217bd8 <cpunum+0x2e>
  8004217bc0:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217bc7:	00 00 00 
  8004217bca:	48 8b 00             	mov    (%rax),%rax
  8004217bcd:	48 83 c0 20          	add    $0x20,%rax
  8004217bd1:	8b 00                	mov    (%rax),%eax
  8004217bd3:	c1 e8 18             	shr    $0x18,%eax
  8004217bd6:	eb 05                	jmp    8004217bdd <cpunum+0x33>
  8004217bd8:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217bdd:	5d                   	pop    %rbp
  8004217bde:	c3                   	retq   

0000008004217bdf <lapic_eoi>:
  8004217bdf:	55                   	push   %rbp
  8004217be0:	48 89 e5             	mov    %rsp,%rbp
  8004217be3:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217bea:	00 00 00 
  8004217bed:	48 8b 00             	mov    (%rax),%rax
  8004217bf0:	48 85 c0             	test   %rax,%rax
  8004217bf3:	74 16                	je     8004217c0b <lapic_eoi+0x2c>
  8004217bf5:	be 00 00 00 00       	mov    $0x0,%esi
  8004217bfa:	bf 2c 00 00 00       	mov    $0x2c,%edi
  8004217bff:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217c06:	00 00 00 
  8004217c09:	ff d0                	callq  *%rax
  8004217c0b:	5d                   	pop    %rbp
  8004217c0c:	c3                   	retq   

0000008004217c0d <microdelay>:
  8004217c0d:	55                   	push   %rbp
  8004217c0e:	48 89 e5             	mov    %rsp,%rbp
  8004217c11:	48 83 ec 04          	sub    $0x4,%rsp
  8004217c15:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217c18:	c9                   	leaveq 
  8004217c19:	c3                   	retq   

0000008004217c1a <lapic_startap>:
  8004217c1a:	55                   	push   %rbp
  8004217c1b:	48 89 e5             	mov    %rsp,%rbp
  8004217c1e:	48 83 ec 40          	sub    $0x40,%rsp
  8004217c22:	89 f8                	mov    %edi,%eax
  8004217c24:	89 75 c8             	mov    %esi,-0x38(%rbp)
  8004217c27:	88 45 cc             	mov    %al,-0x34(%rbp)
  8004217c2a:	c7 45 dc 70 00 00 00 	movl   $0x70,-0x24(%rbp)
  8004217c31:	c6 45 db 0f          	movb   $0xf,-0x25(%rbp)
  8004217c35:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  8004217c39:	8b 55 dc             	mov    -0x24(%rbp),%edx
  8004217c3c:	ee                   	out    %al,(%dx)
  8004217c3d:	c7 45 d4 71 00 00 00 	movl   $0x71,-0x2c(%rbp)
  8004217c44:	c6 45 d3 0a          	movb   $0xa,-0x2d(%rbp)
  8004217c48:	0f b6 45 d3          	movzbl -0x2d(%rbp),%eax
  8004217c4c:	8b 55 d4             	mov    -0x2c(%rbp),%edx
  8004217c4f:	ee                   	out    %al,(%dx)
  8004217c50:	48 c7 45 f0 67 04 00 	movq   $0x467,-0x10(%rbp)
  8004217c57:	00 
  8004217c58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217c5c:	48 c1 e8 0c          	shr    $0xc,%rax
  8004217c60:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004217c63:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004217c66:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004217c6d:	00 00 00 
  8004217c70:	48 8b 00             	mov    (%rax),%rax
  8004217c73:	48 39 c2             	cmp    %rax,%rdx
  8004217c76:	72 32                	jb     8004217caa <lapic_startap+0x90>
  8004217c78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217c7c:	48 89 c1             	mov    %rax,%rcx
  8004217c7f:	48 ba 70 09 22 04 80 	movabs $0x8004220970,%rdx
  8004217c86:	00 00 00 
  8004217c89:	be 99 00 00 00       	mov    $0x99,%esi
  8004217c8e:	48 bf 93 09 22 04 80 	movabs $0x8004220993,%rdi
  8004217c95:	00 00 00 
  8004217c98:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217c9d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004217ca4:	00 00 00 
  8004217ca7:	41 ff d0             	callq  *%r8
  8004217caa:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004217cb1:	00 00 00 
  8004217cb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004217cb8:	48 01 d0             	add    %rdx,%rax
  8004217cbb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004217cbf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217cc3:	66 c7 00 00 00       	movw   $0x0,(%rax)
  8004217cc8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004217ccc:	48 8d 50 02          	lea    0x2(%rax),%rdx
  8004217cd0:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217cd3:	c1 e8 04             	shr    $0x4,%eax
  8004217cd6:	66 89 02             	mov    %ax,(%rdx)
  8004217cd9:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217cdd:	c1 e0 18             	shl    $0x18,%eax
  8004217ce0:	89 c6                	mov    %eax,%esi
  8004217ce2:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217ce7:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217cee:	00 00 00 
  8004217cf1:	ff d0                	callq  *%rax
  8004217cf3:	be 00 c5 00 00       	mov    $0xc500,%esi
  8004217cf8:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217cfd:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217d04:	00 00 00 
  8004217d07:	ff d0                	callq  *%rax
  8004217d09:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217d0e:	48 b8 0d 7c 21 04 80 	movabs $0x8004217c0d,%rax
  8004217d15:	00 00 00 
  8004217d18:	ff d0                	callq  *%rax
  8004217d1a:	be 00 85 00 00       	mov    $0x8500,%esi
  8004217d1f:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217d24:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217d2b:	00 00 00 
  8004217d2e:	ff d0                	callq  *%rax
  8004217d30:	bf 64 00 00 00       	mov    $0x64,%edi
  8004217d35:	48 b8 0d 7c 21 04 80 	movabs $0x8004217c0d,%rax
  8004217d3c:	00 00 00 
  8004217d3f:	ff d0                	callq  *%rax
  8004217d41:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004217d48:	eb 4b                	jmp    8004217d95 <lapic_startap+0x17b>
  8004217d4a:	0f b6 45 cc          	movzbl -0x34(%rbp),%eax
  8004217d4e:	c1 e0 18             	shl    $0x18,%eax
  8004217d51:	89 c6                	mov    %eax,%esi
  8004217d53:	bf c4 00 00 00       	mov    $0xc4,%edi
  8004217d58:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217d5f:	00 00 00 
  8004217d62:	ff d0                	callq  *%rax
  8004217d64:	8b 45 c8             	mov    -0x38(%rbp),%eax
  8004217d67:	c1 e8 0c             	shr    $0xc,%eax
  8004217d6a:	80 cc 06             	or     $0x6,%ah
  8004217d6d:	89 c6                	mov    %eax,%esi
  8004217d6f:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217d74:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217d7b:	00 00 00 
  8004217d7e:	ff d0                	callq  *%rax
  8004217d80:	bf c8 00 00 00       	mov    $0xc8,%edi
  8004217d85:	48 b8 0d 7c 21 04 80 	movabs $0x8004217c0d,%rax
  8004217d8c:	00 00 00 
  8004217d8f:	ff d0                	callq  *%rax
  8004217d91:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004217d95:	83 7d fc 01          	cmpl   $0x1,-0x4(%rbp)
  8004217d99:	7e af                	jle    8004217d4a <lapic_startap+0x130>
  8004217d9b:	c9                   	leaveq 
  8004217d9c:	c3                   	retq   

0000008004217d9d <lapic_ipi>:
  8004217d9d:	55                   	push   %rbp
  8004217d9e:	48 89 e5             	mov    %rsp,%rbp
  8004217da1:	48 83 ec 08          	sub    $0x8,%rsp
  8004217da5:	89 7d fc             	mov    %edi,-0x4(%rbp)
  8004217da8:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004217dab:	0d 00 00 0c 00       	or     $0xc0000,%eax
  8004217db0:	89 c6                	mov    %eax,%esi
  8004217db2:	bf c0 00 00 00       	mov    $0xc0,%edi
  8004217db7:	48 b8 71 79 21 04 80 	movabs $0x8004217971,%rax
  8004217dbe:	00 00 00 
  8004217dc1:	ff d0                	callq  *%rax
  8004217dc3:	90                   	nop
  8004217dc4:	48 b8 08 00 72 04 80 	movabs $0x8004720008,%rax
  8004217dcb:	00 00 00 
  8004217dce:	48 8b 00             	mov    (%rax),%rax
  8004217dd1:	48 05 00 03 00 00    	add    $0x300,%rax
  8004217dd7:	8b 00                	mov    (%rax),%eax
  8004217dd9:	25 00 10 00 00       	and    $0x1000,%eax
  8004217dde:	85 c0                	test   %eax,%eax
  8004217de0:	75 e2                	jne    8004217dc4 <lapic_ipi+0x27>
  8004217de2:	c9                   	leaveq 
  8004217de3:	c3                   	retq   

0000008004217de4 <xchg>:
	if (edxp)
		*edxp = edx;
}

static inline uint32_t
xchg(volatile uint32_t *addr,uint32_t newval){
  8004217de4:	55                   	push   %rbp
  8004217de5:	48 89 e5             	mov    %rsp,%rbp
  8004217de8:	48 83 ec 1c          	sub    $0x1c,%rsp
  8004217dec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217df0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
	uint32_t result;
	__asm __volatile("lock; xchgl %0, %1":
  8004217df3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  8004217df7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004217dfa:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  8004217dfe:	f0 87 02             	lock xchg %eax,(%rdx)
  8004217e01:	89 45 fc             	mov    %eax,-0x4(%rbp)
			 "+m" (*addr), "=a" (result):
			 "1"(newval):
			 "cc");
	return result;
  8004217e04:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  8004217e07:	c9                   	leaveq 
  8004217e08:	c3                   	retq   

0000008004217e09 <get_caller_pcs>:
  8004217e09:	55                   	push   %rbp
  8004217e0a:	48 89 e5             	mov    %rsp,%rbp
  8004217e0d:	48 83 ec 28          	sub    $0x28,%rsp
  8004217e11:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)

static __inline uint64_t
read_rbp(void)
{
	uint64_t rbp;
	__asm __volatile("movq %%rbp,%0" : "=r" (rbp)::"cc","memory");
  8004217e15:	48 89 e8             	mov    %rbp,%rax
  8004217e18:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return rbp;
  8004217e1c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217e20:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217e24:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
  8004217e2b:	eb 45                	jmp    8004217e72 <get_caller_pcs+0x69>
  8004217e2d:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
  8004217e32:	74 44                	je     8004217e78 <get_caller_pcs+0x6f>
  8004217e34:	48 b8 ff ff bf 03 80 	movabs $0x8003bfffff,%rax
  8004217e3b:	00 00 00 
  8004217e3e:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  8004217e42:	76 34                	jbe    8004217e78 <get_caller_pcs+0x6f>
  8004217e44:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217e47:	48 98                	cltq   
  8004217e49:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217e50:	00 
  8004217e51:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217e55:	48 01 c2             	add    %rax,%rdx
  8004217e58:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217e5c:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004217e60:	48 89 02             	mov    %rax,(%rdx)
  8004217e63:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217e67:	48 8b 00             	mov    (%rax),%rax
  8004217e6a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004217e6e:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217e72:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217e76:	7e b5                	jle    8004217e2d <get_caller_pcs+0x24>
  8004217e78:	eb 1f                	jmp    8004217e99 <get_caller_pcs+0x90>
  8004217e7a:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004217e7d:	48 98                	cltq   
  8004217e7f:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004217e86:	00 
  8004217e87:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004217e8b:	48 01 d0             	add    %rdx,%rax
  8004217e8e:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  8004217e95:	83 45 f4 01          	addl   $0x1,-0xc(%rbp)
  8004217e99:	83 7d f4 09          	cmpl   $0x9,-0xc(%rbp)
  8004217e9d:	7e db                	jle    8004217e7a <get_caller_pcs+0x71>
  8004217e9f:	c9                   	leaveq 
  8004217ea0:	c3                   	retq   

0000008004217ea1 <holding>:
  8004217ea1:	55                   	push   %rbp
  8004217ea2:	48 89 e5             	mov    %rsp,%rbp
  8004217ea5:	53                   	push   %rbx
  8004217ea6:	48 83 ec 18          	sub    $0x18,%rsp
  8004217eaa:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217eae:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217eb2:	8b 00                	mov    (%rax),%eax
  8004217eb4:	85 c0                	test   %eax,%eax
  8004217eb6:	74 3d                	je     8004217ef5 <holding+0x54>
  8004217eb8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ebc:	48 8b 58 10          	mov    0x10(%rax),%rbx
  8004217ec0:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004217ec7:	00 00 00 
  8004217eca:	ff d0                	callq  *%rax
  8004217ecc:	48 98                	cltq   
  8004217ece:	48 c1 e0 03          	shl    $0x3,%rax
  8004217ed2:	48 89 c2             	mov    %rax,%rdx
  8004217ed5:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217ed9:	48 01 d0             	add    %rdx,%rax
  8004217edc:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217ee3:	00 00 00 
  8004217ee6:	48 01 d0             	add    %rdx,%rax
  8004217ee9:	48 39 c3             	cmp    %rax,%rbx
  8004217eec:	75 07                	jne    8004217ef5 <holding+0x54>
  8004217eee:	b8 01 00 00 00       	mov    $0x1,%eax
  8004217ef3:	eb 05                	jmp    8004217efa <holding+0x59>
  8004217ef5:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217efa:	48 83 c4 18          	add    $0x18,%rsp
  8004217efe:	5b                   	pop    %rbx
  8004217eff:	5d                   	pop    %rbp
  8004217f00:	c3                   	retq   

0000008004217f01 <__spin_initlock>:
  8004217f01:	55                   	push   %rbp
  8004217f02:	48 89 e5             	mov    %rsp,%rbp
  8004217f05:	48 83 ec 10          	sub    $0x10,%rsp
  8004217f09:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004217f0d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004217f11:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217f15:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  8004217f1b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217f1f:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  8004217f23:	48 89 50 08          	mov    %rdx,0x8(%rax)
  8004217f27:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004217f2b:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  8004217f32:	00 
  8004217f33:	c9                   	leaveq 
  8004217f34:	c3                   	retq   

0000008004217f35 <spin_lock>:
  8004217f35:	55                   	push   %rbp
  8004217f36:	48 89 e5             	mov    %rsp,%rbp
  8004217f39:	53                   	push   %rbx
  8004217f3a:	48 83 ec 18          	sub    $0x18,%rsp
  8004217f3e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004217f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f46:	48 89 c7             	mov    %rax,%rdi
  8004217f49:	48 b8 a1 7e 21 04 80 	movabs $0x8004217ea1,%rax
  8004217f50:	00 00 00 
  8004217f53:	ff d0                	callq  *%rax
  8004217f55:	85 c0                	test   %eax,%eax
  8004217f57:	74 44                	je     8004217f9d <spin_lock+0x68>
  8004217f59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217f5d:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004217f61:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004217f68:	00 00 00 
  8004217f6b:	ff d0                	callq  *%rax
  8004217f6d:	49 89 d8             	mov    %rbx,%r8
  8004217f70:	89 c1                	mov    %eax,%ecx
  8004217f72:	48 ba b8 09 22 04 80 	movabs $0x80042209b8,%rdx
  8004217f79:	00 00 00 
  8004217f7c:	be 42 00 00 00       	mov    $0x42,%esi
  8004217f81:	48 bf e2 09 22 04 80 	movabs $0x80042209e2,%rdi
  8004217f88:	00 00 00 
  8004217f8b:	b8 00 00 00 00       	mov    $0x0,%eax
  8004217f90:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  8004217f97:	00 00 00 
  8004217f9a:	41 ff d1             	callq  *%r9
  8004217f9d:	eb 02                	jmp    8004217fa1 <spin_lock+0x6c>
  8004217f9f:	f3 90                	pause  
  8004217fa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217fa5:	be 01 00 00 00       	mov    $0x1,%esi
  8004217faa:	48 89 c7             	mov    %rax,%rdi
  8004217fad:	48 b8 e4 7d 21 04 80 	movabs $0x8004217de4,%rax
  8004217fb4:	00 00 00 
  8004217fb7:	ff d0                	callq  *%rax
  8004217fb9:	85 c0                	test   %eax,%eax
  8004217fbb:	75 e2                	jne    8004217f9f <spin_lock+0x6a>
  8004217fbd:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004217fc4:	00 00 00 
  8004217fc7:	ff d0                	callq  *%rax
  8004217fc9:	48 98                	cltq   
  8004217fcb:	48 c1 e0 03          	shl    $0x3,%rax
  8004217fcf:	48 89 c2             	mov    %rax,%rdx
  8004217fd2:	48 c1 e2 04          	shl    $0x4,%rdx
  8004217fd6:	48 01 d0             	add    %rdx,%rax
  8004217fd9:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  8004217fe0:	00 00 00 
  8004217fe3:	48 01 c2             	add    %rax,%rdx
  8004217fe6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217fea:	48 89 50 10          	mov    %rdx,0x10(%rax)
  8004217fee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004217ff2:	48 83 c0 18          	add    $0x18,%rax
  8004217ff6:	48 89 c7             	mov    %rax,%rdi
  8004217ff9:	48 b8 09 7e 21 04 80 	movabs $0x8004217e09,%rax
  8004218000:	00 00 00 
  8004218003:	ff d0                	callq  *%rax
  8004218005:	48 83 c4 18          	add    $0x18,%rsp
  8004218009:	5b                   	pop    %rbx
  800421800a:	5d                   	pop    %rbp
  800421800b:	c3                   	retq   

000000800421800c <spin_unlock>:
  800421800c:	55                   	push   %rbp
  800421800d:	48 89 e5             	mov    %rsp,%rbp
  8004218010:	41 54                	push   %r12
  8004218012:	53                   	push   %rbx
  8004218013:	48 81 ec 20 05 00 00 	sub    $0x520,%rsp
  800421801a:	48 89 bd d8 fa ff ff 	mov    %rdi,-0x528(%rbp)
  8004218021:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218028:	48 89 c7             	mov    %rax,%rdi
  800421802b:	48 b8 a1 7e 21 04 80 	movabs $0x8004217ea1,%rax
  8004218032:	00 00 00 
  8004218035:	ff d0                	callq  *%rax
  8004218037:	85 c0                	test   %eax,%eax
  8004218039:	0f 85 d2 01 00 00    	jne    8004218211 <spin_unlock+0x205>
  800421803f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218046:	48 8d 48 18          	lea    0x18(%rax),%rcx
  800421804a:	48 8d 85 e0 fa ff ff 	lea    -0x520(%rbp),%rax
  8004218051:	ba 28 00 00 00       	mov    $0x28,%edx
  8004218056:	48 89 ce             	mov    %rcx,%rsi
  8004218059:	48 89 c7             	mov    %rax,%rdi
  800421805c:	48 b8 36 0c 21 04 80 	movabs $0x8004210c36,%rax
  8004218063:	00 00 00 
  8004218066:	ff d0                	callq  *%rax
  8004218068:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421806f:	48 8b 40 10          	mov    0x10(%rax),%rax
  8004218073:	48 85 c0             	test   %rax,%rax
  8004218076:	75 39                	jne    80042180b1 <spin_unlock+0xa5>
  8004218078:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  800421807f:	48 8b 58 08          	mov    0x8(%rax),%rbx
  8004218083:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421808a:	00 00 00 
  800421808d:	ff d0                	callq  *%rax
  800421808f:	48 89 da             	mov    %rbx,%rdx
  8004218092:	89 c6                	mov    %eax,%esi
  8004218094:	48 bf f8 09 22 04 80 	movabs $0x80042209f8,%rdi
  800421809b:	00 00 00 
  800421809e:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180a3:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  80042180aa:	00 00 00 
  80042180ad:	ff d1                	callq  *%rcx
  80042180af:	eb 4d                	jmp    80042180fe <spin_unlock+0xf2>
  80042180b1:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042180b8:	48 8b 40 10          	mov    0x10(%rax),%rax
  80042180bc:	0f b6 00             	movzbl (%rax),%eax
  80042180bf:	44 0f b6 e0          	movzbl %al,%r12d
  80042180c3:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  80042180ca:	48 8b 58 08          	mov    0x8(%rax),%rbx
  80042180ce:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  80042180d5:	00 00 00 
  80042180d8:	ff d0                	callq  *%rax
  80042180da:	44 89 e1             	mov    %r12d,%ecx
  80042180dd:	48 89 da             	mov    %rbx,%rdx
  80042180e0:	89 c6                	mov    %eax,%esi
  80042180e2:	48 bf 38 0a 22 04 80 	movabs $0x8004220a38,%rdi
  80042180e9:	00 00 00 
  80042180ec:	b8 00 00 00 00       	mov    $0x0,%eax
  80042180f1:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  80042180f8:	00 00 00 
  80042180fb:	41 ff d0             	callq  *%r8
  80042180fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  8004218105:	e9 c3 00 00 00       	jmpq   80042181cd <spin_unlock+0x1c1>
  800421810a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421810d:	48 98                	cltq   
  800421810f:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218116:	89 c0                	mov    %eax,%eax
  8004218118:	48 8d 95 10 fb ff ff 	lea    -0x4f0(%rbp),%rdx
  800421811f:	48 89 d6             	mov    %rdx,%rsi
  8004218122:	48 89 c7             	mov    %rax,%rdi
  8004218125:	48 b8 17 f8 20 04 80 	movabs $0x800420f817,%rax
  800421812c:	00 00 00 
  800421812f:	ff d0                	callq  *%rax
  8004218131:	85 c0                	test   %eax,%eax
  8004218133:	78 6b                	js     80042181a0 <spin_unlock+0x194>
  8004218135:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218138:	48 98                	cltq   
  800421813a:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218141:	89 c2                	mov    %eax,%edx
  8004218143:	48 8b 85 30 fb ff ff 	mov    -0x4d0(%rbp),%rax
  800421814a:	48 29 c2             	sub    %rax,%rdx
  800421814d:	49 89 d0             	mov    %rdx,%r8
  8004218150:	48 8b bd 20 fb ff ff 	mov    -0x4e0(%rbp),%rdi
  8004218157:	8b b5 28 fb ff ff    	mov    -0x4d8(%rbp),%esi
  800421815d:	8b 8d 18 fb ff ff    	mov    -0x4e8(%rbp),%ecx
  8004218163:	48 8b 95 10 fb ff ff 	mov    -0x4f0(%rbp),%rdx
  800421816a:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421816d:	48 98                	cltq   
  800421816f:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  8004218176:	4c 89 04 24          	mov    %r8,(%rsp)
  800421817a:	49 89 f9             	mov    %rdi,%r9
  800421817d:	41 89 f0             	mov    %esi,%r8d
  8004218180:	89 c6                	mov    %eax,%esi
  8004218182:	48 bf 6e 0a 22 04 80 	movabs $0x8004220a6e,%rdi
  8004218189:	00 00 00 
  800421818c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218191:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004218198:	00 00 00 
  800421819b:	41 ff d2             	callq  *%r10
  800421819e:	eb 29                	jmp    80042181c9 <spin_unlock+0x1bd>
  80042181a0:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042181a3:	48 98                	cltq   
  80042181a5:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042181ac:	89 c6                	mov    %eax,%esi
  80042181ae:	48 bf 85 0a 22 04 80 	movabs $0x8004220a85,%rdi
  80042181b5:	00 00 00 
  80042181b8:	b8 00 00 00 00       	mov    $0x0,%eax
  80042181bd:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  80042181c4:	00 00 00 
  80042181c7:	ff d2                	callq  *%rdx
  80042181c9:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  80042181cd:	83 7d ec 09          	cmpl   $0x9,-0x14(%rbp)
  80042181d1:	7f 14                	jg     80042181e7 <spin_unlock+0x1db>
  80042181d3:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042181d6:	48 98                	cltq   
  80042181d8:	8b 84 85 e0 fa ff ff 	mov    -0x520(%rbp,%rax,4),%eax
  80042181df:	85 c0                	test   %eax,%eax
  80042181e1:	0f 85 23 ff ff ff    	jne    800421810a <spin_unlock+0xfe>
  80042181e7:	48 ba 8d 0a 22 04 80 	movabs $0x8004220a8d,%rdx
  80042181ee:	00 00 00 
  80042181f1:	be 6c 00 00 00       	mov    $0x6c,%esi
  80042181f6:	48 bf e2 09 22 04 80 	movabs $0x80042209e2,%rdi
  80042181fd:	00 00 00 
  8004218200:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218205:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421820c:	00 00 00 
  800421820f:	ff d1                	callq  *%rcx
  8004218211:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218218:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
  800421821f:	00 
  8004218220:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218227:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
  800421822e:	00 
  800421822f:	48 8b 85 d8 fa ff ff 	mov    -0x528(%rbp),%rax
  8004218236:	be 00 00 00 00       	mov    $0x0,%esi
  800421823b:	48 89 c7             	mov    %rax,%rdi
  800421823e:	48 b8 e4 7d 21 04 80 	movabs $0x8004217de4,%rax
  8004218245:	00 00 00 
  8004218248:	ff d0                	callq  *%rax
  800421824a:	48 81 c4 20 05 00 00 	add    $0x520,%rsp
  8004218251:	5b                   	pop    %rbx
  8004218252:	41 5c                	pop    %r12
  8004218254:	5d                   	pop    %rbp
  8004218255:	c3                   	retq   

0000008004218256 <e1000_attach>:
  8004218256:	55                   	push   %rbp
  8004218257:	48 89 e5             	mov    %rsp,%rbp
  800421825a:	48 83 ec 40          	sub    $0x40,%rsp
  800421825e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  8004218262:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218266:	48 89 c7             	mov    %rax,%rdi
  8004218269:	48 b8 13 91 21 04 80 	movabs $0x8004219113,%rax
  8004218270:	00 00 00 
  8004218273:	ff d0                	callq  *%rax
  8004218275:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218279:	8b 40 30             	mov    0x30(%rax),%eax
  800421827c:	89 c2                	mov    %eax,%edx
  800421827e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218282:	8b 40 18             	mov    0x18(%rax),%eax
  8004218285:	89 c0                	mov    %eax,%eax
  8004218287:	48 89 d6             	mov    %rdx,%rsi
  800421828a:	48 89 c7             	mov    %rax,%rdi
  800421828d:	48 b8 4a 3f 20 04 80 	movabs $0x8004203f4a,%rax
  8004218294:	00 00 00 
  8004218297:	ff d0                	callq  *%rax
  8004218299:	48 ba 20 f7 4d 04 80 	movabs $0x80044df720,%rdx
  80042182a0:	00 00 00 
  80042182a3:	48 89 02             	mov    %rax,(%rdx)
  80042182a6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042182ad:	e9 a9 00 00 00       	jmpq   800421835b <e1000_attach+0x105>
  80042182b2:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042182b5:	48 98                	cltq   
  80042182b7:	48 69 d0 ee 05 00 00 	imul   $0x5ee,%rax,%rdx
  80042182be:	48 b8 40 f8 4d 04 80 	movabs $0x80044df840,%rax
  80042182c5:	00 00 00 
  80042182c8:	48 01 d0             	add    %rdx,%rax
  80042182cb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042182cf:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  80042182d6:	00 00 00 
  80042182d9:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  80042182dd:	77 32                	ja     8004218311 <e1000_attach+0xbb>
  80042182df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042182e3:	48 89 c1             	mov    %rax,%rcx
  80042182e6:	48 ba a0 0a 22 04 80 	movabs $0x8004220aa0,%rdx
  80042182ed:	00 00 00 
  80042182f0:	be 97 00 00 00       	mov    $0x97,%esi
  80042182f5:	48 bf c4 0a 22 04 80 	movabs $0x8004220ac4,%rdi
  80042182fc:	00 00 00 
  80042182ff:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218304:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421830b:	00 00 00 
  800421830e:	41 ff d0             	callq  *%r8
  8004218311:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  8004218318:	ff ff ff 
  800421831b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421831f:	48 01 c2             	add    %rax,%rdx
  8004218322:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218329:	00 00 00 
  800421832c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  800421832f:	48 63 c9             	movslq %ecx,%rcx
  8004218332:	48 c1 e1 04          	shl    $0x4,%rcx
  8004218336:	48 01 c8             	add    %rcx,%rax
  8004218339:	48 89 10             	mov    %rdx,(%rax)
  800421833c:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218343:	00 00 00 
  8004218346:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218349:	48 63 d2             	movslq %edx,%rdx
  800421834c:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218350:	48 01 d0             	add    %rdx,%rax
  8004218353:	c6 40 0c 01          	movb   $0x1,0xc(%rax)
  8004218357:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421835b:	83 7d fc 0f          	cmpl   $0xf,-0x4(%rbp)
  800421835f:	0f 8e 4d ff ff ff    	jle    80042182b2 <e1000_attach+0x5c>
  8004218365:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  800421836c:	00 00 00 
  800421836f:	48 8b 00             	mov    (%rax),%rax
  8004218372:	48 8d 90 00 38 00 00 	lea    0x3800(%rax),%rdx
  8004218379:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218380:	00 00 00 
  8004218383:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  8004218387:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421838e:	00 00 00 
  8004218391:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  8004218395:	77 32                	ja     80042183c9 <e1000_attach+0x173>
  8004218397:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421839b:	48 89 c1             	mov    %rax,%rcx
  800421839e:	48 ba a0 0a 22 04 80 	movabs $0x8004220aa0,%rdx
  80042183a5:	00 00 00 
  80042183a8:	be 9a 00 00 00       	mov    $0x9a,%esi
  80042183ad:	48 bf c4 0a 22 04 80 	movabs $0x8004220ac4,%rdi
  80042183b4:	00 00 00 
  80042183b7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042183bc:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042183c3:	00 00 00 
  80042183c6:	41 ff d0             	callq  *%r8
  80042183c9:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  80042183d0:	ff ff ff 
  80042183d3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042183d7:	48 01 c8             	add    %rcx,%rax
  80042183da:	89 02                	mov    %eax,(%rdx)
  80042183dc:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042183e3:	00 00 00 
  80042183e6:	48 8b 00             	mov    (%rax),%rax
  80042183e9:	48 05 08 38 00 00    	add    $0x3808,%rax
  80042183ef:	c7 00 00 01 00 00    	movl   $0x100,(%rax)
  80042183f5:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042183fc:	00 00 00 
  80042183ff:	48 8b 00             	mov    (%rax),%rax
  8004218402:	48 8d 90 10 38 00 00 	lea    0x3810(%rax),%rdx
  8004218409:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218410:	00 00 00 
  8004218413:	48 8b 00             	mov    (%rax),%rax
  8004218416:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  800421841d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218422:	89 01                	mov    %eax,(%rcx)
  8004218424:	89 02                	mov    %eax,(%rdx)
  8004218426:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  800421842d:	00 00 00 
  8004218430:	48 8b 00             	mov    (%rax),%rax
  8004218433:	48 05 00 04 00 00    	add    $0x400,%rax
  8004218439:	c7 00 0a 01 04 00    	movl   $0x4010a,(%rax)
  800421843f:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218446:	00 00 00 
  8004218449:	48 8b 00             	mov    (%rax),%rax
  800421844c:	48 05 10 04 00 00    	add    $0x410,%rax
  8004218452:	c7 00 0a 20 60 00    	movl   $0x60200a,(%rax)
  8004218458:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421845f:	e9 8e 00 00 00       	jmpq   80042184f2 <e1000_attach+0x29c>
  8004218464:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218467:	48 98                	cltq   
  8004218469:	48 c1 e0 0b          	shl    $0xb,%rax
  800421846d:	48 89 c2             	mov    %rax,%rdx
  8004218470:	48 b8 a0 95 4e 04 80 	movabs $0x80044e95a0,%rax
  8004218477:	00 00 00 
  800421847a:	48 01 d0             	add    %rdx,%rax
  800421847d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004218481:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218488:	00 00 00 
  800421848b:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421848f:	77 32                	ja     80042184c3 <e1000_attach+0x26d>
  8004218491:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218495:	48 89 c1             	mov    %rax,%rcx
  8004218498:	48 ba a0 0a 22 04 80 	movabs $0x8004220aa0,%rdx
  800421849f:	00 00 00 
  80042184a2:	be b8 00 00 00       	mov    $0xb8,%esi
  80042184a7:	48 bf c4 0a 22 04 80 	movabs $0x8004220ac4,%rdi
  80042184ae:	00 00 00 
  80042184b1:	b8 00 00 00 00       	mov    $0x0,%eax
  80042184b6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042184bd:	00 00 00 
  80042184c0:	41 ff d0             	callq  *%r8
  80042184c3:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  80042184ca:	ff ff ff 
  80042184cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042184d1:	48 01 c2             	add    %rax,%rdx
  80042184d4:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  80042184db:	00 00 00 
  80042184de:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042184e1:	48 63 c9             	movslq %ecx,%rcx
  80042184e4:	48 c1 e1 04          	shl    $0x4,%rcx
  80042184e8:	48 01 c8             	add    %rcx,%rax
  80042184eb:	48 89 10             	mov    %rdx,(%rax)
  80042184ee:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  80042184f2:	81 7d fc e7 03 00 00 	cmpl   $0x3e7,-0x4(%rbp)
  80042184f9:	0f 8e 65 ff ff ff    	jle    8004218464 <e1000_attach+0x20e>
  80042184ff:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218506:	00 00 00 
  8004218509:	48 8b 00             	mov    (%rax),%rax
  800421850c:	48 8d 90 00 28 00 00 	lea    0x2800(%rax),%rdx
  8004218513:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  800421851a:	00 00 00 
  800421851d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  8004218521:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  8004218528:	00 00 00 
  800421852b:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421852f:	77 32                	ja     8004218563 <e1000_attach+0x30d>
  8004218531:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218535:	48 89 c1             	mov    %rax,%rcx
  8004218538:	48 ba a0 0a 22 04 80 	movabs $0x8004220aa0,%rdx
  800421853f:	00 00 00 
  8004218542:	be ba 00 00 00       	mov    $0xba,%esi
  8004218547:	48 bf c4 0a 22 04 80 	movabs $0x8004220ac4,%rdi
  800421854e:	00 00 00 
  8004218551:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218556:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421855d:	00 00 00 
  8004218560:	41 ff d0             	callq  *%r8
  8004218563:	48 b9 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rcx
  800421856a:	ff ff ff 
  800421856d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218571:	48 01 c8             	add    %rcx,%rax
  8004218574:	89 02                	mov    %eax,(%rdx)
  8004218576:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  800421857d:	00 00 00 
  8004218580:	48 8b 00             	mov    (%rax),%rax
  8004218583:	48 05 08 28 00 00    	add    $0x2808,%rax
  8004218589:	c7 00 80 3e 00 00    	movl   $0x3e80,(%rax)
  800421858f:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218596:	00 00 00 
  8004218599:	48 8b 00             	mov    (%rax),%rax
  800421859c:	48 05 10 28 00 00    	add    $0x2810,%rax
  80042185a2:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042185a8:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042185af:	00 00 00 
  80042185b2:	48 8b 00             	mov    (%rax),%rax
  80042185b5:	48 05 18 28 00 00    	add    $0x2818,%rax
  80042185bb:	c7 00 e7 03 00 00    	movl   $0x3e7,(%rax)
  80042185c1:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042185c8:	00 00 00 
  80042185cb:	48 8b 00             	mov    (%rax),%rax
  80042185ce:	48 05 00 01 00 00    	add    $0x100,%rax
  80042185d4:	c7 00 02 80 00 04    	movl   $0x4008002,(%rax)
  80042185da:	b8 00 00 00 00       	mov    $0x0,%eax
  80042185df:	c9                   	leaveq 
  80042185e0:	c3                   	retq   

00000080042185e1 <e1000_transmit>:
  80042185e1:	55                   	push   %rbp
  80042185e2:	48 89 e5             	mov    %rsp,%rbp
  80042185e5:	48 83 ec 20          	sub    $0x20,%rsp
  80042185e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042185ed:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  80042185f0:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042185f7:	00 00 00 
  80042185fa:	48 8b 00             	mov    (%rax),%rax
  80042185fd:	48 85 c0             	test   %rax,%rax
  8004218600:	74 09                	je     800421860b <e1000_transmit+0x2a>
  8004218602:	81 7d e4 ee 05 00 00 	cmpl   $0x5ee,-0x1c(%rbp)
  8004218609:	76 0a                	jbe    8004218615 <e1000_transmit+0x34>
  800421860b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  8004218610:	e9 39 01 00 00       	jmpq   800421874e <e1000_transmit+0x16d>
  8004218615:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  800421861c:	00 00 00 
  800421861f:	48 8b 00             	mov    (%rax),%rax
  8004218622:	48 05 18 38 00 00    	add    $0x3818,%rax
  8004218628:	8b 00                	mov    (%rax),%eax
  800421862a:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421862d:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218634:	00 00 00 
  8004218637:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421863a:	48 63 d2             	movslq %edx,%rdx
  800421863d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218641:	48 01 d0             	add    %rdx,%rax
  8004218644:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  8004218648:	0f b6 c0             	movzbl %al,%eax
  800421864b:	83 e0 01             	and    $0x1,%eax
  800421864e:	85 c0                	test   %eax,%eax
  8004218650:	75 25                	jne    8004218677 <e1000_transmit+0x96>
  8004218652:	48 bf d4 0a 22 04 80 	movabs $0x8004220ad4,%rdi
  8004218659:	00 00 00 
  800421865c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218661:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004218668:	00 00 00 
  800421866b:	ff d2                	callq  *%rdx
  800421866d:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218672:	e9 d7 00 00 00       	jmpq   800421874e <e1000_transmit+0x16d>
  8004218677:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421867a:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421867d:	48 98                	cltq   
  800421867f:	48 69 c8 ee 05 00 00 	imul   $0x5ee,%rax,%rcx
  8004218686:	48 b8 40 f8 4d 04 80 	movabs $0x80044df840,%rax
  800421868d:	00 00 00 
  8004218690:	48 01 c1             	add    %rax,%rcx
  8004218693:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218697:	48 89 c6             	mov    %rax,%rsi
  800421869a:	48 89 cf             	mov    %rcx,%rdi
  800421869d:	48 b8 36 0c 21 04 80 	movabs $0x8004210c36,%rax
  80042186a4:	00 00 00 
  80042186a7:	ff d0                	callq  *%rax
  80042186a9:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042186ac:	48 ba 30 f7 4d 04 80 	movabs $0x80044df730,%rdx
  80042186b3:	00 00 00 
  80042186b6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042186b9:	48 63 c9             	movslq %ecx,%rcx
  80042186bc:	48 c1 e1 04          	shl    $0x4,%rcx
  80042186c0:	48 01 ca             	add    %rcx,%rdx
  80042186c3:	66 89 42 08          	mov    %ax,0x8(%rdx)
  80042186c7:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  80042186ce:	00 00 00 
  80042186d1:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042186d4:	48 63 d2             	movslq %edx,%rdx
  80042186d7:	48 c1 e2 04          	shl    $0x4,%rdx
  80042186db:	48 01 d0             	add    %rdx,%rax
  80042186de:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042186e2:	83 e0 fe             	and    $0xfffffffe,%eax
  80042186e5:	89 c2                	mov    %eax,%edx
  80042186e7:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  80042186ee:	00 00 00 
  80042186f1:	8b 4d fc             	mov    -0x4(%rbp),%ecx
  80042186f4:	48 63 c9             	movslq %ecx,%rcx
  80042186f7:	48 c1 e1 04          	shl    $0x4,%rcx
  80042186fb:	48 01 c8             	add    %rcx,%rax
  80042186fe:	88 50 0c             	mov    %dl,0xc(%rax)
  8004218701:	48 b8 30 f7 4d 04 80 	movabs $0x80044df730,%rax
  8004218708:	00 00 00 
  800421870b:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421870e:	48 63 d2             	movslq %edx,%rdx
  8004218711:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218715:	48 01 d0             	add    %rdx,%rax
  8004218718:	c6 40 0b 09          	movb   $0x9,0xb(%rax)
  800421871c:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218723:	00 00 00 
  8004218726:	48 8b 00             	mov    (%rax),%rax
  8004218729:	48 8d 88 18 38 00 00 	lea    0x3818(%rax),%rcx
  8004218730:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218733:	8d 50 01             	lea    0x1(%rax),%edx
  8004218736:	89 d0                	mov    %edx,%eax
  8004218738:	c1 f8 1f             	sar    $0x1f,%eax
  800421873b:	c1 e8 1c             	shr    $0x1c,%eax
  800421873e:	01 c2                	add    %eax,%edx
  8004218740:	83 e2 0f             	and    $0xf,%edx
  8004218743:	29 c2                	sub    %eax,%edx
  8004218745:	89 d0                	mov    %edx,%eax
  8004218747:	89 01                	mov    %eax,(%rcx)
  8004218749:	b8 00 00 00 00       	mov    $0x0,%eax
  800421874e:	c9                   	leaveq 
  800421874f:	c3                   	retq   

0000008004218750 <e1000_receive>:
  8004218750:	55                   	push   %rbp
  8004218751:	48 89 e5             	mov    %rsp,%rbp
  8004218754:	48 83 ec 20          	sub    $0x20,%rsp
  8004218758:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421875c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  800421875f:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218766:	00 00 00 
  8004218769:	48 8b 00             	mov    (%rax),%rax
  800421876c:	48 85 c0             	test   %rax,%rax
  800421876f:	75 0a                	jne    800421877b <e1000_receive+0x2b>
  8004218771:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218776:	e9 59 01 00 00       	jmpq   80042188d4 <e1000_receive+0x184>
  800421877b:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  8004218782:	00 00 00 
  8004218785:	48 8b 00             	mov    (%rax),%rax
  8004218788:	48 05 18 28 00 00    	add    $0x2818,%rax
  800421878e:	8b 00                	mov    (%rax),%eax
  8004218790:	8d 48 01             	lea    0x1(%rax),%ecx
  8004218793:	ba d3 4d 62 10       	mov    $0x10624dd3,%edx
  8004218798:	89 c8                	mov    %ecx,%eax
  800421879a:	f7 e2                	mul    %edx
  800421879c:	89 d0                	mov    %edx,%eax
  800421879e:	c1 e8 06             	shr    $0x6,%eax
  80042187a1:	69 c0 e8 03 00 00    	imul   $0x3e8,%eax,%eax
  80042187a7:	29 c1                	sub    %eax,%ecx
  80042187a9:	89 c8                	mov    %ecx,%eax
  80042187ab:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042187ae:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  80042187b5:	00 00 00 
  80042187b8:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042187bb:	48 63 d2             	movslq %edx,%rdx
  80042187be:	48 c1 e2 04          	shl    $0x4,%rdx
  80042187c2:	48 01 d0             	add    %rdx,%rax
  80042187c5:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042187c9:	0f b6 c0             	movzbl %al,%eax
  80042187cc:	83 e0 01             	and    $0x1,%eax
  80042187cf:	85 c0                	test   %eax,%eax
  80042187d1:	75 0a                	jne    80042187dd <e1000_receive+0x8d>
  80042187d3:	b8 00 00 00 00       	mov    $0x0,%eax
  80042187d8:	e9 f7 00 00 00       	jmpq   80042188d4 <e1000_receive+0x184>
  80042187dd:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  80042187e4:	00 00 00 
  80042187e7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042187ea:	48 63 d2             	movslq %edx,%rdx
  80042187ed:	48 c1 e2 04          	shl    $0x4,%rdx
  80042187f1:	48 01 d0             	add    %rdx,%rax
  80042187f4:	0f b6 40 0c          	movzbl 0xc(%rax),%eax
  80042187f8:	0f b6 c0             	movzbl %al,%eax
  80042187fb:	83 e0 02             	and    $0x2,%eax
  80042187fe:	85 c0                	test   %eax,%eax
  8004218800:	75 35                	jne    8004218837 <e1000_receive+0xe7>
  8004218802:	48 b9 e8 0a 22 04 80 	movabs $0x8004220ae8,%rcx
  8004218809:	00 00 00 
  800421880c:	48 ba 12 0b 22 04 80 	movabs $0x8004220b12,%rdx
  8004218813:	00 00 00 
  8004218816:	be ef 00 00 00       	mov    $0xef,%esi
  800421881b:	48 bf c4 0a 22 04 80 	movabs $0x8004220ac4,%rdi
  8004218822:	00 00 00 
  8004218825:	b8 00 00 00 00       	mov    $0x0,%eax
  800421882a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218831:	00 00 00 
  8004218834:	41 ff d0             	callq  *%r8
  8004218837:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421883a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421883d:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  8004218844:	00 00 00 
  8004218847:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421884a:	48 63 d2             	movslq %edx,%rdx
  800421884d:	48 c1 e2 04          	shl    $0x4,%rdx
  8004218851:	48 01 d0             	add    %rdx,%rax
  8004218854:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004218858:	66 89 45 f6          	mov    %ax,-0xa(%rbp)
  800421885c:	0f b7 55 f6          	movzwl -0xa(%rbp),%edx
  8004218860:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218863:	39 c2                	cmp    %eax,%edx
  8004218865:	0f 46 c2             	cmovbe %edx,%eax
  8004218868:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421886b:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421886e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218871:	48 98                	cltq   
  8004218873:	48 c1 e0 0b          	shl    $0xb,%rax
  8004218877:	48 89 c1             	mov    %rax,%rcx
  800421887a:	48 b8 a0 95 4e 04 80 	movabs $0x80044e95a0,%rax
  8004218881:	00 00 00 
  8004218884:	48 01 c1             	add    %rax,%rcx
  8004218887:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421888b:	48 89 ce             	mov    %rcx,%rsi
  800421888e:	48 89 c7             	mov    %rax,%rdi
  8004218891:	48 b8 36 0c 21 04 80 	movabs $0x8004210c36,%rax
  8004218898:	00 00 00 
  800421889b:	ff d0                	callq  *%rax
  800421889d:	48 b8 20 57 4e 04 80 	movabs $0x80044e5720,%rax
  80042188a4:	00 00 00 
  80042188a7:	8b 55 fc             	mov    -0x4(%rbp),%edx
  80042188aa:	48 63 d2             	movslq %edx,%rdx
  80042188ad:	48 c1 e2 04          	shl    $0x4,%rdx
  80042188b1:	48 01 d0             	add    %rdx,%rax
  80042188b4:	c6 40 0c 00          	movb   $0x0,0xc(%rax)
  80042188b8:	48 b8 20 f7 4d 04 80 	movabs $0x80044df720,%rax
  80042188bf:	00 00 00 
  80042188c2:	48 8b 00             	mov    (%rax),%rax
  80042188c5:	48 8d 90 18 28 00 00 	lea    0x2818(%rax),%rdx
  80042188cc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042188cf:	89 02                	mov    %eax,(%rdx)
  80042188d1:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  80042188d4:	c9                   	leaveq 
  80042188d5:	c3                   	retq   

00000080042188d6 <pci_conf1_set_addr>:
  80042188d6:	55                   	push   %rbp
  80042188d7:	48 89 e5             	mov    %rsp,%rbp
  80042188da:	48 83 ec 20          	sub    $0x20,%rsp
  80042188de:	89 7d ec             	mov    %edi,-0x14(%rbp)
  80042188e1:	89 75 e8             	mov    %esi,-0x18(%rbp)
  80042188e4:	89 55 e4             	mov    %edx,-0x1c(%rbp)
  80042188e7:	89 4d e0             	mov    %ecx,-0x20(%rbp)
  80042188ea:	81 7d ec ff 00 00 00 	cmpl   $0xff,-0x14(%rbp)
  80042188f1:	76 35                	jbe    8004218928 <pci_conf1_set_addr+0x52>
  80042188f3:	48 b9 28 0b 22 04 80 	movabs $0x8004220b28,%rcx
  80042188fa:	00 00 00 
  80042188fd:	48 ba 32 0b 22 04 80 	movabs $0x8004220b32,%rdx
  8004218904:	00 00 00 
  8004218907:	be 31 00 00 00       	mov    $0x31,%esi
  800421890c:	48 bf 47 0b 22 04 80 	movabs $0x8004220b47,%rdi
  8004218913:	00 00 00 
  8004218916:	b8 00 00 00 00       	mov    $0x0,%eax
  800421891b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218922:	00 00 00 
  8004218925:	41 ff d0             	callq  *%r8
  8004218928:	83 7d e8 1f          	cmpl   $0x1f,-0x18(%rbp)
  800421892c:	76 35                	jbe    8004218963 <pci_conf1_set_addr+0x8d>
  800421892e:	48 b9 55 0b 22 04 80 	movabs $0x8004220b55,%rcx
  8004218935:	00 00 00 
  8004218938:	48 ba 32 0b 22 04 80 	movabs $0x8004220b32,%rdx
  800421893f:	00 00 00 
  8004218942:	be 32 00 00 00       	mov    $0x32,%esi
  8004218947:	48 bf 47 0b 22 04 80 	movabs $0x8004220b47,%rdi
  800421894e:	00 00 00 
  8004218951:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218956:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421895d:	00 00 00 
  8004218960:	41 ff d0             	callq  *%r8
  8004218963:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  8004218967:	76 35                	jbe    800421899e <pci_conf1_set_addr+0xc8>
  8004218969:	48 b9 5e 0b 22 04 80 	movabs $0x8004220b5e,%rcx
  8004218970:	00 00 00 
  8004218973:	48 ba 32 0b 22 04 80 	movabs $0x8004220b32,%rdx
  800421897a:	00 00 00 
  800421897d:	be 33 00 00 00       	mov    $0x33,%esi
  8004218982:	48 bf 47 0b 22 04 80 	movabs $0x8004220b47,%rdi
  8004218989:	00 00 00 
  800421898c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218991:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218998:	00 00 00 
  800421899b:	41 ff d0             	callq  *%r8
  800421899e:	81 7d e0 ff 00 00 00 	cmpl   $0xff,-0x20(%rbp)
  80042189a5:	76 35                	jbe    80042189dc <pci_conf1_set_addr+0x106>
  80042189a7:	48 b9 67 0b 22 04 80 	movabs $0x8004220b67,%rcx
  80042189ae:	00 00 00 
  80042189b1:	48 ba 32 0b 22 04 80 	movabs $0x8004220b32,%rdx
  80042189b8:	00 00 00 
  80042189bb:	be 34 00 00 00       	mov    $0x34,%esi
  80042189c0:	48 bf 47 0b 22 04 80 	movabs $0x8004220b47,%rdi
  80042189c7:	00 00 00 
  80042189ca:	b8 00 00 00 00       	mov    $0x0,%eax
  80042189cf:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042189d6:	00 00 00 
  80042189d9:	41 ff d0             	callq  *%r8
  80042189dc:	8b 45 e0             	mov    -0x20(%rbp),%eax
  80042189df:	83 e0 03             	and    $0x3,%eax
  80042189e2:	85 c0                	test   %eax,%eax
  80042189e4:	74 35                	je     8004218a1b <pci_conf1_set_addr+0x145>
  80042189e6:	48 b9 74 0b 22 04 80 	movabs $0x8004220b74,%rcx
  80042189ed:	00 00 00 
  80042189f0:	48 ba 32 0b 22 04 80 	movabs $0x8004220b32,%rdx
  80042189f7:	00 00 00 
  80042189fa:	be 35 00 00 00       	mov    $0x35,%esi
  80042189ff:	48 bf 47 0b 22 04 80 	movabs $0x8004220b47,%rdi
  8004218a06:	00 00 00 
  8004218a09:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218a0e:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004218a15:	00 00 00 
  8004218a18:	41 ff d0             	callq  *%r8
  8004218a1b:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218a1e:	c1 e0 10             	shl    $0x10,%eax
  8004218a21:	89 c2                	mov    %eax,%edx
  8004218a23:	8b 45 e8             	mov    -0x18(%rbp),%eax
  8004218a26:	c1 e0 0b             	shl    $0xb,%eax
  8004218a29:	09 c2                	or     %eax,%edx
  8004218a2b:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004218a2e:	c1 e0 08             	shl    $0x8,%eax
  8004218a31:	09 d0                	or     %edx,%eax
  8004218a33:	0b 45 e0             	or     -0x20(%rbp),%eax
  8004218a36:	0d 00 00 00 80       	or     $0x80000000,%eax
  8004218a3b:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218a3e:	48 b8 e4 57 23 04 80 	movabs $0x80042357e4,%rax
  8004218a45:	00 00 00 
  8004218a48:	8b 00                	mov    (%rax),%eax
  8004218a4a:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218a4d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218a50:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218a53:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218a56:	8b 55 f8             	mov    -0x8(%rbp),%edx
  8004218a59:	ef                   	out    %eax,(%dx)
  8004218a5a:	c9                   	leaveq 
  8004218a5b:	c3                   	retq   

0000008004218a5c <pci_conf_read>:
  8004218a5c:	55                   	push   %rbp
  8004218a5d:	48 89 e5             	mov    %rsp,%rbp
  8004218a60:	48 83 ec 20          	sub    $0x20,%rsp
  8004218a64:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218a68:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a6f:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218a72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a76:	8b 70 08             	mov    0x8(%rax),%esi
  8004218a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218a7d:	48 8b 00             	mov    (%rax),%rax
  8004218a80:	8b 40 08             	mov    0x8(%rax),%eax
  8004218a83:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218a86:	89 c7                	mov    %eax,%edi
  8004218a88:	48 b8 d6 88 21 04 80 	movabs $0x80042188d6,%rax
  8004218a8f:	00 00 00 
  8004218a92:	ff d0                	callq  *%rax
  8004218a94:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218a9b:	00 00 00 
  8004218a9e:	8b 00                	mov    (%rax),%eax
  8004218aa0:	89 45 fc             	mov    %eax,-0x4(%rbp)

static __inline uint32_t
inl(int port)
{
	uint32_t data;
	__asm __volatile("inl %w1,%0" : "=a" (data) : "d" (port));
  8004218aa3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218aa6:	89 c2                	mov    %eax,%edx
  8004218aa8:	ed                   	in     (%dx),%eax
  8004218aa9:	89 45 f8             	mov    %eax,-0x8(%rbp)
	return data;
  8004218aac:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218aaf:	c9                   	leaveq 
  8004218ab0:	c3                   	retq   

0000008004218ab1 <pci_conf_write>:
  8004218ab1:	55                   	push   %rbp
  8004218ab2:	48 89 e5             	mov    %rsp,%rbp
  8004218ab5:	48 83 ec 20          	sub    $0x20,%rsp
  8004218ab9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218abd:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  8004218ac0:	89 55 e0             	mov    %edx,-0x20(%rbp)
  8004218ac3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ac7:	8b 50 0c             	mov    0xc(%rax),%edx
  8004218aca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ace:	8b 70 08             	mov    0x8(%rax),%esi
  8004218ad1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ad5:	48 8b 00             	mov    (%rax),%rax
  8004218ad8:	8b 40 08             	mov    0x8(%rax),%eax
  8004218adb:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  8004218ade:	89 c7                	mov    %eax,%edi
  8004218ae0:	48 b8 d6 88 21 04 80 	movabs $0x80042188d6,%rax
  8004218ae7:	00 00 00 
  8004218aea:	ff d0                	callq  *%rax
  8004218aec:	48 b8 e8 57 23 04 80 	movabs $0x80042357e8,%rax
  8004218af3:	00 00 00 
  8004218af6:	8b 00                	mov    (%rax),%eax
  8004218af8:	89 45 fc             	mov    %eax,-0x4(%rbp)
  8004218afb:	8b 45 e0             	mov    -0x20(%rbp),%eax
  8004218afe:	89 45 f8             	mov    %eax,-0x8(%rbp)
}

static __inline void
outl(int port, uint32_t data)
{
	__asm __volatile("outl %0,%w1" : : "a" (data), "d" (port));
  8004218b01:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218b04:	8b 55 fc             	mov    -0x4(%rbp),%edx
  8004218b07:	ef                   	out    %eax,(%dx)
  8004218b08:	c9                   	leaveq 
  8004218b09:	c3                   	retq   

0000008004218b0a <pci_attach_match>:
  8004218b0a:	55                   	push   %rbp
  8004218b0b:	48 89 e5             	mov    %rsp,%rbp
  8004218b0e:	48 83 ec 30          	sub    $0x30,%rsp
  8004218b12:	89 7d ec             	mov    %edi,-0x14(%rbp)
  8004218b15:	89 75 e8             	mov    %esi,-0x18(%rbp)
  8004218b18:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
  8004218b1c:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
  8004218b20:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218b27:	e9 aa 00 00 00       	jmpq   8004218bd6 <pci_attach_match+0xcc>
  8004218b2c:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b2f:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b33:	48 89 c2             	mov    %rax,%rdx
  8004218b36:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b3a:	48 01 d0             	add    %rdx,%rax
  8004218b3d:	8b 00                	mov    (%rax),%eax
  8004218b3f:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  8004218b42:	0f 85 8a 00 00 00    	jne    8004218bd2 <pci_attach_match+0xc8>
  8004218b48:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b4b:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b4f:	48 89 c2             	mov    %rax,%rdx
  8004218b52:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b56:	48 01 d0             	add    %rdx,%rax
  8004218b59:	8b 40 04             	mov    0x4(%rax),%eax
  8004218b5c:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  8004218b5f:	75 71                	jne    8004218bd2 <pci_attach_match+0xc8>
  8004218b61:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b64:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b68:	48 89 c2             	mov    %rax,%rdx
  8004218b6b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218b6f:	48 01 d0             	add    %rdx,%rax
  8004218b72:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218b76:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  8004218b7a:	48 89 d7             	mov    %rdx,%rdi
  8004218b7d:	ff d0                	callq  *%rax
  8004218b7f:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218b82:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218b86:	7e 05                	jle    8004218b8d <pci_attach_match+0x83>
  8004218b88:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218b8b:	eb 6c                	jmp    8004218bf9 <pci_attach_match+0xef>
  8004218b8d:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  8004218b91:	79 3f                	jns    8004218bd2 <pci_attach_match+0xc8>
  8004218b93:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218b96:	48 c1 e0 04          	shl    $0x4,%rax
  8004218b9a:	48 89 c2             	mov    %rax,%rdx
  8004218b9d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218ba1:	48 01 d0             	add    %rdx,%rax
  8004218ba4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  8004218ba8:	8b 75 f8             	mov    -0x8(%rbp),%esi
  8004218bab:	8b 55 e8             	mov    -0x18(%rbp),%edx
  8004218bae:	8b 45 ec             	mov    -0x14(%rbp),%eax
  8004218bb1:	41 89 f0             	mov    %esi,%r8d
  8004218bb4:	89 c6                	mov    %eax,%esi
  8004218bb6:	48 bf 88 0b 22 04 80 	movabs $0x8004220b88,%rdi
  8004218bbd:	00 00 00 
  8004218bc0:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bc5:	49 b9 77 9c 20 04 80 	movabs $0x8004209c77,%r9
  8004218bcc:	00 00 00 
  8004218bcf:	41 ff d1             	callq  *%r9
  8004218bd2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218bd6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218bd9:	48 c1 e0 04          	shl    $0x4,%rax
  8004218bdd:	48 89 c2             	mov    %rax,%rdx
  8004218be0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218be4:	48 01 d0             	add    %rdx,%rax
  8004218be7:	48 8b 40 08          	mov    0x8(%rax),%rax
  8004218beb:	48 85 c0             	test   %rax,%rax
  8004218bee:	0f 85 38 ff ff ff    	jne    8004218b2c <pci_attach_match+0x22>
  8004218bf4:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218bf9:	c9                   	leaveq 
  8004218bfa:	c3                   	retq   

0000008004218bfb <pci_attach>:
  8004218bfb:	55                   	push   %rbp
  8004218bfc:	48 89 e5             	mov    %rsp,%rbp
  8004218bff:	48 83 ec 10          	sub    $0x10,%rsp
  8004218c03:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004218c07:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218c0b:	8b 40 14             	mov    0x14(%rax),%eax
  8004218c0e:	c1 e8 10             	shr    $0x10,%eax
  8004218c11:	0f b6 c0             	movzbl %al,%eax
  8004218c14:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218c18:	8b 52 14             	mov    0x14(%rdx),%edx
  8004218c1b:	89 d7                	mov    %edx,%edi
  8004218c1d:	c1 ef 18             	shr    $0x18,%edi
  8004218c20:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218c24:	48 89 d1             	mov    %rdx,%rcx
  8004218c27:	48 ba 00 58 23 04 80 	movabs $0x8004235800,%rdx
  8004218c2e:	00 00 00 
  8004218c31:	89 c6                	mov    %eax,%esi
  8004218c33:	48 b8 0a 8b 21 04 80 	movabs $0x8004218b0a,%rax
  8004218c3a:	00 00 00 
  8004218c3d:	ff d0                	callq  *%rax
  8004218c3f:	85 c0                	test   %eax,%eax
  8004218c41:	75 39                	jne    8004218c7c <pci_attach+0x81>
  8004218c43:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218c47:	8b 40 10             	mov    0x10(%rax),%eax
  8004218c4a:	c1 e8 10             	shr    $0x10,%eax
  8004218c4d:	89 c6                	mov    %eax,%esi
  8004218c4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004218c53:	8b 40 10             	mov    0x10(%rax),%eax
  8004218c56:	0f b7 c0             	movzwl %ax,%eax
  8004218c59:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004218c5d:	48 89 d1             	mov    %rdx,%rcx
  8004218c60:	48 ba 20 58 23 04 80 	movabs $0x8004235820,%rdx
  8004218c67:	00 00 00 
  8004218c6a:	89 c7                	mov    %eax,%edi
  8004218c6c:	48 b8 0a 8b 21 04 80 	movabs $0x8004218b0a,%rax
  8004218c73:	00 00 00 
  8004218c76:	ff d0                	callq  *%rax
  8004218c78:	85 c0                	test   %eax,%eax
  8004218c7a:	74 07                	je     8004218c83 <pci_attach+0x88>
  8004218c7c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218c81:	eb 05                	jmp    8004218c88 <pci_attach+0x8d>
  8004218c83:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218c88:	c9                   	leaveq 
  8004218c89:	c3                   	retq   

0000008004218c8a <pci_print_func>:
  8004218c8a:	55                   	push   %rbp
  8004218c8b:	48 89 e5             	mov    %rsp,%rbp
  8004218c8e:	48 83 ec 40          	sub    $0x40,%rsp
  8004218c92:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  8004218c96:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218c9d:	00 00 00 
  8004218ca0:	48 8b 00             	mov    (%rax),%rax
  8004218ca3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218ca7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cab:	8b 40 14             	mov    0x14(%rax),%eax
  8004218cae:	c1 e8 18             	shr    $0x18,%eax
  8004218cb1:	83 f8 06             	cmp    $0x6,%eax
  8004218cb4:	77 20                	ja     8004218cd6 <pci_print_func+0x4c>
  8004218cb6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cba:	8b 40 14             	mov    0x14(%rax),%eax
  8004218cbd:	c1 e8 18             	shr    $0x18,%eax
  8004218cc0:	89 c2                	mov    %eax,%edx
  8004218cc2:	48 b8 40 58 23 04 80 	movabs $0x8004235840,%rax
  8004218cc9:	00 00 00 
  8004218ccc:	89 d2                	mov    %edx,%edx
  8004218cce:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  8004218cd2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004218cd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cda:	0f b6 40 48          	movzbl 0x48(%rax),%eax
  8004218cde:	0f b6 f8             	movzbl %al,%edi
  8004218ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218ce5:	8b 40 14             	mov    0x14(%rax),%eax
  8004218ce8:	c1 e8 10             	shr    $0x10,%eax
  8004218ceb:	0f b6 f0             	movzbl %al,%esi
  8004218cee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cf2:	8b 40 14             	mov    0x14(%rax),%eax
  8004218cf5:	c1 e8 18             	shr    $0x18,%eax
  8004218cf8:	41 89 c1             	mov    %eax,%r9d
  8004218cfb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218cff:	8b 40 10             	mov    0x10(%rax),%eax
  8004218d02:	c1 e8 10             	shr    $0x10,%eax
  8004218d05:	41 89 c2             	mov    %eax,%r10d
  8004218d08:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d0c:	8b 40 10             	mov    0x10(%rax),%eax
  8004218d0f:	44 0f b7 c0          	movzwl %ax,%r8d
  8004218d13:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d17:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004218d1a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d1e:	8b 50 08             	mov    0x8(%rax),%edx
  8004218d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218d25:	48 8b 00             	mov    (%rax),%rax
  8004218d28:	8b 40 08             	mov    0x8(%rax),%eax
  8004218d2b:	89 7c 24 18          	mov    %edi,0x18(%rsp)
  8004218d2f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
  8004218d33:	48 89 7c 24 10       	mov    %rdi,0x10(%rsp)
  8004218d38:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004218d3c:	44 89 0c 24          	mov    %r9d,(%rsp)
  8004218d40:	45 89 d1             	mov    %r10d,%r9d
  8004218d43:	89 c6                	mov    %eax,%esi
  8004218d45:	48 bf 28 0c 22 04 80 	movabs $0x8004220c28,%rdi
  8004218d4c:	00 00 00 
  8004218d4f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004218d54:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  8004218d5b:	00 00 00 
  8004218d5e:	41 ff d2             	callq  *%r10
  8004218d61:	c9                   	leaveq 
  8004218d62:	c3                   	retq   

0000008004218d63 <pci_scan_bus>:
  8004218d63:	55                   	push   %rbp
  8004218d64:	48 89 e5             	mov    %rsp,%rbp
  8004218d67:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  8004218d6e:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  8004218d75:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  8004218d7c:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218d80:	ba 50 00 00 00       	mov    $0x50,%edx
  8004218d85:	be 00 00 00 00       	mov    $0x0,%esi
  8004218d8a:	48 89 c7             	mov    %rax,%rdi
  8004218d8d:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004218d94:	00 00 00 
  8004218d97:	ff d0                	callq  *%rax
  8004218d99:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  8004218da0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  8004218da4:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
  8004218dab:	e9 22 02 00 00       	jmpq   8004218fd2 <pci_scan_bus+0x26f>
  8004218db0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  8004218db4:	be 0c 00 00 00       	mov    $0xc,%esi
  8004218db9:	48 89 c7             	mov    %rax,%rdi
  8004218dbc:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  8004218dc3:	00 00 00 
  8004218dc6:	ff d0                	callq  *%rax
  8004218dc8:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004218dcb:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218dce:	c1 e8 10             	shr    $0x10,%eax
  8004218dd1:	83 e0 7f             	and    $0x7f,%eax
  8004218dd4:	83 f8 01             	cmp    $0x1,%eax
  8004218dd7:	0f 87 ec 01 00 00    	ja     8004218fc9 <pci_scan_bus+0x266>
  8004218ddd:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  8004218de1:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  8004218de5:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  8004218dec:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  8004218df0:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
  8004218df7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004218dfb:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
  8004218e02:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004218e06:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
  8004218e0d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004218e11:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
  8004218e18:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004218e1c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  8004218e23:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004218e27:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  8004218e2e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218e32:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  8004218e39:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004218e3d:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
  8004218e44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004218e48:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  8004218e4f:	c7 85 0c ff ff ff 00 	movl   $0x0,-0xf4(%rbp)
  8004218e56:	00 00 00 
  8004218e59:	e9 45 01 00 00       	jmpq   8004218fa3 <pci_scan_bus+0x240>
  8004218e5e:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  8004218e65:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  8004218e6c:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  8004218e73:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
  8004218e7a:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  8004218e81:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
  8004218e88:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  8004218e8f:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  8004218e96:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  8004218e9d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  8004218ea4:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  8004218eab:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
  8004218eb2:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  8004218eb9:	48 89 45 80          	mov    %rax,-0x80(%rbp)
  8004218ebd:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  8004218ec4:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  8004218ec8:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  8004218ecf:	48 89 45 90          	mov    %rax,-0x70(%rbp)
  8004218ed3:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  8004218eda:	48 89 45 98          	mov    %rax,-0x68(%rbp)
  8004218ede:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  8004218ee5:	be 00 00 00 00       	mov    $0x0,%esi
  8004218eea:	48 89 c7             	mov    %rax,%rdi
  8004218eed:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  8004218ef4:	00 00 00 
  8004218ef7:	ff d0                	callq  *%rax
  8004218ef9:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  8004218eff:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
  8004218f05:	0f b7 c0             	movzwl %ax,%eax
  8004218f08:	3d ff ff 00 00       	cmp    $0xffff,%eax
  8004218f0d:	0f 84 81 00 00 00    	je     8004218f94 <pci_scan_bus+0x231>
  8004218f13:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218f1a:	be 3c 00 00 00       	mov    $0x3c,%esi
  8004218f1f:	48 89 c7             	mov    %rax,%rdi
  8004218f22:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  8004218f29:	00 00 00 
  8004218f2c:	ff d0                	callq  *%rax
  8004218f2e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004218f31:	8b 45 f4             	mov    -0xc(%rbp),%eax
  8004218f34:	88 45 98             	mov    %al,-0x68(%rbp)
  8004218f37:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218f3e:	be 08 00 00 00       	mov    $0x8,%esi
  8004218f43:	48 89 c7             	mov    %rax,%rdi
  8004218f46:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  8004218f4d:	00 00 00 
  8004218f50:	ff d0                	callq  *%rax
  8004218f52:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%rbp)
  8004218f58:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  8004218f5f:	00 00 00 
  8004218f62:	8b 00                	mov    (%rax),%eax
  8004218f64:	85 c0                	test   %eax,%eax
  8004218f66:	74 16                	je     8004218f7e <pci_scan_bus+0x21b>
  8004218f68:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218f6f:	48 89 c7             	mov    %rax,%rdi
  8004218f72:	48 b8 8a 8c 21 04 80 	movabs $0x8004218c8a,%rax
  8004218f79:	00 00 00 
  8004218f7c:	ff d0                	callq  *%rax
  8004218f7e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
  8004218f85:	48 89 c7             	mov    %rax,%rdi
  8004218f88:	48 b8 fb 8b 21 04 80 	movabs $0x8004218bfb,%rax
  8004218f8f:	00 00 00 
  8004218f92:	ff d0                	callq  *%rax
  8004218f94:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  8004218f9a:	83 c0 01             	add    $0x1,%eax
  8004218f9d:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  8004218fa3:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  8004218fa9:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004218fac:	25 00 00 80 00       	and    $0x800000,%eax
  8004218fb1:	85 c0                	test   %eax,%eax
  8004218fb3:	74 07                	je     8004218fbc <pci_scan_bus+0x259>
  8004218fb5:	b8 08 00 00 00       	mov    $0x8,%eax
  8004218fba:	eb 05                	jmp    8004218fc1 <pci_scan_bus+0x25e>
  8004218fbc:	b8 01 00 00 00       	mov    $0x1,%eax
  8004218fc1:	39 c2                	cmp    %eax,%edx
  8004218fc3:	0f 82 95 fe ff ff    	jb     8004218e5e <pci_scan_bus+0xfb>
  8004218fc9:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218fcc:	83 c0 01             	add    $0x1,%eax
  8004218fcf:	89 45 a8             	mov    %eax,-0x58(%rbp)
  8004218fd2:	8b 45 a8             	mov    -0x58(%rbp),%eax
  8004218fd5:	83 f8 1f             	cmp    $0x1f,%eax
  8004218fd8:	0f 86 d2 fd ff ff    	jbe    8004218db0 <pci_scan_bus+0x4d>
  8004218fde:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004218fe1:	c9                   	leaveq 
  8004218fe2:	c3                   	retq   

0000008004218fe3 <pci_bridge_attach>:
  8004218fe3:	55                   	push   %rbp
  8004218fe4:	48 89 e5             	mov    %rsp,%rbp
  8004218fe7:	48 83 ec 30          	sub    $0x30,%rsp
  8004218feb:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  8004218fef:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004218ff3:	be 1c 00 00 00       	mov    $0x1c,%esi
  8004218ff8:	48 89 c7             	mov    %rax,%rdi
  8004218ffb:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  8004219002:	00 00 00 
  8004219005:	ff d0                	callq  *%rax
  8004219007:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421900a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421900e:	be 18 00 00 00       	mov    $0x18,%esi
  8004219013:	48 89 c7             	mov    %rax,%rdi
  8004219016:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  800421901d:	00 00 00 
  8004219020:	ff d0                	callq  *%rax
  8004219022:	89 45 f8             	mov    %eax,-0x8(%rbp)
  8004219025:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219028:	83 e0 0f             	and    $0xf,%eax
  800421902b:	83 f8 01             	cmp    $0x1,%eax
  800421902e:	75 40                	jne    8004219070 <pci_bridge_attach+0x8d>
  8004219030:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219034:	8b 48 0c             	mov    0xc(%rax),%ecx
  8004219037:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421903b:	8b 50 08             	mov    0x8(%rax),%edx
  800421903e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219042:	48 8b 00             	mov    (%rax),%rax
  8004219045:	8b 40 08             	mov    0x8(%rax),%eax
  8004219048:	89 c6                	mov    %eax,%esi
  800421904a:	48 bf 68 0c 22 04 80 	movabs $0x8004220c68,%rdi
  8004219051:	00 00 00 
  8004219054:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219059:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219060:	00 00 00 
  8004219063:	41 ff d0             	callq  *%r8
  8004219066:	b8 00 00 00 00       	mov    $0x0,%eax
  800421906b:	e9 a1 00 00 00       	jmpq   8004219111 <pci_bridge_attach+0x12e>
  8004219070:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  8004219074:	ba 10 00 00 00       	mov    $0x10,%edx
  8004219079:	be 00 00 00 00       	mov    $0x0,%esi
  800421907e:	48 89 c7             	mov    %rax,%rdi
  8004219081:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  8004219088:	00 00 00 
  800421908b:	ff d0                	callq  *%rax
  800421908d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219091:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  8004219095:	8b 45 f8             	mov    -0x8(%rbp),%eax
  8004219098:	c1 e8 08             	shr    $0x8,%eax
  800421909b:	0f b6 c0             	movzbl %al,%eax
  800421909e:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042190a1:	48 b8 e0 57 23 04 80 	movabs $0x80042357e0,%rax
  80042190a8:	00 00 00 
  80042190ab:	8b 00                	mov    (%rax),%eax
  80042190ad:	85 c0                	test   %eax,%eax
  80042190af:	74 48                	je     80042190f9 <pci_bridge_attach+0x116>
  80042190b1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042190b4:	c1 e8 10             	shr    $0x10,%eax
  80042190b7:	0f b6 f8             	movzbl %al,%edi
  80042190ba:	8b 75 e8             	mov    -0x18(%rbp),%esi
  80042190bd:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190c1:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042190c4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190c8:	8b 50 08             	mov    0x8(%rax),%edx
  80042190cb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042190cf:	48 8b 00             	mov    (%rax),%rax
  80042190d2:	8b 40 08             	mov    0x8(%rax),%eax
  80042190d5:	41 89 f9             	mov    %edi,%r9d
  80042190d8:	41 89 f0             	mov    %esi,%r8d
  80042190db:	89 c6                	mov    %eax,%esi
  80042190dd:	48 bf a0 0c 22 04 80 	movabs $0x8004220ca0,%rdi
  80042190e4:	00 00 00 
  80042190e7:	b8 00 00 00 00       	mov    $0x0,%eax
  80042190ec:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  80042190f3:	00 00 00 
  80042190f6:	41 ff d2             	callq  *%r10
  80042190f9:	48 8d 45 e0          	lea    -0x20(%rbp),%rax
  80042190fd:	48 89 c7             	mov    %rax,%rdi
  8004219100:	48 b8 63 8d 21 04 80 	movabs $0x8004218d63,%rax
  8004219107:	00 00 00 
  800421910a:	ff d0                	callq  *%rax
  800421910c:	b8 01 00 00 00       	mov    $0x1,%eax
  8004219111:	c9                   	leaveq 
  8004219112:	c3                   	retq   

0000008004219113 <pci_func_enable>:
  8004219113:	55                   	push   %rbp
  8004219114:	48 89 e5             	mov    %rsp,%rbp
  8004219117:	48 83 ec 40          	sub    $0x40,%rsp
  800421911b:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421911f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219123:	ba 07 00 00 00       	mov    $0x7,%edx
  8004219128:	be 04 00 00 00       	mov    $0x4,%esi
  800421912d:	48 89 c7             	mov    %rax,%rdi
  8004219130:	48 b8 b1 8a 21 04 80 	movabs $0x8004218ab1,%rax
  8004219137:	00 00 00 
  800421913a:	ff d0                	callq  *%rax
  800421913c:	c7 45 f8 10 00 00 00 	movl   $0x10,-0x8(%rbp)
  8004219143:	e9 ee 01 00 00       	jmpq   8004219336 <pci_func_enable+0x223>
  8004219148:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421914b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421914f:	89 d6                	mov    %edx,%esi
  8004219151:	48 89 c7             	mov    %rax,%rdi
  8004219154:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  800421915b:	00 00 00 
  800421915e:	ff d0                	callq  *%rax
  8004219160:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219163:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
  800421916a:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421916d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219171:	ba ff ff ff ff       	mov    $0xffffffff,%edx
  8004219176:	89 ce                	mov    %ecx,%esi
  8004219178:	48 89 c7             	mov    %rax,%rdi
  800421917b:	48 b8 b1 8a 21 04 80 	movabs $0x8004218ab1,%rax
  8004219182:	00 00 00 
  8004219185:	ff d0                	callq  *%rax
  8004219187:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421918a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421918e:	89 d6                	mov    %edx,%esi
  8004219190:	48 89 c7             	mov    %rax,%rdi
  8004219193:	48 b8 5c 8a 21 04 80 	movabs $0x8004218a5c,%rax
  800421919a:	00 00 00 
  800421919d:	ff d0                	callq  *%rax
  800421919f:	89 45 e8             	mov    %eax,-0x18(%rbp)
  80042191a2:	83 7d e8 00          	cmpl   $0x0,-0x18(%rbp)
  80042191a6:	75 05                	jne    80042191ad <pci_func_enable+0x9a>
  80042191a8:	e9 83 01 00 00       	jmpq   8004219330 <pci_func_enable+0x21d>
  80042191ad:	8b 45 f8             	mov    -0x8(%rbp),%eax
  80042191b0:	83 e8 10             	sub    $0x10,%eax
  80042191b3:	c1 e8 02             	shr    $0x2,%eax
  80042191b6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  80042191b9:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042191bc:	83 e0 01             	and    $0x1,%eax
  80042191bf:	85 c0                	test   %eax,%eax
  80042191c1:	75 65                	jne    8004219228 <pci_func_enable+0x115>
  80042191c3:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042191c6:	83 e0 06             	and    $0x6,%eax
  80042191c9:	83 f8 04             	cmp    $0x4,%eax
  80042191cc:	75 07                	jne    80042191d5 <pci_func_enable+0xc2>
  80042191ce:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%rbp)
  80042191d5:	8b 45 e8             	mov    -0x18(%rbp),%eax
  80042191d8:	83 e0 f0             	and    $0xfffffff0,%eax
  80042191db:	f7 d8                	neg    %eax
  80042191dd:	23 45 e8             	and    -0x18(%rbp),%eax
  80042191e0:	83 e0 f0             	and    $0xfffffff0,%eax
  80042191e3:	89 45 f0             	mov    %eax,-0x10(%rbp)
  80042191e6:	8b 45 ec             	mov    -0x14(%rbp),%eax
  80042191e9:	83 e0 f0             	and    $0xfffffff0,%eax
  80042191ec:	89 45 f4             	mov    %eax,-0xc(%rbp)
  80042191ef:	48 b8 a0 d5 6d 04 80 	movabs $0x80046dd5a0,%rax
  80042191f6:	00 00 00 
  80042191f9:	8b 00                	mov    (%rax),%eax
  80042191fb:	85 c0                	test   %eax,%eax
  80042191fd:	74 7a                	je     8004219279 <pci_func_enable+0x166>
  80042191ff:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004219202:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219205:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  8004219208:	89 c6                	mov    %eax,%esi
  800421920a:	48 bf d0 0c 22 04 80 	movabs $0x8004220cd0,%rdi
  8004219211:	00 00 00 
  8004219214:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219219:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219220:	00 00 00 
  8004219223:	41 ff d0             	callq  *%r8
  8004219226:	eb 51                	jmp    8004219279 <pci_func_enable+0x166>
  8004219228:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421922b:	83 e0 fc             	and    $0xfffffffc,%eax
  800421922e:	f7 d8                	neg    %eax
  8004219230:	23 45 e8             	and    -0x18(%rbp),%eax
  8004219233:	83 e0 fc             	and    $0xfffffffc,%eax
  8004219236:	89 45 f0             	mov    %eax,-0x10(%rbp)
  8004219239:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421923c:	83 e0 fc             	and    $0xfffffffc,%eax
  800421923f:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219242:	48 b8 a0 d5 6d 04 80 	movabs $0x80046dd5a0,%rax
  8004219249:	00 00 00 
  800421924c:	8b 00                	mov    (%rax),%eax
  800421924e:	85 c0                	test   %eax,%eax
  8004219250:	74 27                	je     8004219279 <pci_func_enable+0x166>
  8004219252:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  8004219255:	8b 55 f0             	mov    -0x10(%rbp),%edx
  8004219258:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421925b:	89 c6                	mov    %eax,%esi
  800421925d:	48 bf f8 0c 22 04 80 	movabs $0x8004220cf8,%rdi
  8004219264:	00 00 00 
  8004219267:	b8 00 00 00 00       	mov    $0x0,%eax
  800421926c:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  8004219273:	00 00 00 
  8004219276:	41 ff d0             	callq  *%r8
  8004219279:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421927c:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421927f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219283:	89 ce                	mov    %ecx,%esi
  8004219285:	48 89 c7             	mov    %rax,%rdi
  8004219288:	48 b8 b1 8a 21 04 80 	movabs $0x8004218ab1,%rax
  800421928f:	00 00 00 
  8004219292:	ff d0                	callq  *%rax
  8004219294:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219298:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421929b:	48 63 d2             	movslq %edx,%rdx
  800421929e:	48 8d 4a 04          	lea    0x4(%rdx),%rcx
  80042192a2:	8b 55 f4             	mov    -0xc(%rbp),%edx
  80042192a5:	89 54 88 08          	mov    %edx,0x8(%rax,%rcx,4)
  80042192a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192ad:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  80042192b0:	48 63 d2             	movslq %edx,%rdx
  80042192b3:	48 8d 4a 0c          	lea    0xc(%rdx),%rcx
  80042192b7:	8b 55 f0             	mov    -0x10(%rbp),%edx
  80042192ba:	89 14 88             	mov    %edx,(%rax,%rcx,4)
  80042192bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
  80042192c1:	74 6d                	je     8004219330 <pci_func_enable+0x21d>
  80042192c3:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  80042192c7:	75 67                	jne    8004219330 <pci_func_enable+0x21d>
  80042192c9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192cd:	8b 40 10             	mov    0x10(%rax),%eax
  80042192d0:	c1 e8 10             	shr    $0x10,%eax
  80042192d3:	41 89 c0             	mov    %eax,%r8d
  80042192d6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192da:	8b 40 10             	mov    0x10(%rax),%eax
  80042192dd:	0f b7 f8             	movzwl %ax,%edi
  80042192e0:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192e4:	8b 48 0c             	mov    0xc(%rax),%ecx
  80042192e7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192eb:	8b 50 08             	mov    0x8(%rax),%edx
  80042192ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042192f2:	48 8b 00             	mov    (%rax),%rax
  80042192f5:	8b 40 08             	mov    0x8(%rax),%eax
  80042192f8:	8b 75 f0             	mov    -0x10(%rbp),%esi
  80042192fb:	89 74 24 10          	mov    %esi,0x10(%rsp)
  80042192ff:	8b 75 f4             	mov    -0xc(%rbp),%esi
  8004219302:	89 74 24 08          	mov    %esi,0x8(%rsp)
  8004219306:	8b 75 e4             	mov    -0x1c(%rbp),%esi
  8004219309:	89 34 24             	mov    %esi,(%rsp)
  800421930c:	45 89 c1             	mov    %r8d,%r9d
  800421930f:	41 89 f8             	mov    %edi,%r8d
  8004219312:	89 c6                	mov    %eax,%esi
  8004219314:	48 bf 20 0d 22 04 80 	movabs $0x8004220d20,%rdi
  800421931b:	00 00 00 
  800421931e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219323:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  800421932a:	00 00 00 
  800421932d:	41 ff d2             	callq  *%r10
  8004219330:	8b 45 fc             	mov    -0x4(%rbp),%eax
  8004219333:	01 45 f8             	add    %eax,-0x8(%rbp)
  8004219336:	83 7d f8 27          	cmpl   $0x27,-0x8(%rbp)
  800421933a:	0f 86 08 fe ff ff    	jbe    8004219148 <pci_func_enable+0x35>
  8004219340:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219344:	8b 40 10             	mov    0x10(%rax),%eax
  8004219347:	c1 e8 10             	shr    $0x10,%eax
  800421934a:	89 c7                	mov    %eax,%edi
  800421934c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219350:	8b 40 10             	mov    0x10(%rax),%eax
  8004219353:	0f b7 f0             	movzwl %ax,%esi
  8004219356:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421935a:	8b 48 0c             	mov    0xc(%rax),%ecx
  800421935d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219361:	8b 50 08             	mov    0x8(%rax),%edx
  8004219364:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  8004219368:	48 8b 00             	mov    (%rax),%rax
  800421936b:	8b 40 08             	mov    0x8(%rax),%eax
  800421936e:	41 89 f9             	mov    %edi,%r9d
  8004219371:	41 89 f0             	mov    %esi,%r8d
  8004219374:	89 c6                	mov    %eax,%esi
  8004219376:	48 bf 80 0d 22 04 80 	movabs $0x8004220d80,%rdi
  800421937d:	00 00 00 
  8004219380:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219385:	49 ba 77 9c 20 04 80 	movabs $0x8004209c77,%r10
  800421938c:	00 00 00 
  800421938f:	41 ff d2             	callq  *%r10
  8004219392:	c9                   	leaveq 
  8004219393:	c3                   	retq   

0000008004219394 <pci_init>:
  8004219394:	55                   	push   %rbp
  8004219395:	48 89 e5             	mov    %rsp,%rbp
  8004219398:	ba 10 00 00 00       	mov    $0x10,%edx
  800421939d:	be 00 00 00 00       	mov    $0x0,%esi
  80042193a2:	48 bf b0 d5 6d 04 80 	movabs $0x80046dd5b0,%rdi
  80042193a9:	00 00 00 
  80042193ac:	48 b8 ab 0b 21 04 80 	movabs $0x8004210bab,%rax
  80042193b3:	00 00 00 
  80042193b6:	ff d0                	callq  *%rax
  80042193b8:	48 bf b0 d5 6d 04 80 	movabs $0x80046dd5b0,%rdi
  80042193bf:	00 00 00 
  80042193c2:	48 b8 63 8d 21 04 80 	movabs $0x8004218d63,%rax
  80042193c9:	00 00 00 
  80042193cc:	ff d0                	callq  *%rax
  80042193ce:	5d                   	pop    %rbp
  80042193cf:	c3                   	retq   

00000080042193d0 <time_init>:
  80042193d0:	55                   	push   %rbp
  80042193d1:	48 89 e5             	mov    %rsp,%rbp
  80042193d4:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  80042193db:	00 00 00 
  80042193de:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  80042193e4:	5d                   	pop    %rbp
  80042193e5:	c3                   	retq   

00000080042193e6 <time_tick>:
  80042193e6:	55                   	push   %rbp
  80042193e7:	48 89 e5             	mov    %rsp,%rbp
  80042193ea:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  80042193f1:	00 00 00 
  80042193f4:	8b 00                	mov    (%rax),%eax
  80042193f6:	8d 50 01             	lea    0x1(%rax),%edx
  80042193f9:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  8004219400:	00 00 00 
  8004219403:	89 10                	mov    %edx,(%rax)
  8004219405:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  800421940c:	00 00 00 
  800421940f:	8b 10                	mov    (%rax),%edx
  8004219411:	89 d0                	mov    %edx,%eax
  8004219413:	c1 e0 02             	shl    $0x2,%eax
  8004219416:	01 d0                	add    %edx,%eax
  8004219418:	01 c0                	add    %eax,%eax
  800421941a:	89 c2                	mov    %eax,%edx
  800421941c:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  8004219423:	00 00 00 
  8004219426:	8b 00                	mov    (%rax),%eax
  8004219428:	39 c2                	cmp    %eax,%edx
  800421942a:	73 2a                	jae    8004219456 <time_tick+0x70>
  800421942c:	48 ba af 0d 22 04 80 	movabs $0x8004220daf,%rdx
  8004219433:	00 00 00 
  8004219436:	be 14 00 00 00       	mov    $0x14,%esi
  800421943b:	48 bf ca 0d 22 04 80 	movabs $0x8004220dca,%rdi
  8004219442:	00 00 00 
  8004219445:	b8 00 00 00 00       	mov    $0x0,%eax
  800421944a:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219451:	00 00 00 
  8004219454:	ff d1                	callq  *%rcx
  8004219456:	5d                   	pop    %rbp
  8004219457:	c3                   	retq   

0000008004219458 <time_msec>:
  8004219458:	55                   	push   %rbp
  8004219459:	48 89 e5             	mov    %rsp,%rbp
  800421945c:	48 b8 c0 d5 6d 04 80 	movabs $0x80046dd5c0,%rax
  8004219463:	00 00 00 
  8004219466:	8b 10                	mov    (%rax),%edx
  8004219468:	89 d0                	mov    %edx,%eax
  800421946a:	c1 e0 02             	shl    $0x2,%eax
  800421946d:	01 d0                	add    %edx,%eax
  800421946f:	01 c0                	add    %eax,%eax
  8004219471:	5d                   	pop    %rbp
  8004219472:	c3                   	retq   

0000008004219473 <page2ppn>:
  8004219473:	55                   	push   %rbp
  8004219474:	48 89 e5             	mov    %rsp,%rbp
  8004219477:	48 83 ec 08          	sub    $0x8,%rsp
  800421947b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421947f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219483:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800421948a:	00 00 00 
  800421948d:	48 8b 00             	mov    (%rax),%rax
  8004219490:	48 29 c2             	sub    %rax,%rdx
  8004219493:	48 89 d0             	mov    %rdx,%rax
  8004219496:	48 c1 f8 04          	sar    $0x4,%rax
  800421949a:	c9                   	leaveq 
  800421949b:	c3                   	retq   

000000800421949c <page2pa>:
  800421949c:	55                   	push   %rbp
  800421949d:	48 89 e5             	mov    %rsp,%rbp
  80042194a0:	48 83 ec 08          	sub    $0x8,%rsp
  80042194a4:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042194a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042194ac:	48 89 c7             	mov    %rax,%rdi
  80042194af:	48 b8 73 94 21 04 80 	movabs $0x8004219473,%rax
  80042194b6:	00 00 00 
  80042194b9:	ff d0                	callq  *%rax
  80042194bb:	48 c1 e0 0c          	shl    $0xc,%rax
  80042194bf:	c9                   	leaveq 
  80042194c0:	c3                   	retq   

00000080042194c1 <pa2page>:
  80042194c1:	55                   	push   %rbp
  80042194c2:	48 89 e5             	mov    %rsp,%rbp
  80042194c5:	48 83 ec 10          	sub    $0x10,%rsp
  80042194c9:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042194cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042194d1:	48 c1 e8 0c          	shr    $0xc,%rax
  80042194d5:	48 89 c2             	mov    %rax,%rdx
  80042194d8:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  80042194df:	00 00 00 
  80042194e2:	48 8b 00             	mov    (%rax),%rax
  80042194e5:	48 39 c2             	cmp    %rax,%rdx
  80042194e8:	72 2a                	jb     8004219514 <pa2page+0x53>
  80042194ea:	48 ba e0 0d 22 04 80 	movabs $0x8004220de0,%rdx
  80042194f1:	00 00 00 
  80042194f4:	be 5b 00 00 00       	mov    $0x5b,%esi
  80042194f9:	48 bf ff 0d 22 04 80 	movabs $0x8004220dff,%rdi
  8004219500:	00 00 00 
  8004219503:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219508:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421950f:	00 00 00 
  8004219512:	ff d1                	callq  *%rcx
  8004219514:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800421951b:	00 00 00 
  800421951e:	48 8b 00             	mov    (%rax),%rax
  8004219521:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  8004219525:	48 c1 ea 0c          	shr    $0xc,%rdx
  8004219529:	48 c1 e2 04          	shl    $0x4,%rdx
  800421952d:	48 01 d0             	add    %rdx,%rax
  8004219530:	c9                   	leaveq 
  8004219531:	c3                   	retq   

0000008004219532 <page2kva>:
  8004219532:	55                   	push   %rbp
  8004219533:	48 89 e5             	mov    %rsp,%rbp
  8004219536:	48 83 ec 20          	sub    $0x20,%rsp
  800421953a:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421953e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219542:	48 89 c7             	mov    %rax,%rdi
  8004219545:	48 b8 9c 94 21 04 80 	movabs $0x800421949c,%rax
  800421954c:	00 00 00 
  800421954f:	ff d0                	callq  *%rax
  8004219551:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  8004219555:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219559:	48 c1 e8 0c          	shr    $0xc,%rax
  800421955d:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219560:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219563:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421956a:	00 00 00 
  800421956d:	48 8b 00             	mov    (%rax),%rax
  8004219570:	48 39 c2             	cmp    %rax,%rdx
  8004219573:	72 32                	jb     80042195a7 <page2kva+0x75>
  8004219575:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219579:	48 89 c1             	mov    %rax,%rcx
  800421957c:	48 ba 10 0e 22 04 80 	movabs $0x8004220e10,%rdx
  8004219583:	00 00 00 
  8004219586:	be 62 00 00 00       	mov    $0x62,%esi
  800421958b:	48 bf ff 0d 22 04 80 	movabs $0x8004220dff,%rdi
  8004219592:	00 00 00 
  8004219595:	b8 00 00 00 00       	mov    $0x0,%eax
  800421959a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  80042195a1:	00 00 00 
  80042195a4:	41 ff d0             	callq  *%r8
  80042195a7:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  80042195ae:	00 00 00 
  80042195b1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042195b5:	48 01 d0             	add    %rdx,%rax
  80042195b8:	c9                   	leaveq 
  80042195b9:	c3                   	retq   

00000080042195ba <epte_addr>:
  80042195ba:	55                   	push   %rbp
  80042195bb:	48 89 e5             	mov    %rsp,%rbp
  80042195be:	48 83 ec 08          	sub    $0x8,%rsp
  80042195c2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042195c6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042195ca:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
  80042195d0:	c9                   	leaveq 
  80042195d1:	c3                   	retq   

00000080042195d2 <epte_page_vaddr>:
  80042195d2:	55                   	push   %rbp
  80042195d3:	48 89 e5             	mov    %rsp,%rbp
  80042195d6:	48 83 ec 20          	sub    $0x20,%rsp
  80042195da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  80042195de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042195e2:	48 89 c7             	mov    %rax,%rdi
  80042195e5:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  80042195ec:	00 00 00 
  80042195ef:	ff d0                	callq  *%rax
  80042195f1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  80042195f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  80042195f9:	48 c1 e8 0c          	shr    $0xc,%rax
  80042195fd:	89 45 f4             	mov    %eax,-0xc(%rbp)
  8004219600:	8b 55 f4             	mov    -0xc(%rbp),%edx
  8004219603:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421960a:	00 00 00 
  800421960d:	48 8b 00             	mov    (%rax),%rax
  8004219610:	48 39 c2             	cmp    %rax,%rdx
  8004219613:	72 32                	jb     8004219647 <epte_page_vaddr+0x75>
  8004219615:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219619:	48 89 c1             	mov    %rax,%rcx
  800421961c:	48 ba 10 0e 22 04 80 	movabs $0x8004220e10,%rdx
  8004219623:	00 00 00 
  8004219626:	be 13 00 00 00       	mov    $0x13,%esi
  800421962b:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219632:	00 00 00 
  8004219635:	b8 00 00 00 00       	mov    $0x0,%eax
  800421963a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219641:	00 00 00 
  8004219644:	41 ff d0             	callq  *%r8
  8004219647:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421964e:	00 00 00 
  8004219651:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  8004219655:	48 01 d0             	add    %rdx,%rax
  8004219658:	c9                   	leaveq 
  8004219659:	c3                   	retq   

000000800421965a <epte_present>:
  800421965a:	55                   	push   %rbp
  800421965b:	48 89 e5             	mov    %rsp,%rbp
  800421965e:	48 83 ec 08          	sub    $0x8,%rsp
  8004219662:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219666:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421966a:	83 e0 07             	and    $0x7,%eax
  800421966d:	48 85 c0             	test   %rax,%rax
  8004219670:	0f 95 c0             	setne  %al
  8004219673:	0f b6 c0             	movzbl %al,%eax
  8004219676:	c9                   	leaveq 
  8004219677:	c3                   	retq   

0000008004219678 <ept_lookup_gpa>:
  8004219678:	55                   	push   %rbp
  8004219679:	48 89 e5             	mov    %rsp,%rbp
  800421967c:	48 83 ec 20          	sub    $0x20,%rsp
  8004219680:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  8004219684:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219688:	89 55 ec             	mov    %edx,-0x14(%rbp)
  800421968b:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
  800421968f:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219694:	c9                   	leaveq 
  8004219695:	c3                   	retq   

0000008004219696 <ept_gpa2hva>:
  8004219696:	55                   	push   %rbp
  8004219697:	48 89 e5             	mov    %rsp,%rbp
  800421969a:	48 83 ec 40          	sub    $0x40,%rsp
  800421969e:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  80042196a2:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  80042196a6:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  80042196aa:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  80042196ae:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  80042196b2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  80042196b6:	48 89 d1             	mov    %rdx,%rcx
  80042196b9:	ba 00 00 00 00       	mov    $0x0,%edx
  80042196be:	48 89 c7             	mov    %rax,%rdi
  80042196c1:	48 b8 78 96 21 04 80 	movabs $0x8004219678,%rax
  80042196c8:	00 00 00 
  80042196cb:	ff d0                	callq  *%rax
  80042196cd:	89 45 fc             	mov    %eax,-0x4(%rbp)
  80042196d0:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  80042196d4:	79 10                	jns    80042196e6 <ept_gpa2hva+0x50>
  80042196d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042196da:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  80042196e1:	e9 b1 00 00 00       	jmpq   8004219797 <ept_gpa2hva+0x101>
  80042196e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042196ea:	48 8b 00             	mov    (%rax),%rax
  80042196ed:	48 89 c7             	mov    %rax,%rdi
  80042196f0:	48 b8 5a 96 21 04 80 	movabs $0x800421965a,%rax
  80042196f7:	00 00 00 
  80042196fa:	ff d0                	callq  *%rax
  80042196fc:	85 c0                	test   %eax,%eax
  80042196fe:	75 10                	jne    8004219710 <ept_gpa2hva+0x7a>
  8004219700:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219704:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
  800421970b:	e9 87 00 00 00       	jmpq   8004219797 <ept_gpa2hva+0x101>
  8004219710:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219714:	48 8b 00             	mov    (%rax),%rax
  8004219717:	48 89 c7             	mov    %rax,%rdi
  800421971a:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  8004219721:	00 00 00 
  8004219724:	ff d0                	callq  *%rax
  8004219726:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421972a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421972e:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219732:	89 45 ec             	mov    %eax,-0x14(%rbp)
  8004219735:	8b 55 ec             	mov    -0x14(%rbp),%edx
  8004219738:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421973f:	00 00 00 
  8004219742:	48 8b 00             	mov    (%rax),%rax
  8004219745:	48 39 c2             	cmp    %rax,%rdx
  8004219748:	72 32                	jb     800421977c <ept_gpa2hva+0xe6>
  800421974a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421974e:	48 89 c1             	mov    %rax,%rcx
  8004219751:	48 ba 10 0e 22 04 80 	movabs $0x8004220e10,%rdx
  8004219758:	00 00 00 
  800421975b:	be 40 00 00 00       	mov    $0x40,%esi
  8004219760:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219767:	00 00 00 
  800421976a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421976f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219776:	00 00 00 
  8004219779:	41 ff d0             	callq  *%r8
  800421977c:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  8004219783:	00 00 00 
  8004219786:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421978a:	48 01 d0             	add    %rdx,%rax
  800421978d:	48 89 c2             	mov    %rax,%rdx
  8004219790:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  8004219794:	48 89 10             	mov    %rdx,(%rax)
  8004219797:	c9                   	leaveq 
  8004219798:	c3                   	retq   

0000008004219799 <free_ept_level>:
  8004219799:	55                   	push   %rbp
  800421979a:	48 89 e5             	mov    %rsp,%rbp
  800421979d:	48 83 ec 40          	sub    $0x40,%rsp
  80042197a1:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  80042197a5:	89 75 c4             	mov    %esi,-0x3c(%rbp)
  80042197a8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  80042197ac:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  80042197b0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  80042197b7:	e9 82 01 00 00       	jmpq   800421993e <free_ept_level+0x1a5>
  80042197bc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%rbp)
  80042197c0:	0f 84 fe 00 00 00    	je     80042198c4 <free_ept_level+0x12b>
  80042197c6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042197c9:	48 98                	cltq   
  80042197cb:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042197d2:	00 
  80042197d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042197d7:	48 01 d0             	add    %rdx,%rax
  80042197da:	48 8b 00             	mov    (%rax),%rax
  80042197dd:	48 89 c7             	mov    %rax,%rdi
  80042197e0:	48 b8 5a 96 21 04 80 	movabs $0x800421965a,%rax
  80042197e7:	00 00 00 
  80042197ea:	ff d0                	callq  *%rax
  80042197ec:	85 c0                	test   %eax,%eax
  80042197ee:	0f 84 46 01 00 00    	je     800421993a <free_ept_level+0x1a1>
  80042197f4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042197f7:	48 98                	cltq   
  80042197f9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  8004219800:	00 
  8004219801:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  8004219805:	48 01 d0             	add    %rdx,%rax
  8004219808:	48 8b 00             	mov    (%rax),%rax
  800421980b:	48 89 c7             	mov    %rax,%rdi
  800421980e:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  8004219815:	00 00 00 
  8004219818:	ff d0                	callq  *%rax
  800421981a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421981e:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  8004219821:	8d 50 ff             	lea    -0x1(%rax),%edx
  8004219824:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8004219828:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421982c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219830:	48 c1 e8 0c          	shr    $0xc,%rax
  8004219834:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219837:	8b 4d dc             	mov    -0x24(%rbp),%ecx
  800421983a:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  8004219841:	00 00 00 
  8004219844:	48 8b 00             	mov    (%rax),%rax
  8004219847:	48 39 c1             	cmp    %rax,%rcx
  800421984a:	72 32                	jb     800421987e <free_ept_level+0xe5>
  800421984c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219850:	48 89 c1             	mov    %rax,%rcx
  8004219853:	48 ba 10 0e 22 04 80 	movabs $0x8004220e10,%rdx
  800421985a:	00 00 00 
  800421985d:	be 4d 00 00 00       	mov    $0x4d,%esi
  8004219862:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219869:	00 00 00 
  800421986c:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219871:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219878:	00 00 00 
  800421987b:	41 ff d0             	callq  *%r8
  800421987e:	48 b9 00 00 00 04 80 	movabs $0x8004000000,%rcx
  8004219885:	00 00 00 
  8004219888:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421988c:	48 01 c8             	add    %rcx,%rax
  800421988f:	89 d6                	mov    %edx,%esi
  8004219891:	48 89 c7             	mov    %rax,%rdi
  8004219894:	48 b8 99 97 21 04 80 	movabs $0x8004219799,%rax
  800421989b:	00 00 00 
  800421989e:	ff d0                	callq  *%rax
  80042198a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  80042198a4:	48 89 c7             	mov    %rax,%rdi
  80042198a7:	48 b8 c1 94 21 04 80 	movabs $0x80042194c1,%rax
  80042198ae:	00 00 00 
  80042198b1:	ff d0                	callq  *%rax
  80042198b3:	48 89 c7             	mov    %rax,%rdi
  80042198b6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  80042198bd:	00 00 00 
  80042198c0:	ff d0                	callq  *%rax
  80042198c2:	eb 76                	jmp    800421993a <free_ept_level+0x1a1>
  80042198c4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042198c7:	48 98                	cltq   
  80042198c9:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042198d0:	00 
  80042198d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042198d5:	48 01 d0             	add    %rdx,%rax
  80042198d8:	48 8b 00             	mov    (%rax),%rax
  80042198db:	48 89 c7             	mov    %rax,%rdi
  80042198de:	48 b8 5a 96 21 04 80 	movabs $0x800421965a,%rax
  80042198e5:	00 00 00 
  80042198e8:	ff d0                	callq  *%rax
  80042198ea:	85 c0                	test   %eax,%eax
  80042198ec:	74 4c                	je     800421993a <free_ept_level+0x1a1>
  80042198ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
  80042198f1:	48 98                	cltq   
  80042198f3:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  80042198fa:	00 
  80042198fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  80042198ff:	48 01 d0             	add    %rdx,%rax
  8004219902:	48 8b 00             	mov    (%rax),%rax
  8004219905:	48 89 c7             	mov    %rax,%rdi
  8004219908:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  800421990f:	00 00 00 
  8004219912:	ff d0                	callq  *%rax
  8004219914:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219918:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421991c:	48 89 c7             	mov    %rax,%rdi
  800421991f:	48 b8 c1 94 21 04 80 	movabs $0x80042194c1,%rax
  8004219926:	00 00 00 
  8004219929:	ff d0                	callq  *%rax
  800421992b:	48 89 c7             	mov    %rax,%rdi
  800421992e:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  8004219935:	00 00 00 
  8004219938:	ff d0                	callq  *%rax
  800421993a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421993e:	81 7d fc ff 01 00 00 	cmpl   $0x1ff,-0x4(%rbp)
  8004219945:	0f 8e 71 fe ff ff    	jle    80042197bc <free_ept_level+0x23>
  800421994b:	90                   	nop
  800421994c:	c9                   	leaveq 
  800421994d:	c3                   	retq   

000000800421994e <free_guest_mem>:
  800421994e:	55                   	push   %rbp
  800421994f:	48 89 e5             	mov    %rsp,%rbp
  8004219952:	48 83 ec 20          	sub    $0x20,%rsp
  8004219956:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421995a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421995e:	be 03 00 00 00       	mov    $0x3,%esi
  8004219963:	48 89 c7             	mov    %rax,%rdi
  8004219966:	48 b8 99 97 21 04 80 	movabs $0x8004219799,%rax
  800421996d:	00 00 00 
  8004219970:	ff d0                	callq  *%rax

static __inline void
tlbflush(void)
{
	uint64_t cr3;
	__asm __volatile("movq %%cr3,%0" : "=r" (cr3));
  8004219972:	0f 20 d8             	mov    %cr3,%rax
  8004219975:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	__asm __volatile("movq %0,%%cr3" : : "r" (cr3));
  8004219979:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421997d:	0f 22 d8             	mov    %rax,%cr3
  8004219980:	c9                   	leaveq 
  8004219981:	c3                   	retq   

0000008004219982 <ept_page_insert>:
  8004219982:	55                   	push   %rbp
  8004219983:	48 89 e5             	mov    %rsp,%rbp
  8004219986:	48 83 ec 1c          	sub    $0x1c,%rsp
  800421998a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421998e:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  8004219992:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  8004219996:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  8004219999:	b8 00 00 00 00       	mov    $0x0,%eax
  800421999e:	c9                   	leaveq 
  800421999f:	c3                   	retq   

00000080042199a0 <ept_map_hva2gpa>:
  80042199a0:	55                   	push   %rbp
  80042199a1:	48 89 e5             	mov    %rsp,%rbp
  80042199a4:	48 83 ec 20          	sub    $0x20,%rsp
  80042199a8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  80042199ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  80042199b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  80042199b4:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
  80042199b7:	44 89 45 e0          	mov    %r8d,-0x20(%rbp)
  80042199bb:	b8 00 00 00 00       	mov    $0x0,%eax
  80042199c0:	c9                   	leaveq 
  80042199c1:	c3                   	retq   

00000080042199c2 <ept_alloc_static>:
  80042199c2:	55                   	push   %rbp
  80042199c3:	48 89 e5             	mov    %rsp,%rbp
  80042199c6:	53                   	push   %rbx
  80042199c7:	48 83 ec 48          	sub    $0x48,%rsp
  80042199cb:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  80042199cf:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  80042199d3:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  80042199da:	00 
  80042199db:	eb 6e                	jmp    8004219a4b <ept_alloc_static+0x89>
  80042199dd:	bf 00 00 00 00       	mov    $0x0,%edi
  80042199e2:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  80042199e9:	00 00 00 
  80042199ec:	ff d0                	callq  *%rax
  80042199ee:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  80042199f2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  80042199f6:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  80042199fa:	8d 50 01             	lea    0x1(%rax),%edx
  80042199fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219a01:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219a05:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219a09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  8004219a0d:	48 89 c7             	mov    %rax,%rdi
  8004219a10:	48 b8 32 95 21 04 80 	movabs $0x8004219532,%rax
  8004219a17:	00 00 00 
  8004219a1a:	ff d0                	callq  *%rax
  8004219a1c:	48 89 c6             	mov    %rax,%rsi
  8004219a1f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219a23:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219a29:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004219a2e:	48 89 da             	mov    %rbx,%rdx
  8004219a31:	48 89 c7             	mov    %rax,%rdi
  8004219a34:	48 b8 a0 99 21 04 80 	movabs $0x80042199a0,%rax
  8004219a3b:	00 00 00 
  8004219a3e:	ff d0                	callq  *%rax
  8004219a40:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219a43:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  8004219a4a:	00 
  8004219a4b:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  8004219a52:	00 
  8004219a53:	76 88                	jbe    80042199dd <ept_alloc_static+0x1b>
  8004219a55:	48 c7 45 e8 00 00 10 	movq   $0x100000,-0x18(%rbp)
  8004219a5c:	00 
  8004219a5d:	eb 6e                	jmp    8004219acd <ept_alloc_static+0x10b>
  8004219a5f:	bf 00 00 00 00       	mov    $0x0,%edi
  8004219a64:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219a6b:	00 00 00 
  8004219a6e:	ff d0                	callq  *%rax
  8004219a70:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219a74:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a78:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  8004219a7c:	8d 50 01             	lea    0x1(%rax),%edx
  8004219a7f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a83:	66 89 50 08          	mov    %dx,0x8(%rax)
  8004219a87:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
  8004219a8b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  8004219a8f:	48 89 c7             	mov    %rax,%rdi
  8004219a92:	48 b8 32 95 21 04 80 	movabs $0x8004219532,%rax
  8004219a99:	00 00 00 
  8004219a9c:	ff d0                	callq  *%rax
  8004219a9e:	48 89 c6             	mov    %rax,%rsi
  8004219aa1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219aa5:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219aab:	b9 07 00 00 00       	mov    $0x7,%ecx
  8004219ab0:	48 89 da             	mov    %rbx,%rdx
  8004219ab3:	48 89 c7             	mov    %rax,%rdi
  8004219ab6:	48 b8 a0 99 21 04 80 	movabs $0x80042199a0,%rax
  8004219abd:	00 00 00 
  8004219ac0:	ff d0                	callq  *%rax
  8004219ac2:	89 45 cc             	mov    %eax,-0x34(%rbp)
  8004219ac5:	48 81 45 e8 00 10 00 	addq   $0x1000,-0x18(%rbp)
  8004219acc:	00 
  8004219acd:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  8004219ad1:	48 8b 00             	mov    (%rax),%rax
  8004219ad4:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  8004219ad8:	77 85                	ja     8004219a5f <ept_alloc_static+0x9d>
  8004219ada:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219adf:	48 83 c4 48          	add    $0x48,%rsp
  8004219ae3:	5b                   	pop    %rbx
  8004219ae4:	5d                   	pop    %rbp
  8004219ae5:	c3                   	retq   

0000008004219ae6 <test_ept_map>:
  8004219ae6:	55                   	push   %rbp
  8004219ae7:	48 89 e5             	mov    %rsp,%rbp
  8004219aea:	53                   	push   %rbx
  8004219aeb:	48 83 ec 48          	sub    $0x48,%rsp
  8004219aef:	48 8d 45 c0          	lea    -0x40(%rbp),%rax
  8004219af3:	be 00 00 00 00       	mov    $0x0,%esi
  8004219af8:	48 89 c7             	mov    %rax,%rdi
  8004219afb:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  8004219b02:	00 00 00 
  8004219b05:	ff d0                	callq  *%rax
  8004219b07:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219b0a:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219b0e:	79 30                	jns    8004219b40 <test_ept_map+0x5a>
  8004219b10:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219b13:	89 c1                	mov    %eax,%ecx
  8004219b15:	48 ba 40 0e 22 04 80 	movabs $0x8004220e40,%rdx
  8004219b1c:	00 00 00 
  8004219b1f:	be a6 00 00 00       	mov    $0xa6,%esi
  8004219b24:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219b2b:	00 00 00 
  8004219b2e:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b33:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219b3a:	00 00 00 
  8004219b3d:	41 ff d0             	callq  *%r8
  8004219b40:	bf 01 00 00 00       	mov    $0x1,%edi
  8004219b45:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  8004219b4c:	00 00 00 
  8004219b4f:	ff d0                	callq  *%rax
  8004219b51:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  8004219b55:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  8004219b5a:	75 30                	jne    8004219b8c <test_ept_map+0xa6>
  8004219b5c:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219b5f:	89 c1                	mov    %eax,%ecx
  8004219b61:	48 ba 5d 0e 22 04 80 	movabs $0x8004220e5d,%rdx
  8004219b68:	00 00 00 
  8004219b6b:	be a8 00 00 00       	mov    $0xa8,%esi
  8004219b70:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219b77:	00 00 00 
  8004219b7a:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219b7f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219b86:	00 00 00 
  8004219b89:	41 ff d0             	callq  *%r8
  8004219b8c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219b90:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  8004219b97:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
  8004219b9b:	b9 00 00 00 00       	mov    $0x0,%ecx
  8004219ba0:	ba 00 00 40 00       	mov    $0x400000,%edx
  8004219ba5:	48 89 c7             	mov    %rax,%rdi
  8004219ba8:	48 b8 0d 3a 20 04 80 	movabs $0x8004203a0d,%rax
  8004219baf:	00 00 00 
  8004219bb2:	ff d0                	callq  *%rax
  8004219bb4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219bb7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219bbb:	79 30                	jns    8004219bed <test_ept_map+0x107>
  8004219bbd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219bc0:	89 c1                	mov    %eax,%ecx
  8004219bc2:	48 ba 7b 0e 22 04 80 	movabs $0x8004220e7b,%rdx
  8004219bc9:	00 00 00 
  8004219bcc:	be aa 00 00 00       	mov    $0xaa,%esi
  8004219bd1:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219bd8:	00 00 00 
  8004219bdb:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219be0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219be7:	00 00 00 
  8004219bea:	41 ff d0             	callq  *%r8
  8004219bed:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  8004219bf4:	00 00 00 
  8004219bf7:	ff d0                	callq  *%rax
  8004219bf9:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  8004219bfd:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  8004219c04:	00 00 00 
  8004219c07:	48 98                	cltq   
  8004219c09:	48 c1 e0 03          	shl    $0x3,%rax
  8004219c0d:	48 89 c6             	mov    %rax,%rsi
  8004219c10:	48 c1 e6 04          	shl    $0x4,%rsi
  8004219c14:	48 01 f0             	add    %rsi,%rax
  8004219c17:	48 01 c8             	add    %rcx,%rax
  8004219c1a:	48 83 c0 08          	add    $0x8,%rax
  8004219c1e:	48 89 10             	mov    %rdx,(%rax)
  8004219c21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219c25:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219c2b:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004219c2f:	89 d6                	mov    %edx,%esi
  8004219c31:	48 89 c7             	mov    %rax,%rdi
  8004219c34:	48 b8 51 89 20 04 80 	movabs $0x8004208951,%rax
  8004219c3b:	00 00 00 
  8004219c3e:	ff d0                	callq  *%rax
  8004219c40:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219c43:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219c47:	79 30                	jns    8004219c79 <test_ept_map+0x193>
  8004219c49:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219c4c:	89 c1                	mov    %eax,%ecx
  8004219c4e:	48 ba 40 0e 22 04 80 	movabs $0x8004220e40,%rdx
  8004219c55:	00 00 00 
  8004219c58:	be af 00 00 00       	mov    $0xaf,%esi
  8004219c5d:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219c64:	00 00 00 
  8004219c67:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219c6c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219c73:	00 00 00 
  8004219c76:	41 ff d0             	callq  *%r8
  8004219c79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219c7d:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219c83:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219c87:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219c8d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219c93:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219c98:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219c9d:	89 c7                	mov    %eax,%edi
  8004219c9f:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  8004219ca6:	00 00 00 
  8004219ca9:	ff d0                	callq  *%rax
  8004219cab:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219cae:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219cb2:	79 4a                	jns    8004219cfe <test_ept_map+0x218>
  8004219cb4:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219cb7:	89 c6                	mov    %eax,%esi
  8004219cb9:	48 bf 98 0e 22 04 80 	movabs $0x8004220e98,%rdi
  8004219cc0:	00 00 00 
  8004219cc3:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219cc8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219ccf:	00 00 00 
  8004219cd2:	ff d2                	callq  *%rdx
  8004219cd4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219cd8:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219cde:	48 8d 45 b8          	lea    -0x48(%rbp),%rax
  8004219ce2:	89 d6                	mov    %edx,%esi
  8004219ce4:	48 89 c7             	mov    %rax,%rdi
  8004219ce7:	48 b8 90 81 20 04 80 	movabs $0x8004208190,%rax
  8004219cee:	00 00 00 
  8004219cf1:	ff d0                	callq  *%rax
  8004219cf3:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219cf6:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219cfa:	79 5c                	jns    8004219d58 <test_ept_map+0x272>
  8004219cfc:	eb 2a                	jmp    8004219d28 <test_ept_map+0x242>
  8004219cfe:	48 ba d0 0e 22 04 80 	movabs $0x8004220ed0,%rdx
  8004219d05:	00 00 00 
  8004219d08:	be b3 00 00 00       	mov    $0xb3,%esi
  8004219d0d:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219d14:	00 00 00 
  8004219d17:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d1c:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219d23:	00 00 00 
  8004219d26:	ff d1                	callq  *%rcx
  8004219d28:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219d2b:	89 c1                	mov    %eax,%ecx
  8004219d2d:	48 ba f8 0e 22 04 80 	movabs $0x8004220ef8,%rdx
  8004219d34:	00 00 00 
  8004219d37:	be b8 00 00 00       	mov    $0xb8,%esi
  8004219d3c:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219d43:	00 00 00 
  8004219d46:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219d4b:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  8004219d52:	00 00 00 
  8004219d55:	41 ff d0             	callq  *%r8
  8004219d58:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219d5c:	48 c7 80 20 01 00 00 	movq   $0x401000,0x120(%rax)
  8004219d63:	00 10 40 00 
  8004219d67:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219d6b:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219d71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219d75:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219d7b:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219d81:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219d86:	48 be 00 00 80 00 80 	movabs $0x8000800000,%rsi
  8004219d8d:	00 00 00 
  8004219d90:	89 c7                	mov    %eax,%edi
  8004219d92:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  8004219d99:	00 00 00 
  8004219d9c:	ff d0                	callq  *%rax
  8004219d9e:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219da1:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219da5:	79 61                	jns    8004219e08 <test_ept_map+0x322>
  8004219da7:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219daa:	89 c6                	mov    %eax,%esi
  8004219dac:	48 bf 20 0f 22 04 80 	movabs $0x8004220f20,%rdi
  8004219db3:	00 00 00 
  8004219db6:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219dbb:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219dc2:	00 00 00 
  8004219dc5:	ff d2                	callq  *%rdx
  8004219dc7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219dcb:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219dd1:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219dd5:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219ddb:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219de1:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219de6:	be 01 00 40 00       	mov    $0x400001,%esi
  8004219deb:	89 c7                	mov    %eax,%edi
  8004219ded:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  8004219df4:	00 00 00 
  8004219df7:	ff d0                	callq  *%rax
  8004219df9:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219dfc:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219e00:	0f 89 8d 00 00 00    	jns    8004219e93 <test_ept_map+0x3ad>
  8004219e06:	eb 2a                	jmp    8004219e32 <test_ept_map+0x34c>
  8004219e08:	48 ba 58 0f 22 04 80 	movabs $0x8004220f58,%rdx
  8004219e0f:	00 00 00 
  8004219e12:	be bf 00 00 00       	mov    $0xbf,%esi
  8004219e17:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219e1e:	00 00 00 
  8004219e21:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e26:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219e2d:	00 00 00 
  8004219e30:	ff d1                	callq  *%rcx
  8004219e32:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219e35:	89 c6                	mov    %eax,%esi
  8004219e37:	48 bf 88 0f 22 04 80 	movabs $0x8004220f88,%rdi
  8004219e3e:	00 00 00 
  8004219e41:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219e46:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219e4d:	00 00 00 
  8004219e50:	ff d2                	callq  *%rdx
  8004219e52:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219e56:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219e5c:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219e60:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219e66:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219e6c:	b9 00 10 40 00       	mov    $0x401000,%ecx
  8004219e71:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219e76:	89 c7                	mov    %eax,%edi
  8004219e78:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  8004219e7f:	00 00 00 
  8004219e82:	ff d0                	callq  *%rax
  8004219e84:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219e87:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219e8b:	0f 89 8d 00 00 00    	jns    8004219f1e <test_ept_map+0x438>
  8004219e91:	eb 2a                	jmp    8004219ebd <test_ept_map+0x3d7>
  8004219e93:	48 ba c0 0f 22 04 80 	movabs $0x8004220fc0,%rdx
  8004219e9a:	00 00 00 
  8004219e9d:	be c3 00 00 00       	mov    $0xc3,%esi
  8004219ea2:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219ea9:	00 00 00 
  8004219eac:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219eb1:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219eb8:	00 00 00 
  8004219ebb:	ff d1                	callq  *%rcx
  8004219ebd:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219ec0:	89 c6                	mov    %eax,%esi
  8004219ec2:	48 bf f0 0f 22 04 80 	movabs $0x8004220ff0,%rdi
  8004219ec9:	00 00 00 
  8004219ecc:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219ed1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219ed8:	00 00 00 
  8004219edb:	ff d2                	callq  *%rdx
  8004219edd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219ee1:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219ee7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219eeb:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219ef1:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  8004219ef7:	b9 ff ff 3f 00       	mov    $0x3fffff,%ecx
  8004219efc:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219f01:	89 c7                	mov    %eax,%edi
  8004219f03:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  8004219f0a:	00 00 00 
  8004219f0d:	ff d0                	callq  *%rax
  8004219f0f:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219f12:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219f16:	0f 89 8d 00 00 00    	jns    8004219fa9 <test_ept_map+0x4c3>
  8004219f1c:	eb 2a                	jmp    8004219f48 <test_ept_map+0x462>
  8004219f1e:	48 ba 30 10 22 04 80 	movabs $0x8004221030,%rdx
  8004219f25:	00 00 00 
  8004219f28:	be c9 00 00 00       	mov    $0xc9,%esi
  8004219f2d:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219f34:	00 00 00 
  8004219f37:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219f3c:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219f43:	00 00 00 
  8004219f46:	ff d1                	callq  *%rcx
  8004219f48:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219f4b:	89 c6                	mov    %eax,%esi
  8004219f4d:	48 bf 60 10 22 04 80 	movabs $0x8004221060,%rdi
  8004219f54:	00 00 00 
  8004219f57:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219f5c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219f63:	00 00 00 
  8004219f66:	ff d2                	callq  *%rdx
  8004219f68:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219f6c:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219f72:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  8004219f76:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  8004219f7c:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  8004219f82:	b9 00 00 40 00       	mov    $0x400000,%ecx
  8004219f87:	be 00 00 40 00       	mov    $0x400000,%esi
  8004219f8c:	89 c7                	mov    %eax,%edi
  8004219f8e:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  8004219f95:	00 00 00 
  8004219f98:	ff d0                	callq  *%rax
  8004219f9a:	89 45 dc             	mov    %eax,-0x24(%rbp)
  8004219f9d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  8004219fa1:	0f 89 8d 00 00 00    	jns    800421a034 <test_ept_map+0x54e>
  8004219fa7:	eb 2a                	jmp    8004219fd3 <test_ept_map+0x4ed>
  8004219fa9:	48 ba 98 10 22 04 80 	movabs $0x8004221098,%rdx
  8004219fb0:	00 00 00 
  8004219fb3:	be cd 00 00 00       	mov    $0xcd,%esi
  8004219fb8:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  8004219fbf:	00 00 00 
  8004219fc2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219fc7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  8004219fce:	00 00 00 
  8004219fd1:	ff d1                	callq  *%rcx
  8004219fd3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  8004219fd6:	89 c6                	mov    %eax,%esi
  8004219fd8:	48 bf c8 10 22 04 80 	movabs $0x80042210c8,%rdi
  8004219fdf:	00 00 00 
  8004219fe2:	b8 00 00 00 00       	mov    $0x0,%eax
  8004219fe7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  8004219fee:	00 00 00 
  8004219ff1:	ff d2                	callq  *%rdx
  8004219ff3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  8004219ff7:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  8004219ffd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a001:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a007:	41 b8 02 00 00 00    	mov    $0x2,%r8d
  800421a00d:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a012:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a017:	89 c7                	mov    %eax,%edi
  800421a019:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  800421a020:	00 00 00 
  800421a023:	ff d0                	callq  *%rax
  800421a025:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a028:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a02c:	0f 89 97 00 00 00    	jns    800421a0c9 <test_ept_map+0x5e3>
  800421a032:	eb 2a                	jmp    800421a05e <test_ept_map+0x578>
  800421a034:	48 ba 08 11 22 04 80 	movabs $0x8004221108,%rdx
  800421a03b:	00 00 00 
  800421a03e:	be d3 00 00 00       	mov    $0xd3,%esi
  800421a043:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a04a:	00 00 00 
  800421a04d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a052:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a059:	00 00 00 
  800421a05c:	ff d1                	callq  *%rcx
  800421a05e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a061:	89 c6                	mov    %eax,%esi
  800421a063:	48 bf 30 11 22 04 80 	movabs $0x8004221130,%rdi
  800421a06a:	00 00 00 
  800421a06d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a072:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a079:	00 00 00 
  800421a07c:	ff d2                	callq  *%rdx
  800421a07e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a082:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a086:	0f b7 c0             	movzwl %ax,%eax
  800421a089:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a08c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a090:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a096:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a09a:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a0a0:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a0a6:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a0ab:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a0b0:	89 c7                	mov    %eax,%edi
  800421a0b2:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  800421a0b9:	00 00 00 
  800421a0bc:	ff d0                	callq  *%rax
  800421a0be:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a0c1:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a0c5:	79 5c                	jns    800421a123 <test_ept_map+0x63d>
  800421a0c7:	eb 2a                	jmp    800421a0f3 <test_ept_map+0x60d>
  800421a0c9:	48 ba 70 11 22 04 80 	movabs $0x8004221170,%rdx
  800421a0d0:	00 00 00 
  800421a0d3:	be d7 00 00 00       	mov    $0xd7,%esi
  800421a0d8:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a0df:	00 00 00 
  800421a0e2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a0e7:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a0ee:	00 00 00 
  800421a0f1:	ff d1                	callq  *%rcx
  800421a0f3:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a0f6:	89 c1                	mov    %eax,%ecx
  800421a0f8:	48 ba 98 11 22 04 80 	movabs $0x8004221198,%rdx
  800421a0ff:	00 00 00 
  800421a102:	be dc 00 00 00       	mov    $0xdc,%esi
  800421a107:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a10e:	00 00 00 
  800421a111:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a116:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a11d:	00 00 00 
  800421a120:	41 ff d0             	callq  *%r8
  800421a123:	48 bf b8 11 22 04 80 	movabs $0x80042211b8,%rdi
  800421a12a:	00 00 00 
  800421a12d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a132:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a139:	00 00 00 
  800421a13c:	ff d2                	callq  *%rdx
  800421a13e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a142:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a146:	0f b7 c0             	movzwl %ax,%eax
  800421a149:	8b 55 cc             	mov    -0x34(%rbp),%edx
  800421a14c:	83 c2 01             	add    $0x1,%edx
  800421a14f:	39 d0                	cmp    %edx,%eax
  800421a151:	74 2a                	je     800421a17d <test_ept_map+0x697>
  800421a153:	48 ba d8 11 22 04 80 	movabs $0x80042211d8,%rdx
  800421a15a:	00 00 00 
  800421a15d:	be e1 00 00 00       	mov    $0xe1,%esi
  800421a162:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a169:	00 00 00 
  800421a16c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a171:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a178:	00 00 00 
  800421a17b:	ff d1                	callq  *%rcx
  800421a17d:	48 bf f3 11 22 04 80 	movabs $0x80042211f3,%rdi
  800421a184:	00 00 00 
  800421a187:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a18c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a193:	00 00 00 
  800421a196:	ff d2                	callq  *%rdx
  800421a198:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a19c:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a1a0:	0f b7 c0             	movzwl %ax,%eax
  800421a1a3:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421a1a6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a1aa:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a1b0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a1b4:	8b 80 c8 00 00 00    	mov    0xc8(%rax),%eax
  800421a1ba:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a1c0:	b9 00 00 40 00       	mov    $0x400000,%ecx
  800421a1c5:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a1ca:	89 c7                	mov    %eax,%edi
  800421a1cc:	48 b8 73 f0 20 04 80 	movabs $0x800420f073,%rax
  800421a1d3:	00 00 00 
  800421a1d6:	ff d0                	callq  *%rax
  800421a1d8:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a1db:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a1df:	79 2d                	jns    800421a20e <test_ept_map+0x728>
  800421a1e1:	48 bf b8 11 22 04 80 	movabs $0x80042211b8,%rdi
  800421a1e8:	00 00 00 
  800421a1eb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a1f0:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a1f7:	00 00 00 
  800421a1fa:	ff d2                	callq  *%rdx
  800421a1fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a200:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421a204:	0f b7 c0             	movzwl %ax,%eax
  800421a207:	3b 45 cc             	cmp    -0x34(%rbp),%eax
  800421a20a:	75 74                	jne    800421a280 <test_ept_map+0x79a>
  800421a20c:	eb 2a                	jmp    800421a238 <test_ept_map+0x752>
  800421a20e:	48 ba 18 12 22 04 80 	movabs $0x8004221218,%rdx
  800421a215:	00 00 00 
  800421a218:	be ea 00 00 00       	mov    $0xea,%esi
  800421a21d:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a224:	00 00 00 
  800421a227:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a22c:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a233:	00 00 00 
  800421a236:	ff d1                	callq  *%rcx
  800421a238:	48 bf 48 12 22 04 80 	movabs $0x8004221248,%rdi
  800421a23f:	00 00 00 
  800421a242:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a247:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a24e:	00 00 00 
  800421a251:	ff d2                	callq  *%rdx
  800421a253:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
  800421a257:	48 89 c1             	mov    %rax,%rcx
  800421a25a:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a25f:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a264:	bf 00 00 00 00       	mov    $0x0,%edi
  800421a269:	48 b8 78 96 21 04 80 	movabs $0x8004219678,%rax
  800421a270:	00 00 00 
  800421a273:	ff d0                	callq  *%rax
  800421a275:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a278:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a27c:	79 7d                	jns    800421a2fb <test_ept_map+0x815>
  800421a27e:	eb 2a                	jmp    800421a2aa <test_ept_map+0x7c4>
  800421a280:	48 ba 70 12 22 04 80 	movabs $0x8004221270,%rdx
  800421a287:	00 00 00 
  800421a28a:	be ef 00 00 00       	mov    $0xef,%esi
  800421a28f:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a296:	00 00 00 
  800421a299:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a29e:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a2a5:	00 00 00 
  800421a2a8:	ff d1                	callq  *%rcx
  800421a2aa:	48 bf 98 12 22 04 80 	movabs $0x8004221298,%rdi
  800421a2b1:	00 00 00 
  800421a2b4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a2b9:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a2c0:	00 00 00 
  800421a2c3:	ff d2                	callq  *%rdx
  800421a2c5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a2c9:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a2d0:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421a2d4:	48 89 d1             	mov    %rdx,%rcx
  800421a2d7:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a2dc:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a2e1:	48 89 c7             	mov    %rax,%rdi
  800421a2e4:	48 b8 78 96 21 04 80 	movabs $0x8004219678,%rax
  800421a2eb:	00 00 00 
  800421a2ee:	ff d0                	callq  *%rax
  800421a2f0:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a2f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a2f7:	79 5c                	jns    800421a355 <test_ept_map+0x86f>
  800421a2f9:	eb 2a                	jmp    800421a325 <test_ept_map+0x83f>
  800421a2fb:	48 ba d0 12 22 04 80 	movabs $0x80042212d0,%rdx
  800421a302:	00 00 00 
  800421a305:	be f5 00 00 00       	mov    $0xf5,%esi
  800421a30a:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a311:	00 00 00 
  800421a314:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a319:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a320:	00 00 00 
  800421a323:	ff d1                	callq  *%rcx
  800421a325:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a328:	89 c1                	mov    %eax,%ecx
  800421a32a:	48 ba f8 12 22 04 80 	movabs $0x80042212f8,%rdx
  800421a331:	00 00 00 
  800421a334:	be fa 00 00 00       	mov    $0xfa,%esi
  800421a339:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a340:	00 00 00 
  800421a343:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a348:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a34f:	00 00 00 
  800421a352:	41 ff d0             	callq  *%r8
  800421a355:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a359:	48 89 c7             	mov    %rax,%rdi
  800421a35c:	48 b8 9c 94 21 04 80 	movabs $0x800421949c,%rax
  800421a363:	00 00 00 
  800421a366:	ff d0                	callq  *%rax
  800421a368:	48 89 c3             	mov    %rax,%rbx
  800421a36b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a36f:	48 8b 00             	mov    (%rax),%rax
  800421a372:	48 89 c7             	mov    %rax,%rdi
  800421a375:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  800421a37c:	00 00 00 
  800421a37f:	ff d0                	callq  *%rax
  800421a381:	48 39 c3             	cmp    %rax,%rbx
  800421a384:	74 5d                	je     800421a3e3 <test_ept_map+0x8fd>
  800421a386:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a38a:	48 8b 00             	mov    (%rax),%rax
  800421a38d:	48 89 c7             	mov    %rax,%rdi
  800421a390:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  800421a397:	00 00 00 
  800421a39a:	ff d0                	callq  *%rax
  800421a39c:	48 89 c3             	mov    %rax,%rbx
  800421a39f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a3a3:	48 89 c7             	mov    %rax,%rdi
  800421a3a6:	48 b8 9c 94 21 04 80 	movabs $0x800421949c,%rax
  800421a3ad:	00 00 00 
  800421a3b0:	ff d0                	callq  *%rax
  800421a3b2:	49 89 d8             	mov    %rbx,%r8
  800421a3b5:	48 89 c1             	mov    %rax,%rcx
  800421a3b8:	48 ba 18 13 22 04 80 	movabs $0x8004221318,%rdx
  800421a3bf:	00 00 00 
  800421a3c2:	be fd 00 00 00       	mov    $0xfd,%esi
  800421a3c7:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a3ce:	00 00 00 
  800421a3d1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a3d6:	49 b9 c9 04 20 04 80 	movabs $0x80042004c9,%r9
  800421a3dd:	00 00 00 
  800421a3e0:	41 ff d1             	callq  *%r9
  800421a3e3:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a3e7:	48 8b 00             	mov    (%rax),%rax
  800421a3ea:	48 89 c7             	mov    %rax,%rdi
  800421a3ed:	48 b8 ba 95 21 04 80 	movabs $0x80042195ba,%rax
  800421a3f4:	00 00 00 
  800421a3f7:	ff d0                	callq  *%rax
  800421a3f9:	48 89 c3             	mov    %rax,%rbx
  800421a3fc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a400:	48 89 c7             	mov    %rax,%rdi
  800421a403:	48 b8 9c 94 21 04 80 	movabs $0x800421949c,%rax
  800421a40a:	00 00 00 
  800421a40d:	ff d0                	callq  *%rax
  800421a40f:	48 89 da             	mov    %rbx,%rdx
  800421a412:	48 89 c6             	mov    %rax,%rsi
  800421a415:	48 bf 48 13 22 04 80 	movabs $0x8004221348,%rdi
  800421a41c:	00 00 00 
  800421a41f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a424:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421a42b:	00 00 00 
  800421a42e:	ff d1                	callq  *%rcx
  800421a430:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a434:	48 89 c7             	mov    %rax,%rdi
  800421a437:	48 b8 32 95 21 04 80 	movabs $0x8004219532,%rax
  800421a43e:	00 00 00 
  800421a441:	ff d0                	callq  *%rax
  800421a443:	48 89 c6             	mov    %rax,%rsi
  800421a446:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a44a:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a451:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421a457:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421a45c:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a461:	48 89 c7             	mov    %rax,%rdi
  800421a464:	48 b8 a0 99 21 04 80 	movabs $0x80042199a0,%rax
  800421a46b:	00 00 00 
  800421a46e:	ff d0                	callq  *%rax
  800421a470:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a473:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a477:	79 66                	jns    800421a4df <test_ept_map+0x9f9>
  800421a479:	48 bf 78 13 22 04 80 	movabs $0x8004221378,%rdi
  800421a480:	00 00 00 
  800421a483:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a488:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a48f:	00 00 00 
  800421a492:	ff d2                	callq  *%rdx
  800421a494:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a498:	48 89 c7             	mov    %rax,%rdi
  800421a49b:	48 b8 32 95 21 04 80 	movabs $0x8004219532,%rax
  800421a4a2:	00 00 00 
  800421a4a5:	ff d0                	callq  *%rax
  800421a4a7:	48 89 c6             	mov    %rax,%rsi
  800421a4aa:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a4ae:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a4b5:	41 b8 01 00 00 00    	mov    $0x1,%r8d
  800421a4bb:	b9 01 00 00 00       	mov    $0x1,%ecx
  800421a4c0:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a4c5:	48 89 c7             	mov    %rax,%rdi
  800421a4c8:	48 b8 a0 99 21 04 80 	movabs $0x80042199a0,%rax
  800421a4cf:	00 00 00 
  800421a4d2:	ff d0                	callq  *%rax
  800421a4d4:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a4d7:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a4db:	79 56                	jns    800421a533 <test_ept_map+0xa4d>
  800421a4dd:	eb 2a                	jmp    800421a509 <test_ept_map+0xa23>
  800421a4df:	48 ba a8 13 22 04 80 	movabs $0x80042213a8,%rdx
  800421a4e6:	00 00 00 
  800421a4e9:	be 06 01 00 00       	mov    $0x106,%esi
  800421a4ee:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a4f5:	00 00 00 
  800421a4f8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a4fd:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a504:	00 00 00 
  800421a507:	ff d1                	callq  *%rcx
  800421a509:	48 ba f0 13 22 04 80 	movabs $0x80042213f0,%rdx
  800421a510:	00 00 00 
  800421a513:	be 0a 01 00 00       	mov    $0x10a,%esi
  800421a518:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a51f:	00 00 00 
  800421a522:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a527:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a52e:	00 00 00 
  800421a531:	ff d1                	callq  *%rcx
  800421a533:	48 bf 20 14 22 04 80 	movabs $0x8004221420,%rdi
  800421a53a:	00 00 00 
  800421a53d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a542:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a549:	00 00 00 
  800421a54c:	ff d2                	callq  *%rdx
  800421a54e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a552:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a559:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
  800421a55d:	48 89 d1             	mov    %rdx,%rcx
  800421a560:	ba 00 00 00 00       	mov    $0x0,%edx
  800421a565:	be 00 00 40 00       	mov    $0x400000,%esi
  800421a56a:	48 89 c7             	mov    %rax,%rdi
  800421a56d:	48 b8 78 96 21 04 80 	movabs $0x8004219678,%rax
  800421a574:	00 00 00 
  800421a577:	ff d0                	callq  *%rax
  800421a579:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421a57c:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  800421a580:	79 30                	jns    800421a5b2 <test_ept_map+0xacc>
  800421a582:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421a585:	89 c1                	mov    %eax,%ecx
  800421a587:	48 ba f8 12 22 04 80 	movabs $0x80042212f8,%rdx
  800421a58e:	00 00 00 
  800421a591:	be 10 01 00 00       	mov    $0x110,%esi
  800421a596:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a59d:	00 00 00 
  800421a5a0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5a5:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a5ac:	00 00 00 
  800421a5af:	41 ff d0             	callq  *%r8
  800421a5b2:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421a5b6:	48 8b 00             	mov    (%rax),%rax
  800421a5b9:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421a5be:	48 83 f8 71          	cmp    $0x71,%rax
  800421a5c2:	75 36                	jne    800421a5fa <test_ept_map+0xb14>
  800421a5c4:	48 bf 48 14 22 04 80 	movabs $0x8004221448,%rdi
  800421a5cb:	00 00 00 
  800421a5ce:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a5d3:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a5da:	00 00 00 
  800421a5dd:	ff d2                	callq  *%rdx
  800421a5df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421a5e3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421a5ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a5ee:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
  800421a5f5:	e9 23 01 00 00       	jmpq   800421a71d <test_ept_map+0xc37>
  800421a5fa:	48 ba 70 14 22 04 80 	movabs $0x8004221470,%rdx
  800421a601:	00 00 00 
  800421a604:	be 14 01 00 00       	mov    $0x114,%esi
  800421a609:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a610:	00 00 00 
  800421a613:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a618:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a61f:	00 00 00 
  800421a622:	ff d1                	callq  *%rcx
  800421a624:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a627:	89 d0                	mov    %edx,%eax
  800421a629:	c1 e0 03             	shl    $0x3,%eax
  800421a62c:	01 d0                	add    %edx,%eax
  800421a62e:	83 c0 0c             	add    $0xc,%eax
  800421a631:	ba 00 00 40 00       	mov    $0x400000,%edx
  800421a636:	89 c1                	mov    %eax,%ecx
  800421a638:	48 d3 ea             	shr    %cl,%rdx
  800421a63b:	48 89 d0             	mov    %rdx,%rax
  800421a63e:	25 ff 01 00 00       	and    $0x1ff,%eax
  800421a643:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421a646:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421a649:	48 98                	cltq   
  800421a64b:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a652:	00 
  800421a653:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a657:	48 01 d0             	add    %rdx,%rax
  800421a65a:	48 8b 00             	mov    (%rax),%rax
  800421a65d:	48 89 c7             	mov    %rax,%rdi
  800421a660:	48 b8 5a 96 21 04 80 	movabs $0x800421965a,%rax
  800421a667:	00 00 00 
  800421a66a:	ff d0                	callq  *%rax
  800421a66c:	85 c0                	test   %eax,%eax
  800421a66e:	75 30                	jne    800421a6a0 <test_ept_map+0xbba>
  800421a670:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a673:	89 c1                	mov    %eax,%ecx
  800421a675:	48 ba a0 14 22 04 80 	movabs $0x80042214a0,%rdx
  800421a67c:	00 00 00 
  800421a67f:	be 1a 01 00 00       	mov    $0x11a,%esi
  800421a684:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a68b:	00 00 00 
  800421a68e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a693:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a69a:	00 00 00 
  800421a69d:	41 ff d0             	callq  *%r8
  800421a6a0:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421a6a3:	48 98                	cltq   
  800421a6a5:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a6ac:	00 
  800421a6ad:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a6b1:	48 01 d0             	add    %rdx,%rax
  800421a6b4:	48 8b 00             	mov    (%rax),%rax
  800421a6b7:	83 e0 07             	and    $0x7,%eax
  800421a6ba:	48 85 c0             	test   %rax,%rax
  800421a6bd:	75 30                	jne    800421a6ef <test_ept_map+0xc09>
  800421a6bf:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a6c2:	89 c1                	mov    %eax,%ecx
  800421a6c4:	48 ba e0 14 22 04 80 	movabs $0x80042214e0,%rdx
  800421a6cb:	00 00 00 
  800421a6ce:	be 1d 01 00 00       	mov    $0x11d,%esi
  800421a6d3:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a6da:	00 00 00 
  800421a6dd:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a6e2:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a6e9:	00 00 00 
  800421a6ec:	41 ff d0             	callq  *%r8
  800421a6ef:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421a6f2:	48 98                	cltq   
  800421a6f4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421a6fb:	00 
  800421a6fc:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a700:	48 01 d0             	add    %rdx,%rax
  800421a703:	48 8b 00             	mov    (%rax),%rax
  800421a706:	48 89 c7             	mov    %rax,%rdi
  800421a709:	48 b8 d2 95 21 04 80 	movabs $0x80042195d2,%rax
  800421a710:	00 00 00 
  800421a713:	ff d0                	callq  *%rax
  800421a715:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421a719:	83 6d ec 01          	subl   $0x1,-0x14(%rbp)
  800421a71d:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  800421a721:	0f 8f fd fe ff ff    	jg     800421a624 <test_ept_map+0xb3e>
  800421a727:	48 bf 10 15 22 04 80 	movabs $0x8004221510,%rdi
  800421a72e:	00 00 00 
  800421a731:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a736:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a73d:	00 00 00 
  800421a740:	ff d2                	callq  *%rdx
  800421a742:	48 ba 38 15 22 04 80 	movabs $0x8004221538,%rdx
  800421a749:	00 00 00 
  800421a74c:	be 25 01 00 00       	mov    $0x125,%esi
  800421a751:	48 bf 33 0e 22 04 80 	movabs $0x8004220e33,%rdi
  800421a758:	00 00 00 
  800421a75b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a760:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421a767:	00 00 00 
  800421a76a:	ff d1                	callq  *%rcx

000000800421a76c <vmcs_writel>:
  800421a76c:	55                   	push   %rbp
  800421a76d:	48 89 e5             	mov    %rsp,%rbp
  800421a770:	48 83 ec 20          	sub    $0x20,%rsp
  800421a774:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a777:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421a77b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421a77f:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a782:	f8                   	clc    
  800421a783:	0f 79 d0             	vmwrite %rax,%rdx
  800421a786:	0f 96 c0             	setbe  %al
  800421a789:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421a78c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421a790:	c9                   	leaveq 
  800421a791:	c3                   	retq   

000000800421a792 <vmcs_readl>:
  800421a792:	55                   	push   %rbp
  800421a793:	48 89 e5             	mov    %rsp,%rbp
  800421a796:	48 83 ec 14          	sub    $0x14,%rsp
  800421a79a:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421a79d:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421a7a0:	89 c2                	mov    %eax,%edx
  800421a7a2:	0f 78 d0             	vmread %rdx,%rax
  800421a7a5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a7a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a7ad:	c9                   	leaveq 
  800421a7ae:	c3                   	retq   

000000800421a7af <cpuid>:

#define read_rip(var) __asm __volatile("leaq (%%rip), %0" : "=r" (var)::"cc","memory")

static __inline void
cpuid(uint32_t info, uint32_t *eaxp, uint32_t *ebxp, uint32_t *ecxp, uint32_t *edxp)
{
  800421a7af:	55                   	push   %rbp
  800421a7b0:	48 89 e5             	mov    %rsp,%rbp
  800421a7b3:	53                   	push   %rbx
  800421a7b4:	48 83 ec 38          	sub    $0x38,%rsp
  800421a7b8:	89 7d e4             	mov    %edi,-0x1c(%rbp)
  800421a7bb:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
  800421a7bf:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
  800421a7c3:	48 89 4d c8          	mov    %rcx,-0x38(%rbp)
  800421a7c7:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
	uint32_t eax, ebx, ecx, edx;
	asm volatile("cpuid" 
  800421a7cb:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421a7ce:	0f a2                	cpuid  
  800421a7d0:	89 de                	mov    %ebx,%esi
  800421a7d2:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a7d5:	89 75 f0             	mov    %esi,-0x10(%rbp)
  800421a7d8:	89 4d ec             	mov    %ecx,-0x14(%rbp)
  800421a7db:	89 55 e8             	mov    %edx,-0x18(%rbp)
			 : "=a" (eax), "=b" (ebx), "=c" (ecx), "=d" (edx)
			 : "a" (info));
	if (eaxp)
  800421a7de:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421a7e3:	74 09                	je     800421a7ee <cpuid+0x3f>
		*eaxp = eax;
  800421a7e5:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421a7e9:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421a7ec:	89 10                	mov    %edx,(%rax)
	if (ebxp)
  800421a7ee:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
  800421a7f3:	74 09                	je     800421a7fe <cpuid+0x4f>
		*ebxp = ebx;
  800421a7f5:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421a7f9:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421a7fc:	89 10                	mov    %edx,(%rax)
	if (ecxp)
  800421a7fe:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
  800421a803:	74 09                	je     800421a80e <cpuid+0x5f>
		*ecxp = ecx;
  800421a805:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421a809:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421a80c:	89 10                	mov    %edx,(%rax)
	if (edxp)
  800421a80e:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
  800421a813:	74 09                	je     800421a81e <cpuid+0x6f>
		*edxp = edx;
  800421a815:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421a819:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421a81c:	89 10                	mov    %edx,(%rax)
}
  800421a81e:	48 83 c4 38          	add    $0x38,%rsp
  800421a822:	5b                   	pop    %rbx
  800421a823:	5d                   	pop    %rbp
  800421a824:	c3                   	retq   

000000800421a825 <page2ppn>:
  800421a825:	55                   	push   %rbp
  800421a826:	48 89 e5             	mov    %rsp,%rbp
  800421a829:	48 83 ec 08          	sub    $0x8,%rsp
  800421a82d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a831:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421a835:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800421a83c:	00 00 00 
  800421a83f:	48 8b 00             	mov    (%rax),%rax
  800421a842:	48 29 c2             	sub    %rax,%rdx
  800421a845:	48 89 d0             	mov    %rdx,%rax
  800421a848:	48 c1 f8 04          	sar    $0x4,%rax
  800421a84c:	c9                   	leaveq 
  800421a84d:	c3                   	retq   

000000800421a84e <page2pa>:
  800421a84e:	55                   	push   %rbp
  800421a84f:	48 89 e5             	mov    %rsp,%rbp
  800421a852:	48 83 ec 08          	sub    $0x8,%rsp
  800421a856:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421a85a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a85e:	48 89 c7             	mov    %rax,%rdi
  800421a861:	48 b8 25 a8 21 04 80 	movabs $0x800421a825,%rax
  800421a868:	00 00 00 
  800421a86b:	ff d0                	callq  *%rax
  800421a86d:	48 c1 e0 0c          	shl    $0xc,%rax
  800421a871:	c9                   	leaveq 
  800421a872:	c3                   	retq   

000000800421a873 <page2kva>:
  800421a873:	55                   	push   %rbp
  800421a874:	48 89 e5             	mov    %rsp,%rbp
  800421a877:	48 83 ec 20          	sub    $0x20,%rsp
  800421a87b:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421a87f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421a883:	48 89 c7             	mov    %rax,%rdi
  800421a886:	48 b8 4e a8 21 04 80 	movabs $0x800421a84e,%rax
  800421a88d:	00 00 00 
  800421a890:	ff d0                	callq  *%rax
  800421a892:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421a896:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a89a:	48 c1 e8 0c          	shr    $0xc,%rax
  800421a89e:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421a8a1:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421a8a4:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421a8ab:	00 00 00 
  800421a8ae:	48 8b 00             	mov    (%rax),%rax
  800421a8b1:	48 39 c2             	cmp    %rax,%rdx
  800421a8b4:	72 32                	jb     800421a8e8 <page2kva+0x75>
  800421a8b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a8ba:	48 89 c1             	mov    %rax,%rcx
  800421a8bd:	48 ba 68 15 22 04 80 	movabs $0x8004221568,%rdx
  800421a8c4:	00 00 00 
  800421a8c7:	be 62 00 00 00       	mov    $0x62,%esi
  800421a8cc:	48 bf 8b 15 22 04 80 	movabs $0x800422158b,%rdi
  800421a8d3:	00 00 00 
  800421a8d6:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a8db:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421a8e2:	00 00 00 
  800421a8e5:	41 ff d0             	callq  *%r8
  800421a8e8:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421a8ef:	00 00 00 
  800421a8f2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421a8f6:	48 01 d0             	add    %rdx,%rax
  800421a8f9:	c9                   	leaveq 
  800421a8fa:	c3                   	retq   

000000800421a8fb <lock_kernel>:
  800421a8fb:	55                   	push   %rbp
  800421a8fc:	48 89 e5             	mov    %rsp,%rbp
  800421a8ff:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421a906:	00 00 00 
  800421a909:	48 b8 35 7f 21 04 80 	movabs $0x8004217f35,%rax
  800421a910:	00 00 00 
  800421a913:	ff d0                	callq  *%rax
  800421a915:	5d                   	pop    %rbp
  800421a916:	c3                   	retq   

000000800421a917 <unlock_kernel>:
  800421a917:	55                   	push   %rbp
  800421a918:	48 89 e5             	mov    %rsp,%rbp
  800421a91b:	48 bf 60 57 23 04 80 	movabs $0x8004235760,%rdi
  800421a922:	00 00 00 
  800421a925:	48 b8 0c 80 21 04 80 	movabs $0x800421800c,%rax
  800421a92c:	00 00 00 
  800421a92f:	ff d0                	callq  *%rax
  800421a931:	f3 90                	pause  
  800421a933:	5d                   	pop    %rbp
  800421a934:	c3                   	retq   

000000800421a935 <vmx_list_vms>:
  800421a935:	55                   	push   %rbp
  800421a936:	48 89 e5             	mov    %rsp,%rbp
  800421a939:	48 83 ec 10          	sub    $0x10,%rsp
  800421a93d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421a944:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421a94b:	e9 96 00 00 00       	jmpq   800421a9e6 <vmx_list_vms+0xb1>
  800421a950:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421a957:	00 00 00 
  800421a95a:	48 8b 10             	mov    (%rax),%rdx
  800421a95d:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a960:	48 98                	cltq   
  800421a962:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a969:	48 01 d0             	add    %rdx,%rax
  800421a96c:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421a972:	83 f8 03             	cmp    $0x3,%eax
  800421a975:	75 6b                	jne    800421a9e2 <vmx_list_vms+0xad>
  800421a977:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421a97b:	75 1b                	jne    800421a998 <vmx_list_vms+0x63>
  800421a97d:	48 bf 9a 15 22 04 80 	movabs $0x800422159a,%rdi
  800421a984:	00 00 00 
  800421a987:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a98c:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421a993:	00 00 00 
  800421a996:	ff d2                	callq  *%rdx
  800421a998:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421a99c:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421a9a3:	00 00 00 
  800421a9a6:	48 8b 10             	mov    (%rax),%rdx
  800421a9a9:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421a9ac:	48 98                	cltq   
  800421a9ae:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421a9b5:	48 01 d0             	add    %rdx,%rax
  800421a9b8:	8b 90 c8 00 00 00    	mov    0xc8(%rax),%edx
  800421a9be:	8b 4d f8             	mov    -0x8(%rbp),%ecx
  800421a9c1:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421a9c4:	89 c6                	mov    %eax,%esi
  800421a9c6:	48 bf a8 15 22 04 80 	movabs $0x80042215a8,%rdi
  800421a9cd:	00 00 00 
  800421a9d0:	b8 00 00 00 00       	mov    $0x0,%eax
  800421a9d5:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421a9dc:	00 00 00 
  800421a9df:	41 ff d0             	callq  *%r8
  800421a9e2:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421a9e6:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421a9ed:	0f 8e 5d ff ff ff    	jle    800421a950 <vmx_list_vms+0x1b>
  800421a9f3:	c9                   	leaveq 
  800421a9f4:	c3                   	retq   

000000800421a9f5 <vmx_sel_resume>:
  800421a9f5:	55                   	push   %rbp
  800421a9f6:	48 89 e5             	mov    %rsp,%rbp
  800421a9f9:	48 83 ec 20          	sub    $0x20,%rsp
  800421a9fd:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421aa00:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
  800421aa07:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421aa0e:	e9 84 00 00 00       	jmpq   800421aa97 <vmx_sel_resume+0xa2>
  800421aa13:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421aa1a:	00 00 00 
  800421aa1d:	48 8b 10             	mov    (%rax),%rdx
  800421aa20:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421aa23:	48 98                	cltq   
  800421aa25:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421aa2c:	48 01 d0             	add    %rdx,%rax
  800421aa2f:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421aa35:	83 f8 03             	cmp    $0x3,%eax
  800421aa38:	75 59                	jne    800421aa93 <vmx_sel_resume+0x9e>
  800421aa3a:	83 45 f8 01          	addl   $0x1,-0x8(%rbp)
  800421aa3e:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421aa41:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421aa44:	75 4d                	jne    800421aa93 <vmx_sel_resume+0x9e>
  800421aa46:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aa49:	89 c6                	mov    %eax,%esi
  800421aa4b:	48 bf b5 15 22 04 80 	movabs $0x80042215b5,%rdi
  800421aa52:	00 00 00 
  800421aa55:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aa5a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aa61:	00 00 00 
  800421aa64:	ff d2                	callq  *%rdx
  800421aa66:	48 b8 58 e2 4d 04 80 	movabs $0x80044de258,%rax
  800421aa6d:	00 00 00 
  800421aa70:	48 8b 10             	mov    (%rax),%rdx
  800421aa73:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421aa76:	48 98                	cltq   
  800421aa78:	48 69 c0 68 01 00 00 	imul   $0x168,%rax,%rax
  800421aa7f:	48 01 d0             	add    %rdx,%rax
  800421aa82:	c7 80 d4 00 00 00 02 	movl   $0x2,0xd4(%rax)
  800421aa89:	00 00 00 
  800421aa8c:	b8 01 00 00 00       	mov    $0x1,%eax
  800421aa91:	eb 36                	jmp    800421aac9 <vmx_sel_resume+0xd4>
  800421aa93:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421aa97:	81 7d fc ff 03 00 00 	cmpl   $0x3ff,-0x4(%rbp)
  800421aa9e:	0f 8e 6f ff ff ff    	jle    800421aa13 <vmx_sel_resume+0x1e>
  800421aaa4:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421aaa7:	89 c6                	mov    %eax,%esi
  800421aaa9:	48 bf c8 15 22 04 80 	movabs $0x80042215c8,%rdi
  800421aab0:	00 00 00 
  800421aab3:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aab8:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421aabf:	00 00 00 
  800421aac2:	ff d2                	callq  *%rdx
  800421aac4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421aac9:	c9                   	leaveq 
  800421aaca:	c3                   	retq   

000000800421aacb <vmx_check_support>:
  800421aacb:	55                   	push   %rbp
  800421aacc:	48 89 e5             	mov    %rsp,%rbp
  800421aacf:	48 83 ec 20          	sub    $0x20,%rsp
  800421aad3:	48 8d 75 ec          	lea    -0x14(%rbp),%rsi
  800421aad7:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
  800421aadb:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
  800421aadf:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
  800421aae3:	49 89 f0             	mov    %rsi,%r8
  800421aae6:	48 89 c6             	mov    %rax,%rsi
  800421aae9:	bf 01 00 00 00       	mov    $0x1,%edi
  800421aaee:	48 b8 af a7 21 04 80 	movabs $0x800421a7af,%rax
  800421aaf5:	00 00 00 
  800421aaf8:	ff d0                	callq  *%rax
  800421aafa:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421aafd:	83 e0 20             	and    $0x20,%eax
  800421ab00:	85 c0                	test   %eax,%eax
  800421ab02:	0f 95 c0             	setne  %al
  800421ab05:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421ab08:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
  800421ab0c:	74 1d                	je     800421ab2b <vmx_check_support+0x60>
  800421ab0e:	48 bf ea 15 22 04 80 	movabs $0x80042215ea,%rdi
  800421ab15:	00 00 00 
  800421ab18:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab1d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ab24:	00 00 00 
  800421ab27:	ff d2                	callq  *%rdx
  800421ab29:	eb 1b                	jmp    800421ab46 <vmx_check_support+0x7b>
  800421ab2b:	48 bf 08 16 22 04 80 	movabs $0x8004221608,%rdi
  800421ab32:	00 00 00 
  800421ab35:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ab3a:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ab41:	00 00 00 
  800421ab44:	ff d2                	callq  *%rdx
  800421ab46:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421ab4a:	c9                   	leaveq 
  800421ab4b:	c3                   	retq   

000000800421ab4c <vmx_check_ept>:
  800421ab4c:	55                   	push   %rbp
  800421ab4d:	48 89 e5             	mov    %rsp,%rbp
  800421ab50:	48 83 ec 50          	sub    $0x50,%rsp
  800421ab54:	c7 45 e0 82 04 00 00 	movl   $0x482,-0x20(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ab5b:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421ab5e:	89 c1                	mov    %eax,%ecx
  800421ab60:	0f 32                	rdmsr  
  800421ab62:	89 55 dc             	mov    %edx,-0x24(%rbp)
  800421ab65:	89 45 d8             	mov    %eax,-0x28(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ab68:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
  800421ab6f:	00 
	ret = edx;
  800421ab70:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421ab73:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	ret = ret << 32;
  800421ab77:	48 c1 65 d0 20       	shlq   $0x20,-0x30(%rbp)
	ret |= eax;
  800421ab7c:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421ab7f:	48 09 45 d0          	or     %rax,-0x30(%rbp)

	return ret;
  800421ab83:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421ab87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421ab8b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ab8f:	48 c1 e8 3f          	shr    $0x3f,%rax
  800421ab93:	88 45 f7             	mov    %al,-0x9(%rbp)
  800421ab96:	80 7d f7 00          	cmpb   $0x0,-0x9(%rbp)
  800421ab9a:	74 76                	je     800421ac12 <vmx_check_ept+0xc6>
  800421ab9c:	c7 45 cc 8b 04 00 00 	movl   $0x48b,-0x34(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421aba3:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421aba6:	89 c1                	mov    %eax,%ecx
  800421aba8:	0f 32                	rdmsr  
  800421abaa:	89 55 c8             	mov    %edx,-0x38(%rbp)
  800421abad:	89 45 c4             	mov    %eax,-0x3c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421abb0:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
  800421abb7:	00 
	ret = edx;
  800421abb8:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421abbb:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	ret = ret << 32;
  800421abbf:	48 c1 65 b8 20       	shlq   $0x20,-0x48(%rbp)
	ret |= eax;
  800421abc4:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421abc7:	48 09 45 b8          	or     %rax,-0x48(%rbp)

	return ret;
  800421abcb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421abcf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421abd3:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
  800421abda:	00 00 00 
  800421abdd:	48 23 45 e8          	and    -0x18(%rbp),%rax
  800421abe1:	48 85 c0             	test   %rax,%rax
  800421abe4:	0f 95 c0             	setne  %al
  800421abe7:	88 45 e7             	mov    %al,-0x19(%rbp)
  800421abea:	80 7d e7 00          	cmpb   $0x0,-0x19(%rbp)
  800421abee:	74 22                	je     800421ac12 <vmx_check_ept+0xc6>
  800421abf0:	48 bf 28 16 22 04 80 	movabs $0x8004221628,%rdi
  800421abf7:	00 00 00 
  800421abfa:	b8 00 00 00 00       	mov    $0x0,%eax
  800421abff:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421ac06:	00 00 00 
  800421ac09:	ff d2                	callq  *%rdx
  800421ac0b:	b8 01 00 00 00       	mov    $0x1,%eax
  800421ac10:	eb 05                	jmp    800421ac17 <vmx_check_ept+0xcb>
  800421ac12:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac17:	c9                   	leaveq 
  800421ac18:	c3                   	retq   

000000800421ac19 <check_fixed_bits>:
  800421ac19:	55                   	push   %rbp
  800421ac1a:	48 89 e5             	mov    %rsp,%rbp
  800421ac1d:	48 83 ec 30          	sub    $0x30,%rsp
  800421ac21:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421ac25:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421ac29:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  800421ac2d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421ac34:	e9 96 00 00 00       	jmpq   800421accf <check_fixed_bits+0xb6>
  800421ac39:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac3c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421ac40:	89 c1                	mov    %eax,%ecx
  800421ac42:	48 d3 ea             	shr    %cl,%rdx
  800421ac45:	48 89 d0             	mov    %rdx,%rax
  800421ac48:	83 e0 01             	and    $0x1,%eax
  800421ac4b:	89 45 f8             	mov    %eax,-0x8(%rbp)
  800421ac4e:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
  800421ac52:	75 1e                	jne    800421ac72 <check_fixed_bits+0x59>
  800421ac54:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac57:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421ac5b:	89 c1                	mov    %eax,%ecx
  800421ac5d:	48 d3 ea             	shr    %cl,%rdx
  800421ac60:	48 89 d0             	mov    %rdx,%rax
  800421ac63:	83 e0 01             	and    $0x1,%eax
  800421ac66:	48 85 c0             	test   %rax,%rax
  800421ac69:	75 60                	jne    800421accb <check_fixed_bits+0xb2>
  800421ac6b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac70:	eb 6e                	jmp    800421ace0 <check_fixed_bits+0xc7>
  800421ac72:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
  800421ac76:	75 1e                	jne    800421ac96 <check_fixed_bits+0x7d>
  800421ac78:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ac7b:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  800421ac7f:	89 c1                	mov    %eax,%ecx
  800421ac81:	48 d3 ea             	shr    %cl,%rdx
  800421ac84:	48 89 d0             	mov    %rdx,%rax
  800421ac87:	83 e0 01             	and    $0x1,%eax
  800421ac8a:	48 85 c0             	test   %rax,%rax
  800421ac8d:	74 3c                	je     800421accb <check_fixed_bits+0xb2>
  800421ac8f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ac94:	eb 4a                	jmp    800421ace0 <check_fixed_bits+0xc7>
  800421ac96:	48 b9 40 16 22 04 80 	movabs $0x8004221640,%rcx
  800421ac9d:	00 00 00 
  800421aca0:	48 ba 46 16 22 04 80 	movabs $0x8004221646,%rdx
  800421aca7:	00 00 00 
  800421acaa:	be 85 00 00 00       	mov    $0x85,%esi
  800421acaf:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421acb6:	00 00 00 
  800421acb9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421acbe:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421acc5:	00 00 00 
  800421acc8:	41 ff d0             	callq  *%r8
  800421accb:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421accf:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421acd2:	83 f8 3f             	cmp    $0x3f,%eax
  800421acd5:	0f 86 5e ff ff ff    	jbe    800421ac39 <check_fixed_bits+0x20>
  800421acdb:	b8 01 00 00 00       	mov    $0x1,%eax
  800421ace0:	c9                   	leaveq 
  800421ace1:	c3                   	retq   

000000800421ace2 <vmx_init_vmcs>:
  800421ace2:	55                   	push   %rbp
  800421ace3:	48 89 e5             	mov    %rsp,%rbp
  800421ace6:	48 83 ec 40          	sub    $0x40,%rsp
  800421acea:	c7 45 dc 80 04 00 00 	movl   $0x480,-0x24(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421acf1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421acf4:	89 c1                	mov    %eax,%ecx
  800421acf6:	0f 32                	rdmsr  
  800421acf8:	89 55 d8             	mov    %edx,-0x28(%rbp)
  800421acfb:	89 45 d4             	mov    %eax,-0x2c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421acfe:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
  800421ad05:	00 
	ret = edx;
  800421ad06:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421ad09:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	ret = ret << 32;
  800421ad0d:	48 c1 65 c8 20       	shlq   $0x20,-0x38(%rbp)
	ret |= eax;
  800421ad12:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421ad15:	48 09 45 c8          	or     %rax,-0x38(%rbp)

	return ret;
  800421ad19:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ad1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421ad21:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ad25:	89 45 c4             	mov    %eax,-0x3c(%rbp)
  800421ad28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421ad2c:	48 c1 e8 20          	shr    $0x20,%rax
  800421ad30:	25 ff 0f 00 00       	and    $0xfff,%eax
  800421ad35:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421ad38:	81 7d f4 00 10 00 00 	cmpl   $0x1000,-0xc(%rbp)
  800421ad3f:	76 35                	jbe    800421ad76 <vmx_init_vmcs+0x94>
  800421ad41:	48 b9 68 16 22 04 80 	movabs $0x8004221668,%rcx
  800421ad48:	00 00 00 
  800421ad4b:	48 ba 46 16 22 04 80 	movabs $0x8004221646,%rdx
  800421ad52:	00 00 00 
  800421ad55:	be 95 00 00 00       	mov    $0x95,%esi
  800421ad5a:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421ad61:	00 00 00 
  800421ad64:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad69:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ad70:	00 00 00 
  800421ad73:	41 ff d0             	callq  *%r8
  800421ad76:	bf 01 00 00 00       	mov    $0x1,%edi
  800421ad7b:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421ad82:	00 00 00 
  800421ad85:	ff d0                	callq  *%rax
  800421ad87:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421ad8b:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
  800421ad90:	75 07                	jne    800421ad99 <vmx_init_vmcs+0xb7>
  800421ad92:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ad97:	eb 4d                	jmp    800421ade6 <vmx_init_vmcs+0x104>
  800421ad99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ad9d:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421ada1:	8d 50 01             	lea    0x1(%rax),%edx
  800421ada4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ada8:	66 89 50 08          	mov    %dx,0x8(%rax)
  800421adac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421adb0:	48 89 c7             	mov    %rax,%rdi
  800421adb3:	48 b8 73 a8 21 04 80 	movabs $0x800421a873,%rax
  800421adba:	00 00 00 
  800421adbd:	ff d0                	callq  *%rax
  800421adbf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421adc3:	48 8d 4d c4          	lea    -0x3c(%rbp),%rcx
  800421adc7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421adcb:	ba 04 00 00 00       	mov    $0x4,%edx
  800421add0:	48 89 ce             	mov    %rcx,%rsi
  800421add3:	48 89 c7             	mov    %rax,%rdi
  800421add6:	48 b8 4d 0d 21 04 80 	movabs $0x8004210d4d,%rax
  800421addd:	00 00 00 
  800421ade0:	ff d0                	callq  *%rax
  800421ade2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421ade6:	c9                   	leaveq 
  800421ade7:	c3                   	retq   

000000800421ade8 <vmx_init_vmxon>:
  800421ade8:	55                   	push   %rbp
  800421ade9:	48 89 e5             	mov    %rsp,%rbp
  800421adec:	53                   	push   %rbx
  800421aded:	48 81 ec 28 01 00 00 	sub    $0x128,%rsp
  800421adf4:	b8 00 00 00 00       	mov    $0x0,%eax
  800421adf9:	48 ba e2 ac 21 04 80 	movabs $0x800421ace2,%rdx
  800421ae00:	00 00 00 
  800421ae03:	ff d2                	callq  *%rdx
  800421ae05:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421ae09:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
  800421ae0e:	75 0a                	jne    800421ae1a <vmx_init_vmxon+0x32>
  800421ae10:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
  800421ae15:	e9 75 04 00 00       	jmpq   800421b28f <vmx_init_vmxon+0x4a7>

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421ae1a:	0f 20 c0             	mov    %cr0,%rax
  800421ae1d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	return val;
  800421ae21:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421ae25:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421ae29:	0f 20 e0             	mov    %cr4,%rax
  800421ae2c:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421ae30:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ae34:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421ae38:	48 83 4d d8 20       	orq    $0x20,-0x28(%rbp)
  800421ae3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421ae41:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
}

static __inline void
lcr0(uint64_t val)
{
	__asm __volatile("movq %0,%%cr0" : : "r" (val));
  800421ae45:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421ae49:	0f 22 c0             	mov    %rax,%cr0
  800421ae4c:	c7 45 ac 87 04 00 00 	movl   $0x487,-0x54(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ae53:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421ae56:	89 c1                	mov    %eax,%ecx
  800421ae58:	0f 32                	rdmsr  
  800421ae5a:	89 55 a8             	mov    %edx,-0x58(%rbp)
  800421ae5d:	89 45 a4             	mov    %eax,-0x5c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ae60:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
  800421ae67:	00 
	ret = edx;
  800421ae68:	8b 45 a8             	mov    -0x58(%rbp),%eax
  800421ae6b:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	ret = ret << 32;
  800421ae6f:	48 c1 65 98 20       	shlq   $0x20,-0x68(%rbp)
	ret |= eax;
  800421ae74:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421ae77:	48 09 45 98          	or     %rax,-0x68(%rbp)

	return ret;
  800421ae7b:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421ae7f:	48 89 c6             	mov    %rax,%rsi
  800421ae82:	c7 45 94 86 04 00 00 	movl   $0x486,-0x6c(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ae89:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421ae8c:	89 c1                	mov    %eax,%ecx
  800421ae8e:	0f 32                	rdmsr  
  800421ae90:	89 55 90             	mov    %edx,-0x70(%rbp)
  800421ae93:	89 45 8c             	mov    %eax,-0x74(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ae96:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421ae9d:	00 
	ret = edx;
  800421ae9e:	8b 45 90             	mov    -0x70(%rbp),%eax
  800421aea1:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	ret = ret << 32;
  800421aea5:	48 c1 65 80 20       	shlq   $0x20,-0x80(%rbp)
	ret |= eax;
  800421aeaa:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421aead:	48 09 45 80          	or     %rax,-0x80(%rbp)

	return ret;
  800421aeb1:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  800421aeb5:	48 89 c1             	mov    %rax,%rcx
  800421aeb8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421aebc:	48 89 f2             	mov    %rsi,%rdx
  800421aebf:	48 89 ce             	mov    %rcx,%rsi
  800421aec2:	48 89 c7             	mov    %rax,%rdi
  800421aec5:	48 b8 19 ac 21 04 80 	movabs $0x800421ac19,%rax
  800421aecc:	00 00 00 
  800421aecf:	ff d0                	callq  *%rax
  800421aed1:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421aed4:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421aed8:	83 f0 01             	xor    $0x1,%eax
  800421aedb:	84 c0                	test   %al,%al
  800421aedd:	74 1d                	je     800421aefc <vmx_init_vmxon+0x114>
  800421aedf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421aee3:	48 89 c7             	mov    %rax,%rdi
  800421aee6:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421aeed:	00 00 00 
  800421aef0:	ff d0                	callq  *%rax
  800421aef2:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421aef7:	e9 93 03 00 00       	jmpq   800421b28f <vmx_init_vmxon+0x4a7>
  800421aefc:	48 81 4d d0 00 20 00 	orq    $0x2000,-0x30(%rbp)
  800421af03:	00 
  800421af04:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421af08:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
}

static __inline void
lcr4(uint64_t val)
{
	__asm __volatile("movq %0,%%cr4" : : "r" (val));
  800421af0f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  800421af16:	0f 22 e0             	mov    %rax,%cr4
  800421af19:	c7 85 74 ff ff ff 89 	movl   $0x489,-0x8c(%rbp)
  800421af20:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421af23:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421af29:	89 c1                	mov    %eax,%ecx
  800421af2b:	0f 32                	rdmsr  
  800421af2d:	89 95 70 ff ff ff    	mov    %edx,-0x90(%rbp)
  800421af33:	89 85 6c ff ff ff    	mov    %eax,-0x94(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421af39:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421af40:	00 00 00 00 
	ret = edx;
  800421af44:	8b 85 70 ff ff ff    	mov    -0x90(%rbp),%eax
  800421af4a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
	ret = ret << 32;
  800421af51:	48 c1 a5 60 ff ff ff 	shlq   $0x20,-0xa0(%rbp)
  800421af58:	20 
	ret |= eax;
  800421af59:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421af5f:	48 09 85 60 ff ff ff 	or     %rax,-0xa0(%rbp)

	return ret;
  800421af66:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421af6d:	48 89 c6             	mov    %rax,%rsi
  800421af70:	c7 85 5c ff ff ff 88 	movl   $0x488,-0xa4(%rbp)
  800421af77:	04 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421af7a:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421af80:	89 c1                	mov    %eax,%ecx
  800421af82:	0f 32                	rdmsr  
  800421af84:	89 95 58 ff ff ff    	mov    %edx,-0xa8(%rbp)
  800421af8a:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421af90:	48 c7 85 48 ff ff ff 	movq   $0x0,-0xb8(%rbp)
  800421af97:	00 00 00 00 
	ret = edx;
  800421af9b:	8b 85 58 ff ff ff    	mov    -0xa8(%rbp),%eax
  800421afa1:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	ret = ret << 32;
  800421afa8:	48 c1 a5 48 ff ff ff 	shlq   $0x20,-0xb8(%rbp)
  800421afaf:	20 
	ret |= eax;
  800421afb0:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
  800421afb6:	48 09 85 48 ff ff ff 	or     %rax,-0xb8(%rbp)

	return ret;
  800421afbd:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421afc4:	48 89 c1             	mov    %rax,%rcx
  800421afc7:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421afcb:	48 89 f2             	mov    %rsi,%rdx
  800421afce:	48 89 ce             	mov    %rcx,%rsi
  800421afd1:	48 89 c7             	mov    %rax,%rdi
  800421afd4:	48 b8 19 ac 21 04 80 	movabs $0x800421ac19,%rax
  800421afdb:	00 00 00 
  800421afde:	ff d0                	callq  *%rax
  800421afe0:	88 45 cf             	mov    %al,-0x31(%rbp)
  800421afe3:	0f b6 45 cf          	movzbl -0x31(%rbp),%eax
  800421afe7:	83 f0 01             	xor    $0x1,%eax
  800421afea:	84 c0                	test   %al,%al
  800421afec:	74 1d                	je     800421b00b <vmx_init_vmxon+0x223>
  800421afee:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421aff2:	48 89 c7             	mov    %rax,%rdi
  800421aff5:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421affc:	00 00 00 
  800421afff:	ff d0                	callq  *%rax
  800421b001:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b006:	e9 84 02 00 00       	jmpq   800421b28f <vmx_init_vmxon+0x4a7>
  800421b00b:	c7 85 44 ff ff ff 3a 	movl   $0x3a,-0xbc(%rbp)
  800421b012:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b015:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421b01b:	89 c1                	mov    %eax,%ecx
  800421b01d:	0f 32                	rdmsr  
  800421b01f:	89 95 40 ff ff ff    	mov    %edx,-0xc0(%rbp)
  800421b025:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b02b:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b032:	00 00 00 00 
	ret = edx;
  800421b036:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
  800421b03c:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
	ret = ret << 32;
  800421b043:	48 c1 a5 30 ff ff ff 	shlq   $0x20,-0xd0(%rbp)
  800421b04a:	20 
	ret |= eax;
  800421b04b:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b051:	48 09 85 30 ff ff ff 	or     %rax,-0xd0(%rbp)

	return ret;
  800421b058:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  800421b05f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b063:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b067:	83 e0 04             	and    $0x4,%eax
  800421b06a:	48 85 c0             	test   %rax,%rax
  800421b06d:	0f 85 e8 00 00 00    	jne    800421b15b <vmx_init_vmxon+0x373>
  800421b073:	48 83 4d e8 04       	orq    $0x4,-0x18(%rbp)
  800421b078:	c7 85 2c ff ff ff 3a 	movl   $0x3a,-0xd4(%rbp)
  800421b07f:	00 00 00 
  800421b082:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b086:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b08d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b094:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b09a:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  800421b0a1:	48 c1 e8 20          	shr    $0x20,%rax
  800421b0a5:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%rbp)
	__asm __volatile("wrmsr"
  800421b0ab:	8b 8d 2c ff ff ff    	mov    -0xd4(%rbp),%ecx
  800421b0b1:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b0b7:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b0bd:	0f 30                	wrmsr  
  800421b0bf:	c7 85 14 ff ff ff 3a 	movl   $0x3a,-0xec(%rbp)
  800421b0c6:	00 00 00 
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421b0c9:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b0cf:	89 c1                	mov    %eax,%ecx
  800421b0d1:	0f 32                	rdmsr  
  800421b0d3:	89 95 10 ff ff ff    	mov    %edx,-0xf0(%rbp)
  800421b0d9:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421b0df:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
  800421b0e6:	00 00 00 00 
	ret = edx;
  800421b0ea:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421b0f0:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	ret = ret << 32;
  800421b0f7:	48 c1 a5 00 ff ff ff 	shlq   $0x20,-0x100(%rbp)
  800421b0fe:	20 
	ret |= eax;
  800421b0ff:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b105:	48 09 85 00 ff ff ff 	or     %rax,-0x100(%rbp)

	return ret;
  800421b10c:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  800421b113:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421b117:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b11b:	83 e0 04             	and    $0x4,%eax
  800421b11e:	48 85 c0             	test   %rax,%rax
  800421b121:	75 38                	jne    800421b15b <vmx_init_vmxon+0x373>
  800421b123:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b127:	48 89 c7             	mov    %rax,%rdi
  800421b12a:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b131:	00 00 00 
  800421b134:	ff d0                	callq  *%rax
  800421b136:	48 bf 80 16 22 04 80 	movabs $0x8004221680,%rdi
  800421b13d:	00 00 00 
  800421b140:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b145:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421b14c:	00 00 00 
  800421b14f:	ff d2                	callq  *%rdx
  800421b151:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
  800421b156:	e9 34 01 00 00       	jmpq   800421b28f <vmx_init_vmxon+0x4a7>
  800421b15b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b15f:	83 e0 01             	and    $0x1,%eax
  800421b162:	48 85 c0             	test   %rax,%rax
  800421b165:	75 4c                	jne    800421b1b3 <vmx_init_vmxon+0x3cb>
  800421b167:	48 83 4d e8 01       	orq    $0x1,-0x18(%rbp)
  800421b16c:	c7 85 fc fe ff ff 3a 	movl   $0x3a,-0x104(%rbp)
  800421b173:	00 00 00 
  800421b176:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b17a:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
}

static __inline void
write_msr( uint32_t ecx, uint64_t val ) {
	uint32_t edx, eax;
	eax = (uint32_t) val;
  800421b181:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b188:	89 85 ec fe ff ff    	mov    %eax,-0x114(%rbp)
	edx = (uint32_t) ( val >> 32 );
  800421b18e:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b195:	48 c1 e8 20          	shr    $0x20,%rax
  800421b199:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%rbp)
	__asm __volatile("wrmsr"
  800421b19f:	8b 8d fc fe ff ff    	mov    -0x104(%rbp),%ecx
  800421b1a5:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421b1ab:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421b1b1:	0f 30                	wrmsr  
  800421b1b3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b1b7:	48 89 c7             	mov    %rax,%rdi
  800421b1ba:	48 b8 4e a8 21 04 80 	movabs $0x800421a84e,%rax
  800421b1c1:	00 00 00 
  800421b1c4:	ff d0                	callq  *%rax
  800421b1c6:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
  800421b1cd:	c6 85 e7 fe ff ff 00 	movb   $0x0,-0x119(%rbp)
  800421b1d4:	f8                   	clc    
  800421b1d5:	f3 0f c7 b5 d8 fe ff 	vmxon  -0x128(%rbp)
  800421b1dc:	ff 
  800421b1dd:	0f 96 c0             	setbe  %al
  800421b1e0:	88 85 e7 fe ff ff    	mov    %al,-0x119(%rbp)
  800421b1e6:	0f b6 85 e7 fe ff ff 	movzbl -0x119(%rbp),%eax
  800421b1ed:	88 45 ce             	mov    %al,-0x32(%rbp)
  800421b1f0:	80 7d ce 00          	cmpb   $0x0,-0x32(%rbp)
  800421b1f4:	74 1a                	je     800421b210 <vmx_init_vmxon+0x428>
  800421b1f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b1fa:	48 89 c7             	mov    %rax,%rdi
  800421b1fd:	48 b8 cf 2f 20 04 80 	movabs $0x8004202fcf,%rax
  800421b204:	00 00 00 
  800421b207:	ff d0                	callq  *%rax
  800421b209:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
  800421b20e:	eb 7f                	jmp    800421b28f <vmx_init_vmxon+0x4a7>
  800421b210:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421b217:	00 00 00 
  800421b21a:	ff d0                	callq  *%rax
  800421b21c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421b223:	00 00 00 
  800421b226:	48 98                	cltq   
  800421b228:	48 c1 e0 03          	shl    $0x3,%rax
  800421b22c:	48 89 c1             	mov    %rax,%rcx
  800421b22f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b233:	48 01 c8             	add    %rcx,%rax
  800421b236:	48 01 d0             	add    %rdx,%rax
  800421b239:	48 83 c0 70          	add    $0x70,%rax
  800421b23d:	c6 40 08 01          	movb   $0x1,0x8(%rax)
  800421b241:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421b248:	00 00 00 
  800421b24b:	ff d0                	callq  *%rax
  800421b24d:	89 c3                	mov    %eax,%ebx
  800421b24f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421b253:	48 89 c7             	mov    %rax,%rdi
  800421b256:	48 b8 73 a8 21 04 80 	movabs $0x800421a873,%rax
  800421b25d:	00 00 00 
  800421b260:	ff d0                	callq  *%rax
  800421b262:	48 89 c2             	mov    %rax,%rdx
  800421b265:	48 b9 20 f0 6d 04 80 	movabs $0x80046df020,%rcx
  800421b26c:	00 00 00 
  800421b26f:	48 63 c3             	movslq %ebx,%rax
  800421b272:	48 c1 e0 03          	shl    $0x3,%rax
  800421b276:	48 89 c6             	mov    %rax,%rsi
  800421b279:	48 c1 e6 04          	shl    $0x4,%rsi
  800421b27d:	48 01 f0             	add    %rsi,%rax
  800421b280:	48 01 c8             	add    %rcx,%rax
  800421b283:	48 83 e8 80          	sub    $0xffffffffffffff80,%rax
  800421b287:	48 89 10             	mov    %rdx,(%rax)
  800421b28a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421b28f:	48 81 c4 28 01 00 00 	add    $0x128,%rsp
  800421b296:	5b                   	pop    %rbx
  800421b297:	5d                   	pop    %rbp
  800421b298:	c3                   	retq   

000000800421b299 <vmcs_host_init>:
  800421b299:	55                   	push   %rbp
  800421b29a:	48 89 e5             	mov    %rsp,%rbp
  800421b29d:	48 81 ec 30 01 00 00 	sub    $0x130,%rsp

static __inline uint64_t
rcr0(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr0,%0" : "=r" (val));
  800421b2a4:	0f 20 c0             	mov    %cr0,%rax
  800421b2a7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	return val;
  800421b2ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421b2af:	c7 45 e4 00 6c 00 00 	movl   $0x6c00,-0x1c(%rbp)
  800421b2b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421b2ba:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  800421b2be:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b2c1:	48 89 d6             	mov    %rdx,%rsi
  800421b2c4:	89 c7                	mov    %eax,%edi
  800421b2c6:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b2cd:	00 00 00 
  800421b2d0:	ff d0                	callq  *%rax

static __inline uint64_t
rcr3(void)
{
	uint64_t val;
	__asm __volatile("movq %%cr3,%0" : "=r" (val));
  800421b2d2:	0f 20 d8             	mov    %cr3,%rax
  800421b2d5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	return val;
  800421b2d9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421b2dd:	c7 45 cc 02 6c 00 00 	movl   $0x6c02,-0x34(%rbp)
  800421b2e4:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421b2e8:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421b2ec:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b2ef:	48 89 d6             	mov    %rdx,%rsi
  800421b2f2:	89 c7                	mov    %eax,%edi
  800421b2f4:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b2fb:	00 00 00 
  800421b2fe:	ff d0                	callq  *%rax

static __inline uint64_t
rcr4(void)
{
	uint64_t cr4;
	__asm __volatile("movq %%cr4,%0" : "=r" (cr4));
  800421b300:	0f 20 e0             	mov    %cr4,%rax
  800421b303:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
	return cr4;
  800421b307:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421b30b:	c7 45 b4 04 6c 00 00 	movl   $0x6c04,-0x4c(%rbp)
  800421b312:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421b316:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
  800421b31a:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421b31d:	48 89 d6             	mov    %rdx,%rsi
  800421b320:	89 c7                	mov    %eax,%edi
  800421b322:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b329:	00 00 00 
  800421b32c:	ff d0                	callq  *%rax
  800421b32e:	c7 45 a4 00 0c 00 00 	movl   $0xc00,-0x5c(%rbp)
  800421b335:	66 c7 45 a2 10 00    	movw   $0x10,-0x5e(%rbp)
  800421b33b:	0f b7 55 a2          	movzwl -0x5e(%rbp),%edx
  800421b33f:	8b 45 a4             	mov    -0x5c(%rbp),%eax
  800421b342:	48 89 d6             	mov    %rdx,%rsi
  800421b345:	89 c7                	mov    %eax,%edi
  800421b347:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b34e:	00 00 00 
  800421b351:	ff d0                	callq  *%rax
  800421b353:	c7 45 9c 04 0c 00 00 	movl   $0xc04,-0x64(%rbp)
  800421b35a:	66 c7 45 9a 10 00    	movw   $0x10,-0x66(%rbp)
  800421b360:	0f b7 55 9a          	movzwl -0x66(%rbp),%edx
  800421b364:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b367:	48 89 d6             	mov    %rdx,%rsi
  800421b36a:	89 c7                	mov    %eax,%edi
  800421b36c:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b373:	00 00 00 
  800421b376:	ff d0                	callq  *%rax
  800421b378:	c7 45 94 06 0c 00 00 	movl   $0xc06,-0x6c(%rbp)
  800421b37f:	66 c7 45 92 10 00    	movw   $0x10,-0x6e(%rbp)
  800421b385:	0f b7 55 92          	movzwl -0x6e(%rbp),%edx
  800421b389:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421b38c:	48 89 d6             	mov    %rdx,%rsi
  800421b38f:	89 c7                	mov    %eax,%edi
  800421b391:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b398:	00 00 00 
  800421b39b:	ff d0                	callq  *%rax
  800421b39d:	c7 45 8c 08 0c 00 00 	movl   $0xc08,-0x74(%rbp)
  800421b3a4:	66 c7 45 8a 10 00    	movw   $0x10,-0x76(%rbp)
  800421b3aa:	0f b7 55 8a          	movzwl -0x76(%rbp),%edx
  800421b3ae:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b3b1:	48 89 d6             	mov    %rdx,%rsi
  800421b3b4:	89 c7                	mov    %eax,%edi
  800421b3b6:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b3bd:	00 00 00 
  800421b3c0:	ff d0                	callq  *%rax
  800421b3c2:	c7 45 84 0a 0c 00 00 	movl   $0xc0a,-0x7c(%rbp)
  800421b3c9:	66 c7 45 82 10 00    	movw   $0x10,-0x7e(%rbp)
  800421b3cf:	0f b7 55 82          	movzwl -0x7e(%rbp),%edx
  800421b3d3:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421b3d6:	48 89 d6             	mov    %rdx,%rsi
  800421b3d9:	89 c7                	mov    %eax,%edi
  800421b3db:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b3e2:	00 00 00 
  800421b3e5:	ff d0                	callq  *%rax
  800421b3e7:	c7 85 7c ff ff ff 02 	movl   $0xc02,-0x84(%rbp)
  800421b3ee:	0c 00 00 
  800421b3f1:	66 c7 85 7a ff ff ff 	movw   $0x8,-0x86(%rbp)
  800421b3f8:	08 00 
  800421b3fa:	0f b7 95 7a ff ff ff 	movzwl -0x86(%rbp),%edx
  800421b401:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b407:	48 89 d6             	mov    %rdx,%rsi
  800421b40a:	89 c7                	mov    %eax,%edi
  800421b40c:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b413:	00 00 00 
  800421b416:	ff d0                	callq  *%rax
  800421b418:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421b41f:	00 00 00 
  800421b422:	ff d0                	callq  *%rax
  800421b424:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421b42b:	00 00 00 
  800421b42e:	48 98                	cltq   
  800421b430:	48 c1 e0 03          	shl    $0x3,%rax
  800421b434:	48 89 c1             	mov    %rax,%rcx
  800421b437:	48 c1 e1 04          	shl    $0x4,%rcx
  800421b43b:	48 01 c8             	add    %rcx,%rax
  800421b43e:	48 01 d0             	add    %rdx,%rax
  800421b441:	0f b6 00             	movzbl (%rax),%eax
  800421b444:	0f b6 c0             	movzbl %al,%eax
  800421b447:	01 c0                	add    %eax,%eax
  800421b449:	83 c0 05             	add    $0x5,%eax
  800421b44c:	89 45 fc             	mov    %eax,-0x4(%rbp)
  800421b44f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b452:	c1 e0 03             	shl    $0x3,%eax
  800421b455:	0f b7 c0             	movzwl %ax,%eax
  800421b458:	c7 85 74 ff ff ff 0c 	movl   $0xc0c,-0x8c(%rbp)
  800421b45f:	0c 00 00 
  800421b462:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
  800421b469:	0f b7 95 72 ff ff ff 	movzwl -0x8e(%rbp),%edx
  800421b470:	8b 85 74 ff ff ff    	mov    -0x8c(%rbp),%eax
  800421b476:	48 89 d6             	mov    %rdx,%rsi
  800421b479:	89 c7                	mov    %eax,%edi
  800421b47b:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b482:	00 00 00 
  800421b485:	ff d0                	callq  *%rax
  800421b487:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b48e:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
  800421b495:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b49c:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
static __inline void
read_idtr (uint64_t *idtbase, uint16_t *idtlimit)
{
	struct Pseudodesc idtr;

	asm volatile ("sidt %0"
  800421b4a3:	0f 01 8d d0 fe ff ff 	sidt   -0x130(%rbp)
			: "=m" (idtr));
	*idtbase = idtr.pd_base;
  800421b4aa:	48 8b 95 d2 fe ff ff 	mov    -0x12e(%rbp),%rdx
  800421b4b1:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  800421b4b8:	48 89 10             	mov    %rdx,(%rax)
	*idtlimit = idtr.pd_lim;
  800421b4bb:	0f b7 95 d0 fe ff ff 	movzwl -0x130(%rbp),%edx
  800421b4c2:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  800421b4c9:	66 89 10             	mov    %dx,(%rax)
  800421b4cc:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b4d3:	c7 85 5c ff ff ff 0e 	movl   $0x6c0e,-0xa4(%rbp)
  800421b4da:	6c 00 00 
  800421b4dd:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421b4e4:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b4eb:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b4f1:	48 89 d6             	mov    %rdx,%rsi
  800421b4f4:	89 c7                	mov    %eax,%edi
  800421b4f6:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b4fd:	00 00 00 
  800421b500:	ff d0                	callq  *%rax
  800421b502:	48 8d 85 f0 fe ff ff 	lea    -0x110(%rbp),%rax
  800421b509:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
  800421b510:	48 8d 85 fe fe ff ff 	lea    -0x102(%rbp),%rax
  800421b517:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
static __inline void
read_gdtr (uint64_t *gdtbase, uint16_t *gdtlimit)
{
	struct Pseudodesc gdtr;

	asm volatile ("sgdt %0"
  800421b51e:	0f 01 85 e0 fe ff ff 	sgdt   -0x120(%rbp)
			: "=m" (gdtr));
	*gdtbase = gdtr.pd_base;
  800421b525:	48 8b 95 e2 fe ff ff 	mov    -0x11e(%rbp),%rdx
  800421b52c:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
  800421b533:	48 89 10             	mov    %rdx,(%rax)
	*gdtlimit = gdtr.pd_lim;
  800421b536:	0f b7 95 e0 fe ff ff 	movzwl -0x120(%rbp),%edx
  800421b53d:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  800421b544:	66 89 10             	mov    %dx,(%rax)
  800421b547:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  800421b54e:	c7 85 3c ff ff ff 0c 	movl   $0x6c0c,-0xc4(%rbp)
  800421b555:	6c 00 00 
  800421b558:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
  800421b55f:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421b566:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b56c:	48 89 d6             	mov    %rdx,%rsi
  800421b56f:	89 c7                	mov    %eax,%edi
  800421b571:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b578:	00 00 00 
  800421b57b:	ff d0                	callq  *%rax
  800421b57d:	c7 85 2c ff ff ff 06 	movl   $0x6c06,-0xd4(%rbp)
  800421b584:	6c 00 00 
  800421b587:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421b58e:	00 00 00 00 
  800421b592:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421b599:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421b59f:	48 89 d6             	mov    %rdx,%rsi
  800421b5a2:	89 c7                	mov    %eax,%edi
  800421b5a4:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b5ab:	00 00 00 
  800421b5ae:	ff d0                	callq  *%rax
  800421b5b0:	c7 85 1c ff ff ff 08 	movl   $0x6c08,-0xe4(%rbp)
  800421b5b7:	6c 00 00 
  800421b5ba:	48 c7 85 10 ff ff ff 	movq   $0x0,-0xf0(%rbp)
  800421b5c1:	00 00 00 00 
  800421b5c5:	48 8b 95 10 ff ff ff 	mov    -0xf0(%rbp),%rdx
  800421b5cc:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b5d2:	48 89 d6             	mov    %rdx,%rsi
  800421b5d5:	89 c7                	mov    %eax,%edi
  800421b5d7:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b5de:	00 00 00 
  800421b5e1:	ff d0                	callq  *%rax
  800421b5e3:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421b5ea:	00 00 00 
  800421b5ed:	ff d0                	callq  *%rax
  800421b5ef:	48 98                	cltq   
  800421b5f1:	48 c1 e0 03          	shl    $0x3,%rax
  800421b5f5:	48 89 c2             	mov    %rax,%rdx
  800421b5f8:	48 c1 e2 04          	shl    $0x4,%rdx
  800421b5fc:	48 01 d0             	add    %rdx,%rax
  800421b5ff:	48 8d 50 10          	lea    0x10(%rax),%rdx
  800421b603:	48 b8 20 f0 6d 04 80 	movabs $0x80046df020,%rax
  800421b60a:	00 00 00 
  800421b60d:	48 01 d0             	add    %rdx,%rax
  800421b610:	c7 85 0c ff ff ff 0a 	movl   $0x6c0a,-0xf4(%rbp)
  800421b617:	6c 00 00 
  800421b61a:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
  800421b621:	48 8b 95 00 ff ff ff 	mov    -0x100(%rbp),%rdx
  800421b628:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b62e:	48 89 d6             	mov    %rdx,%rsi
  800421b631:	89 c7                	mov    %eax,%edi
  800421b633:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b63a:	00 00 00 
  800421b63d:	ff d0                	callq  *%rax
  800421b63f:	48 b8 ec cc 21 04 80 	movabs $0x800421ccec,%rax
  800421b646:	00 00 00 
  800421b649:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421b64d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421b651:	48 89 c6             	mov    %rax,%rsi
  800421b654:	bf 16 6c 00 00       	mov    $0x6c16,%edi
  800421b659:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b660:	00 00 00 
  800421b663:	ff d0                	callq  *%rax
  800421b665:	c9                   	leaveq 
  800421b666:	c3                   	retq   

000000800421b667 <vmcs_guest_init>:
  800421b667:	55                   	push   %rbp
  800421b668:	48 89 e5             	mov    %rsp,%rbp
  800421b66b:	48 81 ec f0 01 00 00 	sub    $0x1f0,%rsp
  800421b672:	c7 45 fc 02 08 00 00 	movl   $0x802,-0x4(%rbp)
  800421b679:	66 c7 45 fa 00 00    	movw   $0x0,-0x6(%rbp)
  800421b67f:	0f b7 55 fa          	movzwl -0x6(%rbp),%edx
  800421b683:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421b686:	48 89 d6             	mov    %rdx,%rsi
  800421b689:	89 c7                	mov    %eax,%edi
  800421b68b:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b692:	00 00 00 
  800421b695:	ff d0                	callq  *%rax
  800421b697:	c7 45 f4 00 08 00 00 	movl   $0x800,-0xc(%rbp)
  800421b69e:	66 c7 45 f2 00 00    	movw   $0x0,-0xe(%rbp)
  800421b6a4:	0f b7 55 f2          	movzwl -0xe(%rbp),%edx
  800421b6a8:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421b6ab:	48 89 d6             	mov    %rdx,%rsi
  800421b6ae:	89 c7                	mov    %eax,%edi
  800421b6b0:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b6b7:	00 00 00 
  800421b6ba:	ff d0                	callq  *%rax
  800421b6bc:	c7 45 ec 04 08 00 00 	movl   $0x804,-0x14(%rbp)
  800421b6c3:	66 c7 45 ea 00 00    	movw   $0x0,-0x16(%rbp)
  800421b6c9:	0f b7 55 ea          	movzwl -0x16(%rbp),%edx
  800421b6cd:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421b6d0:	48 89 d6             	mov    %rdx,%rsi
  800421b6d3:	89 c7                	mov    %eax,%edi
  800421b6d5:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b6dc:	00 00 00 
  800421b6df:	ff d0                	callq  *%rax
  800421b6e1:	c7 45 e4 06 08 00 00 	movl   $0x806,-0x1c(%rbp)
  800421b6e8:	66 c7 45 e2 00 00    	movw   $0x0,-0x1e(%rbp)
  800421b6ee:	0f b7 55 e2          	movzwl -0x1e(%rbp),%edx
  800421b6f2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421b6f5:	48 89 d6             	mov    %rdx,%rsi
  800421b6f8:	89 c7                	mov    %eax,%edi
  800421b6fa:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b701:	00 00 00 
  800421b704:	ff d0                	callq  *%rax
  800421b706:	c7 45 dc 08 08 00 00 	movl   $0x808,-0x24(%rbp)
  800421b70d:	66 c7 45 da 00 00    	movw   $0x0,-0x26(%rbp)
  800421b713:	0f b7 55 da          	movzwl -0x26(%rbp),%edx
  800421b717:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421b71a:	48 89 d6             	mov    %rdx,%rsi
  800421b71d:	89 c7                	mov    %eax,%edi
  800421b71f:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b726:	00 00 00 
  800421b729:	ff d0                	callq  *%rax
  800421b72b:	c7 45 d4 0a 08 00 00 	movl   $0x80a,-0x2c(%rbp)
  800421b732:	66 c7 45 d2 00 00    	movw   $0x0,-0x2e(%rbp)
  800421b738:	0f b7 55 d2          	movzwl -0x2e(%rbp),%edx
  800421b73c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421b73f:	48 89 d6             	mov    %rdx,%rsi
  800421b742:	89 c7                	mov    %eax,%edi
  800421b744:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b74b:	00 00 00 
  800421b74e:	ff d0                	callq  *%rax
  800421b750:	c7 45 cc 0e 08 00 00 	movl   $0x80e,-0x34(%rbp)
  800421b757:	66 c7 45 ca 00 00    	movw   $0x0,-0x36(%rbp)
  800421b75d:	0f b7 55 ca          	movzwl -0x36(%rbp),%edx
  800421b761:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421b764:	48 89 d6             	mov    %rdx,%rsi
  800421b767:	89 c7                	mov    %eax,%edi
  800421b769:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b770:	00 00 00 
  800421b773:	ff d0                	callq  *%rax
  800421b775:	c7 45 c4 0c 08 00 00 	movl   $0x80c,-0x3c(%rbp)
  800421b77c:	66 c7 45 c2 00 00    	movw   $0x0,-0x3e(%rbp)
  800421b782:	0f b7 55 c2          	movzwl -0x3e(%rbp),%edx
  800421b786:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421b789:	48 89 d6             	mov    %rdx,%rsi
  800421b78c:	89 c7                	mov    %eax,%edi
  800421b78e:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b795:	00 00 00 
  800421b798:	ff d0                	callq  *%rax
  800421b79a:	c7 45 bc 08 68 00 00 	movl   $0x6808,-0x44(%rbp)
  800421b7a1:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
  800421b7a8:	00 
  800421b7a9:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
  800421b7ad:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421b7b0:	48 89 d6             	mov    %rdx,%rsi
  800421b7b3:	89 c7                	mov    %eax,%edi
  800421b7b5:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b7bc:	00 00 00 
  800421b7bf:	ff d0                	callq  *%rax
  800421b7c1:	c7 45 ac 06 68 00 00 	movl   $0x6806,-0x54(%rbp)
  800421b7c8:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
  800421b7cf:	00 
  800421b7d0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421b7d4:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421b7d7:	48 89 d6             	mov    %rdx,%rsi
  800421b7da:	89 c7                	mov    %eax,%edi
  800421b7dc:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b7e3:	00 00 00 
  800421b7e6:	ff d0                	callq  *%rax
  800421b7e8:	c7 45 9c 0a 68 00 00 	movl   $0x680a,-0x64(%rbp)
  800421b7ef:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
  800421b7f6:	00 
  800421b7f7:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  800421b7fb:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421b7fe:	48 89 d6             	mov    %rdx,%rsi
  800421b801:	89 c7                	mov    %eax,%edi
  800421b803:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b80a:	00 00 00 
  800421b80d:	ff d0                	callq  *%rax
  800421b80f:	c7 45 8c 0c 68 00 00 	movl   $0x680c,-0x74(%rbp)
  800421b816:	48 c7 45 80 00 00 00 	movq   $0x0,-0x80(%rbp)
  800421b81d:	00 
  800421b81e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  800421b822:	8b 45 8c             	mov    -0x74(%rbp),%eax
  800421b825:	48 89 d6             	mov    %rdx,%rsi
  800421b828:	89 c7                	mov    %eax,%edi
  800421b82a:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b831:	00 00 00 
  800421b834:	ff d0                	callq  *%rax
  800421b836:	c7 85 7c ff ff ff 0e 	movl   $0x680e,-0x84(%rbp)
  800421b83d:	68 00 00 
  800421b840:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
  800421b847:	00 00 00 00 
  800421b84b:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421b852:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421b858:	48 89 d6             	mov    %rdx,%rsi
  800421b85b:	89 c7                	mov    %eax,%edi
  800421b85d:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b864:	00 00 00 
  800421b867:	ff d0                	callq  *%rax
  800421b869:	c7 85 6c ff ff ff 10 	movl   $0x6810,-0x94(%rbp)
  800421b870:	68 00 00 
  800421b873:	48 c7 85 60 ff ff ff 	movq   $0x0,-0xa0(%rbp)
  800421b87a:	00 00 00 00 
  800421b87e:	48 8b 95 60 ff ff ff 	mov    -0xa0(%rbp),%rdx
  800421b885:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421b88b:	48 89 d6             	mov    %rdx,%rsi
  800421b88e:	89 c7                	mov    %eax,%edi
  800421b890:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b897:	00 00 00 
  800421b89a:	ff d0                	callq  *%rax
  800421b89c:	c7 85 5c ff ff ff 12 	movl   $0x6812,-0xa4(%rbp)
  800421b8a3:	68 00 00 
  800421b8a6:	48 c7 85 50 ff ff ff 	movq   $0x0,-0xb0(%rbp)
  800421b8ad:	00 00 00 00 
  800421b8b1:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421b8b8:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421b8be:	48 89 d6             	mov    %rdx,%rsi
  800421b8c1:	89 c7                	mov    %eax,%edi
  800421b8c3:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b8ca:	00 00 00 
  800421b8cd:	ff d0                	callq  *%rax
  800421b8cf:	c7 85 4c ff ff ff 16 	movl   $0x6816,-0xb4(%rbp)
  800421b8d6:	68 00 00 
  800421b8d9:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
  800421b8e0:	00 00 00 00 
  800421b8e4:	48 8b 95 40 ff ff ff 	mov    -0xc0(%rbp),%rdx
  800421b8eb:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421b8f1:	48 89 d6             	mov    %rdx,%rsi
  800421b8f4:	89 c7                	mov    %eax,%edi
  800421b8f6:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b8fd:	00 00 00 
  800421b900:	ff d0                	callq  *%rax
  800421b902:	c7 85 3c ff ff ff 18 	movl   $0x6818,-0xc4(%rbp)
  800421b909:	68 00 00 
  800421b90c:	48 c7 85 30 ff ff ff 	movq   $0x0,-0xd0(%rbp)
  800421b913:	00 00 00 00 
  800421b917:	48 8b 95 30 ff ff ff 	mov    -0xd0(%rbp),%rdx
  800421b91e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  800421b924:	48 89 d6             	mov    %rdx,%rsi
  800421b927:	89 c7                	mov    %eax,%edi
  800421b929:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b930:	00 00 00 
  800421b933:	ff d0                	callq  *%rax
  800421b935:	c7 85 2c ff ff ff 14 	movl   $0x6814,-0xd4(%rbp)
  800421b93c:	68 00 00 
  800421b93f:	48 c7 85 20 ff ff ff 	movq   $0x0,-0xe0(%rbp)
  800421b946:	00 00 00 00 
  800421b94a:	48 8b 95 20 ff ff ff 	mov    -0xe0(%rbp),%rdx
  800421b951:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  800421b957:	48 89 d6             	mov    %rdx,%rsi
  800421b95a:	89 c7                	mov    %eax,%edi
  800421b95c:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b963:	00 00 00 
  800421b966:	ff d0                	callq  *%rax
  800421b968:	c7 85 1c ff ff ff 02 	movl   $0x4802,-0xe4(%rbp)
  800421b96f:	48 00 00 
  800421b972:	c7 85 18 ff ff ff ff 	movl   $0xffff,-0xe8(%rbp)
  800421b979:	ff 00 00 
  800421b97c:	8b 95 18 ff ff ff    	mov    -0xe8(%rbp),%edx
  800421b982:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421b988:	48 89 d6             	mov    %rdx,%rsi
  800421b98b:	89 c7                	mov    %eax,%edi
  800421b98d:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b994:	00 00 00 
  800421b997:	ff d0                	callq  *%rax
  800421b999:	c7 85 14 ff ff ff 00 	movl   $0x4800,-0xec(%rbp)
  800421b9a0:	48 00 00 
  800421b9a3:	c7 85 10 ff ff ff ff 	movl   $0xffff,-0xf0(%rbp)
  800421b9aa:	ff 00 00 
  800421b9ad:	8b 95 10 ff ff ff    	mov    -0xf0(%rbp),%edx
  800421b9b3:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421b9b9:	48 89 d6             	mov    %rdx,%rsi
  800421b9bc:	89 c7                	mov    %eax,%edi
  800421b9be:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b9c5:	00 00 00 
  800421b9c8:	ff d0                	callq  *%rax
  800421b9ca:	c7 85 0c ff ff ff 04 	movl   $0x4804,-0xf4(%rbp)
  800421b9d1:	48 00 00 
  800421b9d4:	c7 85 08 ff ff ff ff 	movl   $0xffff,-0xf8(%rbp)
  800421b9db:	ff 00 00 
  800421b9de:	8b 95 08 ff ff ff    	mov    -0xf8(%rbp),%edx
  800421b9e4:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421b9ea:	48 89 d6             	mov    %rdx,%rsi
  800421b9ed:	89 c7                	mov    %eax,%edi
  800421b9ef:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421b9f6:	00 00 00 
  800421b9f9:	ff d0                	callq  *%rax
  800421b9fb:	c7 85 04 ff ff ff 06 	movl   $0x4806,-0xfc(%rbp)
  800421ba02:	48 00 00 
  800421ba05:	c7 85 00 ff ff ff ff 	movl   $0xffff,-0x100(%rbp)
  800421ba0c:	ff 00 00 
  800421ba0f:	8b 95 00 ff ff ff    	mov    -0x100(%rbp),%edx
  800421ba15:	8b 85 04 ff ff ff    	mov    -0xfc(%rbp),%eax
  800421ba1b:	48 89 d6             	mov    %rdx,%rsi
  800421ba1e:	89 c7                	mov    %eax,%edi
  800421ba20:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421ba27:	00 00 00 
  800421ba2a:	ff d0                	callq  *%rax
  800421ba2c:	c7 85 fc fe ff ff 08 	movl   $0x4808,-0x104(%rbp)
  800421ba33:	48 00 00 
  800421ba36:	c7 85 f8 fe ff ff ff 	movl   $0xffff,-0x108(%rbp)
  800421ba3d:	ff 00 00 
  800421ba40:	8b 95 f8 fe ff ff    	mov    -0x108(%rbp),%edx
  800421ba46:	8b 85 fc fe ff ff    	mov    -0x104(%rbp),%eax
  800421ba4c:	48 89 d6             	mov    %rdx,%rsi
  800421ba4f:	89 c7                	mov    %eax,%edi
  800421ba51:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421ba58:	00 00 00 
  800421ba5b:	ff d0                	callq  *%rax
  800421ba5d:	c7 85 f4 fe ff ff 0a 	movl   $0x480a,-0x10c(%rbp)
  800421ba64:	48 00 00 
  800421ba67:	c7 85 f0 fe ff ff ff 	movl   $0xffff,-0x110(%rbp)
  800421ba6e:	ff 00 00 
  800421ba71:	8b 95 f0 fe ff ff    	mov    -0x110(%rbp),%edx
  800421ba77:	8b 85 f4 fe ff ff    	mov    -0x10c(%rbp),%eax
  800421ba7d:	48 89 d6             	mov    %rdx,%rsi
  800421ba80:	89 c7                	mov    %eax,%edi
  800421ba82:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421ba89:	00 00 00 
  800421ba8c:	ff d0                	callq  *%rax
  800421ba8e:	c7 85 ec fe ff ff 0c 	movl   $0x480c,-0x114(%rbp)
  800421ba95:	48 00 00 
  800421ba98:	c7 85 e8 fe ff ff ff 	movl   $0xffff,-0x118(%rbp)
  800421ba9f:	ff 00 00 
  800421baa2:	8b 95 e8 fe ff ff    	mov    -0x118(%rbp),%edx
  800421baa8:	8b 85 ec fe ff ff    	mov    -0x114(%rbp),%eax
  800421baae:	48 89 d6             	mov    %rdx,%rsi
  800421bab1:	89 c7                	mov    %eax,%edi
  800421bab3:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421baba:	00 00 00 
  800421babd:	ff d0                	callq  *%rax
  800421babf:	c7 85 e4 fe ff ff 0e 	movl   $0x480e,-0x11c(%rbp)
  800421bac6:	48 00 00 
  800421bac9:	c7 85 e0 fe ff ff ff 	movl   $0xfffff,-0x120(%rbp)
  800421bad0:	ff 0f 00 
  800421bad3:	8b 95 e0 fe ff ff    	mov    -0x120(%rbp),%edx
  800421bad9:	8b 85 e4 fe ff ff    	mov    -0x11c(%rbp),%eax
  800421badf:	48 89 d6             	mov    %rdx,%rsi
  800421bae2:	89 c7                	mov    %eax,%edi
  800421bae4:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421baeb:	00 00 00 
  800421baee:	ff d0                	callq  *%rax
  800421baf0:	c7 85 dc fe ff ff 10 	movl   $0x4810,-0x124(%rbp)
  800421baf7:	48 00 00 
  800421bafa:	c7 85 d8 fe ff ff 30 	movl   $0x30,-0x128(%rbp)
  800421bb01:	00 00 00 
  800421bb04:	8b 95 d8 fe ff ff    	mov    -0x128(%rbp),%edx
  800421bb0a:	8b 85 dc fe ff ff    	mov    -0x124(%rbp),%eax
  800421bb10:	48 89 d6             	mov    %rdx,%rsi
  800421bb13:	89 c7                	mov    %eax,%edi
  800421bb15:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bb1c:	00 00 00 
  800421bb1f:	ff d0                	callq  *%rax
  800421bb21:	c7 85 d4 fe ff ff 12 	movl   $0x4812,-0x12c(%rbp)
  800421bb28:	48 00 00 
  800421bb2b:	c7 85 d0 fe ff ff ff 	movl   $0x3ff,-0x130(%rbp)
  800421bb32:	03 00 00 
  800421bb35:	8b 95 d0 fe ff ff    	mov    -0x130(%rbp),%edx
  800421bb3b:	8b 85 d4 fe ff ff    	mov    -0x12c(%rbp),%eax
  800421bb41:	48 89 d6             	mov    %rdx,%rsi
  800421bb44:	89 c7                	mov    %eax,%edi
  800421bb46:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bb4d:	00 00 00 
  800421bb50:	ff d0                	callq  *%rax
  800421bb52:	c7 85 cc fe ff ff 16 	movl   $0x4816,-0x134(%rbp)
  800421bb59:	48 00 00 
  800421bb5c:	c7 85 c8 fe ff ff 93 	movl   $0x93,-0x138(%rbp)
  800421bb63:	00 00 00 
  800421bb66:	8b 95 c8 fe ff ff    	mov    -0x138(%rbp),%edx
  800421bb6c:	8b 85 cc fe ff ff    	mov    -0x134(%rbp),%eax
  800421bb72:	48 89 d6             	mov    %rdx,%rsi
  800421bb75:	89 c7                	mov    %eax,%edi
  800421bb77:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bb7e:	00 00 00 
  800421bb81:	ff d0                	callq  *%rax
  800421bb83:	c7 85 c4 fe ff ff 14 	movl   $0x4814,-0x13c(%rbp)
  800421bb8a:	48 00 00 
  800421bb8d:	c7 85 c0 fe ff ff 93 	movl   $0x93,-0x140(%rbp)
  800421bb94:	00 00 00 
  800421bb97:	8b 95 c0 fe ff ff    	mov    -0x140(%rbp),%edx
  800421bb9d:	8b 85 c4 fe ff ff    	mov    -0x13c(%rbp),%eax
  800421bba3:	48 89 d6             	mov    %rdx,%rsi
  800421bba6:	89 c7                	mov    %eax,%edi
  800421bba8:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bbaf:	00 00 00 
  800421bbb2:	ff d0                	callq  *%rax
  800421bbb4:	c7 85 bc fe ff ff 18 	movl   $0x4818,-0x144(%rbp)
  800421bbbb:	48 00 00 
  800421bbbe:	c7 85 b8 fe ff ff 93 	movl   $0x93,-0x148(%rbp)
  800421bbc5:	00 00 00 
  800421bbc8:	8b 95 b8 fe ff ff    	mov    -0x148(%rbp),%edx
  800421bbce:	8b 85 bc fe ff ff    	mov    -0x144(%rbp),%eax
  800421bbd4:	48 89 d6             	mov    %rdx,%rsi
  800421bbd7:	89 c7                	mov    %eax,%edi
  800421bbd9:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bbe0:	00 00 00 
  800421bbe3:	ff d0                	callq  *%rax
  800421bbe5:	c7 85 b4 fe ff ff 1a 	movl   $0x481a,-0x14c(%rbp)
  800421bbec:	48 00 00 
  800421bbef:	c7 85 b0 fe ff ff 93 	movl   $0x93,-0x150(%rbp)
  800421bbf6:	00 00 00 
  800421bbf9:	8b 95 b0 fe ff ff    	mov    -0x150(%rbp),%edx
  800421bbff:	8b 85 b4 fe ff ff    	mov    -0x14c(%rbp),%eax
  800421bc05:	48 89 d6             	mov    %rdx,%rsi
  800421bc08:	89 c7                	mov    %eax,%edi
  800421bc0a:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bc11:	00 00 00 
  800421bc14:	ff d0                	callq  *%rax
  800421bc16:	c7 85 ac fe ff ff 1c 	movl   $0x481c,-0x154(%rbp)
  800421bc1d:	48 00 00 
  800421bc20:	c7 85 a8 fe ff ff 93 	movl   $0x93,-0x158(%rbp)
  800421bc27:	00 00 00 
  800421bc2a:	8b 95 a8 fe ff ff    	mov    -0x158(%rbp),%edx
  800421bc30:	8b 85 ac fe ff ff    	mov    -0x154(%rbp),%eax
  800421bc36:	48 89 d6             	mov    %rdx,%rsi
  800421bc39:	89 c7                	mov    %eax,%edi
  800421bc3b:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bc42:	00 00 00 
  800421bc45:	ff d0                	callq  *%rax
  800421bc47:	c7 85 a4 fe ff ff 1e 	movl   $0x481e,-0x15c(%rbp)
  800421bc4e:	48 00 00 
  800421bc51:	c7 85 a0 fe ff ff 93 	movl   $0x93,-0x160(%rbp)
  800421bc58:	00 00 00 
  800421bc5b:	8b 95 a0 fe ff ff    	mov    -0x160(%rbp),%edx
  800421bc61:	8b 85 a4 fe ff ff    	mov    -0x15c(%rbp),%eax
  800421bc67:	48 89 d6             	mov    %rdx,%rsi
  800421bc6a:	89 c7                	mov    %eax,%edi
  800421bc6c:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bc73:	00 00 00 
  800421bc76:	ff d0                	callq  *%rax
  800421bc78:	c7 85 9c fe ff ff 20 	movl   $0x4820,-0x164(%rbp)
  800421bc7f:	48 00 00 
  800421bc82:	c7 85 98 fe ff ff 82 	movl   $0x82,-0x168(%rbp)
  800421bc89:	00 00 00 
  800421bc8c:	8b 95 98 fe ff ff    	mov    -0x168(%rbp),%edx
  800421bc92:	8b 85 9c fe ff ff    	mov    -0x164(%rbp),%eax
  800421bc98:	48 89 d6             	mov    %rdx,%rsi
  800421bc9b:	89 c7                	mov    %eax,%edi
  800421bc9d:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bca4:	00 00 00 
  800421bca7:	ff d0                	callq  *%rax
  800421bca9:	c7 85 94 fe ff ff 22 	movl   $0x4822,-0x16c(%rbp)
  800421bcb0:	48 00 00 
  800421bcb3:	c7 85 90 fe ff ff 8b 	movl   $0x8b,-0x170(%rbp)
  800421bcba:	00 00 00 
  800421bcbd:	8b 95 90 fe ff ff    	mov    -0x170(%rbp),%edx
  800421bcc3:	8b 85 94 fe ff ff    	mov    -0x16c(%rbp),%eax
  800421bcc9:	48 89 d6             	mov    %rdx,%rsi
  800421bccc:	89 c7                	mov    %eax,%edi
  800421bcce:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bcd5:	00 00 00 
  800421bcd8:	ff d0                	callq  *%rax
  800421bcda:	c7 85 8c fe ff ff 26 	movl   $0x4826,-0x174(%rbp)
  800421bce1:	48 00 00 
  800421bce4:	c7 85 88 fe ff ff 00 	movl   $0x0,-0x178(%rbp)
  800421bceb:	00 00 00 
  800421bcee:	8b 95 88 fe ff ff    	mov    -0x178(%rbp),%edx
  800421bcf4:	8b 85 8c fe ff ff    	mov    -0x174(%rbp),%eax
  800421bcfa:	48 89 d6             	mov    %rdx,%rsi
  800421bcfd:	89 c7                	mov    %eax,%edi
  800421bcff:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bd06:	00 00 00 
  800421bd09:	ff d0                	callq  *%rax
  800421bd0b:	c7 85 84 fe ff ff 24 	movl   $0x4824,-0x17c(%rbp)
  800421bd12:	48 00 00 
  800421bd15:	c7 85 80 fe ff ff 00 	movl   $0x0,-0x180(%rbp)
  800421bd1c:	00 00 00 
  800421bd1f:	8b 95 80 fe ff ff    	mov    -0x180(%rbp),%edx
  800421bd25:	8b 85 84 fe ff ff    	mov    -0x17c(%rbp),%eax
  800421bd2b:	48 89 d6             	mov    %rdx,%rsi
  800421bd2e:	89 c7                	mov    %eax,%edi
  800421bd30:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bd37:	00 00 00 
  800421bd3a:	ff d0                	callq  *%rax
  800421bd3c:	c7 85 7c fe ff ff 02 	movl   $0x6802,-0x184(%rbp)
  800421bd43:	68 00 00 
  800421bd46:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
  800421bd4d:	00 00 00 00 
  800421bd51:	48 8b 95 70 fe ff ff 	mov    -0x190(%rbp),%rdx
  800421bd58:	8b 85 7c fe ff ff    	mov    -0x184(%rbp),%eax
  800421bd5e:	48 89 d6             	mov    %rdx,%rsi
  800421bd61:	89 c7                	mov    %eax,%edi
  800421bd63:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bd6a:	00 00 00 
  800421bd6d:	ff d0                	callq  *%rax
  800421bd6f:	c7 85 6c fe ff ff 00 	movl   $0x6800,-0x194(%rbp)
  800421bd76:	68 00 00 
  800421bd79:	48 c7 85 60 fe ff ff 	movq   $0x20,-0x1a0(%rbp)
  800421bd80:	20 00 00 00 
  800421bd84:	48 8b 95 60 fe ff ff 	mov    -0x1a0(%rbp),%rdx
  800421bd8b:	8b 85 6c fe ff ff    	mov    -0x194(%rbp),%eax
  800421bd91:	48 89 d6             	mov    %rdx,%rsi
  800421bd94:	89 c7                	mov    %eax,%edi
  800421bd96:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bd9d:	00 00 00 
  800421bda0:	ff d0                	callq  *%rax
  800421bda2:	c7 85 5c fe ff ff 04 	movl   $0x6804,-0x1a4(%rbp)
  800421bda9:	68 00 00 
  800421bdac:	48 c7 85 50 fe ff ff 	movq   $0x2000,-0x1b0(%rbp)
  800421bdb3:	00 20 00 00 
  800421bdb7:	48 8b 95 50 fe ff ff 	mov    -0x1b0(%rbp),%rdx
  800421bdbe:	8b 85 5c fe ff ff    	mov    -0x1a4(%rbp),%eax
  800421bdc4:	48 89 d6             	mov    %rdx,%rsi
  800421bdc7:	89 c7                	mov    %eax,%edi
  800421bdc9:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bdd0:	00 00 00 
  800421bdd3:	ff d0                	callq  *%rax
  800421bdd5:	c7 85 4c fe ff ff 00 	movl   $0x2800,-0x1b4(%rbp)
  800421bddc:	28 00 00 
  800421bddf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421bde4:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
  800421bdeb:	48 8b 95 40 fe ff ff 	mov    -0x1c0(%rbp),%rdx
  800421bdf2:	8b 85 4c fe ff ff    	mov    -0x1b4(%rbp),%eax
  800421bdf8:	48 89 d6             	mov    %rdx,%rsi
  800421bdfb:	89 c7                	mov    %eax,%edi
  800421bdfd:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421be04:	00 00 00 
  800421be07:	ff d0                	callq  *%rax
  800421be09:	c7 85 3c fe ff ff 01 	movl   $0x2801,-0x1c4(%rbp)
  800421be10:	28 00 00 
  800421be13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
  800421be18:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
  800421be1f:	48 8b 95 30 fe ff ff 	mov    -0x1d0(%rbp),%rdx
  800421be26:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  800421be2c:	48 89 d6             	mov    %rdx,%rsi
  800421be2f:	89 c7                	mov    %eax,%edi
  800421be31:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421be38:	00 00 00 
  800421be3b:	ff d0                	callq  *%rax
  800421be3d:	c7 85 2c fe ff ff 1a 	movl   $0x681a,-0x1d4(%rbp)
  800421be44:	68 00 00 
  800421be47:	48 c7 85 20 fe ff ff 	movq   $0x0,-0x1e0(%rbp)
  800421be4e:	00 00 00 00 
  800421be52:	48 8b 95 20 fe ff ff 	mov    -0x1e0(%rbp),%rdx
  800421be59:	8b 85 2c fe ff ff    	mov    -0x1d4(%rbp),%eax
  800421be5f:	48 89 d6             	mov    %rdx,%rsi
  800421be62:	89 c7                	mov    %eax,%edi
  800421be64:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421be6b:	00 00 00 
  800421be6e:	ff d0                	callq  *%rax
  800421be70:	c7 85 1c fe ff ff 20 	movl   $0x6820,-0x1e4(%rbp)
  800421be77:	68 00 00 
  800421be7a:	48 c7 85 10 fe ff ff 	movq   $0x2,-0x1f0(%rbp)
  800421be81:	02 00 00 00 
  800421be85:	48 8b 95 10 fe ff ff 	mov    -0x1f0(%rbp),%rdx
  800421be8c:	8b 85 1c fe ff ff    	mov    -0x1e4(%rbp),%eax
  800421be92:	48 89 d6             	mov    %rdx,%rsi
  800421be95:	89 c7                	mov    %eax,%edi
  800421be97:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421be9e:	00 00 00 
  800421bea1:	ff d0                	callq  *%rax
  800421bea3:	c9                   	leaveq 
  800421bea4:	c3                   	retq   

000000800421bea5 <vmx_read_capability_msr>:
  800421bea5:	55                   	push   %rbp
  800421bea6:	48 89 e5             	mov    %rsp,%rbp
  800421bea9:	48 83 ec 38          	sub    $0x38,%rsp
  800421bead:	89 7d dc             	mov    %edi,-0x24(%rbp)
  800421beb0:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421beb4:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
  800421beb8:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421bebb:	89 45 f4             	mov    %eax,-0xc(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421bebe:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421bec1:	89 c1                	mov    %eax,%ecx
  800421bec3:	0f 32                	rdmsr  
  800421bec5:	89 55 f0             	mov    %edx,-0x10(%rbp)
  800421bec8:	89 45 ec             	mov    %eax,-0x14(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421becb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
  800421bed2:	00 
	ret = edx;
  800421bed3:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421bed6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	ret = ret << 32;
  800421beda:	48 c1 65 e0 20       	shlq   $0x20,-0x20(%rbp)
	ret |= eax;
  800421bedf:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421bee2:	48 09 45 e0          	or     %rax,-0x20(%rbp)

	return ret;
  800421bee6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421beea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421beee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421bef2:	48 c1 e8 20          	shr    $0x20,%rax
  800421bef6:	89 c2                	mov    %eax,%edx
  800421bef8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421befc:	89 10                	mov    %edx,(%rax)
  800421befe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421bf02:	89 c2                	mov    %eax,%edx
  800421bf04:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421bf08:	89 10                	mov    %edx,(%rax)
  800421bf0a:	c9                   	leaveq 
  800421bf0b:	c3                   	retq   

000000800421bf0c <vmcs_ctls_init>:
  800421bf0c:	55                   	push   %rbp
  800421bf0d:	48 89 e5             	mov    %rsp,%rbp
  800421bf10:	48 81 ec 10 01 00 00 	sub    $0x110,%rsp
  800421bf17:	48 89 bd f8 fe ff ff 	mov    %rdi,-0x108(%rbp)
  800421bf1e:	48 8d 95 24 ff ff ff 	lea    -0xdc(%rbp),%rdx
  800421bf25:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
  800421bf2c:	48 89 c6             	mov    %rax,%rsi
  800421bf2f:	bf 81 04 00 00       	mov    $0x481,%edi
  800421bf34:	48 b8 a5 be 21 04 80 	movabs $0x800421bea5,%rax
  800421bf3b:	00 00 00 
  800421bf3e:	ff d0                	callq  *%rax
  800421bf40:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
  800421bf46:	83 c8 01             	or     $0x1,%eax
  800421bf49:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
  800421bf4f:	8b 95 24 ff ff ff    	mov    -0xdc(%rbp),%edx
  800421bf55:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
  800421bf5b:	21 d0                	and    %edx,%eax
  800421bf5d:	c7 45 cc 00 40 00 00 	movl   $0x4000,-0x34(%rbp)
  800421bf64:	89 45 c8             	mov    %eax,-0x38(%rbp)
  800421bf67:	8b 55 c8             	mov    -0x38(%rbp),%edx
  800421bf6a:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421bf6d:	48 89 d6             	mov    %rdx,%rsi
  800421bf70:	89 c7                	mov    %eax,%edi
  800421bf72:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421bf79:	00 00 00 
  800421bf7c:	ff d0                	callq  *%rax
  800421bf7e:	48 8d 95 1c ff ff ff 	lea    -0xe4(%rbp),%rdx
  800421bf85:	48 8d 85 18 ff ff ff 	lea    -0xe8(%rbp),%rax
  800421bf8c:	48 89 c6             	mov    %rax,%rsi
  800421bf8f:	bf 82 04 00 00       	mov    $0x482,%edi
  800421bf94:	48 b8 a5 be 21 04 80 	movabs $0x800421bea5,%rax
  800421bf9b:	00 00 00 
  800421bf9e:	ff d0                	callq  *%rax
  800421bfa0:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421bfa6:	c1 e8 1f             	shr    $0x1f,%eax
  800421bfa9:	83 f8 01             	cmp    $0x1,%eax
  800421bfac:	74 35                	je     800421bfe3 <vmcs_ctls_init+0xd7>
  800421bfae:	48 b9 b0 16 22 04 80 	movabs $0x80042216b0,%rcx
  800421bfb5:	00 00 00 
  800421bfb8:	48 ba 46 16 22 04 80 	movabs $0x8004221646,%rdx
  800421bfbf:	00 00 00 
  800421bfc2:	be 5e 01 00 00       	mov    $0x15e,%esi
  800421bfc7:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421bfce:	00 00 00 
  800421bfd1:	b8 00 00 00 00       	mov    $0x0,%eax
  800421bfd6:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421bfdd:	00 00 00 
  800421bfe0:	41 ff d0             	callq  *%r8
  800421bfe3:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bfe9:	0d 00 00 00 80       	or     $0x80000000,%eax
  800421bfee:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421bff4:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421bffa:	0c 80                	or     $0x80,%al
  800421bffc:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c002:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c008:	0d 00 00 00 02       	or     $0x2000000,%eax
  800421c00d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c013:	8b 85 1c ff ff ff    	mov    -0xe4(%rbp),%eax
  800421c019:	25 ff 7d fe ff       	and    $0xfffe7dff,%eax
  800421c01e:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%rbp)
  800421c024:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
  800421c02a:	8b 85 18 ff ff ff    	mov    -0xe8(%rbp),%eax
  800421c030:	21 d0                	and    %edx,%eax
  800421c032:	c7 45 c4 02 40 00 00 	movl   $0x4002,-0x3c(%rbp)
  800421c039:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421c03c:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421c03f:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421c042:	48 89 d6             	mov    %rdx,%rsi
  800421c045:	89 c7                	mov    %eax,%edi
  800421c047:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c04e:	00 00 00 
  800421c051:	ff d0                	callq  *%rax
  800421c053:	48 8d 95 14 ff ff ff 	lea    -0xec(%rbp),%rdx
  800421c05a:	48 8d 85 10 ff ff ff 	lea    -0xf0(%rbp),%rax
  800421c061:	48 89 c6             	mov    %rax,%rsi
  800421c064:	bf 8b 04 00 00       	mov    $0x48b,%edi
  800421c069:	48 b8 a5 be 21 04 80 	movabs $0x800421bea5,%rax
  800421c070:	00 00 00 
  800421c073:	ff d0                	callq  *%rax
  800421c075:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c07b:	83 c8 02             	or     $0x2,%eax
  800421c07e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c084:	8b 85 14 ff ff ff    	mov    -0xec(%rbp),%eax
  800421c08a:	0c 80                	or     $0x80,%al
  800421c08c:	89 85 14 ff ff ff    	mov    %eax,-0xec(%rbp)
  800421c092:	8b 95 14 ff ff ff    	mov    -0xec(%rbp),%edx
  800421c098:	8b 85 10 ff ff ff    	mov    -0xf0(%rbp),%eax
  800421c09e:	21 d0                	and    %edx,%eax
  800421c0a0:	c7 45 bc 1e 40 00 00 	movl   $0x401e,-0x44(%rbp)
  800421c0a7:	89 45 b8             	mov    %eax,-0x48(%rbp)
  800421c0aa:	8b 55 b8             	mov    -0x48(%rbp),%edx
  800421c0ad:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421c0b0:	48 89 d6             	mov    %rdx,%rsi
  800421c0b3:	89 c7                	mov    %eax,%edi
  800421c0b5:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c0bc:	00 00 00 
  800421c0bf:	ff d0                	callq  *%rax
  800421c0c1:	48 8d 95 0c ff ff ff 	lea    -0xf4(%rbp),%rdx
  800421c0c8:	48 8d 85 08 ff ff ff 	lea    -0xf8(%rbp),%rax
  800421c0cf:	48 89 c6             	mov    %rax,%rsi
  800421c0d2:	bf 83 04 00 00       	mov    $0x483,%edi
  800421c0d7:	48 b8 a5 be 21 04 80 	movabs $0x800421bea5,%rax
  800421c0de:	00 00 00 
  800421c0e1:	ff d0                	callq  *%rax
  800421c0e3:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0e9:	80 cc 02             	or     $0x2,%ah
  800421c0ec:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c0f2:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
  800421c0f8:	80 cc 80             	or     $0x80,%ah
  800421c0fb:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
  800421c101:	8b 95 0c ff ff ff    	mov    -0xf4(%rbp),%edx
  800421c107:	8b 85 08 ff ff ff    	mov    -0xf8(%rbp),%eax
  800421c10d:	21 d0                	and    %edx,%eax
  800421c10f:	c7 45 b4 0c 40 00 00 	movl   $0x400c,-0x4c(%rbp)
  800421c116:	89 45 b0             	mov    %eax,-0x50(%rbp)
  800421c119:	8b 55 b0             	mov    -0x50(%rbp),%edx
  800421c11c:	8b 45 b4             	mov    -0x4c(%rbp),%eax
  800421c11f:	48 89 d6             	mov    %rdx,%rsi
  800421c122:	89 c7                	mov    %eax,%edi
  800421c124:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c12b:	00 00 00 
  800421c12e:	ff d0                	callq  *%rax
  800421c130:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c137:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c13e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421c142:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c149:	00 00 00 
  800421c14c:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421c150:	77 32                	ja     800421c184 <vmcs_ctls_init+0x278>
  800421c152:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c156:	48 89 c1             	mov    %rax,%rcx
  800421c159:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421c160:	00 00 00 
  800421c163:	be 82 01 00 00       	mov    $0x182,%esi
  800421c168:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421c16f:	00 00 00 
  800421c172:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c177:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c17e:	00 00 00 
  800421c181:	41 ff d0             	callq  *%r8
  800421c184:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c18b:	ff ff ff 
  800421c18e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421c192:	48 01 d0             	add    %rdx,%rax
  800421c195:	c7 45 ac 06 20 00 00 	movl   $0x2006,-0x54(%rbp)
  800421c19c:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
  800421c1a0:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  800421c1a4:	8b 45 ac             	mov    -0x54(%rbp),%eax
  800421c1a7:	48 89 d6             	mov    %rdx,%rsi
  800421c1aa:	89 c7                	mov    %eax,%edi
  800421c1ac:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c1b3:	00 00 00 
  800421c1b6:	ff d0                	callq  *%rax
  800421c1b8:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c1bf:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c1c5:	c7 45 9c 0e 40 00 00 	movl   $0x400e,-0x64(%rbp)
  800421c1cc:	89 45 98             	mov    %eax,-0x68(%rbp)
  800421c1cf:	8b 55 98             	mov    -0x68(%rbp),%edx
  800421c1d2:	8b 45 9c             	mov    -0x64(%rbp),%eax
  800421c1d5:	48 89 d6             	mov    %rdx,%rsi
  800421c1d8:	89 c7                	mov    %eax,%edi
  800421c1da:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c1e1:	00 00 00 
  800421c1e4:	ff d0                	callq  *%rax
  800421c1e6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c1ed:	48 8b 80 50 01 00 00 	mov    0x150(%rax),%rax
  800421c1f4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421c1f8:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c1ff:	00 00 00 
  800421c202:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  800421c206:	77 32                	ja     800421c23a <vmcs_ctls_init+0x32e>
  800421c208:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c20c:	48 89 c1             	mov    %rax,%rcx
  800421c20f:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421c216:	00 00 00 
  800421c219:	be 86 01 00 00       	mov    $0x186,%esi
  800421c21e:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421c225:	00 00 00 
  800421c228:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c22d:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c234:	00 00 00 
  800421c237:	41 ff d0             	callq  *%r8
  800421c23a:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c241:	ff ff ff 
  800421c244:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421c248:	48 01 d0             	add    %rdx,%rax
  800421c24b:	c7 45 94 08 20 00 00 	movl   $0x2008,-0x6c(%rbp)
  800421c252:	48 89 45 88          	mov    %rax,-0x78(%rbp)
  800421c256:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  800421c25a:	8b 45 94             	mov    -0x6c(%rbp),%eax
  800421c25d:	48 89 d6             	mov    %rdx,%rsi
  800421c260:	89 c7                	mov    %eax,%edi
  800421c262:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c269:	00 00 00 
  800421c26c:	ff d0                	callq  *%rax
  800421c26e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c275:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c27b:	c7 45 84 10 40 00 00 	movl   $0x4010,-0x7c(%rbp)
  800421c282:	89 45 80             	mov    %eax,-0x80(%rbp)
  800421c285:	8b 55 80             	mov    -0x80(%rbp),%edx
  800421c288:	8b 45 84             	mov    -0x7c(%rbp),%eax
  800421c28b:	48 89 d6             	mov    %rdx,%rsi
  800421c28e:	89 c7                	mov    %eax,%edi
  800421c290:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c297:	00 00 00 
  800421c29a:	ff d0                	callq  *%rax
  800421c29c:	48 8d 95 04 ff ff ff 	lea    -0xfc(%rbp),%rdx
  800421c2a3:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
  800421c2aa:	48 89 c6             	mov    %rax,%rsi
  800421c2ad:	bf 84 04 00 00       	mov    $0x484,%edi
  800421c2b2:	48 b8 a5 be 21 04 80 	movabs $0x800421bea5,%rax
  800421c2b9:	00 00 00 
  800421c2bc:	ff d0                	callq  *%rax
  800421c2be:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c2c5:	48 8b 80 58 01 00 00 	mov    0x158(%rax),%rax
  800421c2cc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c2d0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c2d7:	00 00 00 
  800421c2da:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421c2de:	77 32                	ja     800421c312 <vmcs_ctls_init+0x406>
  800421c2e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c2e4:	48 89 c1             	mov    %rax,%rcx
  800421c2e7:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421c2ee:	00 00 00 
  800421c2f1:	be 90 01 00 00       	mov    $0x190,%esi
  800421c2f6:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421c2fd:	00 00 00 
  800421c300:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c305:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c30c:	00 00 00 
  800421c30f:	41 ff d0             	callq  *%r8
  800421c312:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c319:	ff ff ff 
  800421c31c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421c320:	48 01 d0             	add    %rdx,%rax
  800421c323:	c7 85 7c ff ff ff 0a 	movl   $0x200a,-0x84(%rbp)
  800421c32a:	20 00 00 
  800421c32d:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
  800421c334:	48 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%rdx
  800421c33b:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
  800421c341:	48 89 d6             	mov    %rdx,%rsi
  800421c344:	89 c7                	mov    %eax,%edi
  800421c346:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c34d:	00 00 00 
  800421c350:	ff d0                	callq  *%rax
  800421c352:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c359:	8b 80 48 01 00 00    	mov    0x148(%rax),%eax
  800421c35f:	c7 85 6c ff ff ff 14 	movl   $0x4014,-0x94(%rbp)
  800421c366:	40 00 00 
  800421c369:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
  800421c36f:	8b 95 68 ff ff ff    	mov    -0x98(%rbp),%edx
  800421c375:	8b 85 6c ff ff ff    	mov    -0x94(%rbp),%eax
  800421c37b:	48 89 d6             	mov    %rdx,%rsi
  800421c37e:	89 c7                	mov    %eax,%edi
  800421c380:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c387:	00 00 00 
  800421c38a:	ff d0                	callq  *%rax
  800421c38c:	8b 95 04 ff ff ff    	mov    -0xfc(%rbp),%edx
  800421c392:	8b 85 00 ff ff ff    	mov    -0x100(%rbp),%eax
  800421c398:	21 d0                	and    %edx,%eax
  800421c39a:	c7 85 64 ff ff ff 12 	movl   $0x4012,-0x9c(%rbp)
  800421c3a1:	40 00 00 
  800421c3a4:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%rbp)
  800421c3aa:	8b 95 60 ff ff ff    	mov    -0xa0(%rbp),%edx
  800421c3b0:	8b 85 64 ff ff ff    	mov    -0x9c(%rbp),%eax
  800421c3b6:	48 89 d6             	mov    %rdx,%rsi
  800421c3b9:	89 c7                	mov    %eax,%edi
  800421c3bb:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c3c2:	00 00 00 
  800421c3c5:	ff d0                	callq  *%rax
  800421c3c7:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c3ce:	48 8b 80 e8 00 00 00 	mov    0xe8(%rax),%rax
  800421c3d5:	48 83 c8 18          	or     $0x18,%rax
  800421c3d9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421c3dd:	c7 85 5c ff ff ff 1a 	movl   $0x201a,-0xa4(%rbp)
  800421c3e4:	20 00 00 
  800421c3e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421c3eb:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
  800421c3f2:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  800421c3f9:	8b 85 5c ff ff ff    	mov    -0xa4(%rbp),%eax
  800421c3ff:	48 89 d6             	mov    %rdx,%rsi
  800421c402:	89 c7                	mov    %eax,%edi
  800421c404:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c40b:	00 00 00 
  800421c40e:	ff d0                	callq  *%rax
  800421c410:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c417:	8b 80 30 01 00 00    	mov    0x130(%rax),%eax
  800421c41d:	c7 85 4c ff ff ff 04 	movl   $0x4004,-0xb4(%rbp)
  800421c424:	40 00 00 
  800421c427:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
  800421c42d:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
  800421c433:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
  800421c439:	48 89 d6             	mov    %rdx,%rsi
  800421c43c:	89 c7                	mov    %eax,%edi
  800421c43e:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c445:	00 00 00 
  800421c448:	ff d0                	callq  *%rax
  800421c44a:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c451:	48 8b 80 38 01 00 00 	mov    0x138(%rax),%rax
  800421c458:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
  800421c45c:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c463:	00 00 00 
  800421c466:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
  800421c46a:	77 32                	ja     800421c49e <vmcs_ctls_init+0x592>
  800421c46c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c470:	48 89 c1             	mov    %rax,%rcx
  800421c473:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421c47a:	00 00 00 
  800421c47d:	be 9d 01 00 00       	mov    $0x19d,%esi
  800421c482:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421c489:	00 00 00 
  800421c48c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c491:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c498:	00 00 00 
  800421c49b:	41 ff d0             	callq  *%r8
  800421c49e:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c4a5:	ff ff ff 
  800421c4a8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421c4ac:	48 01 d0             	add    %rdx,%rax
  800421c4af:	c7 85 44 ff ff ff 00 	movl   $0x2000,-0xbc(%rbp)
  800421c4b6:	20 00 00 
  800421c4b9:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
  800421c4c0:	48 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%rdx
  800421c4c7:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
  800421c4cd:	48 89 d6             	mov    %rdx,%rsi
  800421c4d0:	89 c7                	mov    %eax,%edi
  800421c4d2:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c4d9:	00 00 00 
  800421c4dc:	ff d0                	callq  *%rax
  800421c4de:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  800421c4e5:	48 8b 80 40 01 00 00 	mov    0x140(%rax),%rax
  800421c4ec:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421c4f0:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421c4f7:	00 00 00 
  800421c4fa:	48 39 45 d0          	cmp    %rax,-0x30(%rbp)
  800421c4fe:	77 32                	ja     800421c532 <vmcs_ctls_init+0x626>
  800421c500:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c504:	48 89 c1             	mov    %rax,%rcx
  800421c507:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421c50e:	00 00 00 
  800421c511:	be 9f 01 00 00       	mov    $0x19f,%esi
  800421c516:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421c51d:	00 00 00 
  800421c520:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c525:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421c52c:	00 00 00 
  800421c52f:	41 ff d0             	callq  *%r8
  800421c532:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421c539:	ff ff ff 
  800421c53c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421c540:	48 01 d0             	add    %rdx,%rax
  800421c543:	c7 85 34 ff ff ff 02 	movl   $0x2002,-0xcc(%rbp)
  800421c54a:	20 00 00 
  800421c54d:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
  800421c554:	48 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%rdx
  800421c55b:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  800421c561:	48 89 d6             	mov    %rdx,%rsi
  800421c564:	89 c7                	mov    %eax,%edi
  800421c566:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421c56d:	00 00 00 
  800421c570:	ff d0                	callq  *%rax
  800421c572:	c9                   	leaveq 
  800421c573:	c3                   	retq   

000000800421c574 <vmcs_dump_cpu>:
  800421c574:	55                   	push   %rbp
  800421c575:	48 89 e5             	mov    %rsp,%rbp
  800421c578:	53                   	push   %rbx
  800421c579:	48 83 ec 28          	sub    $0x28,%rsp
  800421c57d:	bf 20 68 00 00       	mov    $0x6820,%edi
  800421c582:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c589:	00 00 00 
  800421c58c:	ff d0                	callq  *%rax
  800421c58e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  800421c592:	48 bf fc 16 22 04 80 	movabs $0x80042216fc,%rdi
  800421c599:	00 00 00 
  800421c59c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c5a1:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421c5a8:	00 00 00 
  800421c5ab:	ff d2                	callq  *%rdx
  800421c5ad:	c7 45 e4 1c 68 00 00 	movl   $0x681c,-0x1c(%rbp)
  800421c5b4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c5b7:	89 c7                	mov    %eax,%edi
  800421c5b9:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c5c0:	00 00 00 
  800421c5c3:	ff d0                	callq  *%rax
  800421c5c5:	48 89 c3             	mov    %rax,%rbx
  800421c5c8:	c7 45 e0 1e 68 00 00 	movl   $0x681e,-0x20(%rbp)
  800421c5cf:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421c5d2:	89 c7                	mov    %eax,%edi
  800421c5d4:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c5db:	00 00 00 
  800421c5de:	ff d0                	callq  *%rax
  800421c5e0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  800421c5e4:	48 89 d1             	mov    %rdx,%rcx
  800421c5e7:	48 89 da             	mov    %rbx,%rdx
  800421c5ea:	48 89 c6             	mov    %rax,%rsi
  800421c5ed:	48 bf 20 17 22 04 80 	movabs $0x8004221720,%rdi
  800421c5f4:	00 00 00 
  800421c5f7:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c5fc:	49 b8 77 9c 20 04 80 	movabs $0x8004209c77,%r8
  800421c603:	00 00 00 
  800421c606:	41 ff d0             	callq  *%r8
  800421c609:	c7 45 dc 02 68 00 00 	movl   $0x6802,-0x24(%rbp)
  800421c610:	8b 45 dc             	mov    -0x24(%rbp),%eax
  800421c613:	89 c7                	mov    %eax,%edi
  800421c615:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c61c:	00 00 00 
  800421c61f:	ff d0                	callq  *%rax
  800421c621:	48 89 c3             	mov    %rax,%rbx
  800421c624:	c7 45 d8 00 68 00 00 	movl   $0x6800,-0x28(%rbp)
  800421c62b:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421c62e:	89 c7                	mov    %eax,%edi
  800421c630:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c637:	00 00 00 
  800421c63a:	ff d0                	callq  *%rax
  800421c63c:	48 89 da             	mov    %rbx,%rdx
  800421c63f:	48 89 c6             	mov    %rax,%rsi
  800421c642:	48 bf 58 17 22 04 80 	movabs $0x8004221758,%rdi
  800421c649:	00 00 00 
  800421c64c:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c651:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421c658:	00 00 00 
  800421c65b:	ff d1                	callq  *%rcx
  800421c65d:	c7 45 d4 04 68 00 00 	movl   $0x6804,-0x2c(%rbp)
  800421c664:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421c667:	89 c7                	mov    %eax,%edi
  800421c669:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c670:	00 00 00 
  800421c673:	ff d0                	callq  *%rax
  800421c675:	48 89 c6             	mov    %rax,%rsi
  800421c678:	48 bf 7a 17 22 04 80 	movabs $0x800422177a,%rdi
  800421c67f:	00 00 00 
  800421c682:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c687:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421c68e:	00 00 00 
  800421c691:	ff d2                	callq  *%rdx
  800421c693:	48 bf 8f 17 22 04 80 	movabs $0x800422178f,%rdi
  800421c69a:	00 00 00 
  800421c69d:	b8 00 00 00 00       	mov    $0x0,%eax
  800421c6a2:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421c6a9:	00 00 00 
  800421c6ac:	ff d2                	callq  *%rdx
  800421c6ae:	48 83 c4 28          	add    $0x28,%rsp
  800421c6b2:	5b                   	pop    %rbx
  800421c6b3:	5d                   	pop    %rbp
  800421c6b4:	c3                   	retq   

000000800421c6b5 <vmexit>:
  800421c6b5:	55                   	push   %rbp
  800421c6b6:	48 89 e5             	mov    %rsp,%rbp
  800421c6b9:	41 54                	push   %r12
  800421c6bb:	53                   	push   %rbx
  800421c6bc:	48 83 ec 10          	sub    $0x10,%rsp
  800421c6c0:	c7 45 e8 ff ff ff ff 	movl   $0xffffffff,-0x18(%rbp)
  800421c6c7:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)
  800421c6cb:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421c6ce:	0f b7 c0             	movzwl %ax,%eax
  800421c6d1:	83 f8 30             	cmp    $0x30,%eax
  800421c6d4:	0f 87 03 05 00 00    	ja     800421cbdd <vmexit+0x528>
  800421c6da:	89 c0                	mov    %eax,%eax
  800421c6dc:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421c6e3:	00 
  800421c6e4:	48 b8 f8 17 22 04 80 	movabs $0x80042217f8,%rax
  800421c6eb:	00 00 00 
  800421c6ee:	48 01 d0             	add    %rdx,%rax
  800421c6f1:	48 8b 00             	mov    (%rax),%rax
  800421c6f4:	ff e0                	jmpq   *%rax
  800421c6f6:	c7 45 e4 04 44 00 00 	movl   $0x4404,-0x1c(%rbp)
  800421c6fd:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421c700:	89 c7                	mov    %eax,%edi
  800421c702:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421c709:	00 00 00 
  800421c70c:	ff d0                	callq  *%rax
  800421c70e:	89 c2                	mov    %eax,%edx
  800421c710:	48 b8 c4 d5 6d 04 80 	movabs $0x80046dd5c4,%rax
  800421c717:	00 00 00 
  800421c71a:	89 10                	mov    %edx,(%rax)
  800421c71c:	48 b8 c4 d5 6d 04 80 	movabs $0x80046dd5c4,%rax
  800421c723:	00 00 00 
  800421c726:	8b 18                	mov    (%rax),%ebx
  800421c728:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c72f:	00 00 00 
  800421c732:	ff d0                	callq  *%rax
  800421c734:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c73b:	00 00 00 
  800421c73e:	48 98                	cltq   
  800421c740:	48 c1 e0 03          	shl    $0x3,%rax
  800421c744:	48 89 c1             	mov    %rax,%rcx
  800421c747:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c74b:	48 01 c8             	add    %rcx,%rax
  800421c74e:	48 01 d0             	add    %rdx,%rax
  800421c751:	48 83 c0 08          	add    $0x8,%rax
  800421c755:	48 8b 00             	mov    (%rax),%rax
  800421c758:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421c75f:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c766:	00 00 00 
  800421c769:	ff d0                	callq  *%rax
  800421c76b:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c772:	00 00 00 
  800421c775:	48 98                	cltq   
  800421c777:	48 c1 e0 03          	shl    $0x3,%rax
  800421c77b:	48 89 c1             	mov    %rax,%rcx
  800421c77e:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c782:	48 01 c8             	add    %rcx,%rax
  800421c785:	48 01 d0             	add    %rdx,%rax
  800421c788:	48 83 c0 08          	add    $0x8,%rax
  800421c78c:	48 8b 00             	mov    (%rax),%rax
  800421c78f:	89 da                	mov    %ebx,%edx
  800421c791:	4c 89 e6             	mov    %r12,%rsi
  800421c794:	48 89 c7             	mov    %rax,%rdi
  800421c797:	48 b8 3b d5 21 04 80 	movabs $0x800421d53b,%rax
  800421c79e:	00 00 00 
  800421c7a1:	ff d0                	callq  *%rax
  800421c7a3:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c7a6:	e9 32 04 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421c7ab:	48 b8 c4 d5 6d 04 80 	movabs $0x80046dd5c4,%rax
  800421c7b2:	00 00 00 
  800421c7b5:	8b 18                	mov    (%rax),%ebx
  800421c7b7:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c7be:	00 00 00 
  800421c7c1:	ff d0                	callq  *%rax
  800421c7c3:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c7ca:	00 00 00 
  800421c7cd:	48 98                	cltq   
  800421c7cf:	48 c1 e0 03          	shl    $0x3,%rax
  800421c7d3:	48 89 c1             	mov    %rax,%rcx
  800421c7d6:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c7da:	48 01 c8             	add    %rcx,%rax
  800421c7dd:	48 01 d0             	add    %rdx,%rax
  800421c7e0:	48 83 c0 08          	add    $0x8,%rax
  800421c7e4:	48 8b 00             	mov    (%rax),%rax
  800421c7e7:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421c7ee:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c7f5:	00 00 00 
  800421c7f8:	ff d0                	callq  *%rax
  800421c7fa:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c801:	00 00 00 
  800421c804:	48 98                	cltq   
  800421c806:	48 c1 e0 03          	shl    $0x3,%rax
  800421c80a:	48 89 c1             	mov    %rax,%rcx
  800421c80d:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c811:	48 01 c8             	add    %rcx,%rax
  800421c814:	48 01 d0             	add    %rdx,%rax
  800421c817:	48 83 c0 08          	add    $0x8,%rax
  800421c81b:	48 8b 00             	mov    (%rax),%rax
  800421c81e:	89 da                	mov    %ebx,%edx
  800421c820:	4c 89 e6             	mov    %r12,%rsi
  800421c823:	48 89 c7             	mov    %rax,%rdi
  800421c826:	48 b8 ba d4 21 04 80 	movabs $0x800421d4ba,%rax
  800421c82d:	00 00 00 
  800421c830:	ff d0                	callq  *%rax
  800421c832:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c835:	e9 a3 03 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421c83a:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c841:	00 00 00 
  800421c844:	ff d0                	callq  *%rax
  800421c846:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c84d:	00 00 00 
  800421c850:	48 98                	cltq   
  800421c852:	48 c1 e0 03          	shl    $0x3,%rax
  800421c856:	48 89 c1             	mov    %rax,%rcx
  800421c859:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c85d:	48 01 c8             	add    %rcx,%rax
  800421c860:	48 01 d0             	add    %rdx,%rax
  800421c863:	48 83 c0 08          	add    $0x8,%rax
  800421c867:	48 8b 00             	mov    (%rax),%rax
  800421c86a:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c871:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c878:	00 00 00 
  800421c87b:	ff d0                	callq  *%rax
  800421c87d:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c884:	00 00 00 
  800421c887:	48 98                	cltq   
  800421c889:	48 c1 e0 03          	shl    $0x3,%rax
  800421c88d:	48 89 c1             	mov    %rax,%rcx
  800421c890:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c894:	48 01 c8             	add    %rcx,%rax
  800421c897:	48 01 d0             	add    %rdx,%rax
  800421c89a:	48 83 c0 08          	add    $0x8,%rax
  800421c89e:	48 8b 00             	mov    (%rax),%rax
  800421c8a1:	48 89 de             	mov    %rbx,%rsi
  800421c8a4:	48 89 c7             	mov    %rax,%rdi
  800421c8a7:	48 b8 e8 d5 21 04 80 	movabs $0x800421d5e8,%rax
  800421c8ae:	00 00 00 
  800421c8b1:	ff d0                	callq  *%rax
  800421c8b3:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c8b6:	e9 22 03 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421c8bb:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c8c2:	00 00 00 
  800421c8c5:	ff d0                	callq  *%rax
  800421c8c7:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c8ce:	00 00 00 
  800421c8d1:	48 98                	cltq   
  800421c8d3:	48 c1 e0 03          	shl    $0x3,%rax
  800421c8d7:	48 89 c1             	mov    %rax,%rcx
  800421c8da:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c8de:	48 01 c8             	add    %rcx,%rax
  800421c8e1:	48 01 d0             	add    %rdx,%rax
  800421c8e4:	48 83 c0 08          	add    $0x8,%rax
  800421c8e8:	48 8b 00             	mov    (%rax),%rax
  800421c8eb:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c8f2:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c8f9:	00 00 00 
  800421c8fc:	ff d0                	callq  *%rax
  800421c8fe:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c905:	00 00 00 
  800421c908:	48 98                	cltq   
  800421c90a:	48 c1 e0 03          	shl    $0x3,%rax
  800421c90e:	48 89 c1             	mov    %rax,%rcx
  800421c911:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c915:	48 01 c8             	add    %rcx,%rax
  800421c918:	48 01 d0             	add    %rdx,%rax
  800421c91b:	48 83 c0 08          	add    $0x8,%rax
  800421c91f:	48 8b 00             	mov    (%rax),%rax
  800421c922:	48 89 de             	mov    %rbx,%rsi
  800421c925:	48 89 c7             	mov    %rax,%rdi
  800421c928:	48 b8 f0 d6 21 04 80 	movabs $0x800421d6f0,%rax
  800421c92f:	00 00 00 
  800421c932:	ff d0                	callq  *%rax
  800421c934:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c937:	e9 a1 02 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421c93c:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c943:	00 00 00 
  800421c946:	ff d0                	callq  *%rax
  800421c948:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c94f:	00 00 00 
  800421c952:	48 98                	cltq   
  800421c954:	48 c1 e0 03          	shl    $0x3,%rax
  800421c958:	48 89 c1             	mov    %rax,%rcx
  800421c95b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c95f:	48 01 c8             	add    %rcx,%rax
  800421c962:	48 01 d0             	add    %rdx,%rax
  800421c965:	48 83 c0 08          	add    $0x8,%rax
  800421c969:	48 8b 00             	mov    (%rax),%rax
  800421c96c:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c973:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c97a:	00 00 00 
  800421c97d:	ff d0                	callq  *%rax
  800421c97f:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c986:	00 00 00 
  800421c989:	48 98                	cltq   
  800421c98b:	48 c1 e0 03          	shl    $0x3,%rax
  800421c98f:	48 89 c1             	mov    %rax,%rcx
  800421c992:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c996:	48 01 c8             	add    %rcx,%rax
  800421c999:	48 01 d0             	add    %rdx,%rax
  800421c99c:	48 83 c0 08          	add    $0x8,%rax
  800421c9a0:	48 8b 00             	mov    (%rax),%rax
  800421c9a3:	48 8b 80 e0 00 00 00 	mov    0xe0(%rax),%rax
  800421c9aa:	48 89 de             	mov    %rbx,%rsi
  800421c9ad:	48 89 c7             	mov    %rax,%rdi
  800421c9b0:	48 b8 5c d8 21 04 80 	movabs $0x800421d85c,%rax
  800421c9b7:	00 00 00 
  800421c9ba:	ff d0                	callq  *%rax
  800421c9bc:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421c9bf:	e9 19 02 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421c9c4:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421c9cb:	00 00 00 
  800421c9ce:	ff d0                	callq  *%rax
  800421c9d0:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421c9d7:	00 00 00 
  800421c9da:	48 98                	cltq   
  800421c9dc:	48 c1 e0 03          	shl    $0x3,%rax
  800421c9e0:	48 89 c1             	mov    %rax,%rcx
  800421c9e3:	48 c1 e1 04          	shl    $0x4,%rcx
  800421c9e7:	48 01 c8             	add    %rcx,%rax
  800421c9ea:	48 01 d0             	add    %rdx,%rax
  800421c9ed:	48 83 c0 08          	add    $0x8,%rax
  800421c9f1:	48 8b 00             	mov    (%rax),%rax
  800421c9f4:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421c9fb:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421ca02:	00 00 00 
  800421ca05:	ff d0                	callq  *%rax
  800421ca07:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421ca0e:	00 00 00 
  800421ca11:	48 98                	cltq   
  800421ca13:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca17:	48 89 c1             	mov    %rax,%rcx
  800421ca1a:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca1e:	48 01 c8             	add    %rcx,%rax
  800421ca21:	48 01 d0             	add    %rdx,%rax
  800421ca24:	48 83 c0 08          	add    $0x8,%rax
  800421ca28:	48 8b 00             	mov    (%rax),%rax
  800421ca2b:	48 89 de             	mov    %rbx,%rsi
  800421ca2e:	48 89 c7             	mov    %rax,%rdi
  800421ca31:	48 b8 4e da 21 04 80 	movabs $0x800421da4e,%rax
  800421ca38:	00 00 00 
  800421ca3b:	ff d0                	callq  *%rax
  800421ca3d:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421ca40:	e9 98 01 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421ca45:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421ca4c:	00 00 00 
  800421ca4f:	ff d0                	callq  *%rax
  800421ca51:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421ca58:	00 00 00 
  800421ca5b:	48 98                	cltq   
  800421ca5d:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca61:	48 89 c1             	mov    %rax,%rcx
  800421ca64:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca68:	48 01 c8             	add    %rcx,%rax
  800421ca6b:	48 01 d0             	add    %rdx,%rax
  800421ca6e:	48 83 c0 08          	add    $0x8,%rax
  800421ca72:	48 8b 00             	mov    (%rax),%rax
  800421ca75:	48 8d 98 20 01 00 00 	lea    0x120(%rax),%rbx
  800421ca7c:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421ca83:	00 00 00 
  800421ca86:	ff d0                	callq  *%rax
  800421ca88:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421ca8f:	00 00 00 
  800421ca92:	48 98                	cltq   
  800421ca94:	48 c1 e0 03          	shl    $0x3,%rax
  800421ca98:	48 89 c1             	mov    %rax,%rcx
  800421ca9b:	48 c1 e1 04          	shl    $0x4,%rcx
  800421ca9f:	48 01 c8             	add    %rcx,%rax
  800421caa2:	48 01 d0             	add    %rdx,%rax
  800421caa5:	48 83 c0 08          	add    $0x8,%rax
  800421caa9:	48 8b 00             	mov    (%rax),%rax
  800421caac:	48 89 de             	mov    %rbx,%rsi
  800421caaf:	48 89 c7             	mov    %rax,%rdi
  800421cab2:	48 b8 2d dc 21 04 80 	movabs $0x800421dc2d,%rax
  800421cab9:	00 00 00 
  800421cabc:	ff d0                	callq  *%rax
  800421cabe:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cac1:	e9 17 01 00 00       	jmpq   800421cbdd <vmexit+0x528>
  800421cac6:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cacd:	00 00 00 
  800421cad0:	ff d0                	callq  *%rax
  800421cad2:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cad9:	00 00 00 
  800421cadc:	48 98                	cltq   
  800421cade:	48 c1 e0 03          	shl    $0x3,%rax
  800421cae2:	48 89 c1             	mov    %rax,%rcx
  800421cae5:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cae9:	48 01 c8             	add    %rcx,%rax
  800421caec:	48 01 d0             	add    %rdx,%rax
  800421caef:	48 83 c0 08          	add    $0x8,%rax
  800421caf3:	48 8b 00             	mov    (%rax),%rax
  800421caf6:	48 8b 98 e0 00 00 00 	mov    0xe0(%rax),%rbx
  800421cafd:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cb04:	00 00 00 
  800421cb07:	ff d0                	callq  *%rax
  800421cb09:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cb10:	00 00 00 
  800421cb13:	48 98                	cltq   
  800421cb15:	48 c1 e0 03          	shl    $0x3,%rax
  800421cb19:	48 89 c1             	mov    %rax,%rcx
  800421cb1c:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cb20:	48 01 c8             	add    %rcx,%rax
  800421cb23:	48 01 d0             	add    %rdx,%rax
  800421cb26:	48 83 c0 08          	add    $0x8,%rax
  800421cb2a:	48 8b 00             	mov    (%rax),%rax
  800421cb2d:	4c 8d a0 20 01 00 00 	lea    0x120(%rax),%r12
  800421cb34:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cb3b:	00 00 00 
  800421cb3e:	ff d0                	callq  *%rax
  800421cb40:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cb47:	00 00 00 
  800421cb4a:	48 98                	cltq   
  800421cb4c:	48 c1 e0 03          	shl    $0x3,%rax
  800421cb50:	48 89 c1             	mov    %rax,%rcx
  800421cb53:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cb57:	48 01 c8             	add    %rcx,%rax
  800421cb5a:	48 01 d0             	add    %rdx,%rax
  800421cb5d:	48 83 c0 08          	add    $0x8,%rax
  800421cb61:	48 8b 00             	mov    (%rax),%rax
  800421cb64:	48 89 da             	mov    %rbx,%rdx
  800421cb67:	4c 89 e6             	mov    %r12,%rsi
  800421cb6a:	48 89 c7             	mov    %rax,%rdi
  800421cb6d:	48 b8 67 dc 21 04 80 	movabs $0x800421dc67,%rax
  800421cb74:	00 00 00 
  800421cb77:	ff d0                	callq  *%rax
  800421cb79:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421cb7c:	eb 5f                	jmp    800421cbdd <vmexit+0x528>
  800421cb7e:	48 bf b0 17 22 04 80 	movabs $0x80042217b0,%rdi
  800421cb85:	00 00 00 
  800421cb88:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cb8d:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cb94:	00 00 00 
  800421cb97:	ff d2                	callq  *%rdx
  800421cb99:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cba0:	00 00 00 
  800421cba3:	ff d0                	callq  *%rax
  800421cba5:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cbac:	00 00 00 
  800421cbaf:	48 98                	cltq   
  800421cbb1:	48 c1 e0 03          	shl    $0x3,%rax
  800421cbb5:	48 89 c1             	mov    %rax,%rcx
  800421cbb8:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cbbc:	48 01 c8             	add    %rcx,%rax
  800421cbbf:	48 01 d0             	add    %rdx,%rax
  800421cbc2:	48 83 c0 08          	add    $0x8,%rax
  800421cbc6:	48 8b 00             	mov    (%rax),%rax
  800421cbc9:	48 89 c7             	mov    %rax,%rdi
  800421cbcc:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421cbd3:	00 00 00 
  800421cbd6:	ff d0                	callq  *%rax
  800421cbd8:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421cbdc:	90                   	nop
  800421cbdd:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
  800421cbe1:	83 f0 01             	xor    $0x1,%eax
  800421cbe4:	84 c0                	test   %al,%al
  800421cbe6:	74 6b                	je     800421cc53 <vmexit+0x59e>
  800421cbe8:	48 bf d0 17 22 04 80 	movabs $0x80042217d0,%rdi
  800421cbef:	00 00 00 
  800421cbf2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cbf7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cbfe:	00 00 00 
  800421cc01:	ff d2                	callq  *%rdx
  800421cc03:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cc08:	48 ba 74 c5 21 04 80 	movabs $0x800421c574,%rdx
  800421cc0f:	00 00 00 
  800421cc12:	ff d2                	callq  *%rdx
  800421cc14:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cc1b:	00 00 00 
  800421cc1e:	ff d0                	callq  *%rax
  800421cc20:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cc27:	00 00 00 
  800421cc2a:	48 98                	cltq   
  800421cc2c:	48 c1 e0 03          	shl    $0x3,%rax
  800421cc30:	48 89 c1             	mov    %rax,%rcx
  800421cc33:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cc37:	48 01 c8             	add    %rcx,%rax
  800421cc3a:	48 01 d0             	add    %rdx,%rax
  800421cc3d:	48 83 c0 08          	add    $0x8,%rax
  800421cc41:	48 8b 00             	mov    (%rax),%rax
  800421cc44:	48 89 c7             	mov    %rax,%rdi
  800421cc47:	48 b8 13 95 20 04 80 	movabs $0x8004209513,%rax
  800421cc4e:	00 00 00 
  800421cc51:	ff d0                	callq  *%rax
  800421cc53:	48 b8 66 da 20 04 80 	movabs $0x800420da66,%rax
  800421cc5a:	00 00 00 
  800421cc5d:	ff d0                	callq  *%rax

000000800421cc5f <asm_vmrun>:
  800421cc5f:	55                   	push   %rbp
  800421cc60:	48 89 e5             	mov    %rsp,%rbp
  800421cc63:	41 57                	push   %r15
  800421cc65:	41 56                	push   %r14
  800421cc67:	41 55                	push   %r13
  800421cc69:	41 54                	push   %r12
  800421cc6b:	53                   	push   %rbx
  800421cc6c:	48 83 ec 28          	sub    $0x28,%rsp
  800421cc70:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421cc74:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cc7b:	00 00 00 
  800421cc7e:	ff d0                	callq  *%rax
  800421cc80:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cc87:	00 00 00 
  800421cc8a:	48 98                	cltq   
  800421cc8c:	48 c1 e0 03          	shl    $0x3,%rax
  800421cc90:	48 89 c1             	mov    %rax,%rcx
  800421cc93:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cc97:	48 01 c8             	add    %rcx,%rax
  800421cc9a:	48 01 d0             	add    %rdx,%rax
  800421cc9d:	48 83 c0 08          	add    $0x8,%rax
  800421cca1:	48 8b 00             	mov    (%rax),%rax
  800421cca4:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421ccaa:	89 c2                	mov    %eax,%edx
  800421ccac:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ccb0:	66 89 90 80 00 00 00 	mov    %dx,0x80(%rax)
  800421ccb7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421ccbb:	66 c7 40 78 00 00    	movw   $0x0,0x78(%rax)
  800421ccc1:	48 b8 17 a9 21 04 80 	movabs $0x800421a917,%rax
  800421ccc8:	00 00 00 
  800421cccb:	ff d0                	callq  *%rax
  800421cccd:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
  800421ccd1:	ba 14 6c 00 00       	mov    $0x6c14,%edx
  800421ccd6:	52                   	push   %rdx
  800421ccd7:	55                   	push   %rbp
  800421ccd8:	51                   	push   %rcx
  800421ccd9:	51                   	push   %rcx
  800421ccda:	48 8b 81 90 00 00 00 	mov    0x90(%rcx),%rax
  800421cce1:	0f 20 d2             	mov    %cr2,%rdx
  800421cce4:	48 39 c2             	cmp    %rax,%rdx
  800421cce7:	74 03                	je     800421ccec <asm_vmrun+0x8d>
  800421cce9:	0f 22 d0             	mov    %rax,%cr2
  800421ccec:	48 89 4c 24 08       	mov    %rcx,0x8(%rsp)
  800421ccf1:	59                   	pop    %rcx
  800421ccf2:	5d                   	pop    %rbp
  800421ccf3:	5a                   	pop    %rdx
  800421ccf4:	0f 96 41 78          	setbe  0x78(%rcx)
  800421ccf8:	48 b8 fb a8 21 04 80 	movabs $0x800421a8fb,%rax
  800421ccff:	00 00 00 
  800421cd02:	ff d0                	callq  *%rax
  800421cd04:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421cd08:	0f b7 40 78          	movzwl 0x78(%rax),%eax
  800421cd0c:	66 85 c0             	test   %ax,%ax
  800421cd0f:	74 20                	je     800421cd31 <asm_vmrun+0xd2>
  800421cd11:	48 bf 80 19 22 04 80 	movabs $0x8004221980,%rdi
  800421cd18:	00 00 00 
  800421cd1b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cd20:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421cd27:	00 00 00 
  800421cd2a:	ff d2                	callq  *%rdx
  800421cd2c:	e9 af 00 00 00       	jmpq   800421cde0 <asm_vmrun+0x181>
  800421cd31:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cd38:	00 00 00 
  800421cd3b:	ff d0                	callq  *%rax
  800421cd3d:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cd44:	00 00 00 
  800421cd47:	48 98                	cltq   
  800421cd49:	48 c1 e0 03          	shl    $0x3,%rax
  800421cd4d:	48 89 c1             	mov    %rax,%rcx
  800421cd50:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cd54:	48 01 c8             	add    %rcx,%rax
  800421cd57:	48 01 d0             	add    %rdx,%rax
  800421cd5a:	48 83 c0 08          	add    $0x8,%rax
  800421cd5e:	48 8b 18             	mov    (%rax),%rbx
  800421cd61:	c7 45 cc 1c 68 00 00 	movl   $0x681c,-0x34(%rbp)
  800421cd68:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421cd6b:	89 c7                	mov    %eax,%edi
  800421cd6d:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421cd74:	00 00 00 
  800421cd77:	ff d0                	callq  *%rax
  800421cd79:	48 89 83 b0 00 00 00 	mov    %rax,0xb0(%rbx)
  800421cd80:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421cd87:	00 00 00 
  800421cd8a:	ff d0                	callq  *%rax
  800421cd8c:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421cd93:	00 00 00 
  800421cd96:	48 98                	cltq   
  800421cd98:	48 c1 e0 03          	shl    $0x3,%rax
  800421cd9c:	48 89 c1             	mov    %rax,%rcx
  800421cd9f:	48 c1 e1 04          	shl    $0x4,%rcx
  800421cda3:	48 01 c8             	add    %rcx,%rax
  800421cda6:	48 01 d0             	add    %rdx,%rax
  800421cda9:	48 83 c0 08          	add    $0x8,%rax
  800421cdad:	48 8b 18             	mov    (%rax),%rbx
  800421cdb0:	c7 45 c8 1e 68 00 00 	movl   $0x681e,-0x38(%rbp)
  800421cdb7:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421cdba:	89 c7                	mov    %eax,%edi
  800421cdbc:	48 b8 92 a7 21 04 80 	movabs $0x800421a792,%rax
  800421cdc3:	00 00 00 
  800421cdc6:	ff d0                	callq  *%rax
  800421cdc8:	48 89 83 98 00 00 00 	mov    %rax,0x98(%rbx)
  800421cdcf:	b8 00 00 00 00       	mov    $0x0,%eax
  800421cdd4:	48 ba b5 c6 21 04 80 	movabs $0x800421c6b5,%rdx
  800421cddb:	00 00 00 
  800421cdde:	ff d2                	callq  *%rdx
  800421cde0:	48 83 c4 28          	add    $0x28,%rsp
  800421cde4:	5b                   	pop    %rbx
  800421cde5:	41 5c                	pop    %r12
  800421cde7:	41 5d                	pop    %r13
  800421cde9:	41 5e                	pop    %r14
  800421cdeb:	41 5f                	pop    %r15
  800421cded:	5d                   	pop    %rbp
  800421cdee:	c3                   	retq   

000000800421cdef <msr_setup>:
  800421cdef:	55                   	push   %rbp
  800421cdf0:	48 89 e5             	mov    %rsp,%rbp
  800421cdf3:	48 83 ec 40          	sub    $0x40,%rsp
  800421cdf7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421cdfb:	c7 45 d0 80 00 00 c0 	movl   $0xc0000080,-0x30(%rbp)
  800421ce02:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
  800421ce09:	81 7d f8 80 00 00 00 	cmpl   $0x80,-0x8(%rbp)
  800421ce10:	7e 35                	jle    800421ce47 <msr_setup+0x58>
  800421ce12:	48 b9 a0 19 22 04 80 	movabs $0x80042219a0,%rcx
  800421ce19:	00 00 00 
  800421ce1c:	48 ba 46 16 22 04 80 	movabs $0x8004221646,%rdx
  800421ce23:	00 00 00 
  800421ce26:	be 50 02 00 00       	mov    $0x250,%esi
  800421ce2b:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421ce32:	00 00 00 
  800421ce35:	b8 00 00 00 00       	mov    $0x0,%eax
  800421ce3a:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421ce41:	00 00 00 
  800421ce44:	41 ff d0             	callq  *%r8
  800421ce47:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ce4b:	8b 55 f8             	mov    -0x8(%rbp),%edx
  800421ce4e:	89 50 28             	mov    %edx,0x28(%rax)
  800421ce51:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421ce58:	e9 97 00 00 00       	jmpq   800421cef4 <msr_setup+0x105>
  800421ce5d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421ce61:	48 8b 40 30          	mov    0x30(%rax),%rax
  800421ce65:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421ce68:	48 63 d2             	movslq %edx,%rdx
  800421ce6b:	48 c1 e2 04          	shl    $0x4,%rdx
  800421ce6f:	48 01 d0             	add    %rdx,%rax
  800421ce72:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421ce76:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ce79:	48 98                	cltq   
  800421ce7b:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421ce7f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ce83:	89 10                	mov    %edx,(%rax)
  800421ce85:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421ce88:	48 98                	cltq   
  800421ce8a:	8b 44 85 d0          	mov    -0x30(%rbp,%rax,4),%eax
  800421ce8e:	89 45 ec             	mov    %eax,-0x14(%rbp)
}

static __inline uint64_t
read_msr( uint32_t ecx ) {
	uint32_t edx, eax;
	__asm __volatile("rdmsr"
  800421ce91:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421ce94:	89 c1                	mov    %eax,%ecx
  800421ce96:	0f 32                	rdmsr  
  800421ce98:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421ce9b:	89 45 e4             	mov    %eax,-0x1c(%rbp)
			: "=d" (edx), "=a" (eax)
			: "c" (ecx));
	uint64_t ret = 0;
  800421ce9e:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
  800421cea5:	00 
	ret = edx;
  800421cea6:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421cea9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	ret = ret << 32;
  800421cead:	48 c1 65 d8 20       	shlq   $0x20,-0x28(%rbp)
	ret |= eax;
  800421ceb2:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  800421ceb5:	48 09 45 d8          	or     %rax,-0x28(%rbp)

	return ret;
  800421ceb9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cebd:	48 89 c2             	mov    %rax,%rdx
  800421cec0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421cec4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  800421cec8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421cecc:	48 8b 40 38          	mov    0x38(%rax),%rax
  800421ced0:	8b 55 fc             	mov    -0x4(%rbp),%edx
  800421ced3:	48 63 d2             	movslq %edx,%rdx
  800421ced6:	48 c1 e2 04          	shl    $0x4,%rdx
  800421ceda:	48 01 d0             	add    %rdx,%rax
  800421cedd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421cee1:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cee4:	48 98                	cltq   
  800421cee6:	8b 54 85 d0          	mov    -0x30(%rbp,%rax,4),%edx
  800421ceea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421ceee:	89 10                	mov    %edx,(%rax)
  800421cef0:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421cef4:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cef7:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421cefa:	0f 8c 5d ff ff ff    	jl     800421ce5d <msr_setup+0x6e>
  800421cf00:	c9                   	leaveq 
  800421cf01:	c3                   	retq   

000000800421cf02 <bitmap_setup>:
  800421cf02:	55                   	push   %rbp
  800421cf03:	48 89 e5             	mov    %rsp,%rbp
  800421cf06:	48 83 ec 30          	sub    $0x30,%rsp
  800421cf0a:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421cf0e:	c7 45 e0 70 00 00 00 	movl   $0x70,-0x20(%rbp)
  800421cf15:	c7 45 e4 71 00 00 00 	movl   $0x71,-0x1c(%rbp)
  800421cf1c:	c7 45 f8 02 00 00 00 	movl   $0x2,-0x8(%rbp)
  800421cf23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421cf2a:	e9 07 01 00 00       	jmpq   800421d036 <bitmap_setup+0x134>
  800421cf2f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf32:	48 98                	cltq   
  800421cf34:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cf38:	c1 e8 06             	shr    $0x6,%eax
  800421cf3b:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421cf3e:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf41:	48 98                	cltq   
  800421cf43:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cf47:	3d fe 7f 00 00       	cmp    $0x7ffe,%eax
  800421cf4c:	77 51                	ja     800421cf9f <bitmap_setup+0x9d>
  800421cf4e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf52:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421cf56:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421cf59:	48 63 d2             	movslq %edx,%rdx
  800421cf5c:	48 c1 e2 03          	shl    $0x3,%rdx
  800421cf60:	48 01 c2             	add    %rax,%rdx
  800421cf63:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cf67:	48 8b 40 18          	mov    0x18(%rax),%rax
  800421cf6b:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421cf6e:	48 63 c9             	movslq %ecx,%rcx
  800421cf71:	48 c1 e1 03          	shl    $0x3,%rcx
  800421cf75:	48 01 c8             	add    %rcx,%rax
  800421cf78:	48 8b 30             	mov    (%rax),%rsi
  800421cf7b:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cf7e:	48 98                	cltq   
  800421cf80:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cf84:	83 e0 3f             	and    $0x3f,%eax
  800421cf87:	bf 01 00 00 00       	mov    $0x1,%edi
  800421cf8c:	89 c1                	mov    %eax,%ecx
  800421cf8e:	48 d3 e7             	shl    %cl,%rdi
  800421cf91:	48 89 f8             	mov    %rdi,%rax
  800421cf94:	48 09 f0             	or     %rsi,%rax
  800421cf97:	48 89 02             	mov    %rax,(%rdx)
  800421cf9a:	e9 93 00 00 00       	jmpq   800421d032 <bitmap_setup+0x130>
  800421cf9f:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cfa2:	48 98                	cltq   
  800421cfa4:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cfa8:	3d fe ff 00 00       	cmp    $0xfffe,%eax
  800421cfad:	77 4e                	ja     800421cffd <bitmap_setup+0xfb>
  800421cfaf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cfb3:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421cfb7:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421cfba:	48 63 d2             	movslq %edx,%rdx
  800421cfbd:	48 c1 e2 03          	shl    $0x3,%rdx
  800421cfc1:	48 01 c2             	add    %rax,%rdx
  800421cfc4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421cfc8:	48 8b 40 20          	mov    0x20(%rax),%rax
  800421cfcc:	8b 4d f4             	mov    -0xc(%rbp),%ecx
  800421cfcf:	48 63 c9             	movslq %ecx,%rcx
  800421cfd2:	48 c1 e1 03          	shl    $0x3,%rcx
  800421cfd6:	48 01 c8             	add    %rcx,%rax
  800421cfd9:	48 8b 30             	mov    (%rax),%rsi
  800421cfdc:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421cfdf:	48 98                	cltq   
  800421cfe1:	8b 44 85 e0          	mov    -0x20(%rbp,%rax,4),%eax
  800421cfe5:	83 e0 3f             	and    $0x3f,%eax
  800421cfe8:	bf 01 00 00 00       	mov    $0x1,%edi
  800421cfed:	89 c1                	mov    %eax,%ecx
  800421cfef:	48 d3 e7             	shl    %cl,%rdi
  800421cff2:	48 89 f8             	mov    %rdi,%rax
  800421cff5:	48 09 f0             	or     %rsi,%rax
  800421cff8:	48 89 02             	mov    %rax,(%rdx)
  800421cffb:	eb 35                	jmp    800421d032 <bitmap_setup+0x130>
  800421cffd:	48 b9 40 16 22 04 80 	movabs $0x8004221640,%rcx
  800421d004:	00 00 00 
  800421d007:	48 ba 46 16 22 04 80 	movabs $0x8004221646,%rdx
  800421d00e:	00 00 00 
  800421d011:	be 69 02 00 00       	mov    $0x269,%esi
  800421d016:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421d01d:	00 00 00 
  800421d020:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d025:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d02c:	00 00 00 
  800421d02f:	41 ff d0             	callq  *%r8
  800421d032:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d036:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d039:	3b 45 f8             	cmp    -0x8(%rbp),%eax
  800421d03c:	0f 8c ed fe ff ff    	jl     800421cf2f <bitmap_setup+0x2d>
  800421d042:	c9                   	leaveq 
  800421d043:	c3                   	retq   

000000800421d044 <vmx_vmrun>:
  800421d044:	55                   	push   %rbp
  800421d045:	48 89 e5             	mov    %rsp,%rbp
  800421d048:	48 83 ec 70          	sub    $0x70,%rsp
  800421d04c:	48 89 7d 98          	mov    %rdi,-0x68(%rbp)
  800421d050:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d054:	8b 80 d0 00 00 00    	mov    0xd0(%rax),%eax
  800421d05a:	83 f8 03             	cmp    $0x3,%eax
  800421d05d:	74 0a                	je     800421d069 <vmx_vmrun+0x25>
  800421d05f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
  800421d064:	e9 ac 02 00 00       	jmpq   800421d315 <vmx_vmrun+0x2d1>
  800421d069:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d06d:	8b 80 d8 00 00 00    	mov    0xd8(%rax),%eax
  800421d073:	83 f8 01             	cmp    $0x1,%eax
  800421d076:	0f 85 2f 01 00 00    	jne    800421d1ab <vmx_vmrun+0x167>
  800421d07c:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d080:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d087:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d08b:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d092:	00 00 00 
  800421d095:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
  800421d099:	77 32                	ja     800421d0cd <vmx_vmrun+0x89>
  800421d09b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d09f:	48 89 c1             	mov    %rax,%rcx
  800421d0a2:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421d0a9:	00 00 00 
  800421d0ac:	be 7c 02 00 00       	mov    $0x27c,%esi
  800421d0b1:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421d0b8:	00 00 00 
  800421d0bb:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d0c0:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d0c7:	00 00 00 
  800421d0ca:	41 ff d0             	callq  *%r8
  800421d0cd:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d0d4:	ff ff ff 
  800421d0d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d0db:	48 01 d0             	add    %rdx,%rax
  800421d0de:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  800421d0e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d0e6:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
  800421d0ea:	c6 45 df 00          	movb   $0x0,-0x21(%rbp)
  800421d0ee:	f8                   	clc    
  800421d0ef:	66 0f c7 75 a8       	vmclear -0x58(%rbp)
  800421d0f4:	0f 96 c0             	setbe  %al
  800421d0f7:	88 45 df             	mov    %al,-0x21(%rbp)
  800421d0fa:	0f b6 45 df          	movzbl -0x21(%rbp),%eax
  800421d0fe:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d101:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d105:	74 0a                	je     800421d111 <vmx_vmrun+0xcd>
  800421d107:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d10c:	e9 04 02 00 00       	jmpq   800421d315 <vmx_vmrun+0x2d1>
  800421d111:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d115:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
  800421d119:	c6 45 de 00          	movb   $0x0,-0x22(%rbp)
  800421d11d:	f8                   	clc    
  800421d11e:	0f c7 75 b0          	vmptrld -0x50(%rbp)
  800421d122:	0f 96 c0             	setbe  %al
  800421d125:	88 45 de             	mov    %al,-0x22(%rbp)
  800421d128:	0f b6 45 de          	movzbl -0x22(%rbp),%eax
  800421d12c:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d12f:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d133:	74 0a                	je     800421d13f <vmx_vmrun+0xfb>
  800421d135:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d13a:	e9 d6 01 00 00       	jmpq   800421d315 <vmx_vmrun+0x2d1>
  800421d13f:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d144:	48 ba 99 b2 21 04 80 	movabs $0x800421b299,%rdx
  800421d14b:	00 00 00 
  800421d14e:	ff d2                	callq  *%rdx
  800421d150:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d155:	48 ba 67 b6 21 04 80 	movabs $0x800421b667,%rdx
  800421d15c:	00 00 00 
  800421d15f:	ff d2                	callq  *%rdx
  800421d161:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d165:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d16b:	48 89 c7             	mov    %rax,%rdi
  800421d16e:	48 b8 02 cf 21 04 80 	movabs $0x800421cf02,%rax
  800421d175:	00 00 00 
  800421d178:	ff d0                	callq  *%rax
  800421d17a:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d17e:	48 05 20 01 00 00    	add    $0x120,%rax
  800421d184:	48 89 c7             	mov    %rax,%rdi
  800421d187:	48 b8 ef cd 21 04 80 	movabs $0x800421cdef,%rax
  800421d18e:	00 00 00 
  800421d191:	ff d0                	callq  *%rax
  800421d193:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d197:	48 89 c7             	mov    %rax,%rdi
  800421d19a:	48 b8 0c bf 21 04 80 	movabs $0x800421bf0c,%rax
  800421d1a1:	00 00 00 
  800421d1a4:	ff d0                	callq  *%rax
  800421d1a6:	e9 8c 00 00 00       	jmpq   800421d237 <vmx_vmrun+0x1f3>
  800421d1ab:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  800421d1af:	48 8b 80 28 01 00 00 	mov    0x128(%rax),%rax
  800421d1b6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
  800421d1ba:	48 b8 ff ff ff 03 80 	movabs $0x8003ffffff,%rax
  800421d1c1:	00 00 00 
  800421d1c4:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
  800421d1c8:	77 32                	ja     800421d1fc <vmx_vmrun+0x1b8>
  800421d1ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d1ce:	48 89 c1             	mov    %rax,%rcx
  800421d1d1:	48 ba d8 16 22 04 80 	movabs $0x80042216d8,%rdx
  800421d1d8:	00 00 00 
  800421d1db:	be 95 02 00 00       	mov    $0x295,%esi
  800421d1e0:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421d1e7:	00 00 00 
  800421d1ea:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d1ef:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d1f6:	00 00 00 
  800421d1f9:	41 ff d0             	callq  *%r8
  800421d1fc:	48 ba 00 00 00 fc 7f 	movabs $0xffffff7ffc000000,%rdx
  800421d203:	ff ff ff 
  800421d206:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d20a:	48 01 d0             	add    %rdx,%rax
  800421d20d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
  800421d211:	c6 45 dd 00          	movb   $0x0,-0x23(%rbp)
  800421d215:	f8                   	clc    
  800421d216:	0f c7 75 b8          	vmptrld -0x48(%rbp)
  800421d21a:	0f 96 c0             	setbe  %al
  800421d21d:	88 45 dd             	mov    %al,-0x23(%rbp)
  800421d220:	0f b6 45 dd          	movzbl -0x23(%rbp),%eax
  800421d224:	88 45 ef             	mov    %al,-0x11(%rbp)
  800421d227:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421d22b:	74 0a                	je     800421d237 <vmx_vmrun+0x1f3>
  800421d22d:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
  800421d232:	e9 de 00 00 00       	jmpq   800421d315 <vmx_vmrun+0x2d1>
  800421d237:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421d23e:	00 00 00 
  800421d241:	ff d0                	callq  *%rax
  800421d243:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d24a:	00 00 00 
  800421d24d:	48 98                	cltq   
  800421d24f:	48 c1 e0 03          	shl    $0x3,%rax
  800421d253:	48 89 c1             	mov    %rax,%rcx
  800421d256:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d25a:	48 01 c8             	add    %rcx,%rax
  800421d25d:	48 01 d0             	add    %rdx,%rax
  800421d260:	48 83 c0 08          	add    $0x8,%rax
  800421d264:	48 8b 00             	mov    (%rax),%rax
  800421d267:	48 8b 80 b0 00 00 00 	mov    0xb0(%rax),%rax
  800421d26e:	c7 45 d8 1c 68 00 00 	movl   $0x681c,-0x28(%rbp)
  800421d275:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d279:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d27d:	8b 45 d8             	mov    -0x28(%rbp),%eax
  800421d280:	48 89 d6             	mov    %rdx,%rsi
  800421d283:	89 c7                	mov    %eax,%edi
  800421d285:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421d28c:	00 00 00 
  800421d28f:	ff d0                	callq  *%rax
  800421d291:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421d298:	00 00 00 
  800421d29b:	ff d0                	callq  *%rax
  800421d29d:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421d2a4:	00 00 00 
  800421d2a7:	48 98                	cltq   
  800421d2a9:	48 c1 e0 03          	shl    $0x3,%rax
  800421d2ad:	48 89 c1             	mov    %rax,%rcx
  800421d2b0:	48 c1 e1 04          	shl    $0x4,%rcx
  800421d2b4:	48 01 c8             	add    %rcx,%rax
  800421d2b7:	48 01 d0             	add    %rdx,%rax
  800421d2ba:	48 83 c0 08          	add    $0x8,%rax
  800421d2be:	48 8b 00             	mov    (%rax),%rax
  800421d2c1:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
  800421d2c8:	c7 45 cc 1e 68 00 00 	movl   $0x681e,-0x34(%rbp)
  800421d2cf:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
  800421d2d3:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  800421d2d7:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d2da:	48 89 d6             	mov    %rdx,%rsi
  800421d2dd:	89 c7                	mov    %eax,%edi
  800421d2df:	48 b8 6c a7 21 04 80 	movabs $0x800421a76c,%rax
  800421d2e6:	00 00 00 
  800421d2e9:	ff d0                	callq  *%rax
  800421d2eb:	48 ba b7 19 22 04 80 	movabs $0x80042219b7,%rdx
  800421d2f2:	00 00 00 
  800421d2f5:	be 9d 02 00 00       	mov    $0x29d,%esi
  800421d2fa:	48 bf 5b 16 22 04 80 	movabs $0x800422165b,%rdi
  800421d301:	00 00 00 
  800421d304:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d309:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421d310:	00 00 00 
  800421d313:	ff d1                	callq  *%rcx
  800421d315:	c9                   	leaveq 
  800421d316:	c3                   	retq   

000000800421d317 <vmcs_writel>:
  800421d317:	55                   	push   %rbp
  800421d318:	48 89 e5             	mov    %rsp,%rbp
  800421d31b:	48 83 ec 20          	sub    $0x20,%rsp
  800421d31f:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d322:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d326:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d32a:	8b 55 ec             	mov    -0x14(%rbp),%edx
  800421d32d:	f8                   	clc    
  800421d32e:	0f 79 d0             	vmwrite %rax,%rdx
  800421d331:	0f 96 c0             	setbe  %al
  800421d334:	88 45 ff             	mov    %al,-0x1(%rbp)
  800421d337:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  800421d33b:	c9                   	leaveq 
  800421d33c:	c3                   	retq   

000000800421d33d <vmcs_readl>:
  800421d33d:	55                   	push   %rbp
  800421d33e:	48 89 e5             	mov    %rsp,%rbp
  800421d341:	48 83 ec 14          	sub    $0x14,%rsp
  800421d345:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d348:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d34b:	89 c2                	mov    %eax,%edx
  800421d34d:	0f 78 d0             	vmread %rdx,%rax
  800421d350:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d354:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d358:	c9                   	leaveq 
  800421d359:	c3                   	retq   

000000800421d35a <page2ppn>:
  800421d35a:	55                   	push   %rbp
  800421d35b:	48 89 e5             	mov    %rsp,%rbp
  800421d35e:	48 83 ec 08          	sub    $0x8,%rsp
  800421d362:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d366:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  800421d36a:	48 b8 00 d6 6d 04 80 	movabs $0x80046dd600,%rax
  800421d371:	00 00 00 
  800421d374:	48 8b 00             	mov    (%rax),%rax
  800421d377:	48 29 c2             	sub    %rax,%rdx
  800421d37a:	48 89 d0             	mov    %rdx,%rax
  800421d37d:	48 c1 f8 04          	sar    $0x4,%rax
  800421d381:	c9                   	leaveq 
  800421d382:	c3                   	retq   

000000800421d383 <page2pa>:
  800421d383:	55                   	push   %rbp
  800421d384:	48 89 e5             	mov    %rsp,%rbp
  800421d387:	48 83 ec 08          	sub    $0x8,%rsp
  800421d38b:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421d38f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d393:	48 89 c7             	mov    %rax,%rdi
  800421d396:	48 b8 5a d3 21 04 80 	movabs $0x800421d35a,%rax
  800421d39d:	00 00 00 
  800421d3a0:	ff d0                	callq  *%rax
  800421d3a2:	48 c1 e0 0c          	shl    $0xc,%rax
  800421d3a6:	c9                   	leaveq 
  800421d3a7:	c3                   	retq   

000000800421d3a8 <page2kva>:
  800421d3a8:	55                   	push   %rbp
  800421d3a9:	48 89 e5             	mov    %rsp,%rbp
  800421d3ac:	48 83 ec 20          	sub    $0x20,%rsp
  800421d3b0:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  800421d3b4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d3b8:	48 89 c7             	mov    %rax,%rdi
  800421d3bb:	48 b8 83 d3 21 04 80 	movabs $0x800421d383,%rax
  800421d3c2:	00 00 00 
  800421d3c5:	ff d0                	callq  *%rax
  800421d3c7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  800421d3cb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d3cf:	48 c1 e8 0c          	shr    $0xc,%rax
  800421d3d3:	89 45 f4             	mov    %eax,-0xc(%rbp)
  800421d3d6:	8b 55 f4             	mov    -0xc(%rbp),%edx
  800421d3d9:	48 b8 f8 d5 6d 04 80 	movabs $0x80046dd5f8,%rax
  800421d3e0:	00 00 00 
  800421d3e3:	48 8b 00             	mov    (%rax),%rax
  800421d3e6:	48 39 c2             	cmp    %rax,%rdx
  800421d3e9:	72 32                	jb     800421d41d <page2kva+0x75>
  800421d3eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d3ef:	48 89 c1             	mov    %rax,%rcx
  800421d3f2:	48 ba d0 19 22 04 80 	movabs $0x80042219d0,%rdx
  800421d3f9:	00 00 00 
  800421d3fc:	be 62 00 00 00       	mov    $0x62,%esi
  800421d401:	48 bf f3 19 22 04 80 	movabs $0x80042219f3,%rdi
  800421d408:	00 00 00 
  800421d40b:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d410:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d417:	00 00 00 
  800421d41a:	41 ff d0             	callq  *%r8
  800421d41d:	48 ba 00 00 00 04 80 	movabs $0x8004000000,%rdx
  800421d424:	00 00 00 
  800421d427:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d42b:	48 01 d0             	add    %rdx,%rax
  800421d42e:	c9                   	leaveq 
  800421d42f:	c3                   	retq   

000000800421d430 <vmx_get_vmdisk_number>:
#include <kern/env.h>
#include <kern/cpu.h>

static int vmdisk_number = 0;	//this number assign to the vm
int 
vmx_get_vmdisk_number() {
  800421d430:	55                   	push   %rbp
  800421d431:	48 89 e5             	mov    %rsp,%rbp
	return vmdisk_number;
  800421d434:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421d43b:	00 00 00 
  800421d43e:	8b 00                	mov    (%rax),%eax
}
  800421d440:	5d                   	pop    %rbp
  800421d441:	c3                   	retq   

000000800421d442 <vmx_incr_vmdisk_number>:

void
vmx_incr_vmdisk_number() {
  800421d442:	55                   	push   %rbp
  800421d443:	48 89 e5             	mov    %rsp,%rbp
	vmdisk_number++;
  800421d446:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421d44d:	00 00 00 
  800421d450:	8b 00                	mov    (%rax),%eax
  800421d452:	8d 50 01             	lea    0x1(%rax),%edx
  800421d455:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421d45c:	00 00 00 
  800421d45f:	89 10                	mov    %edx,(%rax)
}
  800421d461:	5d                   	pop    %rbp
  800421d462:	c3                   	retq   

000000800421d463 <find_msr_in_region>:
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
  800421d463:	55                   	push   %rbp
  800421d464:	48 89 e5             	mov    %rsp,%rbp
  800421d467:	48 83 ec 28          	sub    $0x28,%rsp
  800421d46b:	89 7d ec             	mov    %edi,-0x14(%rbp)
  800421d46e:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  800421d472:	89 55 e8             	mov    %edx,-0x18(%rbp)
  800421d475:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
  800421d479:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421d47d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	int i;
	for(i=0; i<area_sz; ++i) {
  800421d481:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
  800421d488:	eb 21                	jmp    800421d4ab <find_msr_in_region+0x48>
		if(entry->msr_index == msr_idx) {
  800421d48a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  800421d48e:	8b 00                	mov    (%rax),%eax
  800421d490:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  800421d493:	75 12                	jne    800421d4a7 <find_msr_in_region+0x44>
			*msr_entry = entry;
  800421d495:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d499:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  800421d49d:	48 89 10             	mov    %rdx,(%rax)
			return true;
  800421d4a0:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d4a5:	eb 11                	jmp    800421d4b8 <find_msr_in_region+0x55>
}
bool
find_msr_in_region(uint32_t msr_idx, uintptr_t *area, int area_sz, struct vmx_msr_entry **msr_entry) {
	struct vmx_msr_entry *entry = (struct vmx_msr_entry *)area;
	int i;
	for(i=0; i<area_sz; ++i) {
  800421d4a7:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
  800421d4ab:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d4ae:	3b 45 e8             	cmp    -0x18(%rbp),%eax
  800421d4b1:	7c d7                	jl     800421d48a <find_msr_in_region+0x27>
		if(entry->msr_index == msr_idx) {
			*msr_entry = entry;
			return true;
		}
	}
	return false;
  800421d4b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421d4b8:	c9                   	leaveq 
  800421d4b9:	c3                   	retq   

000000800421d4ba <handle_interrupt_window>:

bool
handle_interrupt_window(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421d4ba:	55                   	push   %rbp
  800421d4bb:	48 89 e5             	mov    %rsp,%rbp
  800421d4be:	48 83 ec 38          	sub    $0x38,%rsp
  800421d4c2:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  800421d4c6:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
  800421d4ca:	89 55 cc             	mov    %edx,-0x34(%rbp)
  800421d4cd:	c7 45 f8 02 40 00 00 	movl   $0x4002,-0x8(%rbp)
  800421d4d4:	8b 45 f8             	mov    -0x8(%rbp),%eax
  800421d4d7:	89 c7                	mov    %eax,%edi
  800421d4d9:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d4e0:	00 00 00 
  800421d4e3:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;

	procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS );
  800421d4e5:	89 45 fc             	mov    %eax,-0x4(%rbp)

        //disable the interrupt window exiting
        procbased_ctls_or &= ~(VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT); 
  800421d4e8:	83 65 fc fb          	andl   $0xfffffffb,-0x4(%rbp)
  800421d4ec:	c7 45 f4 02 40 00 00 	movl   $0x4002,-0xc(%rbp)
  800421d4f3:	8b 45 fc             	mov    -0x4(%rbp),%eax
  800421d4f6:	89 45 f0             	mov    %eax,-0x10(%rbp)
  800421d4f9:	8b 55 f0             	mov    -0x10(%rbp),%edx
  800421d4fc:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421d4ff:	48 89 d6             	mov    %rdx,%rsi
  800421d502:	89 c7                	mov    %eax,%edi
  800421d504:	48 b8 17 d3 21 04 80 	movabs $0x800421d317,%rax
  800421d50b:	00 00 00 
  800421d50e:	ff d0                	callq  *%rax
  800421d510:	c7 45 ec 16 40 00 00 	movl   $0x4016,-0x14(%rbp)
  800421d517:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d51a:	89 45 e8             	mov    %eax,-0x18(%rbp)
  800421d51d:	8b 55 e8             	mov    -0x18(%rbp),%edx
  800421d520:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d523:	48 89 d6             	mov    %rdx,%rsi
  800421d526:	89 c7                	mov    %eax,%edi
  800421d528:	48 b8 17 d3 21 04 80 	movabs $0x800421d317,%rax
  800421d52f:	00 00 00 
  800421d532:	ff d0                	callq  *%rax

        vmcs_write32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS, 
		      procbased_ctls_or);
        //write back the host_vector, which can insert a virtual interrupt
	vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	return true;
  800421d534:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421d539:	c9                   	leaveq 
  800421d53a:	c3                   	retq   

000000800421d53b <handle_interrupts>:
bool
handle_interrupts(struct Trapframe *tf, struct VmxGuestInfo *ginfo, uint32_t host_vector) {
  800421d53b:	55                   	push   %rbp
  800421d53c:	48 89 e5             	mov    %rsp,%rbp
  800421d53f:	48 83 ec 48          	sub    $0x48,%rsp
  800421d543:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421d547:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421d54b:	89 55 bc             	mov    %edx,-0x44(%rbp)
  800421d54e:	c7 45 f0 20 68 00 00 	movl   $0x6820,-0x10(%rbp)
  800421d555:	8b 45 f0             	mov    -0x10(%rbp),%eax
  800421d558:	89 c7                	mov    %eax,%edi
  800421d55a:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d561:	00 00 00 
  800421d564:	ff d0                	callq  *%rax
	uint64_t rflags;
	uint32_t procbased_ctls_or;
	rflags = vmcs_read64(VMCS_GUEST_RFLAGS);
  800421d566:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

	if ( !(rflags & (0x1 << 9)) ) {	//we have to wait the interrupt window open
  800421d56a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  800421d56e:	25 00 02 00 00       	and    $0x200,%eax
  800421d573:	48 85 c0             	test   %rax,%rax
  800421d576:	75 45                	jne    800421d5bd <handle_interrupts+0x82>
  800421d578:	c7 45 ec 02 40 00 00 	movl   $0x4002,-0x14(%rbp)
  800421d57f:	8b 45 ec             	mov    -0x14(%rbp),%eax
  800421d582:	89 c7                	mov    %eax,%edi
  800421d584:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d58b:	00 00 00 
  800421d58e:	ff d0                	callq  *%rax
		//get the interrupt info

		procbased_ctls_or = vmcs_read32( VMCS_32BIT_CONTROL_PROCESSOR_BASED_VMEXEC_CONTROLS);
  800421d590:	89 45 f4             	mov    %eax,-0xc(%rbp)

		//disable the interrupt window exiting
		procbased_ctls_or |= VMCS_PROC_BASED_VMEXEC_CTL_INTRWINEXIT; 
  800421d593:	83 4d f4 04          	orl    $0x4,-0xc(%rbp)
  800421d597:	c7 45 e8 02 40 00 00 	movl   $0x4002,-0x18(%rbp)
  800421d59e:	8b 45 f4             	mov    -0xc(%rbp),%eax
  800421d5a1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  800421d5a4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  800421d5a7:	8b 45 e8             	mov    -0x18(%rbp),%eax
  800421d5aa:	48 89 d6             	mov    %rdx,%rsi
  800421d5ad:	89 c7                	mov    %eax,%edi
  800421d5af:	48 b8 17 d3 21 04 80 	movabs $0x800421d317,%rax
  800421d5b6:	00 00 00 
  800421d5b9:	ff d0                	callq  *%rax
  800421d5bb:	eb 24                	jmp    800421d5e1 <handle_interrupts+0xa6>
  800421d5bd:	c7 45 e0 16 40 00 00 	movl   $0x4016,-0x20(%rbp)
  800421d5c4:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421d5c7:	89 45 dc             	mov    %eax,-0x24(%rbp)
  800421d5ca:	8b 55 dc             	mov    -0x24(%rbp),%edx
  800421d5cd:	8b 45 e0             	mov    -0x20(%rbp),%eax
  800421d5d0:	48 89 d6             	mov    %rdx,%rsi
  800421d5d3:	89 c7                	mov    %eax,%edi
  800421d5d5:	48 b8 17 d3 21 04 80 	movabs $0x800421d317,%rax
  800421d5dc:	00 00 00 
  800421d5df:	ff d0                	callq  *%rax
	}
	else {	//revector the host vector to the guest vector

		vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_INTERRUPTION_INFO , host_vector);
	}
	return true;
  800421d5e1:	b8 01 00 00 00       	mov    $0x1,%eax
}
  800421d5e6:	c9                   	leaveq 
  800421d5e7:	c3                   	retq   

000000800421d5e8 <handle_rdmsr>:

bool
handle_rdmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421d5e8:	55                   	push   %rbp
  800421d5e9:	48 89 e5             	mov    %rsp,%rbp
  800421d5ec:	53                   	push   %rbx
  800421d5ed:	48 83 ec 48          	sub    $0x48,%rsp
  800421d5f1:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d5f5:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421d5f9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d5fd:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421d601:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421d605:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421d60a:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421d60e:	0f 85 d0 00 00 00    	jne    800421d6e4 <handle_rdmsr+0xfc>
		// TODO: setup msr_bitmap to ignore EFER_MSR
		uint64_t val;
		struct vmx_msr_entry *entry;
		bool r = find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421d614:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d618:	8b 50 28             	mov    0x28(%rax),%edx
  800421d61b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d61f:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421d623:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d627:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
  800421d62b:	89 c7                	mov    %eax,%edi
  800421d62d:	48 b8 63 d4 21 04 80 	movabs $0x800421d463,%rax
  800421d634:	00 00 00 
  800421d637:	ff d0                	callq  *%rax
  800421d639:	88 45 e7             	mov    %al,-0x19(%rbp)
		assert(r);
  800421d63c:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421d640:	83 f0 01             	xor    $0x1,%eax
  800421d643:	84 c0                	test   %al,%al
  800421d645:	74 35                	je     800421d67c <handle_rdmsr+0x94>
  800421d647:	48 b9 02 1a 22 04 80 	movabs $0x8004221a02,%rcx
  800421d64e:	00 00 00 
  800421d651:	48 ba 04 1a 22 04 80 	movabs $0x8004221a04,%rdx
  800421d658:	00 00 00 
  800421d65b:	be 59 00 00 00       	mov    $0x59,%esi
  800421d660:	48 bf 19 1a 22 04 80 	movabs $0x8004221a19,%rdi
  800421d667:	00 00 00 
  800421d66a:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d66f:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d676:	00 00 00 
  800421d679:	41 ff d0             	callq  *%r8
		val = entry->msr_value;
  800421d67c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421d680:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421d684:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		tf->tf_regs.reg_rdx = val << 32;
  800421d688:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d68c:	48 c1 e0 20          	shl    $0x20,%rax
  800421d690:	48 89 c2             	mov    %rax,%rdx
  800421d693:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d697:	48 89 50 58          	mov    %rdx,0x58(%rax)
		tf->tf_regs.reg_rax = val & 0xFFFFFFFF;
  800421d69b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d69f:	89 c2                	mov    %eax,%edx
  800421d6a1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d6a5:	48 89 50 70          	mov    %rdx,0x70(%rax)

		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421d6a9:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d6ad:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421d6b4:	c7 45 d4 0c 44 00 00 	movl   $0x440c,-0x2c(%rbp)
  800421d6bb:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421d6be:	89 c7                	mov    %eax,%edi
  800421d6c0:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d6c7:	00 00 00 
  800421d6ca:	ff d0                	callq  *%rax
  800421d6cc:	89 c0                	mov    %eax,%eax
  800421d6ce:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421d6d2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d6d6:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421d6dd:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d6e2:	eb 05                	jmp    800421d6e9 <handle_rdmsr+0x101>
	}

	return false;
  800421d6e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421d6e9:	48 83 c4 48          	add    $0x48,%rsp
  800421d6ed:	5b                   	pop    %rbx
  800421d6ee:	5d                   	pop    %rbp
  800421d6ef:	c3                   	retq   

000000800421d6f0 <handle_wrmsr>:

bool 
handle_wrmsr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421d6f0:	55                   	push   %rbp
  800421d6f1:	48 89 e5             	mov    %rsp,%rbp
  800421d6f4:	53                   	push   %rbx
  800421d6f5:	48 83 ec 58          	sub    $0x58,%rsp
  800421d6f9:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421d6fd:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
	uint64_t msr = tf->tf_regs.reg_rcx;
  800421d701:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d705:	48 8b 40 60          	mov    0x60(%rax),%rax
  800421d709:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	if(msr == EFER_MSR) {
  800421d70d:	b8 80 00 00 c0       	mov    $0xc0000080,%eax
  800421d712:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
  800421d716:	0f 85 34 01 00 00    	jne    800421d850 <handle_wrmsr+0x160>

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
  800421d71c:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421d720:	8b 50 28             	mov    0x28(%rax),%edx
  800421d723:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  800421d727:	48 8b 70 38          	mov    0x38(%rax),%rsi
  800421d72b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
	uint64_t msr = tf->tf_regs.reg_rcx;
	if(msr == EFER_MSR) {

		uint64_t cur_val, new_val;
		struct vmx_msr_entry *entry;
		bool r = 
  800421d72f:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
  800421d733:	89 c7                	mov    %eax,%edi
  800421d735:	48 b8 63 d4 21 04 80 	movabs $0x800421d463,%rax
  800421d73c:	00 00 00 
  800421d73f:	ff d0                	callq  *%rax
  800421d741:	88 45 e7             	mov    %al,-0x19(%rbp)
			find_msr_in_region(msr, ginfo->msr_guest_area, ginfo->msr_count, &entry);
		assert(r);
  800421d744:	0f b6 45 e7          	movzbl -0x19(%rbp),%eax
  800421d748:	83 f0 01             	xor    $0x1,%eax
  800421d74b:	84 c0                	test   %al,%al
  800421d74d:	74 35                	je     800421d784 <handle_wrmsr+0x94>
  800421d74f:	48 b9 02 1a 22 04 80 	movabs $0x8004221a02,%rcx
  800421d756:	00 00 00 
  800421d759:	48 ba 04 1a 22 04 80 	movabs $0x8004221a04,%rdx
  800421d760:	00 00 00 
  800421d763:	be 6f 00 00 00       	mov    $0x6f,%esi
  800421d768:	48 bf 19 1a 22 04 80 	movabs $0x8004221a19,%rdi
  800421d76f:	00 00 00 
  800421d772:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d777:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d77e:	00 00 00 
  800421d781:	41 ff d0             	callq  *%r8
		cur_val = entry->msr_value;
  800421d784:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d788:	48 8b 40 08          	mov    0x8(%rax),%rax
  800421d78c:	48 89 45 d8          	mov    %rax,-0x28(%rbp)

		new_val = (tf->tf_regs.reg_rdx << 32)|tf->tf_regs.reg_rax;
  800421d790:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d794:	48 8b 40 58          	mov    0x58(%rax),%rax
  800421d798:	48 c1 e0 20          	shl    $0x20,%rax
  800421d79c:	48 89 c2             	mov    %rax,%rdx
  800421d79f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d7a3:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421d7a7:	48 09 d0             	or     %rdx,%rax
  800421d7aa:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		if(BIT(cur_val, EFER_LME) == 0 && BIT(new_val, EFER_LME) == 1) {
  800421d7ae:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d7b2:	25 00 01 00 00       	and    $0x100,%eax
  800421d7b7:	48 85 c0             	test   %rax,%rax
  800421d7ba:	75 4d                	jne    800421d809 <handle_wrmsr+0x119>
  800421d7bc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421d7c0:	25 00 01 00 00       	and    $0x100,%eax
  800421d7c5:	48 85 c0             	test   %rax,%rax
  800421d7c8:	74 3f                	je     800421d809 <handle_wrmsr+0x119>
  800421d7ca:	c7 45 c8 12 40 00 00 	movl   $0x4012,-0x38(%rbp)
  800421d7d1:	8b 45 c8             	mov    -0x38(%rbp),%eax
  800421d7d4:	89 c7                	mov    %eax,%edi
  800421d7d6:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d7dd:	00 00 00 
  800421d7e0:	ff d0                	callq  *%rax
			// Long mode enable.
			uint32_t entry_ctls = vmcs_read32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS );
  800421d7e2:	89 45 cc             	mov    %eax,-0x34(%rbp)
  800421d7e5:	c7 45 c4 12 40 00 00 	movl   $0x4012,-0x3c(%rbp)
  800421d7ec:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d7ef:	89 45 c0             	mov    %eax,-0x40(%rbp)
  800421d7f2:	8b 55 c0             	mov    -0x40(%rbp),%edx
  800421d7f5:	8b 45 c4             	mov    -0x3c(%rbp),%eax
  800421d7f8:	48 89 d6             	mov    %rdx,%rsi
  800421d7fb:	89 c7                	mov    %eax,%edi
  800421d7fd:	48 b8 17 d3 21 04 80 	movabs $0x800421d317,%rax
  800421d804:	00 00 00 
  800421d807:	ff d0                	callq  *%rax
			vmcs_write32( VMCS_32BIT_CONTROL_VMENTRY_CONTROLS, 
				      entry_ctls );

		}

		entry->msr_value = new_val;
  800421d809:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d80d:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  800421d811:	48 89 50 08          	mov    %rdx,0x8(%rax)
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421d815:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d819:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421d820:	c7 45 bc 0c 44 00 00 	movl   $0x440c,-0x44(%rbp)
  800421d827:	8b 45 bc             	mov    -0x44(%rbp),%eax
  800421d82a:	89 c7                	mov    %eax,%edi
  800421d82c:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d833:	00 00 00 
  800421d836:	ff d0                	callq  *%rax
  800421d838:	89 c0                	mov    %eax,%eax
  800421d83a:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421d83e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421d842:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421d849:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d84e:	eb 05                	jmp    800421d855 <handle_wrmsr+0x165>
	}

	return false;
  800421d850:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421d855:	48 83 c4 58          	add    $0x58,%rsp
  800421d859:	5b                   	pop    %rbx
  800421d85a:	5d                   	pop    %rbp
  800421d85b:	c3                   	retq   

000000800421d85c <handle_eptviolation>:

bool
handle_eptviolation(uint64_t *eptrt, struct VmxGuestInfo *ginfo) {
  800421d85c:	55                   	push   %rbp
  800421d85d:	48 89 e5             	mov    %rsp,%rbp
  800421d860:	53                   	push   %rbx
  800421d861:	48 83 ec 48          	sub    $0x48,%rsp
  800421d865:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
  800421d869:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
  800421d86d:	c7 45 cc 00 24 00 00 	movl   $0x2400,-0x34(%rbp)
  800421d874:	8b 45 cc             	mov    -0x34(%rbp),%eax
  800421d877:	89 c7                	mov    %eax,%edi
  800421d879:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421d880:	00 00 00 
  800421d883:	ff d0                	callq  *%rax
	uint64_t gpa = vmcs_read64(VMCS_64BIT_GUEST_PHYSICAL_ADDR);
  800421d885:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	int r;
	if(gpa < 0xA0000 || (gpa >= 0x100000 && gpa < ginfo->phys_sz)) 
  800421d889:	48 81 7d e8 ff ff 09 	cmpq   $0x9ffff,-0x18(%rbp)
  800421d890:	00 
  800421d891:	76 1f                	jbe    800421d8b2 <handle_eptviolation+0x56>
  800421d893:	48 81 7d e8 ff ff 0f 	cmpq   $0xfffff,-0x18(%rbp)
  800421d89a:	00 
  800421d89b:	0f 86 f9 00 00 00    	jbe    800421d99a <handle_eptviolation+0x13e>
  800421d8a1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  800421d8a5:	48 8b 00             	mov    (%rax),%rax
  800421d8a8:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
  800421d8ac:	0f 86 e8 00 00 00    	jbe    800421d99a <handle_eptviolation+0x13e>
	{
		// Allocate a new page to the guest.
		struct PageInfo *p = page_alloc(0);
  800421d8b2:	bf 00 00 00 00       	mov    $0x0,%edi
  800421d8b7:	48 b8 9b 2e 20 04 80 	movabs $0x8004202e9b,%rax
  800421d8be:	00 00 00 
  800421d8c1:	ff d0                	callq  *%rax
  800421d8c3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
		if(!p) {
  800421d8c7:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
  800421d8cc:	75 25                	jne    800421d8f3 <handle_eptviolation+0x97>
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
  800421d8ce:	48 bf 28 1a 22 04 80 	movabs $0x8004221a28,%rdi
  800421d8d5:	00 00 00 
  800421d8d8:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d8dd:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421d8e4:	00 00 00 
  800421d8e7:	ff d2                	callq  *%rdx
			return false;
  800421d8e9:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d8ee:	e9 54 01 00 00       	jmpq   800421da47 <handle_eptviolation+0x1eb>
		}
		p->pp_ref += 1;
  800421d8f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d8f7:	0f b7 40 08          	movzwl 0x8(%rax),%eax
  800421d8fb:	8d 50 01             	lea    0x1(%rax),%edx
  800421d8fe:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d902:	66 89 50 08          	mov    %dx,0x8(%rax)
		r = ept_map_hva2gpa(eptrt, 
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
  800421d906:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421d90a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
  800421d90e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  800421d912:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
		if(!p) {
			cprintf("vmm: handle_eptviolation: Failed to allocate a page for guest---out of memory.\n");
			return false;
		}
		p->pp_ref += 1;
		r = ept_map_hva2gpa(eptrt, 
  800421d918:	48 89 c3             	mov    %rax,%rbx
  800421d91b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  800421d91f:	48 89 c7             	mov    %rax,%rdi
  800421d922:	48 b8 a8 d3 21 04 80 	movabs $0x800421d3a8,%rax
  800421d929:	00 00 00 
  800421d92c:	ff d0                	callq  *%rax
  800421d92e:	48 89 c6             	mov    %rax,%rsi
  800421d931:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d935:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421d93b:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421d940:	48 89 da             	mov    %rbx,%rdx
  800421d943:	48 89 c7             	mov    %rax,%rdi
  800421d946:	48 b8 a0 99 21 04 80 	movabs $0x80042199a0,%rax
  800421d94d:	00 00 00 
  800421d950:	ff d0                	callq  *%rax
  800421d952:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    page2kva(p), (void *)ROUNDDOWN(gpa, PGSIZE), __EPTE_FULL, 0);
		assert(r >= 0);
  800421d955:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421d959:	79 35                	jns    800421d990 <handle_eptviolation+0x134>
  800421d95b:	48 b9 78 1a 22 04 80 	movabs $0x8004221a78,%rcx
  800421d962:	00 00 00 
  800421d965:	48 ba 04 1a 22 04 80 	movabs $0x8004221a04,%rdx
  800421d96c:	00 00 00 
  800421d96f:	be 93 00 00 00       	mov    $0x93,%esi
  800421d974:	48 bf 19 1a 22 04 80 	movabs $0x8004221a19,%rdi
  800421d97b:	00 00 00 
  800421d97e:	b8 00 00 00 00       	mov    $0x0,%eax
  800421d983:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421d98a:	00 00 00 
  800421d98d:	41 ff d0             	callq  *%r8
		/* cprintf("EPT violation for gpa:%x mapped KVA:%x\n", gpa, page2kva(p)); */
		return true;
  800421d990:	b8 01 00 00 00       	mov    $0x1,%eax
  800421d995:	e9 ad 00 00 00       	jmpq   800421da47 <handle_eptviolation+0x1eb>
	} else if (gpa >= CGA_BUF && gpa < CGA_BUF + PGSIZE) {
  800421d99a:	48 81 7d e8 ff 7f 0b 	cmpq   $0xb7fff,-0x18(%rbp)
  800421d9a1:	00 
  800421d9a2:	76 7c                	jbe    800421da20 <handle_eptviolation+0x1c4>
  800421d9a4:	48 81 7d e8 ff 8f 0b 	cmpq   $0xb8fff,-0x18(%rbp)
  800421d9ab:	00 
  800421d9ac:	77 72                	ja     800421da20 <handle_eptviolation+0x1c4>
		// FIXME: This give direct access to VGA MMIO region.
		r = ept_map_hva2gpa(eptrt, 
  800421d9ae:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  800421d9b2:	41 b8 00 00 00 00    	mov    $0x0,%r8d
  800421d9b8:	b9 07 00 00 00       	mov    $0x7,%ecx
  800421d9bd:	ba 00 80 0b 00       	mov    $0xb8000,%edx
  800421d9c2:	48 be 00 80 0b 04 80 	movabs $0x80040b8000,%rsi
  800421d9c9:	00 00 00 
  800421d9cc:	48 89 c7             	mov    %rax,%rdi
  800421d9cf:	48 b8 a0 99 21 04 80 	movabs $0x80042199a0,%rax
  800421d9d6:	00 00 00 
  800421d9d9:	ff d0                	callq  *%rax
  800421d9db:	89 45 e4             	mov    %eax,-0x1c(%rbp)
				    (void *)(KERNBASE + CGA_BUF), (void *)CGA_BUF, __EPTE_FULL, 0);
		assert(r >= 0);
  800421d9de:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
  800421d9e2:	79 35                	jns    800421da19 <handle_eptviolation+0x1bd>
  800421d9e4:	48 b9 78 1a 22 04 80 	movabs $0x8004221a78,%rcx
  800421d9eb:	00 00 00 
  800421d9ee:	48 ba 04 1a 22 04 80 	movabs $0x8004221a04,%rdx
  800421d9f5:	00 00 00 
  800421d9f8:	be 9a 00 00 00       	mov    $0x9a,%esi
  800421d9fd:	48 bf 19 1a 22 04 80 	movabs $0x8004221a19,%rdi
  800421da04:	00 00 00 
  800421da07:	b8 00 00 00 00       	mov    $0x0,%eax
  800421da0c:	49 b8 c9 04 20 04 80 	movabs $0x80042004c9,%r8
  800421da13:	00 00 00 
  800421da16:	41 ff d0             	callq  *%r8
		return true;
  800421da19:	b8 01 00 00 00       	mov    $0x1,%eax
  800421da1e:	eb 27                	jmp    800421da47 <handle_eptviolation+0x1eb>
	}
	cprintf("vmm: handle_eptviolation: Case 2, gpa %x\n", gpa);
  800421da20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  800421da24:	48 89 c6             	mov    %rax,%rsi
  800421da27:	48 bf 80 1a 22 04 80 	movabs $0x8004221a80,%rdi
  800421da2e:	00 00 00 
  800421da31:	b8 00 00 00 00       	mov    $0x0,%eax
  800421da36:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421da3d:	00 00 00 
  800421da40:	ff d2                	callq  *%rdx
	return false;
  800421da42:	b8 00 00 00 00       	mov    $0x0,%eax
}
  800421da47:	48 83 c4 48          	add    $0x48,%rsp
  800421da4b:	5b                   	pop    %rbx
  800421da4c:	5d                   	pop    %rbp
  800421da4d:	c3                   	retq   

000000800421da4e <handle_ioinstr>:

bool
handle_ioinstr(struct Trapframe *tf, struct VmxGuestInfo *ginfo) {
  800421da4e:	55                   	push   %rbp
  800421da4f:	48 89 e5             	mov    %rsp,%rbp
  800421da52:	53                   	push   %rbx
  800421da53:	48 83 ec 38          	sub    $0x38,%rsp
  800421da57:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  800421da5b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  800421da5f:	c7 45 d4 00 64 00 00 	movl   $0x6400,-0x2c(%rbp)
  800421da66:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  800421da69:	89 c7                	mov    %eax,%edi
  800421da6b:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421da72:	00 00 00 
  800421da75:	ff d0                	callq  *%rax
	static int port_iortc;

	uint64_t qualification = vmcs_read64(VMCS_VMEXIT_QUALIFICATION);
  800421da77:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	int port_number = (qualification >> 16) & 0xFFFF;
  800421da7b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421da7f:	48 c1 e8 10          	shr    $0x10,%rax
  800421da83:	25 ff ff 00 00       	and    $0xffff,%eax
  800421da88:	89 45 dc             	mov    %eax,-0x24(%rbp)
	bool is_in = BIT(qualification, 3);
  800421da8b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421da8f:	48 c1 e8 03          	shr    $0x3,%rax
  800421da93:	83 e0 01             	and    $0x1,%eax
  800421da96:	48 85 c0             	test   %rax,%rax
  800421da99:	0f 95 c0             	setne  %al
  800421da9c:	88 45 db             	mov    %al,-0x25(%rbp)
	bool handled = false;
  800421da9f:	c6 45 ef 00          	movb   $0x0,-0x11(%rbp)

	// handle reading physical memory from the CMOS.
	if(port_number == IO_RTC) {
  800421daa3:	83 7d dc 70          	cmpl   $0x70,-0x24(%rbp)
  800421daa7:	75 2e                	jne    800421dad7 <handle_ioinstr+0x89>
		if(!is_in) {
  800421daa9:	0f b6 45 db          	movzbl -0x25(%rbp),%eax
  800421daad:	83 f0 01             	xor    $0x1,%eax
  800421dab0:	84 c0                	test   %al,%al
  800421dab2:	0f 84 fa 00 00 00    	je     800421dbb2 <handle_ioinstr+0x164>
			port_iortc = tf->tf_regs.reg_rax;
  800421dab8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dabc:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421dac0:	89 c2                	mov    %eax,%edx
  800421dac2:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421dac9:	00 00 00 
  800421dacc:	89 10                	mov    %edx,(%rax)
			handled = true;
  800421dace:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421dad2:	e9 db 00 00 00       	jmpq   800421dbb2 <handle_ioinstr+0x164>
		}
	} else if (port_number == IO_RTC + 1) {
  800421dad7:	83 7d dc 71          	cmpl   $0x71,-0x24(%rbp)
  800421dadb:	0f 85 d1 00 00 00    	jne    800421dbb2 <handle_ioinstr+0x164>
		if(is_in) {
  800421dae1:	80 7d db 00          	cmpb   $0x0,-0x25(%rbp)
  800421dae5:	0f 84 c7 00 00 00    	je     800421dbb2 <handle_ioinstr+0x164>
			if(port_iortc == NVRAM_BASELO) {
  800421daeb:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421daf2:	00 00 00 
  800421daf5:	8b 00                	mov    (%rax),%eax
  800421daf7:	83 f8 15             	cmp    $0x15,%eax
  800421dafa:	75 15                	jne    800421db11 <handle_ioinstr+0xc3>
				tf->tf_regs.reg_rax = 640 & 0xFF;
  800421dafc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db00:	48 c7 40 70 80 00 00 	movq   $0x80,0x70(%rax)
  800421db07:	00 
				handled = true;
  800421db08:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421db0c:	e9 a1 00 00 00       	jmpq   800421dbb2 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_BASEHI) {
  800421db11:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421db18:	00 00 00 
  800421db1b:	8b 00                	mov    (%rax),%eax
  800421db1d:	83 f8 16             	cmp    $0x16,%eax
  800421db20:	75 12                	jne    800421db34 <handle_ioinstr+0xe6>
				tf->tf_regs.reg_rax = (640 >> 8) & 0xFF;
  800421db22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db26:	48 c7 40 70 02 00 00 	movq   $0x2,0x70(%rax)
  800421db2d:	00 
				handled = true;
  800421db2e:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421db32:	eb 7e                	jmp    800421dbb2 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTLO) {
  800421db34:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421db3b:	00 00 00 
  800421db3e:	8b 00                	mov    (%rax),%eax
  800421db40:	83 f8 17             	cmp    $0x17,%eax
  800421db43:	75 2a                	jne    800421db6f <handle_ioinstr+0x121>
				tf->tf_regs.reg_rax = ((ginfo->phys_sz / 1024) - 1024) & 0xFF;
  800421db45:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421db49:	48 8b 00             	mov    (%rax),%rax
  800421db4c:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421db53:	48 85 c0             	test   %rax,%rax
  800421db56:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421db5a:	48 c1 f8 0a          	sar    $0xa,%rax
  800421db5e:	0f b6 d0             	movzbl %al,%edx
  800421db61:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421db65:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421db69:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
  800421db6d:	eb 43                	jmp    800421dbb2 <handle_ioinstr+0x164>
			} else if (port_iortc == NVRAM_EXTHI) {
  800421db6f:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421db76:	00 00 00 
  800421db79:	8b 00                	mov    (%rax),%eax
  800421db7b:	83 f8 18             	cmp    $0x18,%eax
  800421db7e:	75 32                	jne    800421dbb2 <handle_ioinstr+0x164>
				tf->tf_regs.reg_rax = (((ginfo->phys_sz / 1024) - 1024) >> 8) & 0xFF;
  800421db80:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  800421db84:	48 8b 00             	mov    (%rax),%rax
  800421db87:	48 8d 90 ff 03 00 00 	lea    0x3ff(%rax),%rdx
  800421db8e:	48 85 c0             	test   %rax,%rax
  800421db91:	48 0f 48 c2          	cmovs  %rdx,%rax
  800421db95:	48 c1 f8 0a          	sar    $0xa,%rax
  800421db99:	48 2d 00 04 00 00    	sub    $0x400,%rax
  800421db9f:	48 c1 f8 08          	sar    $0x8,%rax
  800421dba3:	0f b6 d0             	movzbl %al,%edx
  800421dba6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dbaa:	48 89 50 70          	mov    %rdx,0x70(%rax)
				handled = true;
  800421dbae:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
			}
		}

	} 
	if(handled) {
  800421dbb2:	80 7d ef 00          	cmpb   $0x0,-0x11(%rbp)
  800421dbb6:	74 3b                	je     800421dbf3 <handle_ioinstr+0x1a5>
		tf->tf_rip += vmcs_read32(VMCS_32BIT_VMEXIT_INSTRUCTION_LENGTH);
  800421dbb8:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dbbc:	48 8b 98 98 00 00 00 	mov    0x98(%rax),%rbx
  800421dbc3:	c7 45 d0 0c 44 00 00 	movl   $0x440c,-0x30(%rbp)
  800421dbca:	8b 45 d0             	mov    -0x30(%rbp),%eax
  800421dbcd:	89 c7                	mov    %eax,%edi
  800421dbcf:	48 b8 3d d3 21 04 80 	movabs $0x800421d33d,%rax
  800421dbd6:	00 00 00 
  800421dbd9:	ff d0                	callq  *%rax
  800421dbdb:	89 c0                	mov    %eax,%eax
  800421dbdd:	48 8d 14 03          	lea    (%rbx,%rax,1),%rdx
  800421dbe1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  800421dbe5:	48 89 90 98 00 00 00 	mov    %rdx,0x98(%rax)
		return true;
  800421dbec:	b8 01 00 00 00       	mov    $0x1,%eax
  800421dbf1:	eb 33                	jmp    800421dc26 <handle_ioinstr+0x1d8>
	} else {
		cprintf("%x %x\n", qualification, port_iortc);
  800421dbf3:	48 b8 cc d5 6d 04 80 	movabs $0x80046dd5cc,%rax
  800421dbfa:	00 00 00 
  800421dbfd:	8b 10                	mov    (%rax),%edx
  800421dbff:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  800421dc03:	48 89 c6             	mov    %rax,%rsi
  800421dc06:	48 bf aa 1a 22 04 80 	movabs $0x8004221aaa,%rdi
  800421dc0d:	00 00 00 
  800421dc10:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc15:	48 b9 77 9c 20 04 80 	movabs $0x8004209c77,%rcx
  800421dc1c:	00 00 00 
  800421dc1f:	ff d1                	callq  *%rcx
		return false;
  800421dc21:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
  800421dc26:	48 83 c4 38          	add    $0x38,%rsp
  800421dc2a:	5b                   	pop    %rbx
  800421dc2b:	5d                   	pop    %rbp
  800421dc2c:	c3                   	retq   

000000800421dc2d <handle_cpuid>:
// Finally, you need to increment the program counter in the trap frame.
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.
bool
handle_cpuid(struct Trapframe *tf, struct VmxGuestInfo *ginfo)
{
  800421dc2d:	55                   	push   %rbp
  800421dc2e:	48 89 e5             	mov    %rsp,%rbp
  800421dc31:	48 83 ec 10          	sub    $0x10,%rsp
  800421dc35:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  800421dc39:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	/* Your code here  */
    panic("handle_cpuid is not impemented\n");
  800421dc3d:	48 ba b8 1a 22 04 80 	movabs $0x8004221ab8,%rdx
  800421dc44:	00 00 00 
  800421dc47:	be d9 00 00 00       	mov    $0xd9,%esi
  800421dc4c:	48 bf 19 1a 22 04 80 	movabs $0x8004221a19,%rdi
  800421dc53:	00 00 00 
  800421dc56:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dc5b:	48 b9 c9 04 20 04 80 	movabs $0x80042004c9,%rcx
  800421dc62:	00 00 00 
  800421dc65:	ff d1                	callq  *%rcx

000000800421dc67 <handle_vmcall>:
// 
// Hint: The TA's solution does not hard-code the length of the cpuid instruction.//

bool
handle_vmcall(struct Trapframe *tf, struct VmxGuestInfo *gInfo, uint64_t *eptrt)
{
  800421dc67:	55                   	push   %rbp
  800421dc68:	48 89 e5             	mov    %rsp,%rbp
  800421dc6b:	48 83 ec 70          	sub    $0x70,%rsp
  800421dc6f:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  800421dc73:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  800421dc77:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
	bool handled = false;
  800421dc7b:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
	int perm, r;
	void *gpa_pg, *hva_pg;
	envid_t to_env;
	uint32_t val;
	// phys address of the multiboot map in the guest.
	uint64_t multiboot_map_addr = 0x6000;
  800421dc7f:	48 c7 45 f0 00 60 00 	movq   $0x6000,-0x10(%rbp)
  800421dc86:	00 
	switch(tf->tf_regs.reg_rax) {
  800421dc87:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dc8b:	48 8b 40 70          	mov    0x70(%rax),%rax
  800421dc8f:	48 83 f8 06          	cmp    $0x6,%rax
  800421dc93:	0f 87 c1 00 00 00    	ja     800421dd5a <handle_vmcall+0xf3>
  800421dc99:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  800421dca0:	00 
  800421dca1:	48 b8 30 1b 22 04 80 	movabs $0x8004221b30,%rax
  800421dca8:	00 00 00 
  800421dcab:	48 01 d0             	add    %rdx,%rax
  800421dcae:	48 8b 00             	mov    (%rax),%rax
  800421dcb1:	ff e0                	jmpq   *%rax
		// NB: because recv can call schedule, clobbering the VMCS, 
		// you should go ahead and increment rip before this call.
		/* Your code here */
		break;
	case VMX_VMCALL_LAPICEOI:
		lapic_eoi();
  800421dcb3:	48 b8 df 7b 21 04 80 	movabs $0x8004217bdf,%rax
  800421dcba:	00 00 00 
  800421dcbd:	ff d0                	callq  *%rax
		handled = true;
  800421dcbf:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421dcc3:	e9 92 00 00 00       	jmpq   800421dd5a <handle_vmcall+0xf3>
	case VMX_VMCALL_BACKTOHOST:
		cprintf("Now back to the host, VM halt in the background, run vmmanager to resume the VM.\n");
  800421dcc8:	48 bf d8 1a 22 04 80 	movabs $0x8004221ad8,%rdi
  800421dccf:	00 00 00 
  800421dcd2:	b8 00 00 00 00       	mov    $0x0,%eax
  800421dcd7:	48 ba 77 9c 20 04 80 	movabs $0x8004209c77,%rdx
  800421dcde:	00 00 00 
  800421dce1:	ff d2                	callq  *%rdx
		curenv->env_status = ENV_NOT_RUNNABLE;	//mark the guest not runable
  800421dce3:	48 b8 aa 7b 21 04 80 	movabs $0x8004217baa,%rax
  800421dcea:	00 00 00 
  800421dced:	ff d0                	callq  *%rax
  800421dcef:	48 ba 20 f0 6d 04 80 	movabs $0x80046df020,%rdx
  800421dcf6:	00 00 00 
  800421dcf9:	48 98                	cltq   
  800421dcfb:	48 c1 e0 03          	shl    $0x3,%rax
  800421dcff:	48 89 c1             	mov    %rax,%rcx
  800421dd02:	48 c1 e1 04          	shl    $0x4,%rcx
  800421dd06:	48 01 c8             	add    %rcx,%rax
  800421dd09:	48 01 d0             	add    %rdx,%rax
  800421dd0c:	48 83 c0 08          	add    $0x8,%rax
  800421dd10:	48 8b 00             	mov    (%rax),%rax
  800421dd13:	c7 80 d4 00 00 00 04 	movl   $0x4,0xd4(%rax)
  800421dd1a:	00 00 00 
		ENV_CREATE(user_sh, ENV_TYPE_USER);	//create a new host shell
  800421dd1d:	be 00 00 00 00       	mov    $0x0,%esi
  800421dd22:	48 bf fa f0 4b 04 80 	movabs $0x80044bf0fa,%rdi
  800421dd29:	00 00 00 
  800421dd2c:	48 b8 b2 8f 20 04 80 	movabs $0x8004208fb2,%rax
  800421dd33:	00 00 00 
  800421dd36:	ff d0                	callq  *%rax
		handled = true;
  800421dd38:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;	
  800421dd3c:	eb 1c                	jmp    800421dd5a <handle_vmcall+0xf3>
	case VMX_VMCALL_GETDISKIMGNUM:	//alloc a number to guest
		tf->tf_regs.reg_rax = vmdisk_number;
  800421dd3e:	48 b8 c8 d5 6d 04 80 	movabs $0x80046dd5c8,%rax
  800421dd45:	00 00 00 
  800421dd48:	8b 00                	mov    (%rax),%eax
  800421dd4a:	48 63 d0             	movslq %eax,%rdx
  800421dd4d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  800421dd51:	48 89 50 70          	mov    %rdx,0x70(%rax)
		handled = true;
  800421dd55:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
		break;
  800421dd59:	90                   	nop
		 * 
		 * Hint: The solution does not hard-code the length of the vmcall instruction.
		 */
		/* Your code here */
	}
	return handled;
  800421dd5a:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
}
  800421dd5e:	c9                   	leaveq 
  800421dd5f:	c3                   	retq   
